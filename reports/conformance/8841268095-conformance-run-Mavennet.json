{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3c9cbe81-e74f-4640-a9b1-464865fdea8f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2f9a1900-2af5-4881-a179-5e3b7aa1f335",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8f98bf1e-92c4-4f29-8fec-6c50c81ac879",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "309245f3-2731-4b9f-8ba4-fdec95e71023"
                }
              }
            ]
          },
          {
            "id": "e2f06844-1f78-41f6-b306-b5f588d8d7c7",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "594fe266-6e01-48f9-b130-0cfc12de28ac",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0e1d6630-f6b5-483f-bb50-95a41400f8b7"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6eef2e7a-a256-402a-8e9f-37cf775e1f3d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6d92c141-1d37-406e-ba19-2ecebac77d63",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6254c75b-2bad-46bc-90f5-404cec8c3194",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b755026e-5ed6-4616-bb04-e9d58dcc09e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "11c84127-4cf1-4440-9d27-8997d04567d7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a5f8cccf-a74b-4613-a643-54e165871cf9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1dd53443-69b8-448a-8fe4-067f650abe0c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6f6104a9-30d5-48bb-a1ca-29616ab2f603",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2f795768-e23a-4cc5-8f61-249e2d3ece37"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2eb56d40-e77b-4921-8a23-68d48ccf1e70",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "bec497ca-6a98-48b9-83f3-d348eba63bee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a56704b4-e6ae-4f45-a309-b0750d6189c7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ebe68a48-5798-43a9-97f5-943b9d2777c6"
            }
          }
        ]
      },
      {
        "id": "acc550e9-9eb3-44f7-9c3c-b6f6ac962ba6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5f57424f-71cb-4829-bb6a-0044699f4c5e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8d5f889d-a69d-4490-9e72-9c2e5896a93d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3546f6ad-553e-45bf-8494-415fa0e60739",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94078cc0-1762-4c1b-b90a-464f5a4b5002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3acb985-2a2c-428b-a1b3-ea8b0a1cdf00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488f6004-a532-4f8c-8e2d-211c94b499c7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab4c33e-8724-4bfe-8b33-43f8ddc1514b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d738954-1494-4221-9b82-8145f8004bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d7ea10-3273-47bd-a561-868ba03d199b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba4b4f6-528d-43c0-b312-fcf9a1f24077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26dff466-d7a5-4502-bbd7-8c21307907a9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f3f3086d-58f7-4ea6-aee4-0a1758e4c6db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e24ed79-9208-4993-af3a-4205b07fbe48",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "210eb88a-6c5d-401b-b483-06995b0d9e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d22004e-80b7-4d2b-8ee6-662a4efc0d69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ac434c-ca6e-48d3-b855-a8a3b404735a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "177d1376-dd5b-4e75-9de6-26e3ca3bfbb4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c6c7c9df-de53-4f6d-a59b-14e6de74f57c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "84230c01-8930-494d-80fa-2fd78b8a1621",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be24fc46-6a1e-4b69-a38e-e8c3745df3e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "98cbbb07-8058-4940-96e7-14da79545775"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3ee2facc-5de6-4064-977e-c44d84a3c76c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "a3d8f969-ccc0-40a9-b4df-a3ced9316b78"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd2a789a-f0bd-4cdb-9bf2-5f9509394a17",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "56fc1434-ea79-4f7e-9a84-559baa645dc0"
            }
          }
        ]
      },
      {
        "id": "844939c1-c6ae-445e-9f26-3615c49da79a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "02152bcc-50bf-4901-8008-0e6231087bac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "824818a6-4642-43ce-b7f7-bb0fb7b793be",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a47922e8-ba1a-4865-8132-e5f3440ad434",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab572c4-6abd-46bc-b228-8e7681da6b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be2ab81-15cb-479b-81ab-5ad5aa5940a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564a74ec-0dfc-4cd7-91f5-1a350e132abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba76bac5-ec90-43df-9e60-e7d1bf1f0a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a061365-0f58-484a-bbcf-b2796d3085a0",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4377fd3-04c3-4605-94dc-68e634a1ecf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ece28834-d81b-47bc-a66e-e2c6d59e2fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1d5353-2748-4478-9748-751291050196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8521f3b-b8ed-45b3-b012-17084a286d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d28d20-dd83-4f4f-8b03-b227d56d52c0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf9a977-9aef-4aa3-a752-e434f893a6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "154ace15-5b96-4dd0-9ceb-509e8bbc5890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3fbcc6-e070-4b42-b2d4-5188df44e2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93734d2f-1ad8-4b26-a604-ee98df7a4c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c64f741-ec80-442e-8b32-44948363fbb0",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43fc43f5-4ea2-4af0-898e-df5689db0dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a98473-4a09-411a-b319-45f318c513ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae14ddc0-03ec-4e35-8398-8a607188d98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e72e8e31-de9c-429f-90f1-f96ccd4173ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8e605f-1119-49e7-bec2-57d932d96dfe",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee95efff-ff7d-44dd-a8e2-f1beff04dc5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4539a822-cea7-4c6c-934d-b86ddb22c49c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c427799f-689d-4b32-9108-e0b610d4f4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42069e34-eb70-413f-acd4-469dfba25fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a33644-95e5-452f-bb6b-f966e6c8d754",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bdab0f-3bc0-44f1-a95e-e2d5cc149c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a4e99e1-50e4-42b0-a49b-6bb949c3349e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7472bfe9-092a-4a2a-9193-0d5a34835f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf20ed2e-2942-40ed-924e-7cef6455a551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5aca08c-4a48-47c4-9265-8acf4ff38ffa",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e9e7b1-4573-419d-94ab-86ee434107f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6a1679c-833a-4a3b-bc27-b674d526ebd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d394d5b8-706a-4b4a-ad6b-2231ae54e0fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1da6e94b-cea6-45e0-b8e0-8b7766ffe520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109eefb7-04c3-4ff8-a739-0c77cf0e3c41",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14518c61-1a86-42b9-9967-070c66ca1979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2d86907-e8f8-4275-a5fe-f7b8644df251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73886aae-1d48-4927-b496-7cea832dfbef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5288728b-d0b8-46c6-8deb-c8ddde015ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5e201c-814e-4a28-b325-01b597ae9475",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d47f94-fe09-4630-97b0-8477f6d0c686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c974857-44d8-4b78-b78c-ecdb87ef1996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ced306-fc24-4e18-b18b-4f0858d80c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "539621b9-57cb-4294-bcd3-5e6d6231e607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808f133f-6c4f-4949-9f16-9ac31f470a7b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71caf13-6840-4dc4-b788-a30a22b84349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ad1e914-9dc9-41c5-a7b2-6ed5ea5ca2c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88827be-95ad-4711-b9e1-62a08917eaa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40dc02d2-cc39-48a1-9a6d-0f2c3be9604e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90a4b74-05b7-4ad4-b1ca-40a6ab594552",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "458ff471-e27e-44c7-88bf-600aacb39f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1188361-79a4-422b-8d6b-ef0f27814cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390021d8-4939-468b-ac5b-339eb8275ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e41309ae-26d9-4d20-8a7a-f6d546f1a209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191e6435-0b3d-4d74-ad0e-bc1e0dd50a66",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270b977c-1691-40b9-b59c-d2b26c7d1b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d63721e-dae9-44b4-9ab1-e6e0c83735ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002a1cd7-ba6b-4f00-97de-e3a402c09b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "633e640c-2488-4fe0-ab17-2336f5546085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed1e017-a9d7-4941-8c68-8bd9cc83fb41",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9349c287-56e5-4421-85fe-89173ea771f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6128f5be-d180-4547-a089-1863ec5ead2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d6c6dc-c080-4a61-ab84-85017af84d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1360cf9-6120-4f3f-8e03-d860854e7241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc5d0fd-5f2b-487b-9b5f-449ffe641ca8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc591c27-801f-4782-ad0b-7ff814a939d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab049755-845c-4bcc-943b-15a0b939b699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fecc51b-8203-488d-85d5-b98066f4a80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be6ccfb5-fd8c-4c53-b6d7-e2ba4e48550e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2781cf85-bedd-43a9-96a0-718664f1316e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94f0c61-abe5-4fc1-a132-1f422ecc7781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9bc6f15-00f8-46c5-b93e-431e9f3940f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a453092-df38-4ce6-b9b1-9e82c06c70fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4fdb754-1537-44b2-9e62-1b5f20179da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc38fd3a-94b1-44c3-9c25-430373260838",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527e818f-9981-4f42-99f8-f155d3e8761b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eb529c5-43c1-4aac-829d-220bcc4b4db6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c331be88-99b0-4dda-9f9f-2159bce5101c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b791152-b987-4d0f-8160-c8c79237ef92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bae387f-89ad-4fd6-a834-627140412769",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6699d1e-3c98-40fd-9755-ab726ff6e90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37dae73d-0a19-4c32-8d2b-9df05d0a91e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c775e8f6-14ad-4c4e-aa4e-011ce1d8d8d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "499e092c-a5d2-4741-9cce-11a53053bb77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462160a9-ca89-457e-a853-4ab8cdd5a6d4",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7faaa8f-1abf-4eff-bb1a-3eb468b39f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "991655cf-c7a7-43dd-93e6-c7ea82944f91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57e013f-dea0-474c-82e2-8dd8783f74aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "36d5a471-1cc0-44de-811b-4f09b39ab278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79371a17-e207-4e00-b51d-a78ca0d25b0b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2010d4c4-13fa-4802-8834-761e20db4ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b134ad12-956a-43d0-80d0-4935590f48cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0048d178-3d3e-43d7-96e7-5d12e0882846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "033cc4f5-6e37-4f19-a9c1-4c0eff227187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f9435b-90a2-4f4d-a5f5-3a97cad147ea",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c272401-1166-4e42-a5d1-4efed0c5f685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a73cab8d-e0b7-47d9-a6a6-f7293ebdf0d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b7d025-e975-473d-b3ab-ef81c27b302e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "31fd2461-4516-47e4-8e48-e9490a54b73e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bbbfd80-a5ea-4438-b127-c0493fe757bd",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9094af95-24dd-4725-baf8-56f8a5fef255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d4a223a-beff-4221-958e-936d8af36495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8d5955-dd74-42fd-a10c-c00e794dacdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "61982733-71e3-4c7f-8d3d-c07757595965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfee9f8e-60d6-4896-a9f1-5a43ec861442",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec78fec8-cd15-4ea1-b558-b9c26a183460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08acd228-f5a3-428b-8139-3f3aa902c4ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99a79d2-7818-44d3-8fc4-47b17c99d4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fec4184-f31d-4a90-a65e-0b8e73c882a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fefa1ba-1042-4995-981f-cd0bed207280",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f233a32-8698-40b0-bdc0-a30d1e504786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d98f72de-d8e9-4e2e-a058-d188853a3a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18da264a-a17b-41b1-81a2-41b1e0cd3291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "40a69680-88f6-4e5e-bf0b-cdfcc2886b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a18ae81-9b49-419d-9c26-70d334215903",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57fa9bf4-386d-46fd-aaf5-e5f0a7001237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a6dcc62-7a3a-4a8a-8efd-f595e26c71dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09ee137-6339-4261-bd5a-25c294dcd28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e44a3c17-2481-4c45-b6d7-d674a3268921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b4c8b60-29ad-4c7c-8c51-222e3ef4d3fc",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404959b9-1675-49e8-a420-87d75d61ec13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0930a24b-20d1-4f9a-911d-c3e082630b09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876139ca-2540-4d13-aa1e-e4366bb24ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ead6f40-7ab1-4060-9903-da3d5db8d3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38255a9e-3037-4a77-82e1-e6bbbb1d7732",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bec5689-768c-4de1-8a7f-c22c62364fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4438386-1d8f-4f91-a9cb-04942b5fd6b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5569b789-6f70-4c32-a241-569fb43fe9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "81986855-4db3-4bcb-8f2b-62645a4b2e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc129e6b-b953-45ef-9a5d-f9a81cf6494b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9baf1d-404e-4a98-89e3-3946d71a77c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "798d3942-f2e0-4c86-ba30-c53daec39dd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a7eb63-088f-4b0f-a25e-76b44f450200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "10448102-474a-4bec-b180-719ee704334d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98759cf-fa60-4a6b-93c9-201ccbc55aec",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0093a97-719b-4017-8e7f-51be0e9355b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed2f57cd-4287-43ed-b8cb-7ed3644f9c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51186e49-e87a-4832-8efa-d1a37810e4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e6e1a0f-6d1b-4057-b18f-0164a9874811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5415760e-9692-4447-98a7-0bab6c82b9bc",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afdc4737-4815-4472-afaf-cdbdb4785389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea914efd-6556-4850-9135-280196fe5263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1205c29a-1a33-4880-9693-a7d48798d6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "59a6d4c2-8055-4005-a51d-6e953e242dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4ece8b-37b3-4452-9ba5-c990c5ea2639",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee3774e-aec2-4165-9bca-ef29a5f38db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1aba771-7386-4d84-9886-97e73d6bfb52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f52bfd-3350-4639-83c9-7c82e3a456e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d97d4268-6c90-4886-ba00-ea34b0b97f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6774869d-9873-4964-88c6-01682fcdd673",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71da97d9-bc76-43b1-aee6-fefb3990dcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c5e969-0b34-441b-8e6d-ff123d1ab718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a84de48-797a-4c57-b9bb-20c181210898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "90f572ed-9464-4bb1-addd-ac918097b514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9340265-75c6-4312-b4a4-badceeaf80ba",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "631a5d42-98d5-4514-9e1a-86c6cf8eb459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "659f3f05-793b-42ca-aa02-7ce07ce8d7be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0aeacdf-8745-4da1-98b3-82cb7eaa78b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c55301d-5635-4421-a0f5-3de19774607c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f3a418-d39b-4de9-bf25-e068bc13fc90",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe41140f-46c5-49c4-b303-f8deb8dc58c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a16a7011-6eac-41b2-92c1-83d6d8de93d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23c1f53-5cfe-49e2-bc99-c7dba9a363e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4143594-37e3-4ea3-9dd1-2ad5e7f0d40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8f996c-0dd0-47c1-a639-5b2cb469f739",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88cb755-382b-41e7-8267-70905f0568d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf258437-100a-455b-a7b1-265e027992f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcccd9ad-1fab-444c-a795-6f8217901129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ab055fc-656b-4879-bb32-c4684b50f20a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c469e5bd-ee06-4cbc-bfa4-1de39cbf2160",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6ef528-59e7-4d3b-bc0c-2f95f20d94ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17cfca1a-5c22-4377-8a6f-3fac564c32d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9655345-8d8e-4342-85dd-25d734faba8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ea0a6ff6-4973-409b-8a3f-e5248c3761bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9456b480-0c23-4f3a-a315-9d9f166fae75",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f166ad-5058-465c-96b0-5f96d52e4760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "190bcd50-5be8-473d-aa9f-6468b0fcde1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8acb78d7-78ff-46df-bf71-7d93072fbe86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9f60ac5f-a750-4fc8-a8dc-b7814842cc4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6291330c-a45a-4d70-8499-00b418cdfc70",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da730497-fa24-4388-8adc-bdeb1cf6429c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9f0f37-39e2-4939-9022-e20f0bd606a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808e1260-5656-4972-b98d-c31e0407c478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba1cc2a1-bbbc-4c03-be46-9f1ca3fc5819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b50cacb-d04f-46c0-8050-b9961d7dc823",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6dd811-c36e-4396-8a2d-a9e1ae60e8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c57ffdd1-cda2-46a3-a62e-6e8c87f19be0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0340291-c91b-41cf-8e3e-996a0e087632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd0c2ea6-0655-4191-aa5b-7dd28c4dad87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96345dad-67f1-4782-8894-dbca38cc8bae",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8771c08-c73c-4c1a-b991-8cb0886f19d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7784beec-520e-4507-a831-b61076aca8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccdf237c-249a-46e1-9528-3681b966b850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c023053f-d80b-43ec-a584-be3f276ac4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eaf2574-9998-40d3-8971-1108cac82272",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df19eb7-ce8b-4bad-a246-9aa975577269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2777a8d-e16b-4a49-9135-37757112ba5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0bec4f1-1e44-440b-89ca-d3dc891c60fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9be3cc4-ac4d-4d11-b8a1-1031c4ef3dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7292ebc-8b87-41af-a80a-d03839917168",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39846358-f2a4-4bed-acae-7b8fbca6c715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84064063-f002-45ad-93d1-a9d79209d503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3945a90-b696-449c-8824-a87ab14b4255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfe58e2a-4989-4796-913b-d31e226112dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ac51e6-cb66-41af-b7c0-181302b40067",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "710257de-0cdb-4d09-ac72-c309518ee81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44670c9c-2062-46e5-b05b-1ace2df8e606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdab4dc3-c527-4012-ae62-fe9d852147b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "04fdc372-b646-4746-9cd6-1eacc7c72b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c435566-a206-46b9-a61d-65a3e357cd32",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38748fed-27d9-43ec-a9a7-562207a4a2f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "579f75bb-49d6-4734-83c0-bc1cc45ea333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c3460ff-35c1-4d44-a5b9-63aa9fbb9cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f03bcd7d-ea91-4fed-8fb2-a2a94ad637d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe17afc-5bf0-4f7f-b85d-47cc03020c26",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf166db-5fb0-4ccb-aae7-4180ce351c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3bb25e2-1353-4423-a25c-484de081878d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7254f198-60e5-4a3d-b666-9f1c2081ae4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "77b53279-8550-4a24-9b2e-5d89315ccc31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14275178-2097-4382-8b27-d66e49e73421",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e638619-6bb6-482d-9e47-cc0353935d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c080eafb-0410-4329-bba4-c738b5d06710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551f12fe-065c-4b92-99a2-a76f038ac118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa06f477-65bb-4286-b9af-93ad1eeebf35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a155825-58c6-45c4-836d-a94908635370",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f14727-b2a1-48b6-a62e-960702a478b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "064005f0-abf3-4c06-a6b9-0d0d8fb78655"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d695a984-c8d9-408b-bf9a-da6c7151e47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2431e31d-f2a4-47d9-b89c-58f11913dd3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5115030c-096d-4629-961f-d8ae5a6f159a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef05754-cd74-4b94-acf2-977074894653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e545db-7927-48cd-9ec2-03f8bf176d76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5fdc465-7b00-4e1e-862a-2fe120d54d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a434880-f44d-4fa6-9e90-b24f5ab4f89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf67de8-924f-4b79-b19c-90071c017c18",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f9c329-20e7-4d60-8b48-a8f7e3f1f7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a60c9e5-36de-4219-b9b7-4313945bc968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "325b68e7-92b5-4891-9da3-39fd431204c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9420fb6-bc05-4dad-8b69-dc04a860e74c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8f8b06-8a4c-4a45-b1be-6fca2c67ea70",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f54fd9b5-2aa1-49f8-b020-623a49661f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c83f4f4-c12d-4fe8-af46-c66876616d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2fee34-0803-4ad8-b8bf-c465bc7f37e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cfedbb0a-b16e-41ea-a164-94dd6a082b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de233937-5d87-4264-a20b-57012ad327fa",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51579783-3015-4b2e-9d7d-7c204804ee3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "409b848e-109a-4130-9da5-ce9ab37cf49d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763387cc-cb95-48b5-93ad-1b7adb474676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "42a03498-a7e8-45b3-b704-da6a4e5d4832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65dcc026-db70-4d2d-b3cf-e332de819e5b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "839ca18c-f29b-4974-a78a-2ac9a3d7dbcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd33f5d-dd18-4fa1-a67b-6b66f80ee5a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33403007-daa2-4d30-8f25-589f64495c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f921b780-1cb0-49a7-8fdb-19053b7f7642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef97c32-6901-4f47-8459-c12d154aea47",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bd605f-78da-46d4-a8a1-158466dfd93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f09587-c1fb-464d-a5f0-6042ba5e3de2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890c0361-59ab-4b87-815c-c24df863cb92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5adc34d-c7f3-4c99-aeb0-9542784f9835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda9a9c9-deca-4ba6-b3ad-d5d032148f7a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34f769b-2f0e-46de-bd05-bb44a2140aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ffe2536-0d9e-40cb-8902-24f2d1b80f61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae86369-bae4-4f8c-808c-cb2ce9540750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3aa1401e-79c1-479c-854b-587b84839abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f311937a-786b-453b-b7c8-1b4397ffbc51",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cde135c-2561-4998-a498-cb05ca55d8d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a423f83c-e6f6-4650-a001-0fd3b9636f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d9a9a6-e6e9-45bf-a152-653d480a45ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a272d7b5-f0db-4d1d-878e-1f235f423b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beabc78d-3bfb-4682-ab23-f3f338cfae50",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "686b42b5-bc3a-48ba-bd3a-b162cf9434cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d5352be-870d-4a32-8869-4a388a029f76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc1fca2-f682-440c-a3ab-1ea34d43a5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b38992e-8307-43dd-9105-106293dadad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b677bb6b-7f1c-4922-b86f-2a5b5bd855a1",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e81bd4e-e13d-47a7-bfce-e1ef933e3f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e676b7-c12c-423d-a156-113d485b6961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0386a6-c9c9-4bd1-b82b-c7b2ec1e21ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "35b95292-2ee2-4631-af5a-a7fee59c8d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdbc31f6-c911-4366-9bae-e2ecdc1156a2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e03a6f-5748-4205-a2e6-9def9965a36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf923788-1755-4834-812b-93650206393f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207e1a83-f327-49c3-94dc-fd0250e788e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b212e82-906f-482a-9392-2fd88a26fb08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7a7b59-34ef-46ab-b425-5a85f6ce2905",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65b7d22-851f-44b4-b4a0-a6dbb13b445f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "481e5ac3-15f9-4b81-8470-d56302eb4859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435e7e6d-d5a1-415f-8e19-fd642fe883fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b45cd19f-32a0-4d3e-9e4f-8ad7523967d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc9390f-712a-4ad2-8da4-f65aa7a8be8c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "653784ae-f9dd-49a0-af28-d2c7dfc5c509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f763c13-95cf-4300-ba29-5535f5bedff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0eab9a-2448-4f1a-9f19-bff5235ca597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf720c38-5fb5-4be5-84fb-b3d224f4c6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2d7fd0-05a1-4176-a372-03e536b72c58",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8026a6ea-f47c-4ccc-8179-59b13095527f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a12e2541-a9ac-4ec7-ac93-4a89a0f45d17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69fa948-e955-4077-94b6-c129ae765267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "08371670-dfcc-4a55-8fa8-a95c579233bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6485a3-b8cb-4c95-b042-19cf1d75aef1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c918ca61-5443-480c-a484-b7e8b3a1fd0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c24f70-ce0d-4aed-b74d-1efaf7eacc82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58362a3a-b1f7-4d28-94ca-a5508e64288a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "97f66491-719b-463f-9fb6-2ccea1b8d7d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c51bd02-171c-445f-b79e-ab0eb4f62b1d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4f13e3-439b-4995-9890-68b4f275e074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4cfce13-38d1-4843-9925-f78c36e8dc1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9590d2d0-bf63-4b20-9ae4-909055c4a7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f24c2a-8121-40fd-a801-b7dbbeba6e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8b7038-d31c-4cc2-be1c-a2fe185526e4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a477a47e-e033-4e25-91bb-65a486849ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f7b4a5d-bd0d-438e-93fd-54fe64745b9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899ddf16-12cb-4341-b8d9-9b81b58d0e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "99a14702-f3b5-40a3-8f8d-49d1d2130bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a599aa55-8f28-4727-ab2b-43a622b82a9b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5c237a-d72d-4bed-8492-4d63f7a631ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "522873de-58c1-4eb4-87ab-66bc19db80f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085c2de7-f076-4a93-90d5-1c678b16db25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "74c8a991-f345-4730-a2dd-edc1edf1876d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a33b5a-eeeb-44f3-bcea-b678c2bba0c3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abd4636-140b-4dd1-8d2b-5a709071e17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5df7374-9203-4523-9062-73ef7578bf32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac14a06-15d0-4053-adc8-458edd373f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3da853e4-05ad-43b2-8926-0b6a23b7ad86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c083a0c-bb8c-4952-b4ba-079af4133d8a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "859c4a63-1214-4559-9129-4de93f92b3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53053435-3cb9-4939-ae27-33e92976dea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f769213f-e697-4226-8243-16f644f361e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "956c765e-17ef-4f85-a969-4c79e3244953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62215e29-7817-41f2-a348-fe8cb2a09425",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4518c938-ec54-4851-a3e0-5ec63c6c5b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89189bfb-8810-48af-ad9b-aceee76c601b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4cd488d-5ff4-44ef-8c87-60a876de44e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bc7d3198-7915-47ab-bde0-97a0f9e82daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7619493-f4ee-41c4-89ed-641f01467cb6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7421bc50-b79d-4af5-bd99-ac073bd9fe17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48308a21-6934-4e03-a89d-d0a1dcc5414d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f47a354-80ff-4126-ae24-5d830bbb114b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "785612ba-7e52-4e5b-87f8-c9ef7fe4dc3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8aa7a01-630d-4d20-b0c1-d538d062709d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f6a8aa-8e6c-4945-ac23-b70ce321f59f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd04d249-3d27-4d57-a692-4574ce6afb76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f2f749-732a-49d4-bd8c-adecb0a684f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ad6d2db-de83-49df-bc44-b30af93a0804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6899de2-323e-419b-8874-22821eac0e43",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f2bed7-7bf4-45d3-92af-c910e58a5ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0cb3f21-c3c9-462d-9771-77e15edb1523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f18a7a8-9069-4a04-a27e-fc428e8794d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4df39dd2-8dad-4213-8c46-8ecc5e40e460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c387fa5-add0-487f-b4ba-74fca9b80291",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99345ed1-7aa2-4592-b164-f7140f6e9e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3566dc79-9b7a-4add-ac37-6b1330c1e489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671fd8e0-19c1-4b82-98e0-2eb9bc449e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "efd0aaef-9840-4e50-80e3-3e44897d967b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca96b809-08d9-4a68-8308-6a8e4d44bef6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c1318b-65a0-4016-8e78-4ec703854b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6f2811-1c99-4467-bf75-896ed24fa06a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0564ae-6b9d-45a5-9123-917765bbb98a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e491a5da-6a9e-4984-8d26-b9eadf5b7f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad781d2-9580-457b-8b23-10401ecb1f33",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c1abe4-268c-4ebe-b2f9-f98d7e85c79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4b0009d-6ce0-4fff-b229-e39006dc9b55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191a08d4-51e8-49f6-8d20-e6239c94db13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "75590d91-b342-4926-9f4a-057a1eb89024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10b9bdd-e76e-4f6f-bc03-99eb3a75e152",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342a658a-d8ef-4597-8987-5e4a549039c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "018bae5a-9a33-4d54-a4a9-b6be0cea899e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fca5b6b-5f61-4e0e-933b-7abcdc86c36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "13270b75-9a32-4824-a783-d805c9c1231f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3faf3fe-4538-4d89-8572-f63b692ce35a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a4c3a3-3e48-4e73-9b06-d709dacc3767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a65e8820-6041-4116-a7f1-8dc94f0652e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170dedef-47bd-4b78-92ff-4e00e6e7e9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c36589ea-3278-4bf8-8dc5-a63a485fc781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36774e6-cd10-4391-945a-8f97f0239fd5",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe16208-9e46-4e7d-91fa-d5a7f06a915b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42bd55ea-709d-4335-b3a3-99a35be56057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99740c77-2fdb-4034-be88-a987d52df5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6af94d40-5bc8-4ea0-8910-ca8540d53510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd508f9-9290-4d59-8531-6318cfe1c69d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87260b32-3996-472e-b75c-b4d927455a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "804de86b-26f5-4789-91ec-ca28f3c45aa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ffccd0-0609-4766-977f-ec006b455475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9f78ec0-bcb0-4a2d-9f9b-fa79cd9d759e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5406449-bfcc-4728-ab08-625f2b3afbc1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee18d489-a421-4b0a-ab26-133d42773b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1da91a0-c179-4c2b-a5f0-dde6fb3072d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548827e5-86e4-425c-9111-183c74fb3ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a56d33a8-1d72-4274-be81-7cab352d0651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289bbc9b-f2d0-4e56-ab08-950683525499",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b22689-43fb-47cb-abb6-dd36b63d2f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36abd2bb-328e-489a-a5b2-8be180637f6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc6bd84-8f89-4328-b150-dd43345490cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "95b5c5a0-9dd1-4b6d-9e72-56ff0e2cb8b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f703d4f1-5973-48a3-9192-4477daf67ab2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a398eb8b-b084-42b7-8c80-88036f65d151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c19445a7-b8d9-4aa3-bc13-de30cd0449f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfae6f18-b1c8-4f91-bf36-72ee7fcbc4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4aeb9564-2cfd-4936-ae59-eeaf336fdae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2b8885-8bd7-41af-9fbd-a2356b3658d8",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62dd5d05-c801-439f-bdbf-22065077fb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485bf233-3b71-46d6-a08e-165b5c96d7ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88bbe58-4fef-42e2-9d53-a067bd59e985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec8cee5-3318-464d-b4e0-7e7e35148149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f536d6-850a-4d72-a90b-81cceec8047d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5f52c4-e979-4301-8a82-b7704ea9f4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce89c2a3-feb2-426a-b23e-076a959e2c40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41b5ed8-cd70-42b5-8622-d6e366330845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ef148d2-d41e-41dd-9bf9-18a72ed4e4cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12006e4a-cea9-43ea-a32f-adfc8c6f0153",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b927b44d-8cfc-4e06-a5ad-84e4c244bf8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c3f271-f285-41d4-baf8-9022a4428c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1878dc-d2cb-41a2-bda8-e587d5a22aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2802825-6d23-447f-893a-bdf6ee050332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c0fe30-49e5-463a-8a8b-6b3ea71d5ce0",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6454542-e21b-4220-8752-c7cafcb5b1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57d93037-03b7-4d2a-9e17-a58c979dc373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf3bfb2-5972-49d9-968b-fbb74b208307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76119f37-3008-4ca5-a309-2d03cb3b6fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908c3f86-294d-4434-84f1-d89064d18cbb",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fca69e6c-aa69-4c78-baa6-7993ffa50f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f266485-23aa-45bf-8bd3-d785ea04ec75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebe5861-20b2-4941-9578-c621f817b155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "57156a9c-989b-4924-bcbf-de75c1f16661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488cd5ed-3fab-4fe4-9aa5-5fb73d54b18a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c430a6d4-a7c5-44ee-9475-ed5543337592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f9ec7e-99ab-4a07-a8f2-9a1f7a658217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1aa8e29-fbe1-4a09-af9b-df2219a19a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "57b8d5b3-0ec7-43a5-b305-f1b6855c21d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb14108-1f70-46f3-86dd-28130fd06292",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "232f6606-2c59-4d4c-9682-0f25c2faa8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0d723f0-28fb-4f26-9f3f-21a2b5701688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eacee84e-c242-44fb-8f2a-a3c974ebc95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "25139f85-814e-4418-8ba3-306771748a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e051d877-4c12-4195-848e-855889d6f341",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e530e275-9497-4125-9508-7b12eaf2bdb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f74116a1-bb63-4bd2-af86-550fe102890e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9cc9ff-2bff-4606-a3e8-e742120063be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "00b13a43-5800-41a1-8983-0a6879b0ed79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c977961-771c-4657-b4dd-ce7ee66d3474",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2deb5b0-3bb0-4a7c-a1e3-f5959844010e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86233b6f-ea14-4a1f-8d91-d516c9447d74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e69344-b8ae-4217-8d98-ee4cb466a411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0774b041-f424-42f4-858f-3691a2dfedd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103f6ea0-0438-4d3c-8792-3ba7fc3adb88",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d1f488-7594-4681-a5a7-b2f5f71f69ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc04e21b-d464-4dd3-a4a7-9310e2e6d86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ea701d8-fb1a-4f10-b565-1069418dd59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6756e5bd-fa28-442f-bb86-4bd2f600d333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c95f19-0c03-4076-a00c-589845cd8d18",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51b8345-8bf4-4526-9e79-db663b4b7b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6de582a7-680c-429c-98c4-0eead87a8e27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7422f6-bd0b-4131-bb6c-737d9e0e60bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "794a34e3-36b9-4eb5-b9d9-c4170a1ff807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a0cb92-9cc2-480a-ad21-966748b3469e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1cf6f8-97f8-41dd-b749-aee4ec3a0d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e99979ce-0dd3-4749-b046-a0b453349162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732d30df-e464-4c75-969a-83864d4ee391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e5e8fe0-36f6-4a33-a2b1-332ed314e5b3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "71e9e39f-897c-44c4-bca2-3a58bcd35395",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "573f813b-a648-4322-98f7-76ddd90d88f8",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae0a334-ca13-471a-aa2d-9b30078d2bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbbdf6e3-8948-445b-8fe9-4dd066dca1d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6c0f61-9f6a-43ad-b28a-31313291dc10",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "947cd145-11df-4c7b-aa78-9afa04889b03"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0674aed4-b5c8-4c89-862b-713415605099",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfabc418-b567-4239-af83-22b0d442845f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5dd1bb3b-546e-423b-aefe-f1579ccbbc36",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbe68c76-d8c8-4c0d-99ea-af927f190901"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d3960299-b0ce-4b11-855d-b685511a585e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a55bc054-06ad-4c24-841a-c414937463fc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cd45dae8-49c6-4b28-93c2-05b5ce14011f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f9a6c2d3-59ca-492c-9de3-a5577da73c2b"
                }
              }
            ]
          },
          {
            "id": "f9db0c50-e5d4-449c-853f-95f115d6ea01",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ab0f7752-9fc8-42f8-9624-c60ea67781cf",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "33398165-96f6-4e76-b751-bed30b79a22b",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a833c007-0026-4f6f-93ce-7ffb8335d7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "75cdcad4-6cc3-4ffa-a88b-da6b00f810d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e4f758-f3df-43eb-8a18-7de1b6979ea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352948a5-9ce0-4ac7-b069-56af0fbba6da"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0f9f7d96-3e52-42b2-b21a-e53fd4ad67de",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a0b330f-a323-4a9c-9181-6b300e3ef2bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24ac0f55-af8a-4f1b-b739-f3bd7047e0cb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b1a4116-aa54-4d45-a2fb-c2afb521a4d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "de67d507-fedb-47ba-b414-26da9efb71c8"
                    }
                  }
                ]
              },
              {
                "id": "fa982c2d-f7e5-42b7-be68-d8c5f7542781",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a17f0876-b35a-461b-9f3e-9d8095e10d73",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e186f1e7-2fe5-4f01-9b3e-7794390a4e7c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f15e9206-0e14-498f-99e5-e050717d9f8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dbf6a412-efed-4645-8dff-603a8e380960"
                    }
                  }
                ]
              },
              {
                "id": "57aeada2-7fbf-4b87-ab57-e92f1d0d788d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f89a423-174e-4b01-9fa2-10da10b93d3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "06a570f7-406e-4c1c-850c-7e698675687b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "251ce26a-c76a-4918-be3e-cb28f25fb965",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "452d1228-04d6-4770-a1be-783b2f15f34c"
                    }
                  }
                ]
              },
              {
                "id": "d28dffa4-e47b-4e2f-bfcf-ffb811cba869",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83f97120-8250-4243-8013-bf7eb1c23391",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ff0c4433-4a0a-4c16-b89f-a31ee414511e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e4efd39-16e3-4c49-84c9-190b4057a198",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f6c09106-77f7-44ce-866c-32c47fb0889b"
                    }
                  }
                ]
              },
              {
                "id": "1e0af2f8-8146-4306-970f-ff94a296f5f5",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5310d957-863c-40d4-9087-7041648db77a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "05b73a1c-3f66-4cf9-aad9-4bb5fc7796bb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3410073-fade-4da0-9e6a-65030e67b466",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "119be7bd-a62d-4cb7-a5c1-67407f38640a"
                    }
                  }
                ]
              },
              {
                "id": "b2941636-0593-40c7-9b32-0a810406ac84",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a25040c-2849-4d95-869f-4664bb1500b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7522a241-6114-47aa-912c-0e6587c4e07c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd64c318-485a-4531-8a20-8e265a35f98b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "15530435-a7a3-4e81-aed8-54c6a74900a5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c67596d1-3fd1-4683-a16c-824f01225154",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "30dacdaa-9dc0-40c1-8459-7f4f76c48a62"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "74be9ff6-b2d5-46f4-8a98-cac9f9b8495a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9031084c-f231-4181-a31d-4f55197cfb2c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31757190-7622-450e-b0bf-d53aa26771c3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d6bdee6b-339b-462d-a46c-07bbefe6b8ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b238445-6386-4b9e-97bb-e84b9211f8dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b24596e5-ae54-4295-868f-d4ad26465655"
            }
          }
        ]
      },
      {
        "id": "48f6b45b-db4f-4591-82be-6700730e0aaa",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4aadcbf2-c0f8-4449-9d0a-ca4d7c52a89c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a1a428f2-0bb9-454b-9b30-773007737208",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0f14c8cf-c27e-48ef-9c67-c7d932fb4336",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "942e082d-5fad-41ef-a95a-491e7685cf33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc8deb61-d475-4e89-91a5-7b18804b924c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8029d4b7-1b34-4b03-bcb0-36bfd06d8ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "80c15175-9602-4f06-9e5b-90972cc4c59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3755aa1-eebe-42eb-a32d-0dd3c62f9270",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4819e2f1-c335-4438-a9b5-566ca3392c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94706c48-05df-4142-b2f6-6c83a039f8f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f368ed-b914-40e1-854c-cf2533516ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "656184ca-4b38-41b4-90e7-b507e078d8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933c57bc-fb45-414d-8b93-b6258aa3198b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67188192-090a-4a76-9840-68ce1e1823d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d3271ce-0833-49d7-9a66-e1fb46b316d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98222d2f-3eea-4ae8-973f-cce217d4d4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5439eb03-1638-4347-af2d-b38e7306596c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ab1dcf-22c4-4f65-9985-db18b07bac7e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41eed8de-5642-48e8-93fb-d08856aa8967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15725bbe-dd99-4047-adc9-fb984be6c70a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7bbc33-8e9e-49d3-a457-0fc5354c03d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61df0fa0-21f7-4b2c-a337-f0db851af790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b53b974-130d-410d-83cd-d64cba1e2b32",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5edc4a2-84b2-4592-abdc-7f63e2aba1ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f273fad-97c1-43a5-8195-061d84ea1412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f984cc-b133-44ef-9935-b8c4c6ffa6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d932621-a6b1-4242-8eca-7be1df93a257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72efb29d-303e-4445-9002-93f86fb39078",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5315c5d-0a4c-464d-a78d-827443d8f434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0742efe-a2e4-4383-9a49-f90346e818d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76c535b-c4df-4da5-a4bb-556c096399ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "22bcbaf4-08f7-438e-a83b-cb043e90dcd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603d35f6-a10b-48a5-b60d-b029a6c72fae",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09dcf945-a9cf-42b2-8711-5accfdd17975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76d76164-9a7b-4dc3-a81d-46fb66ecea3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb2dd89-50fb-4042-9719-597c88c07634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "87c4dd5e-3c75-4367-888f-e2f4cc41201f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a948eba9-e568-4e10-aee8-bda5e92103e0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d545f4-59a0-4347-b418-9b7bd7f9c745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f01e1b3-fd09-42fe-bda4-57bd8ab9f163"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2a58c0-543e-492a-927e-6ee559f4f18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38fd3d9b-f25d-4902-93e9-e7f11f27de60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff0fab2-acf5-4e24-89c3-13d5dce7974c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62301913-9519-49e7-8437-f23510348ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78512da9-88f7-428b-b672-453eaef30d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0215aa5-c566-4cf3-82a0-e5877f5af18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6414191e-7066-4d29-aec1-692dea17934c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e261ccd2-ee7c-4bf3-8bfe-fa0fe8945f64",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3027ed41-ab73-4d2b-b245-13c0d38d108e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3974af03-e569-4b93-b7bb-9bcd3f322768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29329b13-e632-468e-8eae-b48b8c9bda2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b442d302-038e-4772-bf18-138f674be163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "550d5c55-f53f-4a99-8c83-c85b4d5fd721",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f563c83-d18b-45d5-ba92-223f3f145f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a91b6f9-f4b1-4103-b271-38de6896ce04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d478b354-bf54-4cc6-9ca3-b3410562cfd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "529cef50-1846-44f1-a6b5-405aca641463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002a9ddf-9857-4f38-a82a-f937fce57d5c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae5f60e-62c9-4aed-b27b-ccd9b0ba3616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0313ce1-6785-47cc-b5aa-ec849cbea8bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eed5565-478b-43b8-b211-cc0dcf231d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "faa880c4-7e2c-4c37-8067-36b2c5231a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d3b009-6dcc-4fdf-a80c-6fa52e5e5763",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "740abf54-0aa7-487b-9e76-4a4ae6a6348d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4190785d-b3a4-4138-9b34-5d3e96ad53a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150a209c-94dc-441a-a2a0-e3602ca55f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "01042d95-ab78-4320-b29e-537935b5366d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699f5615-8a23-48cf-8d77-3ca3ffeadad2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d271df3-c562-4dfa-ad32-9732eb32292e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ef35686-ded8-4dec-80bb-1b3ab1ed5d9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f2a913-4230-41a7-a07a-692e3e998f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5345749a-6612-4565-b87d-f559b8b7b756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7146f8ce-d964-408d-bd6c-398a3793aeec",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af175e3a-c8bd-43ba-bc98-5d4fc2a261fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95dee556-6309-4842-a65b-4539b5a8665f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21c2522-105a-419f-a7a4-f412d5150183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5da8d254-3cce-4393-a6e8-f61cadb5fd4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2a0c7f-d7e9-4075-a9c4-bbd17ea12b50",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b749fd60-5f52-4dde-ad19-482c978d1a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5073732-9a33-4769-b12d-35cf1ba46902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d21317e-3b37-468b-85c7-d1aff7dfa7bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "04c91582-a7ff-44bf-9dc9-6bdbabce5920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5baeb7e5-2b4d-4da3-b101-b1abda357e7d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f096f578-518e-4ecf-bee2-f308e1122350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca247072-7087-4bb2-9c5b-0be18fca2a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4713f43-5478-408d-8742-0c141c5722a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3272fa07-9b8b-40c7-af20-7143d2ec289e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c909864-74f2-41ae-8101-f1dd41adc408",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e53ec6-3f59-4580-80ff-cd1012925fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0efadc2-9245-4cdc-a17b-303ba7387436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f64195d-c49b-4353-ba37-364e6b0a26ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0097a029-a39f-4d92-bfc7-6d0b46767027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39eacea-dde9-490e-b729-e224fb8f2822",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f2d318-9f33-469e-a8f5-159369153890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9f1c26-ad00-47ee-9a47-c775ffb930c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace91cb1-8288-488a-9ad4-93a0cd341f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "440ab9e4-dbce-49b9-bd8a-a96603948d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a14452-3b63-4e44-99dc-983115541a9b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "640a13c6-baf0-4d5f-972e-908b93d5180d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "872b879e-2523-4830-9702-cb044920e936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81923246-a718-412d-89a6-304dfc508ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a6a2cc7-9ff4-4cb9-b601-2a96a57d125f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f6d793-8f2c-4516-9503-869c80dbc244",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26cbfd3f-bfa6-4d3e-b16e-eae31d40e81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc2646f-9ed3-4aba-9cf7-4ce0c4d4388f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "514967aa-60a1-4a49-ae94-9f00bcf07da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46183a2f-f6c7-4a53-898f-fb1a5799e29c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45fbf670-7ad1-4f10-992c-e9733324ffa0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dffcea85-3fdd-4d1a-9f09-540b236a4892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba892e9b-918f-41ed-832b-c9ff292cf827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8557d9fb-815d-4cc9-b301-79bb6fb2ad28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51ec678a-b308-47a8-8aa6-f7765423b698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba6d737-9953-4444-a44e-875fcd3ceda8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a266492d-c32e-4f0a-bc91-c8a7e424fe16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b817b965-9e72-455f-9b07-488535c99052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee230846-ee40-4b7f-800f-866770938aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93325b6c-1cd2-4299-a625-e7062df691eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec217e8-fd99-486f-a9de-facf58e4bf20",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d5711e-5a28-435e-a7e8-0221435b84c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f23f77-fb54-4303-ad46-3ec9447fc392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd08a97-202a-4ae0-8882-30e2a8241c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94e5c5cb-edeb-4032-b1ec-33f2df215c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7892106-6563-459c-9b00-8dd7cd7b6c3d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08d0ab5-96ba-4e79-a1a6-568d7c592101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "245aabb7-9ae1-4766-9f9e-8db96c0acf40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2c9515-db91-46ac-9ea9-a62d363d2670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17ba9e09-8d11-4112-83f3-c1ac7d506fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b72c9c-7e04-4efb-987e-8e351a0811e1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34ae49f-2100-4986-98c4-2793ca60039f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd442ea1-2e4e-4314-a993-7d0ec9eb4c32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d16bdd04-285e-43c2-9fa1-bebbf41c3f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67108f1d-2202-48b9-9927-e4eaf8cb27c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4d9ed3-c5fe-44f2-80fb-ebcec4cb29c2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78753cb0-9e1c-4973-b351-a8096a1ec032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "336126d1-6d5f-4190-9012-06ef10f5ed02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5181084-4a80-4174-af5e-faded405dfa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3705c18f-9c2f-4c8a-8caa-9ca72d05b3e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10a292e-1f13-44f7-8ff8-d2c5ae07a035",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d4fdb2-38f0-487d-b74c-2a7cbb8105f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af2f793b-19bf-4abf-8c6c-713f21ae8558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09a4577-2ff6-492e-951a-5d45cad477d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5d35248-5bf9-4b56-a03f-5b55e81328bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709cd940-8d5d-4709-9cff-b266d984d181",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011b4850-e1bc-4a8d-a1e8-783e81a40969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfba3e5b-a317-4af6-a82f-ae36da2eda0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78de9af9-32b0-486f-9e0c-3a458edbbdb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e57943d-05eb-4719-9b2e-bd66924d49cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efec777-1b59-4290-aa7c-9f460c0eade5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9643d680-6bd6-4950-a8b0-a9c816a24357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f78aa8b3-6bee-4253-b2f0-a0a88cd748e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65d5437-e316-4e26-8a82-0494f2002fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "432f80fd-e99b-4f3b-a33c-00d0fdbf769f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e757cb-6d8e-4ce3-a52c-29512d85b63c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "364b427d-a6e7-4847-a4fd-5a460ba11a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fea93f4e-85a4-478a-bf1d-da2f62c11b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3b71f3-ee28-48e6-abe8-b72044d9c4af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a1dd309-f03d-44b0-a1a9-10fc82590938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b77f7ef-b62c-4ce4-b6bd-256e6e9ef151",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8995e4f6-0f6d-4f7f-9cc0-07ba58d66679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35ebfe2-b731-4538-ac4b-d4419208386d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee3338a-e3a8-409f-a509-e32003354673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e386e11b-6a52-4ecc-80b7-5855a27efbc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622bef5c-38ad-4a34-9ce0-7d641e449aab",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c09446c1-e338-43ce-b216-182f223752d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec96e811-8ea5-4b8e-8c21-aec44b857cd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7acec5-2e24-4f3e-ad57-ce64a6268cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d49e0a1-4029-4916-863e-1a7395a33293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068d8677-7711-4518-a46a-5f59c04c1705",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d76a6b-9342-4fb5-ae7d-912df0d875ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b20ff259-c2ad-4d0d-99ef-affd604203bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc87d01f-8077-4884-ac68-7af3d24fd294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "481c8be1-d916-4a88-9a44-ab783d40182d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acec216d-7d7a-40f4-9e7d-7f5a843ada13",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c34409-b39f-4f35-b7a3-b4e3fb139922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52e59725-666e-4395-9217-e22c951ff9e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f44360b-0ae3-4e30-b2a1-3cc140b69d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0890ed5a-1c7a-4633-b0c9-2d4cc03472c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb6f513-9802-44cd-8a7b-899bac58e769",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "066e483c-6dda-4cb9-8d7b-4a54ca2afc59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44b19e73-e5d3-43b4-bf8b-822b7ceeeb34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a0c120-9196-45e3-897e-e661f5a11980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "116029c0-cf8b-4393-8dce-d79eb4f6d034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98febb32-ce19-4915-925f-f593e02f8b26",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c4b6d5-2904-4b38-ac3e-e430ab09acf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b829ef6-d5fd-47af-8ebc-e6913d0603fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b718eb8-121e-4763-9d81-79c392b1959e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb4f13f8-331e-4ba0-bd5f-5d9275ab4198"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "44435b65-0686-470f-a091-2984245c16d5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dcd18bea-aba0-4da1-85f1-a7452061eca0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94772b72-e2fd-4375-8069-077131e797eb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "929f4bd8-d3fe-4078-b02c-7a7a19b481f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a55f2a9-6c51-4c3c-afeb-69ccdedd74d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e173b09a-78be-47d8-9395-5c4a12704e90"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a0fdb7a-6366-41d0-b63a-3090308a16f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "948f36d9-5f1a-443c-9eae-34a1705d5cb2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6b63863-bf5b-42cd-9a77-a83e2ae2a74c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8bdcec0b-ee0f-4562-84d2-6cd655316f06"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c0b5db0c-89b5-4d67-8513-849deb289d4d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "313c96af-d436-475a-b5c5-6b9b9a06e168"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b63cb005-5a46-4936-b06c-667a3e1432a4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd7610cb-4daf-46a1-b395-adfeb031f09e"
            }
          }
        ]
      },
      {
        "id": "a7bf3243-dac2-4fdd-ab10-4a475915640f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e8eb2a3e-eeb8-4b30-9669-d558c260c3b7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b2464fff-130e-49bd-b088-e4436fd81ba0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7849b676-3405-48c0-acf3-361de3f4e7f6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "401fbc27-53f2-441c-b6bc-0228e831a160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3661f50b-6632-4725-aadb-ef3c807d5973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e130f36-e51f-400c-ab3e-548a46bedd45",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f125349-8f88-426e-837a-94e7085d11f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36fd5dd1-82f3-4e12-9445-eee05a3a6f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b5e0389-27c6-4407-86de-76bb4a851190",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e7350c-bc40-4862-a82d-da2858f542af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2032657-2455-4010-9ca1-c14c4faba801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3c3af2-edc5-4ac1-b389-f3a3b6f14f84",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf99a0e-cc31-4df9-aca6-40e5867ed29f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b41d71c-f36e-4c99-ab88-6850c219ce75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5e486b-234a-4ae0-a46b-2378dec9a379",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e270281-6d7e-4042-865e-234ef26a1f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d29dd903-0855-449e-9a1c-37814530e1f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1101f565-a258-4f64-b0f7-5124df3d6833",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dada138a-ad7b-41ad-ab51-92d00906f1b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da72971c-0c1c-4fd9-a0fc-880d7ea28358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a563e7-ce87-43e8-8ce9-29fc9d2f89f2",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00544bb-077d-4e32-83b0-b23993af012e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "124e9d80-9ca9-4f83-b5a6-5e14dffdbd4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f3b17e-ddc8-4889-95a7-5bde63f36427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d807a2b-fcb7-4e6b-84dd-799202e72587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6157ca-62ee-46d8-882d-4549474fe433",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f82fc6f7-340d-402b-bf28-0c74a88f781b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dadf1675-ff14-4e99-830a-7a93b38fa90e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7499c789-96af-4a46-b014-25bb696eb180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f3b1116-05a5-4718-a9cb-92f62a31f0c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a104fa3-7f6b-436b-8054-e6c800f0de38",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9faf4c65-9c55-4aa3-95ca-4dbe965f00c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98b01aef-b36a-4a6c-a2f8-271c5161539e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6b55d2-140c-4207-92ed-9afcedd3331c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "746bfa49-25f6-450b-92e7-f2789f0a9a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f6b2fd-54de-4141-8fc2-9c95787bcd31",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9bc0ca-78e1-4278-a8c5-130958e477ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c69d5734-068f-45a0-a26d-cd4071b9d2da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b28c598-6249-4fdb-a2b8-61780e185b63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eed63579-c012-4667-84e5-0b4a601fbadd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07bf1a2f-ca22-4f2e-b25b-99f151880db7",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b3a894-92a0-4585-a174-19cb8cfcafe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f61bbe0-0721-4471-89a9-35f31780871d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d01fdb-fb5a-4566-b672-6946913abafb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37a65abf-bfc0-4f3a-9be5-c6ecb5006604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94fb5d6-9df1-403e-8905-bd9d4818683d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bcaf03-e145-4883-b711-3e5afa3e1722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4af40c0-738c-436a-83b8-184c3183b89a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "418da0bd-f465-43b1-b6e6-a278c2242d79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23016263-0175-4c18-bf3b-0239444a1510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c05b75-9361-4246-8a49-1090b3352b13",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a571810-afb8-4fad-a219-e8ac7a2aaef7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44165905-63f4-4a82-a2e5-8ce133956e37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49cb58ec-a9aa-41cc-939b-519a9013b428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9000ddc8-b36f-4d25-929a-e0b85ea54f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff46a80-3119-4faf-995f-0d3bc162d968",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1257b2c-8702-466a-b71f-744b2e2a5f28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a685fd7-7fa1-4fd1-b2ef-b7208c731da2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed76cd3-4324-40ca-bb7e-77997fa1ccc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf39992-4584-40f7-9df5-346bcba82910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984cd4a5-958b-42b7-ab0a-aaaab1a7ee1b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9a4883-7b53-431f-af11-84df8213c1fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "504e2d04-45d4-47d3-9c8e-dd921f2bc547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c08803c-8da6-497b-9bc3-f4bbc00ed34a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a23bd237-2421-49d7-881a-b90b3c5bdd87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62eef4da-a177-4dee-90db-73d03a6abe82",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16d16bf-e70a-4946-93cd-cdf8d6cea976",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "466e7caf-9d6c-4dc4-b141-f0fea7764661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b600bd-bf43-47f8-977d-7603dd0fe7d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4395a506-c12b-47db-a428-54b396fbf1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b77d17c-154d-4550-a51e-4f3b2ddaaa21",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe13678-5cc0-4976-940a-2f8bc0f298fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cc63016-d416-4f1d-9868-d18830943014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f158fb-af7d-4803-a9ee-09fefa9e0605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c3ea25e-2a4b-4e61-b0d3-462572ea58ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e9740c-4935-4dea-8a43-0399a36e5222",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "705f6a73-339b-4ad8-aae2-68bb25cd205f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d73d4190-c830-4047-bed9-8c5bf7461f5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "752e7556-5bc0-49e3-8012-dd0146ddc5b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ff0e286-4c8d-4cd8-9efb-0f67c034513f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ef93de-9278-4fd4-b65d-9ecf3d8590da",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665b4f31-3707-46c8-ac02-69d038e32077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e43860ac-00e6-4c4e-9664-309896e45293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e148bb94-d8b8-47df-85d4-49645b409e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95f36e2d-ec54-4ffe-9024-21068af8f24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2e3ceb-e5db-4890-863d-ae7fa4e0d988",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0738b895-33f0-4a88-b65a-e561b891eaf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40942d81-4b84-4ae5-ba02-f187d9e41ab2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3174eb7-cd38-4429-9ad6-79c7f1876d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e604228-1187-47f0-887c-47a1f5db344f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3479ebdc-9f6c-4bec-8a4a-fdd8b5be7285",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6449ce2f-a180-44d8-99ea-7e7931712dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa1a8fd-18c2-4bce-9007-ccbde73db711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d423fc4-0648-4bd2-a4bf-a7871d77cf00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b7f9170-02ac-4da7-b8d0-635f23325189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb35621-db5c-4a54-8bba-c6706139fe10",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4270c29-3ae0-4e84-b07f-9f8653065afa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39250dc9-6b01-4400-8a32-9b7118d5b09c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4580d4c2-f5dd-4774-85ae-16f0a50d0707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9243f19-3b46-419d-82af-f036177b3723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f204a15-4723-469e-8b0e-1d8a4334af82",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79854c75-3832-45f8-8a29-c9652d15b9af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f7bb90d-f1fe-4e42-9245-f3ad7487fb8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdce17c-ecf7-481b-8f7e-dd4efc44da42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3bd1225-78b7-455f-b7fe-ce5b84fbbc82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de47c0d5-038f-41fc-bdd5-8a684798c3da",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf42dfbf-0529-4813-8aa1-3367f85de08c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f89060c1-5315-450c-92e1-37d9531b3826"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "073e0270-c79f-471d-a279-479eef8e0364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1e3fd0b-254a-49de-af48-c3abb5fd4b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3334a9f-f90f-43ce-be0e-9f919bf7efd6",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982a1bb8-338a-4e31-8220-e10ed51a31ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ceca49c-0e3e-4dd9-94fb-cc9d0090ed9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb5de55-12a5-4a06-90c4-955a8c66bc30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9674417f-c802-4de3-a072-6df269499199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc74815-10ca-4135-992f-becca1f1f520",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ada2cc1-81d9-41ef-ac24-2a889f435937",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc9a738d-43a6-432e-82bd-caaba7321f44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45be76a4-06c6-4829-887e-efd73c61aa6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ea19f8f-fe30-4a22-9cb4-92cce2636c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4e920c-5849-4e52-832f-6dbe07b73818",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff3d717-a939-47ae-ba90-e54972af8dcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "934f8ecb-c7ad-4ae2-a5e4-6270c1506cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec484cbc-5663-465f-b39a-075794e4d434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b081649-3b09-4cfa-9403-fc7e07b1bb96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d5437fd-6b4e-4c8f-9280-bd8a1c42a361",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3b8ffc-b246-4bb8-95a4-67fa00d41717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9054f50a-1bf2-4982-9793-3b0a7f0ae52c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92196982-b32d-4703-a515-dc7b0760313a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe3a3180-98c2-4ad4-b49d-9ebc68835d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ee9462-0e28-4070-817e-5d7d94027df9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbeebe7-e334-48a7-a8d8-c48a74f61d98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f522ea6b-e6c7-4cae-a680-42b7f8f6ba48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88ed262-4b4e-4933-bc63-7caf36ee434b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "576dad0e-5709-4fda-8ede-981d8280b957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd15165-2d78-4fa1-895e-54b524109ca2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3005e307-324e-41f8-a0c6-ed6128e15fad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd9dd9c8-1eb0-444f-9a60-63849f7b3010"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a17cbd6-9f40-4464-b509-b764c72d1811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30fdddd6-0641-4bc0-8ae8-2160bda7e113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee1a4e9-78e5-4756-8e71-476aa8f687be",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14594659-15eb-41b2-a92c-09cb89b89e56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3adbc0a-95c6-42b1-8fc6-bb22ecfd3a48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb472ef6-5fd8-4da2-8070-0af62903a71a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaed883e-d1c3-4f53-9fca-feddaaa11b02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc48e4c4-7320-48a3-b66d-d49f6c5d7ac7",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ea1615-07c3-4b62-a561-7d51d439153b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "364fbdd3-cf36-4328-810a-09b17cfdebaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "228062b8-e9a1-4bef-a049-7a581d3390a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2e26e35-4861-4db8-a78f-f918fb6abff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "562b6145-666c-4a10-8051-aefded430757",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a400aae6-623b-4bb9-b035-315e92656089",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b08eda0-09a2-4864-9eea-26b7142f524a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe84cbb-44c0-4670-bad3-7bed1cec3e84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "631056eb-1c73-4520-b1d5-b47788118a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e0064c-c127-43f3-972e-1a6556f876bb",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e29d5b-31ff-4fc6-808d-1cda13fab017",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "426a726a-4bd9-4415-8ca4-5d21177506c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59f2834-7920-4eab-8ab8-7dad8a1dac08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5490fc08-b5f7-4072-b8ea-a903a977e7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a498e7a7-00b0-4e1d-a199-4f36097a2bfe",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59989393-3b64-492e-ba77-e7b5dce61eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fef30881-d16e-4d74-93a4-8db0da01c4b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a802ce77-0928-4946-adf2-7d92db3a96cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9488edc-0449-4e53-a331-53865773c8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae46796-8476-41f1-b3b7-b40c49b81c65",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71f2e39-e736-4f8f-b553-9b27bc64acad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8e2747d-fe7d-4823-8d68-5105746e78aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea9162b-bc33-475b-972b-a8fa627c5e85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8582ef63-8cd1-4543-9ba5-91d9edbac3d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c87c803f-12e3-463b-a285-3c76e0c81255",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa103d5-dddc-449c-bffa-efa808c0421c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3290353-bf29-4832-bacb-328a1cb19aa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5f5dbc-4d91-4fb7-87d2-0b231245cfb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47294009-b805-413e-a7ac-a52410380619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1bb347e-4fff-481b-89b6-481a133afcd2",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90d668f-dc11-4bad-b5c7-fd33b89c80c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54497618-55a0-4ff0-bc55-bb964f76419f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc58c408-2098-4d94-bce3-d3b8fbc17628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0febe6-f028-4407-821a-2ea80e0bc79a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19af5647-37b1-4711-8482-c897a0d8b9f4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1f0c19-5410-4fc4-8c65-c767dc4a1b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c48522-d19e-443f-b7b1-9d97b2e2570f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0e7614-ba5a-45d1-8d48-e1a370f7b2c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eff402b6-cc88-4505-abfb-714a10954bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d6be07-ad9c-4db1-b681-450b93803367",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d23782-a209-42f0-a84e-c1be5995fbf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b2f6ec0-220c-486d-bb9a-8f8e54e02bb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "676169b7-44eb-4c81-bca7-54369e90c2c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b60956b-0f0f-48b7-ad44-5e8bc39afd69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "419df2bb-5332-4f31-b7c3-b42707d723b4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2509b98-a8f9-42e1-bfe3-f1975ce0b3af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed6bf90a-82aa-4c3e-8929-4d6ff33bbce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda3af2d-5991-4d8b-9ee0-0ad88c5d3821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7eb991a-038a-4e69-9cd5-ea88e8828bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347f666c-db69-478c-82ee-6bf552998f3a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a840df7-26b6-4f8c-b5bc-10cd3738a0df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b6a4fb4-60b1-4d27-aa6a-1ada586efe68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ce4d21-a0f6-464c-bd25-a4ef316a36a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74662068-b882-4a6f-a428-94218c926893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f75afc-04eb-4463-93f4-c7c73b06284f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6edf3a59-6b6b-4ce6-8e08-1434715847e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe958a91-36ac-47d2-bcfb-9bc5922fa8e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58c9063-47aa-4f4f-818b-f286f3f5e0b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "167fa02c-2cb0-44bf-9381-0220a73bbef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe61931-a071-4aee-8c57-f4836bebf753",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f40a354-cc81-46d2-9cd2-502dc431ece6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "217967cd-a657-4c50-a7da-1a04edd5f024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b46401-647a-4326-b677-d8d464aee8f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f7c455f-41c4-44dd-9018-f437d3b56600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1422451-403d-4a4a-b97d-b616c123e38d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e96ef31-6afd-470a-8361-b327fe6dd4a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dfcae04-c6b7-42a7-b6bd-08a512715970"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56bab955-e616-4ac1-a5ff-a377fe66fee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2f93135-7f46-4c5f-b320-d16297583aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2733f32-b7f3-4582-a75d-689363dc75ff",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2787c78-912e-4ea8-83bf-c20c34c69897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cc74039-ede1-4e62-a9d4-64ced467bbcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72d4788-c1da-4f8e-a248-af2373c29dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fab499ea-65d7-4bab-82f9-2295c8c55c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d39e337d-bd0b-4db7-9022-a6606f783576",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d55fc93-c508-4c41-91e3-04f6775f5476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7dc6443-49da-45f8-8c94-89afc7da6f61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb9bbc0-3923-44a0-bf8d-1e7a589b0fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31619672-694c-4aa2-9371-7f2a59235d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86dc74c-e0d4-459d-9709-1660498b50e6",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fedd40cd-dfeb-4c5b-846f-9d4587041aec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9717ec6c-7fa5-416b-ad3d-9b5aa7cc7ad3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa7a177-a1d4-4ff4-8109-ec9b39952280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a5329ee-fc93-41a0-bae0-eedffd20e462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619b3019-4a3e-4ae1-b930-234e05fd67c5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad77d530-ba4b-44d7-8922-2abd860cb22b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ce7ff8-13dd-4003-80df-28e0b47310c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b8ba27-fb65-4d4c-92c2-afb320e716fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cdbf8ee-c913-4b18-80a3-eb02a4b45662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c366996-4ca0-4395-82af-dc7a73a8f663",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "481dc0a7-a4ef-4853-ad11-1e1b9e1c12b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5170f0f8-d025-4899-b0ec-dc8a9a533795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "787bd385-f587-4bea-9595-4d4c4330ea26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cea7e7b-1a25-4009-91dd-e06c701e5996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb9aa34-1c2b-4763-9a73-725ec95ee7b9",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f742d8b7-09b7-42cb-9394-4a0d51837f00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2497dbd5-2b79-4574-baf5-1702c561adf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72836656-3d98-4d42-90cc-c8f200793290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c1caa2-aee9-4388-a250-0cc29e73ae48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ecba77d-48ed-423a-a0ff-6de0e009c055",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a4f17f4-2040-4db2-bc03-84c50416c83e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f149cc-a55b-4261-860f-60ef6f424288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55bd7fa0-82db-4146-996a-02b1974f5e59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69ecd8a1-c6af-48a2-a191-b4a645b4e074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df000ac-d236-4adc-aa27-a947a1273629",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471aa5b6-9ef4-4f29-8801-9376b004c565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f9cbf0-fd8e-4241-a19e-bf27b891dc30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4339dbf4-722d-433c-b467-a8f748539dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4420f9a5-2fa0-433b-98d6-f33f3d3dc846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5509e235-88c5-46ca-8b68-f119c1e184e8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b82d228-a308-4531-b64e-cb2b089f5473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "288f7d34-0711-4f37-a4dd-fbb32c213a21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21692876-1f87-4e83-9643-c0875c52af2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "077c5cfb-dfac-4ce7-b649-26d29a0ab8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56343340-f884-41b8-b7c6-170331f9051b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19eb9148-7540-41ba-8f80-ea97e9167656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4536f6cc-51af-4c01-9027-633b66f0a650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06208711-f3e5-4ac9-a95a-9671fc275bd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7838930-d829-474e-8347-39ed6fcc4f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270dc232-352f-41ff-9491-cf4bef3ecb05",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e39bba07-05ad-4ca3-b057-6a9083552456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "102509ec-f4b2-4581-8a9b-3d08d095d669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62137df-3a52-4cbd-89d2-8a0952e5d458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "503ea582-9a60-4bb8-8cdf-77377473837e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b61268-5a4f-4e0b-9a02-18b8e41c25b5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44687932-89a9-4e63-bf06-20fad01089b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69dfe170-fd1d-490b-b751-bd85f23bcd69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8cbbff-12fe-4082-85cc-56a84cf1c03c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "926456f1-b595-4a9c-8719-5c302de1377d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c135f8b0-fdc5-4581-b6ed-3d30d0d0977f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df990f05-e881-44c1-a252-5c7137d20d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd2473a-d281-4a31-bcca-d2d670cca09a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35107f57-6a42-4834-8af0-75b9e447049e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d05ba2ed-f620-43c1-8fc8-514f729e9c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2586139-817d-45ab-9560-5ab72f6e091b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa94afac-1c27-4a00-bca9-72bf5038cefb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "157fd31d-5164-4135-836b-306fdeafaea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b1d867-743e-4023-9e0e-90776b894fea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8928acd-ad29-4037-ad40-1e5b91edbd25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4f7bd6-27b6-4ffd-9752-54c3228a03ea",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02156e2-6c05-4fa9-952c-f1e7309e2159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f58107a6-654a-4c60-a145-cb747d35fc6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb939d90-fa3b-43b8-98dc-c5b558754a07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2577011-ad8f-49f9-9840-924e24aef197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94ebc6d-2ea0-49dc-b507-f639c36a29d1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7404eaf-21de-4b66-a194-b00be3a5104d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236f07b0-56f8-4208-bf41-216a1d04e1d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d4a283-4308-4d58-88df-ae5dfc6a02d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efca12a6-1535-47a0-a712-d00b9c4dae8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e193ed84-f9c2-4783-b483-c29b581ab003",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4628888-a615-4b3b-a813-6527f47f4823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7145f508-ba70-4bb1-b2b5-fb5461243d2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e9f73c-f2e1-49e9-b251-64d3918cf98f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b698dfb0-c057-4078-929c-9e3a993b7d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f835db4-85ca-4bc8-880a-64fa68a108fe",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0513cf2-69d8-4f92-9a02-b7c5dfa5bc05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f565616-7b32-407c-9f07-3efd65e3b259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c1971e-8f77-4dbd-bd6c-a317eeb35539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f6ad56-2183-46ba-9b54-d8dd31f77e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4521dcc8-9e42-4af6-82b9-e664b2b4d98a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6d47d4-e7ea-491f-8af2-021cf7952d78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "231c00b2-290d-45c8-bd91-5af4946a812f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70747c64-4b14-4764-bf49-14722f342b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3b1f680-7a5d-4df3-82d8-7ad06e39bff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0256c9a-6911-450a-ae8a-91e4d3534c1b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2359504f-8a3c-49c7-a5bd-b5b4ee61ac90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a08f5ff2-2fc7-4436-ae9d-9a9fb75df2d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a2c650-1949-470e-9d73-4ac6ac01d2df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2eac5b4-59e5-4165-aeaf-9a871f339b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a81ff3b-1161-43f0-9c29-aa48485b683c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1738ea5-02f4-4beb-b81b-a7bfa4bdeb6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edc3dad0-9641-4fc9-b0ec-694446c44697"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c404f2b4-007f-4d3b-abc0-4f4555b8c6bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c656e791-408c-4306-ac00-070dcf47f1bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09fded76-01c6-4246-8e6c-a21021caed36",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c167c43c-6cff-4ded-99bc-47f21eaf4f5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4434399a-78ba-4910-9335-ffa10b0a664c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "411492f5-73d2-4068-ab22-1cb3cfc47621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89cb14d-f304-44f3-b283-84eef49a1569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7947f41-c103-4306-89fc-5a8160697619",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c8674a-acac-4328-8e6d-84629edcc44c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2588c3d2-7b8d-4833-b239-2c5a69bb1a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11368706-acaf-46ea-8981-44da03dd7e22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7abeccbb-4785-48db-93fb-67860b768260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4271e2e0-2a14-4786-97d3-177f954ced9a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35af3a07-4f7e-40d6-aa7f-d6d910094935",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebd34410-a67c-445c-8817-53f24dcedb52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab36134-88c9-4ec2-a94b-8291446a9a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c4fc9a-25b6-4b81-900d-199e2d231b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b25aca-2f94-478d-8e9b-cc9967641027",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a084901-6c33-41d1-bc35-762ea7df9189",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76fb7dd7-bca1-41ee-a43e-2343fea41329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29df921-d3bd-44cc-adb6-defe75ddfd53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bd70ceb-db2c-4970-b944-69b8bdfce923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "441a60c7-1810-455e-b979-5a2b924e1435",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9ed6d0-fa6d-41e5-bddf-a90af279d8cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3eb5546-8f86-4875-a203-9d5b0a454492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d614e3-405a-46b8-b6a0-d6cc0d373752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "405ec3a3-b693-40da-a5f3-41ad71abdc89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f4bbf85-a3ec-4c4f-a4a6-3cc02e6a5610",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a5158d-5089-4626-a54e-ceadce1f5353",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8376d6a4-7b4d-4669-9ed3-fe9bbe4693de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7a0118-e299-4e0e-b9cb-21d07282fdd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b19da7bb-73b0-4878-807f-454637aedc30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90d8ec1-1626-4ceb-a298-26f3b9776c66",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062f2e76-c19d-4a52-922b-f2c11595e1cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ca24aee-cbfe-4042-aeba-a92a7ab47d5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "241b0e76-7631-485c-a79b-7e7b0fd8f152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7da6e1b-8a2e-416e-9620-b454e2914430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c7e510-e755-443b-9b0d-ffc44c51814d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb555df-808b-42ff-9208-621b30c3dd3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "941a91b0-5965-4cad-a484-62a68ab5f92b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aded524-69ca-439f-925e-f9e3b4ff9225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63235af0-66cb-4b70-93a1-cae290f89b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f8ac90-0a62-4097-97cb-e7649259a67d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e6a4ef3-13d8-4e0d-bdf4-2ea68905324c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c6d71e6-2e78-4880-803a-70378aca14c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b784ab1-df28-4105-be26-6e5839d9ae1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0f7aad8-38c0-4be4-9d9a-5fecf1fa5775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7999b4b8-9380-4241-85df-d0e9bfda5a89",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d262cbcb-c8ba-45cc-97e0-35a9cad641cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c9ff600-90f7-4484-9a4a-708963652595"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e74aac-ee76-45f2-9308-6746859c9714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4327f01f-c4ab-4aae-a3fd-0673a3bf9722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802c9d06-1232-414a-82c6-e0ece87039f7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d587c6b4-cc22-4bd2-858e-a0e2bfb66123",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47e7c42e-3a58-47a8-9e50-cd3f3338e7cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44714769-16fa-4421-a86c-3936a8f0b4c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1086cef9-dee5-4989-97ec-db259efd2b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01004e8c-0ad1-406a-a849-d181a45a569b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eac76d5-0390-4a88-ae13-bed1a2c7ea51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d2d14be-339c-4e66-b33d-b926d32e699c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1bc44d6-2dae-45e0-b813-981f509c79dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b802fa12-c164-4fc0-8271-59c3b14a5e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3efcad79-71e9-4f5c-9d83-3bd8b27eef48",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597bd767-cc09-450e-bc04-3ece4d262d52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "948ac1eb-ee89-489c-ae79-4dd4e5f7d058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce95ae22-b0c0-41b3-869a-05f84853401a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d2272cf-efbc-4be5-bf46-7b5c1fe537da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0441c498-14ac-4f79-ace7-d46f935ae07d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c4b547-a349-4c54-8b5b-4b3696d76fa7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4408eab1-c574-4cbc-8da3-d7172b58ec46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa749ff-22aa-4b85-b996-f41a6f6ca48b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ff4ca13-661d-49c0-acf5-bead8d21379f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae483ad6-bb85-448c-bf8c-c4d27d13a377",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0f0eaa-6f9f-44c0-ac34-943b03a94fe3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb36e816-dead-42cd-96cf-8838745497df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e92b0b7-aa3b-4e4f-ad20-17d3e35ed2cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63cf0285-b9fb-4263-b0ca-4a895b0f6295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d90840d-8496-4aae-8335-692af6c3f843",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e956624c-cc09-4dc3-b85f-67b55c6a20de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e065cfd-fa59-4f27-84a2-8c1213caa548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3886cc6-2085-4508-9a0e-818a9c8adb67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7569dd63-897e-4f66-8163-af19ea14f6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5656b9c-e772-46ba-b9dd-a02b6e134d8c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b1ce8a-a6a0-48ea-90a7-ad61d23e94c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "892ee393-399e-4a55-b44e-dcf561ec51dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d8cfe0-ea44-40ba-b225-d7448543766f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb8eb0ee-10f8-4762-917a-0f0aff17d6c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab020d57-eb1f-4232-b3c4-73a7a4a48bb5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03ac66f-cafd-4c11-848f-bea3b03cbb3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8882e67-e94e-42d0-8f7b-9e8b9a06857b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb1fa23a-6ca2-49c3-ac52-0234245fe3da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ebaefa-08dd-4354-af10-c24e2294e3b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7122eee3-e2f3-47ad-8e57-f9ee69bd7976",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0395aa6-40ba-4cdc-852f-cb0671685042",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "022e98be-0400-4113-9d1e-b770fac06b37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d00dde89-eb4b-48c6-894a-9edcb11b83ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2de638fd-579e-49de-b388-91a5a83831f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc19a20-5a0d-42cf-99e5-a983634aa083",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712db4c8-4855-4a6b-80ea-6e76728fe533",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76c8717a-8b56-4e43-a33b-dfb38601b923"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4cc65f-2d67-4890-9fbf-433f02ffff86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fce48ad1-8fad-4b9b-88bd-e698c172f04a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df5b686-f73f-49dd-b265-3c2f558996fa",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37cf3e66-1738-414f-a092-36d2491efa0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44d6151e-08b3-4228-adc2-45b8d5643ffb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f5304e-742c-4b09-bfd9-53a41e76629d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b66770-c346-4b35-9064-8631f4540729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f266093-791f-455c-8377-6b7061862156",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eedb960-0fad-443c-81ab-70880d5c5ae1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e292d7c-ae4d-46e8-aa4d-5e2cccaefbd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "260160d8-6b76-4427-89bf-40b5447e4740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "985c19a3-b8dd-42ce-a080-d0b90172d344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc92af1-588e-4b20-98ae-8e18412e8e29",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b6ebc6-7188-4754-bc99-9d45498754c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b19441cf-5584-4b23-9cc8-fb4101dec7e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "555d698c-6ea0-422c-b248-7f99b719ec7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad432d3-d6a2-4ae2-bd51-a2ee5c2b1fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c8bdf8-9c8e-42f5-9d3a-77674c7de978",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae186764-3bba-4464-8955-1758cafb8630",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dac3c6c-9939-43ac-9372-477d5a834988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6e0c4c-a63f-4419-bc2c-fc8564fcb93d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1c3522-6868-410c-96ce-6bb16e52a5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd285e4e-ca46-442b-9485-e1bb749fc94f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3dcf4c8-a570-4d60-90c2-eb1475449883",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cb80391-3e36-4a54-8339-90c2a5e9a766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3073e094-64f5-4f80-83da-220d180ed471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "277cc05c-74a8-49d4-acdd-522d02a4363f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ad9700-e169-4a29-a01f-94451225caaf",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29911095-0590-4afb-bd8f-ee8c8eb048dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40a8a6c7-5a1e-41d6-9a48-31c58e296a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2c4a6e-c2ee-434d-b702-abf89dc847e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46fb8b1-8abb-4dfc-8a44-fd3c41fce871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b880b54-f443-42c5-a1be-86e3bea1f561",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c59521-d6cd-4b5f-8b75-c72d32581a63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9978a8f9-b78f-4c47-8861-2b80f714dd9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aade8fee-10b3-4beb-b0a3-c63c83e35b62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f2bb492-d3eb-4aa1-ac66-73cdcbc28c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e462bbc4-800b-4287-9990-40525d4d62c5",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997661f2-5ea8-42d3-b606-31912d4f5e21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4642a20b-abbd-4b33-90f7-48f54a790a85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c44a8f-392d-418a-87b5-4c1421e5f4e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1283f63-6a88-40bb-9595-10c6a8f0ef78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b76e1e6-8519-4f77-89ee-b731705255fa",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08129806-d3e5-4799-b456-fc3f38f99f66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5f148da-d192-49a1-9027-fe6a836523f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e15c936-8c5c-4699-9041-d99a037d7d92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee1b2355-7860-403c-8bc5-427a2de34153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41059536-7f89-4771-8948-74ff65e25177",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da778b6f-2f61-4dae-9018-83661511bbdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5deb490f-5d61-40e9-b6a0-e6367770cdec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db065ea3-fa6b-493e-a3d0-b14f6f357e6c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d6102b-167a-4315-8175-72bf44eb14e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6787d18e-6dbe-408d-9be7-7a84ed511ac2",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7892d538-21c7-4ab5-beeb-14f46fb9b13f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c13bc0da-cce2-4f3e-b10c-da7073faaf7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "828e5493-76ff-435a-b03b-615cff01580a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dea67fb-d31e-4b96-bfaf-3e1e89740478"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65566702-fa58-4276-b4fb-7a07d3742b05",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e69ffc3-4e27-4b04-a81a-fce057d153d9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "490e3eb4-d775-4539-99db-dc01fa71ac84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8a7a5e07-1276-4427-bcd8-f6e95e4a9955"
                    }
                  }
                ]
              },
              {
                "id": "e6239e21-64e0-482e-980d-156a5d045cf5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7293bb88-28b3-457a-b8d9-3a672c36f89f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d048bf-7a57-4b46-b15f-eab66cbcd68a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ffbdfb67-0a9a-4574-af3a-3500bf460ac8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a252d0b-1c22-4da6-b6ef-55d452de5ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fbf5aae4-b300-4d75-998b-440e4e095504"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "651a33c2-2b7c-41bb-b29a-1de8e97ece7a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a136ab6-9c59-43a7-84cf-2ae025c5a448"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cd6b39f-9677-4731-bcb0-9684eccf6181",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "767de4d4-df7a-4481-9650-5e5f30c059b0"
                    }
                  }
                ]
              },
              {
                "id": "c83b6bf6-f495-47b8-81ef-d5731519ad2f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "805272d3-d69b-482b-800c-fb675be6c131",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5008bf87-4e3e-41c0-a3c7-d9c17f32fa7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4b5fd371-8c61-466b-b3ac-c3e6f3fbfe6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e40469-fc38-4543-9748-720646dfc803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b42fcf-e3fb-4250-be82-dfd97f07a4aa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "15b83d02-1052-4052-913e-5b249f826c47",
            "name": "Positive Testing",
            "item": [
              {
                "id": "088741ff-8e75-4bd5-86a6-917338903965",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcf86a7b-5696-405c-bb61-a44430d46827",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6c326ac4-0ad9-4d03-a31a-6868c156e4dc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "daa7701c-da75-46ad-916a-236c9c62d572",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eed8be0d-1c18-4818-8874-2ecde4fa7df5"
                    }
                  }
                ]
              },
              {
                "id": "7d7e3372-e612-44bf-affd-167015ad1a23",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac4b842b-caa2-435e-acf0-defbbfcf8a9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0f52e1ca-5a76-40e0-93d6-3929dda69c99"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "859cc43a-71f2-40fd-96a9-689bebafc67f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff1557ca-d5fd-45c4-899f-63316a4ca8fa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f3b8ca30-3eb6-4bcc-86f6-8249d48293b4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "31408d18-5af8-4419-87e9-f70d03381598"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9043dc9f-fbb1-4c05-894c-228e20eb3d52",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "681ccc7d-91f4-4c92-a73b-eee45897942b"
            }
          }
        ]
      },
      {
        "id": "016e42f4-88ed-4d85-b0cf-d4e09cbaeb36",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ab57573b-9e59-427a-966f-1dcaae698ccb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2519423e-72b8-4649-86f8-30527b916032",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ddc77a5-afb7-450e-8243-75d06adc5663",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e928e469-777c-419f-beb0-ba143af0c733",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "248d8322-8b54-490c-905a-a12a1686a4c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2936693d-44e0-4701-9348-9ae910991467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "893c571e-45d8-458e-849c-6af713a612df"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e39de5e9-6204-44bc-85b7-7b998a9d82fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed3754b9-82ea-4b87-83e1-a119aee7ad2d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0995e39d-5a78-463b-8f0b-781d26f311b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fad88346-3683-4a90-a6e6-0b8bd8690b60"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c2dd32e9-9f63-4692-9a12-543ff5c7a1cf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "68946218-e1e8-4ad8-8faa-c7d47439f0fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5a59166d-6928-4b2d-b055-6029aa48037d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "06ac8712-27c5-4298-a6d3-2c7394017474"
            }
          }
        ]
      },
      {
        "id": "7924e469-34c8-488c-96f9-dca43273428d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9738e526-1d96-4d0d-b0de-d1b3a2174a96",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8a7261f5-13e1-466c-8dd2-74cbe2d3a2af",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "39f8463f-8697-4fdf-864d-25ed818a5b32",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "396fa5c0-78f0-4038-9efb-1b9940b8fdfa",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e77dd3ae-b313-4c44-b51e-56e666757483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82696c55-9a5c-48ad-ac66-4435c9a9600d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "696e0fc4-69ab-42ea-93d3-5873852a9116"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b167092-46bd-4fee-8aca-ca6d8b857bd4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c5ce82b-5e5c-4993-b572-500728fe73f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cd29f28-0d23-42b0-9005-6f91515c88d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f320e723-1187-4d03-b901-947b888f2977"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "12f2a07d-a895-4e64-9f42-4345677f6742",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b9b28448-b7f4-4780-a14c-4da9d4437f1c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c4d112bc-a748-45c6-ae85-aa23823335a4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "64ebd3e0-d712-435f-a920-2c42772737fc"
            }
          }
        ]
      },
      {
        "id": "b876bec6-717d-4649-94f6-ebc3486faedf",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b8090878-c823-4ce8-b10e-68019a9459f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1ce9d12-f0c2-4cb5-b31a-22579d2522c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7f318eb6-12ef-44b0-90e9-f39a54ea5c9e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3be0d3-c7e5-4b22-a304-2d17bff77a1c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4d1a47e-964a-453a-bd43-5ce3aee99a66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a481533-2765-420b-9a6b-75ac3cb261f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6076e73-eec0-4446-a221-0f78924bbe6c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "620f72e8-eb17-4c17-8e6d-a72bff050687",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd9036c1-d3ec-4484-a02d-e51c66b3b2be"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb8b333c-1057-4fcb-8df2-0af6440106db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0dd90518-5aba-4093-9d38-a397807833f0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e7421a8-d27a-4ef5-95a2-7078ea9327b8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3c14b4e0-61d9-4322-a1f6-06e3f35c707a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ab6a78d-fd13-403d-927c-c3cc975c1458",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "50380649-ac37-4aa1-8d91-1cad3e8104b1"
            }
          }
        ]
      },
      {
        "id": "78635690-12ed-4916-b86d-517f22649e16",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c16640b-42aa-4a0f-85c8-f3956a03d017",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79b05531-e3a0-4a27-a294-ab177d0d09cc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "444914ba-7103-4dd8-a7f5-bd216ba37193",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "382d20f8-8089-492f-be78-fc03c489e3ec",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2b406720-cca1-4be4-ad6c-298b50048351",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 76.09126984126983,
      "responseMin": 8,
      "responseMax": 531,
      "responseSd": 74.75241942237456,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1714091739007,
      "completed": 1714091766564
    },
    "executions": [
      {
        "id": "2f9a1900-2af5-4881-a179-5e3b7aa1f335",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "dbef28d1-bba7-4ec7-9070-f310da1a4ba9",
          "httpRequestId": "cb332170-2749-46a3-b296-43b04616d7b0"
        },
        "item": {
          "id": "2f9a1900-2af5-4881-a179-5e3b7aa1f335",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "82183ddf-d1d7-485c-8fb6-a9b42c8acfa9",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 0
        }
      },
      {
        "id": "e2f06844-1f78-41f6-b306-b5f588d8d7c7",
        "cursor": {
          "ref": "3067cfc3-73af-4c7b-abd5-e2f37db01906",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0738380f-7fdb-4ace-8931-782606f29ffe"
        },
        "item": {
          "id": "e2f06844-1f78-41f6-b306-b5f588d8d7c7",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a3afe3d1-f7b1-4ce9-9d7b-2731c6cc3f16",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "6254c75b-2bad-46bc-90f5-404cec8c3194",
        "cursor": {
          "ref": "0c0a58f5-9f0a-4d69-99c6-aa457c730eee",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "24574333-79ff-49d1-9daa-4d715368bec2"
        },
        "item": {
          "id": "6254c75b-2bad-46bc-90f5-404cec8c3194",
          "name": "did_json"
        },
        "response": {
          "id": "db2689fa-8041-4420-945e-b0168cdf8dd0",
          "status": "OK",
          "code": 200,
          "responseTime": 195,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3546f6ad-553e-45bf-8494-415fa0e60739",
        "cursor": {
          "ref": "4674ed3c-299a-4d42-bb7b-800fa48c27a4",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "519dec59-8109-49e7-b0c7-296975ce1ea2"
        },
        "item": {
          "id": "3546f6ad-553e-45bf-8494-415fa0e60739",
          "name": "did:invalid"
        },
        "response": {
          "id": "8295fa96-3265-48f9-9ec4-f62750bb3d7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3546f6ad-553e-45bf-8494-415fa0e60739",
        "cursor": {
          "ref": "4674ed3c-299a-4d42-bb7b-800fa48c27a4",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "519dec59-8109-49e7-b0c7-296975ce1ea2"
        },
        "item": {
          "id": "3546f6ad-553e-45bf-8494-415fa0e60739",
          "name": "did:invalid"
        },
        "response": {
          "id": "8295fa96-3265-48f9-9ec4-f62750bb3d7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488f6004-a532-4f8c-8e2d-211c94b499c7",
        "cursor": {
          "ref": "0c913f1d-c20b-4a49-8d46-9cc5a340d2f7",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ef0d1ae5-7ef3-4514-8ef4-9eab8c9922e1"
        },
        "item": {
          "id": "488f6004-a532-4f8c-8e2d-211c94b499c7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2b16a0c1-05be-41bb-adda-c6a927840f9f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 350,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d7ea10-3273-47bd-a561-868ba03d199b",
        "cursor": {
          "ref": "561c79f8-c4e2-451a-8483-c73d7d2759d6",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3c0f35ef-9230-4d36-a222-e89a5d09749b"
        },
        "item": {
          "id": "12d7ea10-3273-47bd-a561-868ba03d199b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b9e5cb0a-df1d-4379-8c12-7b8d671309e2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e24ed79-9208-4993-af3a-4205b07fbe48",
        "cursor": {
          "ref": "a00e7b2c-3124-42d1-a99f-8957713bf997",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0d6f4700-e17b-4f29-99e4-d4d940567661"
        },
        "item": {
          "id": "1e24ed79-9208-4993-af3a-4205b07fbe48",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d034951c-f494-4fc8-be02-584184fce961",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84230c01-8930-494d-80fa-2fd78b8a1621",
        "cursor": {
          "ref": "7144ef4a-dda4-4e8a-88cb-b44735d136e8",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0e52665e-1643-49b2-b589-7cb51034b75b"
        },
        "item": {
          "id": "84230c01-8930-494d-80fa-2fd78b8a1621",
          "name": "identifiers"
        },
        "response": {
          "id": "61dee07f-4ef9-43d9-8e0e-142c72b43a91",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a47922e8-ba1a-4865-8132-e5f3440ad434",
        "cursor": {
          "ref": "890572ed-9370-4004-b064-431ff9e4269f",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "10287300-fde2-4972-b24f-b46a33226554"
        },
        "item": {
          "id": "a47922e8-ba1a-4865-8132-e5f3440ad434",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2227c2ae-7961-4fb9-8702-8fdf458d231e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a061365-0f58-484a-bbcf-b2796d3085a0",
        "cursor": {
          "ref": "37ee7ee7-8812-4966-b7d2-6cf5756bb9d4",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d36f6883-38e4-41c2-a158-5552694e89ef"
        },
        "item": {
          "id": "8a061365-0f58-484a-bbcf-b2796d3085a0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7ba18cc1-20e6-45fa-9d44-cc141c4ce9ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d28d20-dd83-4f4f-8b03-b227d56d52c0",
        "cursor": {
          "ref": "fbe97212-72bd-40aa-9ff9-f1b5e6d0ca56",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0a753fc1-9240-4a40-b50a-8385aa61ae84"
        },
        "item": {
          "id": "d8d28d20-dd83-4f4f-8b03-b227d56d52c0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "d820a086-5f5f-4963-8807-8c0225da0d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c64f741-ec80-442e-8b32-44948363fbb0",
        "cursor": {
          "ref": "3590eab1-5eba-4d3e-abb3-69e8312395c3",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c0d9149f-ff5f-4193-868e-ada6cedd2b46"
        },
        "item": {
          "id": "9c64f741-ec80-442e-8b32-44948363fbb0",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f44d21dd-a58b-45b7-a233-6fb9772ada88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8e605f-1119-49e7-bec2-57d932d96dfe",
        "cursor": {
          "ref": "4ba278d0-351d-43f6-8750-1a1624f2b21d",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9f25ee5f-20fb-4906-8ea0-3f1f6162a0e2"
        },
        "item": {
          "id": "4f8e605f-1119-49e7-bec2-57d932d96dfe",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d80323b0-a939-4a7c-a6f3-e6422c21cc7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a33644-95e5-452f-bb6b-f966e6c8d754",
        "cursor": {
          "ref": "35f97549-afbd-4a87-907c-0ba2dd2963c7",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a15f6179-f8ff-4bde-a299-41b663d0aaf1"
        },
        "item": {
          "id": "e7a33644-95e5-452f-bb6b-f966e6c8d754",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0efeb50d-c21c-4dc0-aacb-a9c25d51fcba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5aca08c-4a48-47c4-9265-8acf4ff38ffa",
        "cursor": {
          "ref": "70d19e3d-abf7-4e04-9b71-ff2e6b723b8f",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ee140d46-00eb-4ac5-ae36-baeedba4e5e9"
        },
        "item": {
          "id": "b5aca08c-4a48-47c4-9265-8acf4ff38ffa",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ab2a71f8-9471-46fc-a1b4-806919e7b5e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109eefb7-04c3-4ff8-a739-0c77cf0e3c41",
        "cursor": {
          "ref": "3ff5c4ed-516e-459b-b837-1deb45339825",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "cd39edda-d9c4-497a-8295-5faa520dd2cd"
        },
        "item": {
          "id": "109eefb7-04c3-4ff8-a739-0c77cf0e3c41",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e5e9e09b-856d-4171-a53d-1d920e322dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5e201c-814e-4a28-b325-01b597ae9475",
        "cursor": {
          "ref": "b1dd0cad-8719-4d44-b618-51d98ce99c3d",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ca1688a3-c9e6-4e44-87fc-4cc4b3f92384"
        },
        "item": {
          "id": "ab5e201c-814e-4a28-b325-01b597ae9475",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "20f4160f-4b5b-4583-8b97-1d71ec23d90e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "808f133f-6c4f-4949-9f16-9ac31f470a7b",
        "cursor": {
          "ref": "4065d727-2702-4ac0-a1d0-4adf9b179d34",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b2005c40-a015-4aac-8154-441d4b791bdf"
        },
        "item": {
          "id": "808f133f-6c4f-4949-9f16-9ac31f470a7b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e6e25a91-3d03-4b5d-9e08-923749748fc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90a4b74-05b7-4ad4-b1ca-40a6ab594552",
        "cursor": {
          "ref": "a72c5f5c-5e92-4eac-bb8b-7cb15e501dd9",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "763c0984-81e5-4894-afb5-adf3f685fb5d"
        },
        "item": {
          "id": "a90a4b74-05b7-4ad4-b1ca-40a6ab594552",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e2ab4972-acf9-4b63-a029-be5796ae3da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191e6435-0b3d-4d74-ad0e-bc1e0dd50a66",
        "cursor": {
          "ref": "e699e559-98d6-4f8c-9e00-5220f6822455",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9760acc7-1f73-4379-90e3-a32476bf157b"
        },
        "item": {
          "id": "191e6435-0b3d-4d74-ad0e-bc1e0dd50a66",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9bbd2f86-718a-40bb-b6b3-0612f18091e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed1e017-a9d7-4941-8c68-8bd9cc83fb41",
        "cursor": {
          "ref": "b90ac7d0-455c-454f-83bf-62a475daecba",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5edc46fc-2bca-4373-9c58-b9470d753b24"
        },
        "item": {
          "id": "2ed1e017-a9d7-4941-8c68-8bd9cc83fb41",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4f596c14-87ac-4961-94f0-530043e398ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc5d0fd-5f2b-487b-9b5f-449ffe641ca8",
        "cursor": {
          "ref": "ea2df840-ee85-43b1-8134-7f81d3ded548",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5842a497-7640-4a6b-ac54-7f31891ff63a"
        },
        "item": {
          "id": "0cc5d0fd-5f2b-487b-9b5f-449ffe641ca8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "22891f0e-0aea-4760-8a35-cbe2f5c6d5e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2781cf85-bedd-43a9-96a0-718664f1316e",
        "cursor": {
          "ref": "253fe912-7e4f-4b98-a2e2-da715253e0d6",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "62c5c8ab-a852-450c-85ca-9200a0a407eb"
        },
        "item": {
          "id": "2781cf85-bedd-43a9-96a0-718664f1316e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0be174f5-a57a-49cd-bc46-be6863bde8c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc38fd3a-94b1-44c3-9c25-430373260838",
        "cursor": {
          "ref": "c77e6d08-4484-4dd8-91d0-e853facb8a6f",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "201774d0-f24a-467c-9ef1-85b2e63581ef"
        },
        "item": {
          "id": "dc38fd3a-94b1-44c3-9c25-430373260838",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c28f524e-74d7-4687-ae79-3068428a77d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bae387f-89ad-4fd6-a834-627140412769",
        "cursor": {
          "ref": "a23e1c02-72d9-4e1b-af93-9c121221bc5b",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "54f997c4-7266-471b-a08f-d2f324349c0d"
        },
        "item": {
          "id": "5bae387f-89ad-4fd6-a834-627140412769",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1204930a-3b6b-4860-878b-22ad6ecbf43f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462160a9-ca89-457e-a853-4ab8cdd5a6d4",
        "cursor": {
          "ref": "486abac7-07ed-4553-b795-c8097d047776",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ae8dba93-c460-4e20-bcb4-e515092a86b7"
        },
        "item": {
          "id": "462160a9-ca89-457e-a853-4ab8cdd5a6d4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f94da7e8-95b4-4489-9db2-f2b632968bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79371a17-e207-4e00-b51d-a78ca0d25b0b",
        "cursor": {
          "ref": "cfc4721a-5065-4031-8761-d64d3404bf74",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a7ef616e-b020-42d5-9862-3ad7f03aeebb"
        },
        "item": {
          "id": "79371a17-e207-4e00-b51d-a78ca0d25b0b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b855ab9a-989c-4f02-bce7-06765cd37cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f9435b-90a2-4f4d-a5f5-3a97cad147ea",
        "cursor": {
          "ref": "a201338d-a27c-4946-be02-9c6efcad0d1d",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2c52cb52-38bc-41ea-9f1b-25838e2f4d20"
        },
        "item": {
          "id": "48f9435b-90a2-4f4d-a5f5-3a97cad147ea",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "923eb73b-50dc-4bf6-8bd6-a38ae3817be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bbbfd80-a5ea-4438-b127-c0493fe757bd",
        "cursor": {
          "ref": "6d29e351-a94e-46ee-8ead-8329a4dfe2a9",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d588fa71-c166-442f-bd64-7b96c4d653e8"
        },
        "item": {
          "id": "6bbbfd80-a5ea-4438-b127-c0493fe757bd",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "96a6c19e-ae5d-4c0e-97d0-0d4661f50454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfee9f8e-60d6-4896-a9f1-5a43ec861442",
        "cursor": {
          "ref": "8933d650-b218-414d-affb-333d321f1cb4",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3a6eb37b-c1bd-481a-96f0-2e47fbbbcb12"
        },
        "item": {
          "id": "dfee9f8e-60d6-4896-a9f1-5a43ec861442",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ad46357e-2709-45fc-bbbc-b25613180627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fefa1ba-1042-4995-981f-cd0bed207280",
        "cursor": {
          "ref": "d5d9bb45-c5cb-4726-944b-2d1a22bf95d7",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7f5cf41d-8ab0-4a3f-b504-277117785298"
        },
        "item": {
          "id": "9fefa1ba-1042-4995-981f-cd0bed207280",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "8c8da9b9-89ea-4ccf-8c0b-2a70a94794ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a18ae81-9b49-419d-9c26-70d334215903",
        "cursor": {
          "ref": "3153e5ad-8bd9-4777-901c-32540676b059",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4654d7b1-cc0e-4ac4-b5b6-a309b40a600b"
        },
        "item": {
          "id": "5a18ae81-9b49-419d-9c26-70d334215903",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "45afba0f-e08d-4a4b-aaa4-8f5470553f41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b4c8b60-29ad-4c7c-8c51-222e3ef4d3fc",
        "cursor": {
          "ref": "a088cc57-ee0b-4d53-b9ad-86175b9ac0d0",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "82ed52c4-11ae-4c57-ad1a-90b5f7c6f5ed"
        },
        "item": {
          "id": "1b4c8b60-29ad-4c7c-8c51-222e3ef4d3fc",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5723e77b-4917-472c-9e69-a16fa9a79cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38255a9e-3037-4a77-82e1-e6bbbb1d7732",
        "cursor": {
          "ref": "d1080b06-7e45-498f-a656-1a6bfe2d4a26",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f3c1d563-418f-4a25-b81e-220536e15fb7"
        },
        "item": {
          "id": "38255a9e-3037-4a77-82e1-e6bbbb1d7732",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3d9d66f0-9241-4b0b-b232-2d8f13397d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc129e6b-b953-45ef-9a5d-f9a81cf6494b",
        "cursor": {
          "ref": "a804f76f-975b-41b3-8f61-a643edae0b62",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7a57360b-5435-4c31-8a88-9a56fc39d384"
        },
        "item": {
          "id": "dc129e6b-b953-45ef-9a5d-f9a81cf6494b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "dc468161-93ce-42dc-bccb-23dabbf1231b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e98759cf-fa60-4a6b-93c9-201ccbc55aec",
        "cursor": {
          "ref": "1dc0033f-5f8f-4996-a183-e2443701372e",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ea44c2cf-8a40-42b5-b20c-afee1d9cb10c"
        },
        "item": {
          "id": "e98759cf-fa60-4a6b-93c9-201ccbc55aec",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7d5e949a-a4fd-4b3c-a329-3297edca7714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5415760e-9692-4447-98a7-0bab6c82b9bc",
        "cursor": {
          "ref": "88c6184e-28d0-461b-b311-aed94bd71349",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7d13c863-2d91-4547-bfdc-9c209126a3a2"
        },
        "item": {
          "id": "5415760e-9692-4447-98a7-0bab6c82b9bc",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "57993436-c895-4cb2-a954-a6def26c5a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4ece8b-37b3-4452-9ba5-c990c5ea2639",
        "cursor": {
          "ref": "890de45f-38ca-424b-8c4f-eaee2c351c0e",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d253c977-cc40-4ebc-9cca-2827fa143e5a"
        },
        "item": {
          "id": "cb4ece8b-37b3-4452-9ba5-c990c5ea2639",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "dc4e02bb-2e0b-4723-8fe5-b9a6040edab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6774869d-9873-4964-88c6-01682fcdd673",
        "cursor": {
          "ref": "2bd0508c-640b-48a9-af49-b9fd4e44eeda",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "49d71874-974f-4cd3-9eb2-84497d6040d3"
        },
        "item": {
          "id": "6774869d-9873-4964-88c6-01682fcdd673",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b3653d09-5238-4ec1-adc9-9974b317e572",
          "status": "Created",
          "code": 201,
          "responseTime": 531,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d9340265-75c6-4312-b4a4-badceeaf80ba",
        "cursor": {
          "ref": "621603cb-87c4-47c4-b9fb-44eeb88e25de",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9c67b680-bdc4-4238-9531-cc10e5eff44e"
        },
        "item": {
          "id": "d9340265-75c6-4312-b4a4-badceeaf80ba",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b6577a60-1441-4da2-a874-2e29a8a06248",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "d7f3a418-d39b-4de9-bf25-e068bc13fc90",
        "cursor": {
          "ref": "8ead3fd9-032b-4b12-a610-b91402c9e363",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "62e919e5-ba28-46a9-aa32-db5f0c8367bc"
        },
        "item": {
          "id": "d7f3a418-d39b-4de9-bf25-e068bc13fc90",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f7b5b6c6-1b44-4314-88df-0dd41751279d",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "6e8f996c-0dd0-47c1-a639-5b2cb469f739",
        "cursor": {
          "ref": "ded2f322-5b58-41db-975b-cc6a4d93798d",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0f3f78f8-218f-4fe0-a3e9-cf7fa20bd9d7"
        },
        "item": {
          "id": "6e8f996c-0dd0-47c1-a639-5b2cb469f739",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ba8eeb9f-cadb-4da3-a2ba-2d56dcb1e34f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c469e5bd-ee06-4cbc-bfa4-1de39cbf2160",
        "cursor": {
          "ref": "ed9a2993-8c2b-4acd-9b7d-731624c77988",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "16a8381a-42ef-46f6-8756-38196d8fa93a"
        },
        "item": {
          "id": "c469e5bd-ee06-4cbc-bfa4-1de39cbf2160",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c1cc5d34-a188-4b90-876e-2b92ac8c0862",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9456b480-0c23-4f3a-a315-9d9f166fae75",
        "cursor": {
          "ref": "e924bb4c-480b-45ee-b1d4-001ed8d3e33b",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8d818f55-2955-430a-a584-b662f8f8f6b5"
        },
        "item": {
          "id": "9456b480-0c23-4f3a-a315-9d9f166fae75",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4041d9bb-7f80-499f-aa20-cb416b04c188",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6291330c-a45a-4d70-8499-00b418cdfc70",
        "cursor": {
          "ref": "e8d08c01-b4bc-490f-9c92-889ef35fce87",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e519a508-e51c-42e8-826b-5c25fae3a631"
        },
        "item": {
          "id": "6291330c-a45a-4d70-8499-00b418cdfc70",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b873ed5b-7133-4eea-8314-c9fba66291d6",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0b50cacb-d04f-46c0-8050-b9961d7dc823",
        "cursor": {
          "ref": "d29c7ce9-872e-42bf-9af0-2f0ee0ea0051",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b6dd149b-a8d7-4c75-a712-f9f4d2955f94"
        },
        "item": {
          "id": "0b50cacb-d04f-46c0-8050-b9961d7dc823",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "231ad0c4-b83c-47fe-9220-208db998cb20",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "96345dad-67f1-4782-8894-dbca38cc8bae",
        "cursor": {
          "ref": "df9676ce-3de9-4d0a-9adb-5ed7c89b6283",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d001667a-5071-440a-810d-9e0a002c0b45"
        },
        "item": {
          "id": "96345dad-67f1-4782-8894-dbca38cc8bae",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a43b9b67-2914-4354-9eec-b75ad706a4cf",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3eaf2574-9998-40d3-8971-1108cac82272",
        "cursor": {
          "ref": "1071c409-e546-497e-9ca3-1ac2dc0e17f4",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a0cb52c1-8acf-4ba2-9ca4-32216e77af57"
        },
        "item": {
          "id": "3eaf2574-9998-40d3-8971-1108cac82272",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "751e992d-93bd-463a-ba23-114d60124394",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d7292ebc-8b87-41af-a80a-d03839917168",
        "cursor": {
          "ref": "27816119-b01f-44f7-ac70-db864fb97068",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "da6c2631-37f3-49d9-aa95-a67f1df360c0"
        },
        "item": {
          "id": "d7292ebc-8b87-41af-a80a-d03839917168",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ecdf1275-78d5-4dff-b44e-a012464a67dc",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "b9ac51e6-cb66-41af-b7c0-181302b40067",
        "cursor": {
          "ref": "2fe0d5aa-62be-4642-ac46-6784e5d3931a",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "201c42bb-5312-4858-a789-bd13d7497fc6"
        },
        "item": {
          "id": "b9ac51e6-cb66-41af-b7c0-181302b40067",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "991d9580-75c5-4da9-9460-0bb060d5f400",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9c435566-a206-46b9-a61d-65a3e357cd32",
        "cursor": {
          "ref": "81eff2e9-459d-44f2-99c2-3ed03cc44fbb",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "781d0586-afed-4bee-b3ba-f49d9e4003e5"
        },
        "item": {
          "id": "9c435566-a206-46b9-a61d-65a3e357cd32",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4fc9f871-2a0a-4be4-a0b2-9cb10888b788",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "efe17afc-5bf0-4f7f-b85d-47cc03020c26",
        "cursor": {
          "ref": "b4a61dca-85e2-431c-95b9-a25cd2e45be4",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6a472ea0-cd9a-44f0-a82a-315c80dca557"
        },
        "item": {
          "id": "efe17afc-5bf0-4f7f-b85d-47cc03020c26",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3d9e3220-a084-4e03-ab4a-f60bec894a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14275178-2097-4382-8b27-d66e49e73421",
        "cursor": {
          "ref": "625a87e0-9a8b-4c9e-8fed-ff7de6c696e7",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b5602104-6e39-4926-b881-270db91f53f6"
        },
        "item": {
          "id": "14275178-2097-4382-8b27-d66e49e73421",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "98ba3ddb-9a75-4167-aeea-22310afde4e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a155825-58c6-45c4-836d-a94908635370",
        "cursor": {
          "ref": "e6770820-6cee-442d-b888-666b6479fdb1",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d1dc79d8-85e8-4594-a809-0b74a37cd985"
        },
        "item": {
          "id": "8a155825-58c6-45c4-836d-a94908635370",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "574468b0-b4ee-4ee2-81e6-0b2b7ef67082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5115030c-096d-4629-961f-d8ae5a6f159a",
        "cursor": {
          "ref": "6bc1d06e-357c-45bc-a18e-8e4096c51074",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0b456bda-f790-4464-8e96-afebe3cfe39c"
        },
        "item": {
          "id": "5115030c-096d-4629-961f-d8ae5a6f159a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "eadb6708-396c-46ba-b784-e3bdf7f3627c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf67de8-924f-4b79-b19c-90071c017c18",
        "cursor": {
          "ref": "d4f0522a-ba97-43bf-842a-ef2bfc2a95f7",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8a08d6a1-10d4-4b24-9302-cf7e6f2c3733"
        },
        "item": {
          "id": "edf67de8-924f-4b79-b19c-90071c017c18",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "0f8065f2-422f-4f68-8598-70ee6edadb51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8f8b06-8a4c-4a45-b1be-6fca2c67ea70",
        "cursor": {
          "ref": "f1e11f2b-72ce-4c3a-8401-1a5abfabcdd1",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "54ee1c93-ab68-4942-97e4-5e2a3034b15a"
        },
        "item": {
          "id": "af8f8b06-8a4c-4a45-b1be-6fca2c67ea70",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "dd9c1111-16ad-445a-bdef-1391181e2bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de233937-5d87-4264-a20b-57012ad327fa",
        "cursor": {
          "ref": "52b504a8-6aa6-44e5-b146-d8ccd8794eb8",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b6278360-ffe6-4187-b1bb-092c8a06190f"
        },
        "item": {
          "id": "de233937-5d87-4264-a20b-57012ad327fa",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9c0a55d8-40e5-4b3c-834f-d5d03c976a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65dcc026-db70-4d2d-b3cf-e332de819e5b",
        "cursor": {
          "ref": "4db6d072-9df2-4a4d-b676-875e722bf39a",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "37094b3d-550b-454e-b455-bfa4327cb961"
        },
        "item": {
          "id": "65dcc026-db70-4d2d-b3cf-e332de819e5b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3d5365b8-2f04-4015-8b83-b4839c6c607d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef97c32-6901-4f47-8459-c12d154aea47",
        "cursor": {
          "ref": "387183db-e3e7-42a1-9edb-0b737987c4ea",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "42c60726-fa67-4982-9029-798e9d442a7c"
        },
        "item": {
          "id": "1ef97c32-6901-4f47-8459-c12d154aea47",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "74044d30-5c04-4e0b-9069-aa8d2970229e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dda9a9c9-deca-4ba6-b3ad-d5d032148f7a",
        "cursor": {
          "ref": "95920334-e5bc-4821-b336-a8715941b056",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "40dd7080-f7e0-4b8a-abcf-1ad8439219ae"
        },
        "item": {
          "id": "dda9a9c9-deca-4ba6-b3ad-d5d032148f7a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "32adc327-1206-41b3-b26a-036564826e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f311937a-786b-453b-b7c8-1b4397ffbc51",
        "cursor": {
          "ref": "d2580589-ce2b-4396-9493-20455e5db77b",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b5c49ac9-bd34-4f62-9990-75a3bb5a14b3"
        },
        "item": {
          "id": "f311937a-786b-453b-b7c8-1b4397ffbc51",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "69960b90-144c-4096-847a-6dc561a9f46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beabc78d-3bfb-4682-ab23-f3f338cfae50",
        "cursor": {
          "ref": "7544b331-b2d6-4250-808b-0e8ee012ae3b",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "72f0dcdc-ddec-456b-b69e-f65c0585af94"
        },
        "item": {
          "id": "beabc78d-3bfb-4682-ab23-f3f338cfae50",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4b4d62c8-e191-4b26-b42c-595ad466d2db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b677bb6b-7f1c-4922-b86f-2a5b5bd855a1",
        "cursor": {
          "ref": "6ba56327-431f-4c29-ba18-76ac7142b586",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "be783bcd-71f4-4321-8c0e-33721875e713"
        },
        "item": {
          "id": "b677bb6b-7f1c-4922-b86f-2a5b5bd855a1",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a5672a6f-ff47-4a75-b885-d022ddcae875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdbc31f6-c911-4366-9bae-e2ecdc1156a2",
        "cursor": {
          "ref": "12bc3aed-2b6b-4463-8990-32a2f9628e38",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b3536f2b-d36e-46d8-ac21-0da56497b342"
        },
        "item": {
          "id": "bdbc31f6-c911-4366-9bae-e2ecdc1156a2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "791ffb99-6572-4fe7-88ab-d3177b707d26",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "1a7a7b59-34ef-46ab-b425-5a85f6ce2905",
        "cursor": {
          "ref": "ece0e751-ca16-4548-9920-b450401aa67d",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "caab49d9-6a4f-4e59-8f54-f60f47e0c4ee"
        },
        "item": {
          "id": "1a7a7b59-34ef-46ab-b425-5a85f6ce2905",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e0d23635-ea9c-434d-b2e3-5a28d1a19983",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "0fc9390f-712a-4ad2-8da4-f65aa7a8be8c",
        "cursor": {
          "ref": "3b97e5b3-345f-49e7-aedd-e58a15f205bb",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ac886388-a4be-4878-9280-59ef00c4a826"
        },
        "item": {
          "id": "0fc9390f-712a-4ad2-8da4-f65aa7a8be8c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d5e133af-b53b-4fc6-9040-c7bcea181316",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1f2d7fd0-05a1-4176-a372-03e536b72c58",
        "cursor": {
          "ref": "3689b878-c1bb-43e2-a418-0b52deb35295",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b3a843c0-5b07-48ce-a338-447b49d3a4ba"
        },
        "item": {
          "id": "1f2d7fd0-05a1-4176-a372-03e536b72c58",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9796eee6-e966-450d-a5f8-1b2b2442c7f1",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "4d6485a3-b8cb-4c95-b042-19cf1d75aef1",
        "cursor": {
          "ref": "377164af-3f88-4bd2-88b8-effc8e57e240",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "25f9e4b1-6dce-42a4-83e8-44e20396ed65"
        },
        "item": {
          "id": "4d6485a3-b8cb-4c95-b042-19cf1d75aef1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6f6d054f-af94-4be9-9e06-7b5ef633b9be",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "6c51bd02-171c-445f-b79e-ab0eb4f62b1d",
        "cursor": {
          "ref": "0cfc4f81-2129-4aca-9d27-f86700bdacbf",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "dd9b309d-1c97-4a74-853c-c73dd0c1bca7"
        },
        "item": {
          "id": "6c51bd02-171c-445f-b79e-ab0eb4f62b1d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1b90aa06-9d9a-4557-a926-f77df24c48e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8b7038-d31c-4cc2-be1c-a2fe185526e4",
        "cursor": {
          "ref": "42a7a936-d5e1-4dce-a9bc-0643fa0bd9fe",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5abfce34-8060-4af7-8052-f74aeb42fd97"
        },
        "item": {
          "id": "7f8b7038-d31c-4cc2-be1c-a2fe185526e4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fea731d2-bb67-4bae-81cd-e7fc366c2ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a599aa55-8f28-4727-ab2b-43a622b82a9b",
        "cursor": {
          "ref": "5a92db2f-1d37-48b2-9d8d-1053ee973516",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "402052b0-f06b-44b9-b3ae-228ee95cd510"
        },
        "item": {
          "id": "a599aa55-8f28-4727-ab2b-43a622b82a9b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a09509e8-415b-4d33-81e6-d3cce586ef24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a33b5a-eeeb-44f3-bcea-b678c2bba0c3",
        "cursor": {
          "ref": "4bcaecff-3869-4015-9dda-b5512f61268d",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7772446d-0344-477e-996e-72e96e79068e"
        },
        "item": {
          "id": "64a33b5a-eeeb-44f3-bcea-b678c2bba0c3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d1095aea-26d3-457d-9444-703fc4ba66c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c083a0c-bb8c-4952-b4ba-079af4133d8a",
        "cursor": {
          "ref": "c528ec18-a76a-412e-a61f-0b4b7ab82a70",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f2ffef46-795e-4967-b632-5f5b71325123"
        },
        "item": {
          "id": "4c083a0c-bb8c-4952-b4ba-079af4133d8a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2b188a16-c071-425a-96e5-b6fb8eb7a336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62215e29-7817-41f2-a348-fe8cb2a09425",
        "cursor": {
          "ref": "63d9c945-2dec-4d8c-87f9-66f4c4b04cbf",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3d2c6634-5544-4dea-af3a-eb4c8e481a45"
        },
        "item": {
          "id": "62215e29-7817-41f2-a348-fe8cb2a09425",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8014f12f-8b42-47a2-864f-5c0cfd157c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7619493-f4ee-41c4-89ed-641f01467cb6",
        "cursor": {
          "ref": "caa5f57a-9b3c-4864-9315-5921e0990fdf",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "17402132-7d32-44a0-942a-f1449065dee0"
        },
        "item": {
          "id": "e7619493-f4ee-41c4-89ed-641f01467cb6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "09e6c461-89bc-4fc0-9b87-4bae18127acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8aa7a01-630d-4d20-b0c1-d538d062709d",
        "cursor": {
          "ref": "6d6cd633-8514-403a-887a-de890e9db164",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a101587d-8cb7-4c8c-999e-f5594acbda18"
        },
        "item": {
          "id": "c8aa7a01-630d-4d20-b0c1-d538d062709d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "13b0e9c1-0f19-469a-ad4b-104140c6780d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6899de2-323e-419b-8874-22821eac0e43",
        "cursor": {
          "ref": "bba89e7a-fa98-4d89-b653-b8f2ebbef931",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4b888581-5bbd-4d76-a7b6-0e621d84a094"
        },
        "item": {
          "id": "b6899de2-323e-419b-8874-22821eac0e43",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7a12a6c2-bd75-4fcf-ba09-6d4fa9aa1d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c387fa5-add0-487f-b4ba-74fca9b80291",
        "cursor": {
          "ref": "9add608a-bfa6-4384-8edf-90924d7f89f0",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "204d1ebb-b863-4e9f-8db3-99554b6fa6d6"
        },
        "item": {
          "id": "0c387fa5-add0-487f-b4ba-74fca9b80291",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8fcfb090-6549-46ca-9c20-4ad6144687c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca96b809-08d9-4a68-8308-6a8e4d44bef6",
        "cursor": {
          "ref": "2fd0f613-b011-455c-860a-c3ca82ed2849",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "af0e943e-7db8-4ffa-893d-c3fb6d6bdc2b"
        },
        "item": {
          "id": "ca96b809-08d9-4a68-8308-6a8e4d44bef6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "bfe36c76-92b5-4e5f-930b-8fe3c74ed487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad781d2-9580-457b-8b23-10401ecb1f33",
        "cursor": {
          "ref": "ec3cbd98-4e82-4825-b234-cf20bcbd985a",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "020104da-cc45-48d5-ba7f-0f3ccafa6f31"
        },
        "item": {
          "id": "0ad781d2-9580-457b-8b23-10401ecb1f33",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1ee520bf-335c-43f9-abf7-cbb56c3ae01d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10b9bdd-e76e-4f6f-bc03-99eb3a75e152",
        "cursor": {
          "ref": "fb8729f4-0c9c-4c3a-ada8-273e12346de2",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "257399d3-e318-4f67-94c5-27b4ea515234"
        },
        "item": {
          "id": "f10b9bdd-e76e-4f6f-bc03-99eb3a75e152",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0efcfbaa-411e-4421-a220-adaa475c7b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3faf3fe-4538-4d89-8572-f63b692ce35a",
        "cursor": {
          "ref": "02abb0a7-db1e-40eb-82fd-708135f8a391",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b70b9a9d-e06f-4c44-b1fb-dd1ffe2662c7"
        },
        "item": {
          "id": "d3faf3fe-4538-4d89-8572-f63b692ce35a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "95b6c9a6-763b-4524-9ff8-bedf24e1f3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e36774e6-cd10-4391-945a-8f97f0239fd5",
        "cursor": {
          "ref": "10cbfc68-9688-4104-bb13-aa05c0435de6",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c35a6922-e475-4792-b5f9-0f068efd9c2c"
        },
        "item": {
          "id": "e36774e6-cd10-4391-945a-8f97f0239fd5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bde1ba44-4f7b-4c4f-8d57-781da646a37d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd508f9-9290-4d59-8531-6318cfe1c69d",
        "cursor": {
          "ref": "a9721843-937c-4fc7-850d-fc97c3d85359",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9f9f5192-65dd-41f2-a7fc-f945b9adc0ce"
        },
        "item": {
          "id": "ecd508f9-9290-4d59-8531-6318cfe1c69d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9a155123-d56e-4650-9cbf-d842a245aa08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5406449-bfcc-4728-ab08-625f2b3afbc1",
        "cursor": {
          "ref": "17847b94-0b74-4bbf-a9b8-04cdd1c6b331",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "eb904bce-494e-4530-8f61-7f8ec45c5023"
        },
        "item": {
          "id": "a5406449-bfcc-4728-ab08-625f2b3afbc1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "15a51365-3140-4c10-a608-9b3a90614182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289bbc9b-f2d0-4e56-ab08-950683525499",
        "cursor": {
          "ref": "643b4547-6793-415c-9aa1-313ab268e3b8",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2e8ff6a4-21d1-4c1e-9b00-ac049396fe7d"
        },
        "item": {
          "id": "289bbc9b-f2d0-4e56-ab08-950683525499",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "570199b8-f1ed-45f4-b16b-cece2dd164d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f703d4f1-5973-48a3-9192-4477daf67ab2",
        "cursor": {
          "ref": "f7cb7434-3f2f-4442-bcc6-965ef7ee2a21",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4d96a9b5-6bae-41ac-9d82-ca8c622a0adf"
        },
        "item": {
          "id": "f703d4f1-5973-48a3-9192-4477daf67ab2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b61e5369-fc49-4f35-85c2-4f4a54fb0db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2b8885-8bd7-41af-9fbd-a2356b3658d8",
        "cursor": {
          "ref": "1dc1eb7d-973c-425a-b31e-db00ab750e1f",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5438078f-c730-4710-81dd-7d5987439d3a"
        },
        "item": {
          "id": "6d2b8885-8bd7-41af-9fbd-a2356b3658d8",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5ee211a9-84b3-4e76-b6fa-ea169b315135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f536d6-850a-4d72-a90b-81cceec8047d",
        "cursor": {
          "ref": "28eaa103-f9dc-46a1-ba32-a01a361928de",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7583e24f-3745-49f7-aa56-474a07f423a3"
        },
        "item": {
          "id": "30f536d6-850a-4d72-a90b-81cceec8047d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "46ac7ad6-7ca6-4c47-8577-91763fc1b349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12006e4a-cea9-43ea-a32f-adfc8c6f0153",
        "cursor": {
          "ref": "8a4ee1bb-b6fb-46f4-998e-6e2c173ab3f6",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9e407216-e365-42f7-91f3-85fdc6b4fdd1"
        },
        "item": {
          "id": "12006e4a-cea9-43ea-a32f-adfc8c6f0153",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9e60a616-153a-43c9-9979-f43f313d8b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c0fe30-49e5-463a-8a8b-6b3ea71d5ce0",
        "cursor": {
          "ref": "376b31ac-c357-448e-8e7c-2a0f8fab8f50",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "09190737-780c-4f0f-94c7-b77a296e3612"
        },
        "item": {
          "id": "14c0fe30-49e5-463a-8a8b-6b3ea71d5ce0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "310af52d-91a6-4165-b350-944d0509bf81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "908c3f86-294d-4434-84f1-d89064d18cbb",
        "cursor": {
          "ref": "4d952186-e9e8-4fab-a5aa-c140b71d4802",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "28030b24-229e-40be-a60f-cc33bd0327d1"
        },
        "item": {
          "id": "908c3f86-294d-4434-84f1-d89064d18cbb",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "96e4a17a-fd03-4b64-86be-0e76843e0433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488cd5ed-3fab-4fe4-9aa5-5fb73d54b18a",
        "cursor": {
          "ref": "1645b377-e860-4bc2-a0b3-34458f86fea4",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f452409e-9bc0-47c7-be62-0f4869e7af3c"
        },
        "item": {
          "id": "488cd5ed-3fab-4fe4-9aa5-5fb73d54b18a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "882de878-6597-440d-852c-8727cac363cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb14108-1f70-46f3-86dd-28130fd06292",
        "cursor": {
          "ref": "b729ba02-efd8-4f18-9982-76c46f7cd6a2",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "16859ec4-26d0-4625-bdfd-b349b8c52220"
        },
        "item": {
          "id": "1eb14108-1f70-46f3-86dd-28130fd06292",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c8045be0-e089-47c1-a5c5-f6dbe99116f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e051d877-4c12-4195-848e-855889d6f341",
        "cursor": {
          "ref": "927cbe41-9449-4b91-82f2-6e7b3ea4b6c2",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "68ae4c9e-193c-44a4-825a-b936902269e3"
        },
        "item": {
          "id": "e051d877-4c12-4195-848e-855889d6f341",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5d580bb0-64a2-46d5-919e-0f3cf8481a8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c977961-771c-4657-b4dd-ce7ee66d3474",
        "cursor": {
          "ref": "79d276b8-650d-40ad-9144-b09739cef5a8",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3b367481-155d-4d7d-acf5-36c876fff78d"
        },
        "item": {
          "id": "6c977961-771c-4657-b4dd-ce7ee66d3474",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9f7ca93f-ab9e-4e9d-af76-bfbe475fff13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103f6ea0-0438-4d3c-8792-3ba7fc3adb88",
        "cursor": {
          "ref": "b91579cb-a561-4d26-be35-559214570200",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "66d42a2b-0370-43d8-8897-5b59f8270d30"
        },
        "item": {
          "id": "103f6ea0-0438-4d3c-8792-3ba7fc3adb88",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f6ecadfa-3894-40f6-bfdc-3dc8fc3f23ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c95f19-0c03-4076-a00c-589845cd8d18",
        "cursor": {
          "ref": "d1a73190-5557-4131-883b-ec0b719eb404",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "95a9a94f-08bc-4675-b973-6fff14526b7b"
        },
        "item": {
          "id": "d3c95f19-0c03-4076-a00c-589845cd8d18",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "30eb6a30-a615-4331-be6c-c8b945f44b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a0cb92-9cc2-480a-ad21-966748b3469e",
        "cursor": {
          "ref": "f6a7594b-729f-423d-9bc7-0409da4b6c1e",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8f69ff5e-5e70-4eaa-8004-e6d496612353"
        },
        "item": {
          "id": "46a0cb92-9cc2-480a-ad21-966748b3469e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "db230041-538a-43e4-b31c-f980860cece0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573f813b-a648-4322-98f7-76ddd90d88f8",
        "cursor": {
          "ref": "87b2056f-6647-4b8a-b7a3-41da6a2bcb34",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d4ab3c66-86af-4b4d-b442-f3add2fd0edb"
        },
        "item": {
          "id": "573f813b-a648-4322-98f7-76ddd90d88f8",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0855a2a2-617c-48d9-bf7b-928f6d9f1a3b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33398165-96f6-4e76-b751-bed30b79a22b",
        "cursor": {
          "ref": "77ebfadc-dacb-4f2f-b23c-0951bb127119",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "146b81f4-e1fe-48f5-a6d6-84d060d8e86f"
        },
        "item": {
          "id": "33398165-96f6-4e76-b751-bed30b79a22b",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "828af7ae-30be-464e-8cf1-9feb207466ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "0f9f7d96-3e52-42b2-b21a-e53fd4ad67de",
        "cursor": {
          "ref": "233faec9-578e-4d2e-9c9e-32bebc7ce42a",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "35278369-0142-4dce-a644-9874ee992570"
        },
        "item": {
          "id": "0f9f7d96-3e52-42b2-b21a-e53fd4ad67de",
          "name": "credentials_issue"
        },
        "response": {
          "id": "33126152-5eed-4b55-9d26-f15acc74283c",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa982c2d-f7e5-42b7-be68-d8c5f7542781",
        "cursor": {
          "ref": "5a46d0b4-f5ef-40ce-9331-55fe522852e1",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c0c838ef-87c0-459d-87d4-e138d38bb32d"
        },
        "item": {
          "id": "fa982c2d-f7e5-42b7-be68-d8c5f7542781",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ca85fad7-007d-4029-b1bb-e9d21e20f13e",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "57aeada2-7fbf-4b87-ab57-e92f1d0d788d",
        "cursor": {
          "ref": "a0539083-42ac-4d92-9312-506a7884200b",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a3068873-0d7c-4725-83c0-04bb6d711d69"
        },
        "item": {
          "id": "57aeada2-7fbf-4b87-ab57-e92f1d0d788d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f41c7e47-ce9d-4eb4-b60b-758e8584fba6",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d28dffa4-e47b-4e2f-bfcf-ffb811cba869",
        "cursor": {
          "ref": "3dc1c3c4-a3c5-44da-b493-01bb02e72894",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "21a05750-192e-4492-9c21-914e21280582"
        },
        "item": {
          "id": "d28dffa4-e47b-4e2f-bfcf-ffb811cba869",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c70cb42a-217e-4f3e-b7bb-53e28168c066",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e0af2f8-8146-4306-970f-ff94a296f5f5",
        "cursor": {
          "ref": "40d1bc09-3786-4d4a-8135-bb5128d5e176",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "28703f77-33b2-4f7b-814a-da96e10f8c87"
        },
        "item": {
          "id": "1e0af2f8-8146-4306-970f-ff94a296f5f5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "65dd090d-4e2e-4f3b-b0e9-66eda70e8158",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-26T00:35:53.863Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-26T00:35:53.863Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b2941636-0593-40c7-9b32-0a810406ac84",
        "cursor": {
          "ref": "49eff7f5-8e45-4913-aefc-e0130dd9764d",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b15bd063-e301-477e-bbe1-d09e12412190"
        },
        "item": {
          "id": "b2941636-0593-40c7-9b32-0a810406ac84",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4a68100c-9de6-4705-a686-11f6251852ba",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f14c8cf-c27e-48ef-9c67-c7d932fb4336",
        "cursor": {
          "ref": "049cb8c1-45e6-4bdf-bdd7-97a9caed99ff",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3540347c-32b1-4271-b62c-7a49325e4d0d"
        },
        "item": {
          "id": "0f14c8cf-c27e-48ef-9c67-c7d932fb4336",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "49ed3dac-7441-44f7-aa46-8ff0663b4ed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3755aa1-eebe-42eb-a32d-0dd3c62f9270",
        "cursor": {
          "ref": "cbb9367b-4dec-4634-9a66-86a5fb382408",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f4e06aed-1871-4911-a820-0f2f91f9db9e"
        },
        "item": {
          "id": "b3755aa1-eebe-42eb-a32d-0dd3c62f9270",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4dfe63eb-ca42-445f-84aa-2a70f20076f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933c57bc-fb45-414d-8b93-b6258aa3198b",
        "cursor": {
          "ref": "a88f31a5-c6e0-4737-9845-ae2073e1a44d",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "584baede-1d7e-4cfa-8ee5-2580c259453c"
        },
        "item": {
          "id": "933c57bc-fb45-414d-8b93-b6258aa3198b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "dfdc1b00-c087-422d-bbf5-cca898f015d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ab1dcf-22c4-4f65-9985-db18b07bac7e",
        "cursor": {
          "ref": "94bad7d8-5ea1-4788-b14c-aae173aab891",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0d3ffae4-e00a-4d11-a5df-d4007b2e1f30"
        },
        "item": {
          "id": "71ab1dcf-22c4-4f65-9985-db18b07bac7e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6ca54a8d-efc1-4435-bd9d-1cc3435a5fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b53b974-130d-410d-83cd-d64cba1e2b32",
        "cursor": {
          "ref": "ed9a421a-9213-4f15-96dc-db48ed6bab7e",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "18024c21-069a-4ade-9542-cb0208679f7a"
        },
        "item": {
          "id": "9b53b974-130d-410d-83cd-d64cba1e2b32",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2580f223-45f2-4bd6-9a95-654ae49c7e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72efb29d-303e-4445-9002-93f86fb39078",
        "cursor": {
          "ref": "bfe90130-974c-487e-a1ce-aabb75963b86",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "cc3f4559-e100-4a1b-9fcb-e510c157fa1f"
        },
        "item": {
          "id": "72efb29d-303e-4445-9002-93f86fb39078",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8b719f98-4496-4be8-b100-805cd0b01650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603d35f6-a10b-48a5-b60d-b029a6c72fae",
        "cursor": {
          "ref": "391a0a15-3bc8-4d9a-b406-b8e8a7cc4b23",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "89061696-a9c8-4cde-a921-34796e4e352b"
        },
        "item": {
          "id": "603d35f6-a10b-48a5-b60d-b029a6c72fae",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5bc7439c-55da-4d74-9bda-f11934e191e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a948eba9-e568-4e10-aee8-bda5e92103e0",
        "cursor": {
          "ref": "8133b4cf-7d32-4e42-a1fb-1129538c5d93",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "16546f70-fce4-4986-8026-b0810e5240d8"
        },
        "item": {
          "id": "a948eba9-e568-4e10-aee8-bda5e92103e0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e6702c3e-284b-4ae6-99cc-94ad441e77cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff0fab2-acf5-4e24-89c3-13d5dce7974c",
        "cursor": {
          "ref": "f0a6a891-8207-4fdd-93ca-a87e58cd4802",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "75583f3b-55b1-4a7d-a449-e508d5a715da"
        },
        "item": {
          "id": "dff0fab2-acf5-4e24-89c3-13d5dce7974c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "cf580538-1c0e-44af-8d05-95779d3f0518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e261ccd2-ee7c-4bf3-8bfe-fa0fe8945f64",
        "cursor": {
          "ref": "ac1a65a0-a535-4c06-b1bf-5195f57aee6d",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7cc1a4b3-b180-4e34-9a3c-a6cf2a5f2c08"
        },
        "item": {
          "id": "e261ccd2-ee7c-4bf3-8bfe-fa0fe8945f64",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "10af2c2d-c931-4c20-b3d8-94a891594187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550d5c55-f53f-4a99-8c83-c85b4d5fd721",
        "cursor": {
          "ref": "1c0330d8-55d3-403d-830a-4df38c5d40f1",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "adbbdb67-a6ab-458a-9bf9-9808ceb9af9c"
        },
        "item": {
          "id": "550d5c55-f53f-4a99-8c83-c85b4d5fd721",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a21af173-0274-4f40-a18b-e13f396920b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "002a9ddf-9857-4f38-a82a-f937fce57d5c",
        "cursor": {
          "ref": "ff322429-2da1-448a-a7a1-c6961946da20",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1b65c38a-2de1-4f7b-bfaa-911ddb1f9989"
        },
        "item": {
          "id": "002a9ddf-9857-4f38-a82a-f937fce57d5c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "db70b2eb-2877-482b-9ab4-01b167812d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d3b009-6dcc-4fdf-a80c-6fa52e5e5763",
        "cursor": {
          "ref": "8e993154-edcc-46dc-8851-668203bf25b4",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "fdc60fa3-688d-41aa-96b6-f05a5820ec90"
        },
        "item": {
          "id": "54d3b009-6dcc-4fdf-a80c-6fa52e5e5763",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d4011fab-508e-452c-bdde-6319f422d16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699f5615-8a23-48cf-8d77-3ca3ffeadad2",
        "cursor": {
          "ref": "898b7940-190b-4d9b-8d18-0e4f9f4b1607",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0ef0b3a7-d2bd-4f5a-9621-1261a6e354fb"
        },
        "item": {
          "id": "699f5615-8a23-48cf-8d77-3ca3ffeadad2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ec862fd0-1460-4f75-bdcf-a3a9760f1e2b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "7146f8ce-d964-408d-bd6c-398a3793aeec",
        "cursor": {
          "ref": "3b6ad091-8844-4917-859e-c5047dc8bd36",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "203812d4-31bd-464b-9301-7ba68356decf"
        },
        "item": {
          "id": "7146f8ce-d964-408d-bd6c-398a3793aeec",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "74705876-9cce-4801-aeda-20e49083507d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f2a0c7f-d7e9-4075-a9c4-bbd17ea12b50",
        "cursor": {
          "ref": "c4c4253c-c0ea-4545-bc83-647c59ee6c0e",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "51721905-ca4e-4b1a-94a2-2f384f6c4f88"
        },
        "item": {
          "id": "3f2a0c7f-d7e9-4075-a9c4-bbd17ea12b50",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4b213874-981e-4449-859c-93dd5c405a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5baeb7e5-2b4d-4da3-b101-b1abda357e7d",
        "cursor": {
          "ref": "82273155-5a2c-42af-8889-f85be509e259",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "50d711d4-dd58-42fc-908c-29d0e5650cef"
        },
        "item": {
          "id": "5baeb7e5-2b4d-4da3-b101-b1abda357e7d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "72c8a97c-0949-44bb-b309-2c118ac7142b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c909864-74f2-41ae-8101-f1dd41adc408",
        "cursor": {
          "ref": "baafb952-915b-4119-9d6d-f5370cd6dbb6",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "eb2f7e91-0127-478b-a56c-abf8b7689b3f"
        },
        "item": {
          "id": "7c909864-74f2-41ae-8101-f1dd41adc408",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "30e3988e-5691-46af-b9d2-f1e02a3e7d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39eacea-dde9-490e-b729-e224fb8f2822",
        "cursor": {
          "ref": "edf41d31-1751-4013-a754-af16d3b23a69",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c4cace7a-ddaf-4246-9fef-83a4baedc1a3"
        },
        "item": {
          "id": "f39eacea-dde9-490e-b729-e224fb8f2822",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3b1ffc15-bcfa-4335-bafd-626fae880ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a14452-3b63-4e44-99dc-983115541a9b",
        "cursor": {
          "ref": "e810a5cb-66f6-4150-808a-f78f0e847449",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a4e0a66c-ad69-4721-b6bb-e4baf974f542"
        },
        "item": {
          "id": "99a14452-3b63-4e44-99dc-983115541a9b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "057d4d5d-c36e-4254-b801-3ed4daf96a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f6d793-8f2c-4516-9503-869c80dbc244",
        "cursor": {
          "ref": "79941e6f-4f99-4c7b-9dc9-8624e6b27faa",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e39a1c30-c387-49da-b87d-514c32775364"
        },
        "item": {
          "id": "f8f6d793-8f2c-4516-9503-869c80dbc244",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a25144ca-e1cb-4ee1-94d8-2590069be5b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45fbf670-7ad1-4f10-992c-e9733324ffa0",
        "cursor": {
          "ref": "d8b8ed8c-1b98-460a-b097-b884e7fb87a3",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c629645f-4460-49f5-93d2-a74ae89d5784"
        },
        "item": {
          "id": "45fbf670-7ad1-4f10-992c-e9733324ffa0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6540ef88-7bc2-477d-90a2-389332bf8ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba6d737-9953-4444-a44e-875fcd3ceda8",
        "cursor": {
          "ref": "d5380815-6806-4b55-8b34-55cbb1a1cff6",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "bee45504-ab8f-48c2-a8d7-6c217ab72626"
        },
        "item": {
          "id": "4ba6d737-9953-4444-a44e-875fcd3ceda8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ba0928e2-8ab2-4848-8aa4-c6ec689dec08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec217e8-fd99-486f-a9de-facf58e4bf20",
        "cursor": {
          "ref": "db5fe43e-2dda-408e-a1ea-73bc20d21744",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "01d11364-67df-4402-89a6-2c72b439dd29"
        },
        "item": {
          "id": "5ec217e8-fd99-486f-a9de-facf58e4bf20",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "80c5cfdc-6f85-4743-9eb9-f946d7527e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7892106-6563-459c-9b00-8dd7cd7b6c3d",
        "cursor": {
          "ref": "820c5e38-45ec-4e49-bad8-de2bdf242d7d",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "08bb3ac8-1ced-4561-af91-b265aa99eac6"
        },
        "item": {
          "id": "b7892106-6563-459c-9b00-8dd7cd7b6c3d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f1e5fc87-d7e1-4614-9656-49539bc7076b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b72c9c-7e04-4efb-987e-8e351a0811e1",
        "cursor": {
          "ref": "8e9e7b17-d3f7-4580-ad1a-8c0bfb3b4d73",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9933d5d9-2a7e-421d-94a5-7077ad0c0fcb"
        },
        "item": {
          "id": "46b72c9c-7e04-4efb-987e-8e351a0811e1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e2406375-a4d7-4bd8-87bb-58a5a7f5c555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4d9ed3-c5fe-44f2-80fb-ebcec4cb29c2",
        "cursor": {
          "ref": "85a5e89a-db93-43cb-b2f2-f3fd87688e42",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "624f45f8-6c4a-4abc-826d-32c613e8e57d"
        },
        "item": {
          "id": "af4d9ed3-c5fe-44f2-80fb-ebcec4cb29c2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2cda1c32-89f9-46aa-84b7-0fb2537bcfad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10a292e-1f13-44f7-8ff8-d2c5ae07a035",
        "cursor": {
          "ref": "86021478-6921-479a-81f6-e49d2255b47b",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8dbcd498-ed28-4453-b6bc-3b72b1e4a27b"
        },
        "item": {
          "id": "c10a292e-1f13-44f7-8ff8-d2c5ae07a035",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "75000992-acad-4d8d-ae11-eb4958aabc7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709cd940-8d5d-4709-9cff-b266d984d181",
        "cursor": {
          "ref": "85858b87-7c2c-47da-be44-a57f445b32f4",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d3f59ea6-46ec-4e9b-b953-ef52d163bdd9"
        },
        "item": {
          "id": "709cd940-8d5d-4709-9cff-b266d984d181",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cb82d848-7df6-4914-92b5-f8af8d526f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5efec777-1b59-4290-aa7c-9f460c0eade5",
        "cursor": {
          "ref": "6b282abe-fa84-4cc3-8eb5-d6155dbed215",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7187db53-a747-4654-9b51-e830b683354c"
        },
        "item": {
          "id": "5efec777-1b59-4290-aa7c-9f460c0eade5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f162c0dd-d4fc-41f6-b643-7d969da21949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e757cb-6d8e-4ce3-a52c-29512d85b63c",
        "cursor": {
          "ref": "7a6add13-3b88-4d5a-b27e-8322dd6ab4a3",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "4f7c0b1a-9cd3-4258-ae40-2cb33a10fdb0"
        },
        "item": {
          "id": "c7e757cb-6d8e-4ce3-a52c-29512d85b63c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "bba8a438-1f9b-4299-90e7-a44b1b0b7710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b77f7ef-b62c-4ce4-b6bd-256e6e9ef151",
        "cursor": {
          "ref": "d0347cb8-0bd2-40f5-a4a9-cdde4d42a737",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5db5fcaa-487f-4df3-94b1-1dde1e342cec"
        },
        "item": {
          "id": "0b77f7ef-b62c-4ce4-b6bd-256e6e9ef151",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "1ffbd68e-b771-44ba-97f7-bb9a1f800f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "622bef5c-38ad-4a34-9ce0-7d641e449aab",
        "cursor": {
          "ref": "28aa6598-7690-4fe7-948b-1d59b6fcb2df",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8ca9318b-ace9-4e8c-9fd2-190b08aaa1ee"
        },
        "item": {
          "id": "622bef5c-38ad-4a34-9ce0-7d641e449aab",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "d9d0a1d5-22da-4ede-8be8-1e494c8af046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068d8677-7711-4518-a46a-5f59c04c1705",
        "cursor": {
          "ref": "92bbfca2-a2de-4653-a9ef-49fae1c93f13",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "fa6622f4-1c58-42a5-958c-df635f817c6a"
        },
        "item": {
          "id": "068d8677-7711-4518-a46a-5f59c04c1705",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "2c0ebcd8-47c2-45a2-b9a5-b0dd8afa7c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acec216d-7d7a-40f4-9e7d-7f5a843ada13",
        "cursor": {
          "ref": "927d0a81-0075-4cc2-abf4-c809cae1a58f",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "49cdfea2-061a-4163-aff1-6bd7d693485a"
        },
        "item": {
          "id": "acec216d-7d7a-40f4-9e7d-7f5a843ada13",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e2a415d6-d7ce-41e3-b83a-fb87c8a1df2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb6f513-9802-44cd-8a7b-899bac58e769",
        "cursor": {
          "ref": "f7d98857-e3ab-4882-aba7-db6f3962e636",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1a88e119-6444-488a-8ebc-e76094efe366"
        },
        "item": {
          "id": "fbb6f513-9802-44cd-8a7b-899bac58e769",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "0ca8c91a-302d-4c9b-8f90-ef973a9aa22d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98febb32-ce19-4915-925f-f593e02f8b26",
        "cursor": {
          "ref": "ff58c121-8c63-419c-89a3-7c664056add7",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "16f7956b-3c98-4523-a857-225b36efd762"
        },
        "item": {
          "id": "98febb32-ce19-4915-925f-f593e02f8b26",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "911e6304-3d8f-452d-a42b-a2bb3a361465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd18bea-aba0-4da1-85f1-a7452061eca0",
        "cursor": {
          "ref": "a9f68923-2b19-4e24-ba4d-dcdc5e594f14",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "817fa151-059e-49cd-b898-de7717f767a3"
        },
        "item": {
          "id": "dcd18bea-aba0-4da1-85f1-a7452061eca0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c9d0f498-bf8d-41f6-badf-5702890206bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7849b676-3405-48c0-acf3-361de3f4e7f6",
        "cursor": {
          "ref": "a2557298-4f00-4aa0-b457-818ff12eb24c",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "84e5118d-7856-46db-acf0-174ca348c249"
        },
        "item": {
          "id": "7849b676-3405-48c0-acf3-361de3f4e7f6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "12d8b2f5-a5b7-44d0-887d-4d7c06e300f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e130f36-e51f-400c-ab3e-548a46bedd45",
        "cursor": {
          "ref": "de47b297-c496-4ecb-8083-d72e97f1fd2a",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6e1b43a8-2231-4476-8fe5-8fcaa4b345ad"
        },
        "item": {
          "id": "4e130f36-e51f-400c-ab3e-548a46bedd45",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0e8d9fad-516a-4eda-9450-3f14ed8bda8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b5e0389-27c6-4407-86de-76bb4a851190",
        "cursor": {
          "ref": "bc638e0a-4c3e-44b5-8133-6198e9cf0c3b",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "cce36710-cad1-4674-a873-89e7c33d1e1f"
        },
        "item": {
          "id": "7b5e0389-27c6-4407-86de-76bb4a851190",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "adf10abb-e127-4087-9962-fcb151ec04a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3c3af2-edc5-4ac1-b389-f3a3b6f14f84",
        "cursor": {
          "ref": "06a585dd-7bd4-4814-ab8e-f5601c70b226",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4cd2a0f2-68d2-4460-bea3-c3c3e04c9d73"
        },
        "item": {
          "id": "5e3c3af2-edc5-4ac1-b389-f3a3b6f14f84",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4dbe8c56-ada5-45f4-b852-4a331b1784ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5e486b-234a-4ae0-a46b-2378dec9a379",
        "cursor": {
          "ref": "4edbb137-987d-4f59-bcf3-0f84a81a8d39",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "bce8a90f-ead5-4ddf-a818-1a8489fb2aaf"
        },
        "item": {
          "id": "8e5e486b-234a-4ae0-a46b-2378dec9a379",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1db2b9a0-b7ba-48f1-8963-f8a13db8fcf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1101f565-a258-4f64-b0f7-5124df3d6833",
        "cursor": {
          "ref": "c77e9591-ca84-4041-9cb7-db64e02b40e9",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5c940909-72d4-46f4-a3af-b26893688593"
        },
        "item": {
          "id": "1101f565-a258-4f64-b0f7-5124df3d6833",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7069ea6e-1c89-4f4f-86a0-ead0ac6d6c5c",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "70a563e7-ce87-43e8-8ce9-29fc9d2f89f2",
        "cursor": {
          "ref": "6c4c5206-e9e9-419c-b949-d38560b64eb6",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6393da7f-64dc-4ff7-aa30-9afa374993f3"
        },
        "item": {
          "id": "70a563e7-ce87-43e8-8ce9-29fc9d2f89f2",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "45b0d7d2-1143-41ff-824e-b4cf5b8f68b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6157ca-62ee-46d8-882d-4549474fe433",
        "cursor": {
          "ref": "509599af-d11d-4982-a335-ea0f3c0900aa",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "863df56c-48bf-4f0e-8dd3-bb2bdd5e8f1b"
        },
        "item": {
          "id": "ba6157ca-62ee-46d8-882d-4549474fe433",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0e59d2cb-f663-4685-bf77-bcf5f763ae8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a104fa3-7f6b-436b-8054-e6c800f0de38",
        "cursor": {
          "ref": "b1748a36-8fa9-4f9f-b6fd-d5fdac924273",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "66974f5e-f12b-4f31-a658-cb15064e1a6d"
        },
        "item": {
          "id": "9a104fa3-7f6b-436b-8054-e6c800f0de38",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b29476a1-515b-4034-8610-7fd28938d9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f6b2fd-54de-4141-8fc2-9c95787bcd31",
        "cursor": {
          "ref": "5a659cc2-c3ac-499a-a515-5e341e4d255b",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "063537c0-2584-4c27-af5a-86f89513d317"
        },
        "item": {
          "id": "14f6b2fd-54de-4141-8fc2-9c95787bcd31",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "26518784-627a-4080-b9e9-f5624a3b1b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07bf1a2f-ca22-4f2e-b25b-99f151880db7",
        "cursor": {
          "ref": "74e8a027-df86-4d2f-bc90-750efc61b16a",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "be6af473-cf56-42d4-9f34-72506c80d019"
        },
        "item": {
          "id": "07bf1a2f-ca22-4f2e-b25b-99f151880db7",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5775399a-e82c-4c41-86cf-24a730d8e694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94fb5d6-9df1-403e-8905-bd9d4818683d",
        "cursor": {
          "ref": "73c0ece5-14bd-4e6a-a88c-f8e6bfea5650",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e4cdaa78-388c-4409-8aac-dd8627af566b"
        },
        "item": {
          "id": "b94fb5d6-9df1-403e-8905-bd9d4818683d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3c590703-66d3-4346-915d-40817c19949f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c05b75-9361-4246-8a49-1090b3352b13",
        "cursor": {
          "ref": "e843c264-d477-4c1e-ae87-75c86b589732",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "adf603c6-6a63-4ea3-a83a-55631da33420"
        },
        "item": {
          "id": "d7c05b75-9361-4246-8a49-1090b3352b13",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "003b9b7d-fa5c-485f-9af9-53c887b51177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff46a80-3119-4faf-995f-0d3bc162d968",
        "cursor": {
          "ref": "18d87500-b43a-44a1-85e2-e3e28e710bfa",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d88c6500-f6f8-4fa2-98c5-7f37ce52d2d9"
        },
        "item": {
          "id": "7ff46a80-3119-4faf-995f-0d3bc162d968",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "31931b69-feb5-4200-9ffc-d54073f0b638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984cd4a5-958b-42b7-ab0a-aaaab1a7ee1b",
        "cursor": {
          "ref": "571e0a72-8b52-4a51-aa41-e338dfbd8b55",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "244e394a-8a70-48e2-aac6-e04ad27e099a"
        },
        "item": {
          "id": "984cd4a5-958b-42b7-ab0a-aaaab1a7ee1b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "70d70d3b-afb5-47b8-b853-8597684024da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62eef4da-a177-4dee-90db-73d03a6abe82",
        "cursor": {
          "ref": "bbfd2ef8-d0a6-40c2-aa53-439c55b34d8b",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8070fa40-8b31-4860-9af5-c19b40d76938"
        },
        "item": {
          "id": "62eef4da-a177-4dee-90db-73d03a6abe82",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ee453ccc-ffa5-434a-895a-71a177bda2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b77d17c-154d-4550-a51e-4f3b2ddaaa21",
        "cursor": {
          "ref": "d23e050c-979b-4a75-929f-af6f30d5d816",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "bb4587e7-4081-43fe-a63b-eab7ea8217fc"
        },
        "item": {
          "id": "9b77d17c-154d-4550-a51e-4f3b2ddaaa21",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6cae4c27-5747-4c63-a3b8-369879d5cd7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e9740c-4935-4dea-8a43-0399a36e5222",
        "cursor": {
          "ref": "283741b8-ac78-453b-bdb4-bb5b80db4b81",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "17da7ea5-bd8c-493e-bd86-8c9f65383ee1"
        },
        "item": {
          "id": "f6e9740c-4935-4dea-8a43-0399a36e5222",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "bb0ee494-18b7-4b13-bdec-a83e8076479e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ef93de-9278-4fd4-b65d-9ecf3d8590da",
        "cursor": {
          "ref": "17466195-aeb2-46b4-a693-c55363007752",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b4bbc1fd-61bb-448e-ab6e-a747fc398d02"
        },
        "item": {
          "id": "76ef93de-9278-4fd4-b65d-9ecf3d8590da",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b57332d1-1eea-4948-af5e-7e7467aed69f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e2e3ceb-e5db-4890-863d-ae7fa4e0d988",
        "cursor": {
          "ref": "83dd4eab-dc46-41a1-a9ff-7e69077499d8",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9aa05d7a-f41b-459b-9602-935fb13d2a34"
        },
        "item": {
          "id": "8e2e3ceb-e5db-4890-863d-ae7fa4e0d988",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2ebdd660-8523-4f62-a21f-a3a7b0b89d58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3479ebdc-9f6c-4bec-8a4a-fdd8b5be7285",
        "cursor": {
          "ref": "ea7ada7b-669b-4708-9ec7-975d5122a5cb",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "3ceda16c-0e0b-455a-9f3e-366e414f3e34"
        },
        "item": {
          "id": "3479ebdc-9f6c-4bec-8a4a-fdd8b5be7285",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9c9c607a-9745-498b-b91b-19176a29867b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb35621-db5c-4a54-8bba-c6706139fe10",
        "cursor": {
          "ref": "52172db2-89df-4467-adb7-9c86378dc814",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "cfdc83cd-5830-4c2c-842e-6afe051d958e"
        },
        "item": {
          "id": "8fb35621-db5c-4a54-8bba-c6706139fe10",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1ae499bf-624c-48d7-bd42-1444faebb3ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f204a15-4723-469e-8b0e-1d8a4334af82",
        "cursor": {
          "ref": "51a1c6e8-8305-4cb2-b563-1dfa5c329cf9",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9a71a6c4-4c88-4f76-84ae-1c50953eb506"
        },
        "item": {
          "id": "8f204a15-4723-469e-8b0e-1d8a4334af82",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1e0b0a7f-0cce-4c2f-ac44-d17a750e0433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de47c0d5-038f-41fc-bdd5-8a684798c3da",
        "cursor": {
          "ref": "ef3cf65f-c231-4c75-b496-135067c9a210",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "297000b7-2a04-4adf-bfc5-eaa2f368f8c1"
        },
        "item": {
          "id": "de47c0d5-038f-41fc-bdd5-8a684798c3da",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "17e7be22-f402-4ea7-8a11-9e5a18cc553c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3334a9f-f90f-43ce-be0e-9f919bf7efd6",
        "cursor": {
          "ref": "992c6157-ac73-43d0-a7f8-1236a02c48af",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9c30c904-6023-4098-9370-16fa89ceedeb"
        },
        "item": {
          "id": "c3334a9f-f90f-43ce-be0e-9f919bf7efd6",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b0bf7f57-12bb-48e3-bd23-896353c95916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc74815-10ca-4135-992f-becca1f1f520",
        "cursor": {
          "ref": "d278e98a-f54c-4e1b-ac66-5aeeb7970ce3",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0782c22b-b98e-477f-9dd1-a9a370c37254"
        },
        "item": {
          "id": "1bc74815-10ca-4135-992f-becca1f1f520",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "081b7180-952c-4b89-b538-2eb1aede39e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4e920c-5849-4e52-832f-6dbe07b73818",
        "cursor": {
          "ref": "735a1d45-c8a4-42a4-885b-227b2c563769",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "03627a83-6dc1-4b46-b069-5b51cd018490"
        },
        "item": {
          "id": "aa4e920c-5849-4e52-832f-6dbe07b73818",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ef05cda9-468e-4aeb-9b8b-5bca00c4989c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d5437fd-6b4e-4c8f-9280-bd8a1c42a361",
        "cursor": {
          "ref": "43dc43c0-513a-4eac-b908-e657ca381dc3",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7d85addf-7fba-4f1a-ba1d-a3cc0aa63e8e"
        },
        "item": {
          "id": "9d5437fd-6b4e-4c8f-9280-bd8a1c42a361",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ba6b359b-6880-4458-afb5-5122b8f8baeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ee9462-0e28-4070-817e-5d7d94027df9",
        "cursor": {
          "ref": "ac09e658-64ff-400f-8a3b-a08a4c5711c7",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "42c50391-9b10-45e0-8202-87c93eb2d655"
        },
        "item": {
          "id": "82ee9462-0e28-4070-817e-5d7d94027df9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "685b97a9-ed94-4def-96c5-49341d6c3d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd15165-2d78-4fa1-895e-54b524109ca2",
        "cursor": {
          "ref": "e3832ecd-12c1-459a-9f10-5c480fd35ecd",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2d496663-a6c4-441b-a1a5-f97c65820b8e"
        },
        "item": {
          "id": "fbd15165-2d78-4fa1-895e-54b524109ca2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "957a0cbe-147a-4a0d-899e-6803c6bf1def",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee1a4e9-78e5-4756-8e71-476aa8f687be",
        "cursor": {
          "ref": "14f44421-1beb-4e48-96e3-e1604101dc22",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1fa8b40b-979a-4033-9860-98d0fd2ddef3"
        },
        "item": {
          "id": "1ee1a4e9-78e5-4756-8e71-476aa8f687be",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "116e50e8-dcdc-404c-b029-4db68028f2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc48e4c4-7320-48a3-b66d-d49f6c5d7ac7",
        "cursor": {
          "ref": "24d8af87-3c02-4e7f-86ed-cac009e4e30d",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "88fbc1d3-c976-4143-870a-9a1d6d553224"
        },
        "item": {
          "id": "dc48e4c4-7320-48a3-b66d-d49f6c5d7ac7",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "8f6fb571-8a52-45d7-9fd4-d1fd8a339d06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "562b6145-666c-4a10-8051-aefded430757",
        "cursor": {
          "ref": "4156ec87-ca35-4e5b-88cc-34e8f5871464",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "05267bd0-996f-457e-b7e2-f980b031e427"
        },
        "item": {
          "id": "562b6145-666c-4a10-8051-aefded430757",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8d3163f5-1277-47b3-b8b3-3aa2c4aa92a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e0064c-c127-43f3-972e-1a6556f876bb",
        "cursor": {
          "ref": "a2f7841e-7a26-45b6-86b9-5adb0af6f1bb",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3b7a14d1-be53-4c45-88ca-f4ceb4f2a7b1"
        },
        "item": {
          "id": "e4e0064c-c127-43f3-972e-1a6556f876bb",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4e1b3f9a-1682-432f-a4de-44760ea2270d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a498e7a7-00b0-4e1d-a199-4f36097a2bfe",
        "cursor": {
          "ref": "180838aa-1339-49a1-8760-e5f0ba2ac936",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1e25f28c-0f0b-48a5-8bfe-7024072629c2"
        },
        "item": {
          "id": "a498e7a7-00b0-4e1d-a199-4f36097a2bfe",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2950acbd-8b1d-42a4-933c-b04cedbf7800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae46796-8476-41f1-b3b7-b40c49b81c65",
        "cursor": {
          "ref": "df6bf943-5561-47fc-88aa-5f2d8624f46f",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "881ef63e-9aa3-4889-86d8-dc9cc0e6e3ca"
        },
        "item": {
          "id": "3ae46796-8476-41f1-b3b7-b40c49b81c65",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e2ba7a09-4ed4-4420-bcaa-5944d1142b41",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "c87c803f-12e3-463b-a285-3c76e0c81255",
        "cursor": {
          "ref": "a82965b2-53d5-4d96-a380-16c7a02fb505",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f9189284-057d-4a65-b4fa-75fb63843496"
        },
        "item": {
          "id": "c87c803f-12e3-463b-a285-3c76e0c81255",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "fa44bb71-1fa9-4bc5-9497-976244ff0048",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "c1bb347e-4fff-481b-89b6-481a133afcd2",
        "cursor": {
          "ref": "7b9cf127-2f66-49bc-b015-88252b68c561",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9d9f7bba-b02f-4238-919a-7e7c20496c87"
        },
        "item": {
          "id": "c1bb347e-4fff-481b-89b6-481a133afcd2",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "42ca1c87-c847-43e3-b4ea-82c1b42cf483",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "19af5647-37b1-4711-8482-c897a0d8b9f4",
        "cursor": {
          "ref": "31af4306-f580-4878-8058-9b526a54a86c",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0b9ed25e-686d-4349-bfb6-2a28b98fbd75"
        },
        "item": {
          "id": "19af5647-37b1-4711-8482-c897a0d8b9f4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b83741f1-4011-47b4-92d7-ebb3f5ce76aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d6be07-ad9c-4db1-b681-450b93803367",
        "cursor": {
          "ref": "f7d1885a-4e96-4fdd-bf1c-ab9cc6e866ba",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "71348936-df14-48e3-9cb4-393b6a19e02a"
        },
        "item": {
          "id": "b6d6be07-ad9c-4db1-b681-450b93803367",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "95469be5-c7f6-495c-bd48-d23c45e6b50d",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "419df2bb-5332-4f31-b7c3-b42707d723b4",
        "cursor": {
          "ref": "9b70893e-9924-4ee6-9116-dc639aec7e50",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ffc35224-d51f-4984-8d9a-6fee7152caf5"
        },
        "item": {
          "id": "419df2bb-5332-4f31-b7c3-b42707d723b4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5d7b9ad3-ade8-4abc-a29f-b6eb8b57a9c1",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "347f666c-db69-478c-82ee-6bf552998f3a",
        "cursor": {
          "ref": "f43c1ecf-fb5e-4822-bc98-89dcf3891845",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "22c13fbc-9e5d-46c1-a247-e33d7959cd5e"
        },
        "item": {
          "id": "347f666c-db69-478c-82ee-6bf552998f3a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0c1d5b60-dc65-437f-a42e-9e379a23ddf3",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "25f75afc-04eb-4463-93f4-c7c73b06284f",
        "cursor": {
          "ref": "1804e000-82db-4cf7-abdc-9e79f387817c",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ddd26777-f1a7-45e2-80ed-fcdfcd5334fa"
        },
        "item": {
          "id": "25f75afc-04eb-4463-93f4-c7c73b06284f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f70b7623-d32f-410a-9e1a-d70738565ece",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "4fe61931-a071-4aee-8c57-f4836bebf753",
        "cursor": {
          "ref": "40e9bc11-dc37-49c9-9e4d-66dea267f57e",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "85df4917-b474-4444-8596-611bf8bba23c"
        },
        "item": {
          "id": "4fe61931-a071-4aee-8c57-f4836bebf753",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2d498a21-4867-4306-920a-a9633ce06a33",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "c1422451-403d-4a4a-b97d-b616c123e38d",
        "cursor": {
          "ref": "e907f402-ab6a-4867-bcff-a5a091c964f2",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7da2e2f7-81ce-4065-aac9-7e783c5018f9"
        },
        "item": {
          "id": "c1422451-403d-4a4a-b97d-b616c123e38d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "47ad8992-1881-4e54-a744-4cefec10ef76",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "f2733f32-b7f3-4582-a75d-689363dc75ff",
        "cursor": {
          "ref": "ff8072a6-f18a-446f-acd9-745c0366f9ca",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "fcf836d7-5f64-4402-a5d1-279e2b9d9cc5"
        },
        "item": {
          "id": "f2733f32-b7f3-4582-a75d-689363dc75ff",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6ed1301c-e2c9-4017-9966-abe84065a4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d39e337d-bd0b-4db7-9022-a6606f783576",
        "cursor": {
          "ref": "4f19761e-6f5b-47ef-9bfa-8582d0657402",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "55b9ea7f-409c-4ae8-83f2-bf06695c2928"
        },
        "item": {
          "id": "d39e337d-bd0b-4db7-9022-a6606f783576",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f0b93fe7-8fc1-46db-b8c0-821ce95ce57f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86dc74c-e0d4-459d-9709-1660498b50e6",
        "cursor": {
          "ref": "ae1b512c-2724-4699-9ffb-e9ca37c5bc4c",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4e6d3d96-5776-452b-91f0-08dcaa72e4a1"
        },
        "item": {
          "id": "f86dc74c-e0d4-459d-9709-1660498b50e6",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "18236043-e9ed-4afa-b529-b332714de5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "619b3019-4a3e-4ae1-b930-234e05fd67c5",
        "cursor": {
          "ref": "ac006459-1ef4-4d58-933d-da746f1a7d3b",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "13749b26-f243-4aea-8d03-e301bf4bf733"
        },
        "item": {
          "id": "619b3019-4a3e-4ae1-b930-234e05fd67c5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "003986fa-6375-4127-a189-3ecae639c7a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c366996-4ca0-4395-82af-dc7a73a8f663",
        "cursor": {
          "ref": "9df4eacf-4c47-4da8-a8e1-51e051628760",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "298807c2-e949-413b-9b51-9ec8614558d7"
        },
        "item": {
          "id": "5c366996-4ca0-4395-82af-dc7a73a8f663",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9caaf6fe-af0f-47f1-b8f7-80daff4ba2f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb9aa34-1c2b-4763-9a73-725ec95ee7b9",
        "cursor": {
          "ref": "ff7b011f-bd4c-4152-91c3-aa35a8abc495",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c4bcf38e-d576-4cca-9c35-e5ae5027a770"
        },
        "item": {
          "id": "8eb9aa34-1c2b-4763-9a73-725ec95ee7b9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "55a43108-e492-46e5-bbe9-216a7629fce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ecba77d-48ed-423a-a0ff-6de0e009c055",
        "cursor": {
          "ref": "e32f5ff4-af81-47f7-9b42-3028985a9cec",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e2be9fc5-a716-46db-a752-93eaecfe5efe"
        },
        "item": {
          "id": "3ecba77d-48ed-423a-a0ff-6de0e009c055",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2e2bcfa0-fafb-48e0-9a50-3c3c637a9a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df000ac-d236-4adc-aa27-a947a1273629",
        "cursor": {
          "ref": "50f10013-6e4e-4eea-b279-bd0dc33c9a91",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8b51c708-bfb6-4099-8445-87a1a1e5f663"
        },
        "item": {
          "id": "1df000ac-d236-4adc-aa27-a947a1273629",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a592aa30-6a45-4614-8f2d-20838a58f13e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5509e235-88c5-46ca-8b68-f119c1e184e8",
        "cursor": {
          "ref": "6b7ed6f7-1999-45de-86bf-84e936f38cba",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7cbbbae4-2b06-4ff0-8eca-6eeb07ea2625"
        },
        "item": {
          "id": "5509e235-88c5-46ca-8b68-f119c1e184e8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "69361b36-aa45-4b15-be97-37696e979d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56343340-f884-41b8-b7c6-170331f9051b",
        "cursor": {
          "ref": "69d5919b-6567-4511-acc7-ba59926a17e5",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d5b3d2fd-5503-44bc-bb14-bd7cc1603855"
        },
        "item": {
          "id": "56343340-f884-41b8-b7c6-170331f9051b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a96d4537-649a-46a2-8885-22f82b75c25b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "270dc232-352f-41ff-9491-cf4bef3ecb05",
        "cursor": {
          "ref": "1b225e53-1e33-4eaa-bc5a-451b6af19336",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7e666fb2-07ee-49e8-be15-53e19aae8466"
        },
        "item": {
          "id": "270dc232-352f-41ff-9491-cf4bef3ecb05",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "74d6f47d-0742-4548-a70f-aa487f275ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b61268-5a4f-4e0b-9a02-18b8e41c25b5",
        "cursor": {
          "ref": "1da39aeb-b7e8-4b1a-8797-4eb53b0eb6d6",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0af5926b-d69c-437e-9a4f-ee59b1b1ee50"
        },
        "item": {
          "id": "36b61268-5a4f-4e0b-9a02-18b8e41c25b5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "841e8e10-9327-4e09-b520-276d490ebccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c135f8b0-fdc5-4581-b6ed-3d30d0d0977f",
        "cursor": {
          "ref": "7e771055-89c9-4a88-aaec-3d92b5f930fc",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "81bc6d4b-3670-411d-8a49-ca1464e4a6dc"
        },
        "item": {
          "id": "c135f8b0-fdc5-4581-b6ed-3d30d0d0977f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "7c21f397-a388-4b48-b374-bba3af28d24e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2586139-817d-45ab-9560-5ab72f6e091b",
        "cursor": {
          "ref": "17f7c2be-b1f2-401a-a7a4-0af6476d4482",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3727f6c8-f390-46ae-94b3-b0d7c2abe0c4"
        },
        "item": {
          "id": "b2586139-817d-45ab-9560-5ab72f6e091b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3c0e29c8-fe99-40f5-832c-f81acb7d7e06",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "1e4f7bd6-27b6-4ffd-9752-54c3228a03ea",
        "cursor": {
          "ref": "11c52826-10e9-4e7f-8d25-f38fc23d4410",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "526ff197-6b07-4ef2-ad55-a657d70d657a"
        },
        "item": {
          "id": "1e4f7bd6-27b6-4ffd-9752-54c3228a03ea",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "85debd13-5811-446e-8843-b14493ab9b3a",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "a94ebc6d-2ea0-49dc-b507-f639c36a29d1",
        "cursor": {
          "ref": "906e304c-83b6-4ee4-9792-7358d28d24e8",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "731fd6ce-f59c-4ed0-a0a9-4e5184455486"
        },
        "item": {
          "id": "a94ebc6d-2ea0-49dc-b507-f639c36a29d1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ac0244fa-bb65-4b6a-871e-6728d350a318",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "e193ed84-f9c2-4783-b483-c29b581ab003",
        "cursor": {
          "ref": "becce1df-185b-4009-b672-26cf63e85f50",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "91a3e99a-3327-4b7e-9cf4-7ac0d2ed261d"
        },
        "item": {
          "id": "e193ed84-f9c2-4783-b483-c29b581ab003",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d3e6aa92-921e-4040-8b38-4a96b80cd72e",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "6f835db4-85ca-4bc8-880a-64fa68a108fe",
        "cursor": {
          "ref": "739bea5f-675a-474c-8377-810bda277b3c",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2ee50cca-76a8-4c04-8fbd-6bd50b48844c"
        },
        "item": {
          "id": "6f835db4-85ca-4bc8-880a-64fa68a108fe",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "81519998-ffed-4385-8461-f2541c52fc95",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "4521dcc8-9e42-4af6-82b9-e664b2b4d98a",
        "cursor": {
          "ref": "c03fbaf2-69c9-4354-a689-66965e93001d",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5eedbdeb-2b3c-477d-bed7-f5555acb7b9b"
        },
        "item": {
          "id": "4521dcc8-9e42-4af6-82b9-e664b2b4d98a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "142fe4a1-ce6b-4d6c-a7ca-528079f4a9aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0256c9a-6911-450a-ae8a-91e4d3534c1b",
        "cursor": {
          "ref": "2007e4fd-1ab9-43c6-9b2a-08293f11093f",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5e8746b6-72ca-4481-8bf5-f287b488898b"
        },
        "item": {
          "id": "c0256c9a-6911-450a-ae8a-91e4d3534c1b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6045b733-7ed3-45dc-8831-f69a656b7321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a81ff3b-1161-43f0-9c29-aa48485b683c",
        "cursor": {
          "ref": "59833e05-8805-4fcc-bc47-72886e96371a",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "bc111828-1420-477a-b111-8ad9fa8360f9"
        },
        "item": {
          "id": "5a81ff3b-1161-43f0-9c29-aa48485b683c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9d33c057-eacc-40e8-871e-d0fb05d03b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09fded76-01c6-4246-8e6c-a21021caed36",
        "cursor": {
          "ref": "ad74ca1b-f9ee-419a-8400-32545968b5ef",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a0303044-ab94-4a50-82e0-9aaffb205877"
        },
        "item": {
          "id": "09fded76-01c6-4246-8e6c-a21021caed36",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "30031398-02f5-4e0b-8620-637f2d674f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7947f41-c103-4306-89fc-5a8160697619",
        "cursor": {
          "ref": "18cde05f-323f-4bc3-bfb9-116121da8007",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "20c4a50c-8165-4061-a6fc-9831cf06ea30"
        },
        "item": {
          "id": "c7947f41-c103-4306-89fc-5a8160697619",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5b2b5f95-0043-4959-8ec7-1a0b8f61844e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4271e2e0-2a14-4786-97d3-177f954ced9a",
        "cursor": {
          "ref": "da87132a-8ce7-4238-8c71-9d2b975cc0b0",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8d54c57e-0425-4fff-ac02-0c92846bb473"
        },
        "item": {
          "id": "4271e2e0-2a14-4786-97d3-177f954ced9a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "42a421d2-df64-48c1-a8b0-43eb384e9ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b25aca-2f94-478d-8e9b-cc9967641027",
        "cursor": {
          "ref": "6c84b0fa-af97-4f77-8def-de54e10b2ddd",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0961745a-5b66-4433-8ecf-281f17522481"
        },
        "item": {
          "id": "d6b25aca-2f94-478d-8e9b-cc9967641027",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "561b24b1-3936-4772-a55b-39d3a50ed996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "441a60c7-1810-455e-b979-5a2b924e1435",
        "cursor": {
          "ref": "73fec728-7961-4838-a9d2-7deee1dfda38",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f1509174-473d-4377-a5c8-18ae0f344ecb"
        },
        "item": {
          "id": "441a60c7-1810-455e-b979-5a2b924e1435",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5b7e3e06-86d0-4df6-86ff-0214858a478d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f4bbf85-a3ec-4c4f-a4a6-3cc02e6a5610",
        "cursor": {
          "ref": "981eb078-3701-44b9-a03b-53dfae34439e",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1f36e6f8-26d8-40b5-98b3-6c034cc520e6"
        },
        "item": {
          "id": "7f4bbf85-a3ec-4c4f-a4a6-3cc02e6a5610",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b68bc7cd-2388-4538-856e-210a99959c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90d8ec1-1626-4ceb-a298-26f3b9776c66",
        "cursor": {
          "ref": "d195f859-9146-443d-985e-e9f68296809d",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "af17803e-2b41-4d33-8890-863355daca2c"
        },
        "item": {
          "id": "f90d8ec1-1626-4ceb-a298-26f3b9776c66",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "be2af836-c23d-40f5-9cda-1e56fe778202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c7e510-e755-443b-9b0d-ffc44c51814d",
        "cursor": {
          "ref": "ae0ff5ce-23cc-4532-bcb6-395649513cb7",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9eba8d2f-4976-43f9-9fc7-35602bf65df2"
        },
        "item": {
          "id": "c3c7e510-e755-443b-9b0d-ffc44c51814d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "993f34c3-11c6-4323-bff2-450da96ad0ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f8ac90-0a62-4097-97cb-e7649259a67d",
        "cursor": {
          "ref": "bad5a0fa-0e96-4b5a-97f7-38b2677dc650",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a008108b-6b58-4152-aabc-11014cdf064e"
        },
        "item": {
          "id": "f3f8ac90-0a62-4097-97cb-e7649259a67d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a7666eda-adad-43f2-8de2-ce93800a4bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7999b4b8-9380-4241-85df-d0e9bfda5a89",
        "cursor": {
          "ref": "9279a141-0ba7-412c-8a9f-b3338e6ff95f",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4b1452a1-6fab-4b0c-bcc9-7cfea47d742e"
        },
        "item": {
          "id": "7999b4b8-9380-4241-85df-d0e9bfda5a89",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "bd0fb056-dd61-4d95-ac27-a026850aecd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802c9d06-1232-414a-82c6-e0ece87039f7",
        "cursor": {
          "ref": "e759cfea-f92b-4703-acd6-0eb5e54af2cb",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d43a0703-b392-4338-b6f0-cac029baa35f"
        },
        "item": {
          "id": "802c9d06-1232-414a-82c6-e0ece87039f7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "08c07ad4-64a5-4034-b25b-b0f48f09da4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01004e8c-0ad1-406a-a849-d181a45a569b",
        "cursor": {
          "ref": "3b7a3b28-a1ab-4278-a177-d23d54de97e5",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c88a1fb7-1f80-4eb6-b3b9-80b0efbd2279"
        },
        "item": {
          "id": "01004e8c-0ad1-406a-a849-d181a45a569b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "af4f5e5a-2b9c-4930-8709-f71eaeeecfa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3efcad79-71e9-4f5c-9d83-3bd8b27eef48",
        "cursor": {
          "ref": "a1576534-385c-481f-8d4f-7bcf3e1e226d",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "52415bc4-abd5-43b2-a02a-61e088804069"
        },
        "item": {
          "id": "3efcad79-71e9-4f5c-9d83-3bd8b27eef48",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2368ee94-060c-45f1-9d0f-566eaec287e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0441c498-14ac-4f79-ace7-d46f935ae07d",
        "cursor": {
          "ref": "7c975ffc-deec-4d19-852c-d8900fb9820e",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d19fc9f5-48d9-49d4-a040-772c604d3628"
        },
        "item": {
          "id": "0441c498-14ac-4f79-ace7-d46f935ae07d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0338a15e-eab8-48e0-aabf-ded600331755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae483ad6-bb85-448c-bf8c-c4d27d13a377",
        "cursor": {
          "ref": "167b47ce-86b7-46e8-bdf0-f74359564d9e",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "57ff8b0f-60ec-4176-a2c5-5a3fdea63a6f"
        },
        "item": {
          "id": "ae483ad6-bb85-448c-bf8c-c4d27d13a377",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2140bf4e-2411-4f8a-8fa6-ea71fba81012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d90840d-8496-4aae-8335-692af6c3f843",
        "cursor": {
          "ref": "3f52a8ab-5ae1-4384-b292-07715dfb76de",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0c06cb90-c0c4-4cff-b43d-8be7df8c686c"
        },
        "item": {
          "id": "0d90840d-8496-4aae-8335-692af6c3f843",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "2f72b90e-4fb7-4142-93c5-961586bb3375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5656b9c-e772-46ba-b9dd-a02b6e134d8c",
        "cursor": {
          "ref": "0c22a22b-dc07-4385-8248-6d1fc88bcaf6",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "434d2f29-6ff9-468f-9247-b96cd02c595e"
        },
        "item": {
          "id": "a5656b9c-e772-46ba-b9dd-a02b6e134d8c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a0b4c9cb-7df4-4406-bc79-8b7b5451e44a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab020d57-eb1f-4232-b3c4-73a7a4a48bb5",
        "cursor": {
          "ref": "621ebb10-c151-49fa-88aa-684e58620043",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "2e714063-56ed-4eb9-b1b8-9ca050795b39"
        },
        "item": {
          "id": "ab020d57-eb1f-4232-b3c4-73a7a4a48bb5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "32b516cf-0fcf-4b4e-80a8-4325201eec85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7122eee3-e2f3-47ad-8e57-f9ee69bd7976",
        "cursor": {
          "ref": "5d0c8f88-0158-4f9f-9d07-8b72ce295a44",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b502b9e8-d1f1-46ac-8e11-7e16e60c6b40"
        },
        "item": {
          "id": "7122eee3-e2f3-47ad-8e57-f9ee69bd7976",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "6ae62301-5fb9-4f80-80e8-d0140d9febe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc19a20-5a0d-42cf-99e5-a983634aa083",
        "cursor": {
          "ref": "af413870-e795-4f3f-ab3d-b73cc007bb7a",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e87a74f2-a9fd-4779-b9e2-3ed9332f5b1c"
        },
        "item": {
          "id": "5cc19a20-5a0d-42cf-99e5-a983634aa083",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "38146708-13fa-4496-8fe1-eb661a3450a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df5b686-f73f-49dd-b265-3c2f558996fa",
        "cursor": {
          "ref": "4b43b841-07d1-4d2a-863d-912c650ccd15",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "83b5e119-086a-416d-b0a2-4a5bf5b78be0"
        },
        "item": {
          "id": "3df5b686-f73f-49dd-b265-3c2f558996fa",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "bf6d7a8a-5a8e-4166-82c5-b23664dd752a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f266093-791f-455c-8377-6b7061862156",
        "cursor": {
          "ref": "fd8d1268-f9a1-4114-831a-67793c9255a5",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "162ba8c5-b3ad-4df4-9d52-6075267bdc71"
        },
        "item": {
          "id": "1f266093-791f-455c-8377-6b7061862156",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "50387507-87ed-460c-ac50-04e090a59a0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc92af1-588e-4b20-98ae-8e18412e8e29",
        "cursor": {
          "ref": "8e3ec797-b6e7-4fe7-8db3-2d92f26adb41",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "af3c6862-6121-4cd4-9a84-fdef66f91213"
        },
        "item": {
          "id": "edc92af1-588e-4b20-98ae-8e18412e8e29",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ed248535-9458-4aeb-8aa8-c51b10e34f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c8bdf8-9c8e-42f5-9d3a-77674c7de978",
        "cursor": {
          "ref": "24bd8d3a-2561-4960-ba8a-1b6f2a2a00b7",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0a1c08f1-5db0-458e-adc7-17c5baab25fc"
        },
        "item": {
          "id": "02c8bdf8-9c8e-42f5-9d3a-77674c7de978",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b81aaef5-bff7-4f02-8008-ef40186f9e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd285e4e-ca46-442b-9485-e1bb749fc94f",
        "cursor": {
          "ref": "d882e987-4a86-477e-9d91-3bb16d99ba39",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9e0d9c2e-8064-414f-a0f6-665461d9e7ca"
        },
        "item": {
          "id": "cd285e4e-ca46-442b-9485-e1bb749fc94f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c07abe8b-ca32-4a4d-8542-1ee6b9cbac12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ad9700-e169-4a29-a01f-94451225caaf",
        "cursor": {
          "ref": "587271ea-df32-4b77-aae9-f17dca9d0203",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "070e60b2-2e3b-4639-9744-f133ecbb9fc4"
        },
        "item": {
          "id": "39ad9700-e169-4a29-a01f-94451225caaf",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a4a1d094-fa39-403a-b10c-d733d8efef71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b880b54-f443-42c5-a1be-86e3bea1f561",
        "cursor": {
          "ref": "791bce50-786b-49b1-98fb-28aeb8907f35",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b1985de4-4b0f-4ee8-a09d-d8c3df2d0fb3"
        },
        "item": {
          "id": "2b880b54-f443-42c5-a1be-86e3bea1f561",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2cd124b9-9dc7-4306-bc41-903f84714bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e462bbc4-800b-4287-9990-40525d4d62c5",
        "cursor": {
          "ref": "5ec9f14c-e09a-4fc0-adee-881caedd8f8e",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d7c7afce-77cd-4b50-a9b5-8ded885bb25c"
        },
        "item": {
          "id": "e462bbc4-800b-4287-9990-40525d4d62c5",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4f3db43f-4b19-49ff-a896-722490db0941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b76e1e6-8519-4f77-89ee-b731705255fa",
        "cursor": {
          "ref": "c0c4d13a-a5a9-46b1-8d3f-bf1bd3ebed24",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "aca96d21-5410-48a6-9e01-50e5202dc3ec"
        },
        "item": {
          "id": "7b76e1e6-8519-4f77-89ee-b731705255fa",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6d25b9f0-cf46-4761-adb5-b1a432457099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41059536-7f89-4771-8948-74ff65e25177",
        "cursor": {
          "ref": "359d9e34-736a-4590-89e3-c92aaba21d89",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c3d45c86-4394-4694-a16d-99278564991b"
        },
        "item": {
          "id": "41059536-7f89-4771-8948-74ff65e25177",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1fb44133-9a15-4a87-9e72-515c37651493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6787d18e-6dbe-408d-9be7-7a84ed511ac2",
        "cursor": {
          "ref": "ed2a424d-d1c1-40da-a559-e0219a8ea5cb",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "97753353-9c96-4715-9291-a1a66de57cff"
        },
        "item": {
          "id": "6787d18e-6dbe-408d-9be7-7a84ed511ac2",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8e6bc61c-8c1a-4670-9a41-d9a690b00572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7293bb88-28b3-457a-b8d9-3a672c36f89f",
        "cursor": {
          "ref": "b2311e7c-aec2-4af5-9232-e6ec6d7bfcae",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b7a2e6e3-10dd-4b7b-b58c-5dac4e7b7a29"
        },
        "item": {
          "id": "7293bb88-28b3-457a-b8d9-3a672c36f89f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9950a874-02cc-4a5d-9efa-374d62fbcd83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805272d3-d69b-482b-800c-fb675be6c131",
        "cursor": {
          "ref": "2ed3c9aa-2d7a-4a4c-acbf-559662992fd0",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c8024495-7a2a-4654-9099-b44c1643be4f"
        },
        "item": {
          "id": "805272d3-d69b-482b-800c-fb675be6c131",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "37341c58-4589-41c8-8009-847dd53c7c91",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "088741ff-8e75-4bd5-86a6-917338903965",
        "cursor": {
          "ref": "a6d6a68a-212e-466f-ba26-ba30b257b037",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "bd6a1822-3416-4ad5-9951-ec585cd0871b"
        },
        "item": {
          "id": "088741ff-8e75-4bd5-86a6-917338903965",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ba58cee1-f2b6-41af-869a-8a426df619d0",
          "status": "OK",
          "code": 200,
          "responseTime": 173,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7e3372-e612-44bf-affd-167015ad1a23",
        "cursor": {
          "ref": "81f572d3-f33d-4349-8a9f-cbde4d0ae377",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1ee3f9d7-89b0-472a-9cfd-0b4da239d995"
        },
        "item": {
          "id": "7d7e3372-e612-44bf-affd-167015ad1a23",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c0a47bec-949f-4cf1-8200-1fb863cbdcc7",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddc77a5-afb7-450e-8243-75d06adc5663",
        "cursor": {
          "ref": "b13480f6-4bad-4f42-b540-1d277658f26f",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6a545e38-38b5-467e-b70a-5760f68efd7f"
        },
        "item": {
          "id": "6ddc77a5-afb7-450e-8243-75d06adc5663",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fce63c0b-d2da-476a-bf33-6aa294e2443e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddc77a5-afb7-450e-8243-75d06adc5663",
        "cursor": {
          "ref": "b13480f6-4bad-4f42-b540-1d277658f26f",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6a545e38-38b5-467e-b70a-5760f68efd7f"
        },
        "item": {
          "id": "6ddc77a5-afb7-450e-8243-75d06adc5663",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fce63c0b-d2da-476a-bf33-6aa294e2443e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f8463f-8697-4fdf-864d-25ed818a5b32",
        "cursor": {
          "ref": "6d82c650-98d6-4dd0-8d8f-df53cccc7cd5",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a21b04a9-eb33-4cb6-a296-4f9a170cabf1"
        },
        "item": {
          "id": "39f8463f-8697-4fdf-864d-25ed818a5b32",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8e4a1331-3eb4-4e3a-a296-d6dbba42a58e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f318eb6-12ef-44b0-90e9-f39a54ea5c9e",
        "cursor": {
          "ref": "91feb0fa-4652-4c58-8bc9-8916875de14a",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "261f5060-8738-4b42-a185-018835aebb8e"
        },
        "item": {
          "id": "7f318eb6-12ef-44b0-90e9-f39a54ea5c9e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b2483eb7-8fc9-4f20-b38c-775d91f233a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}