{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "1182c5d5-cce1-4e7a-9da7-eb1ae491a56d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3b056e02-d3a5-49b9-937d-4cb77e4099c0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "43ddadde-913b-472c-97b7-30849bd457b4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f5e2fc58-7368-4312-a2e5-422e526da56f"
                }
              }
            ]
          },
          {
            "id": "2c1b325c-3539-4500-b2af-b9d622e27356",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4b23c044-20a0-4064-ba24-9b90773b3164",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0c2f1879-25bc-4f13-b3ea-714d13f97f44"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "827b3c89-13ff-4618-9294-f185ace845c8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "84f68b3c-c7cc-4fad-928b-517880512e6c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bb0c21cc-b83b-46ef-b820-b903d4528487",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a10734b5-8ca5-4ffa-802c-75dc38d3d089",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e02fbb90-0cda-435c-af5c-cc15f750c857"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "92675f2b-fe4e-4c42-b140-6983a1bc7865",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "55e4d55c-53f9-4747-b21e-d7f6b9c06363"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9e2369b0-47d3-46bf-81e8-ed16ad881e80",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8c313940-eae7-4aaa-ba96-41df8fb76ca2"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6eac7346-f3fe-4c3b-b4c1-e56c9b46e5b2",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8466bc9f-94fa-487d-bc9f-28a8cf908522"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6ec9185-798c-445d-b1a3-ccef9bd552f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd54b645-ee83-4e19-b473-d45d71f7b225"
            }
          }
        ]
      },
      {
        "id": "d0019dbb-7ee5-4d0e-8ad5-e0675a9e8750",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ab8bd8f3-f3ad-42bb-8a8f-c7ec6b431379",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cf44e520-9837-4a06-adc4-8342cc44f5bb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0c7bf17a-20ea-4f52-945d-08e2f8f995d1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "850df422-1adf-4c57-b45f-a47300794af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de819fbd-b443-4a1b-8e60-25a6155cd1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa5d89b-0ceb-41e3-98e0-b0ea22ff0bd4",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "554e5d2a-a825-4bb6-9088-b7ae2f12b995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c3d7734-484a-4c21-a580-aa9fc5a83c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5133b90c-ec20-4694-8972-0f6f587844c6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4910e3f-d79e-4b39-a552-80657aaa1861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91623ce7-952f-4e6c-9d04-3071c1f8087b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fe526c26-0b77-46fd-86b7-8d1de90bdb4c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "519f98c5-626f-4d13-86d0-b8d00fe1ef3d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5a5e44-8bac-4485-96e5-397dcc4d121c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "283c9695-e976-4e5e-aca2-57f9f6f26e67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ba3e7b-e796-4af7-95de-a05d133e879e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a7b3077-f8c1-473d-8a31-7d1735b382fc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1d3151b8-a9f9-4ac9-8f12-cb8af3a82fda",
            "name": "Positive Testing",
            "item": [
              {
                "id": "799481bc-e126-482e-a3fc-6caeb95f0b06",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ef933ea-1145-4b24-9988-5edc13eb7426",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ba145a69-7485-4689-893b-a07b4831df93"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5a3b0007-3efe-4013-90de-0c5e387a5eb6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "4f25e181-d562-4a5d-9a3a-e6ce0064939f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f3fea2a-8ff6-4810-84ed-353d080b2772",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d2e1fd59-a4fc-46d6-b3b5-2a9d504a82cf"
            }
          }
        ]
      },
      {
        "id": "e1ee36c3-75f9-4bc6-a327-5e8b2304a461",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0f5fbd9c-ae6f-4308-9ebc-5aaf0a1ae778",
            "name": "Negative Testing",
            "item": [
              {
                "id": "140e3961-bf43-4bd2-a6b0-80290c532696",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "44569a5b-c76d-4e23-8cef-7b7927a5fda6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e077959e-7d9a-4785-bfef-6008fe673ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d71f80b7-411f-462d-957f-ab62e79e92c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ef30fb-aa13-46ef-abd7-6d18366dc2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58ac357b-9ca2-4fa7-949e-616e1eacc01a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b0b11af-fc5d-4d57-a6e7-3c2c60ed4944",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd96519-b5e2-4481-834c-0740a7cf690e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f12f076-c1e7-4cdf-8deb-7825a975be0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7537d5-1263-402c-831e-78249bd86d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db4a504a-186f-46c9-a78b-7469ba3cc969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3617a82e-eb66-4825-923b-71e6cdbde0ed",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1cab1c-8871-496d-ab43-da9bc73332a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12fe7790-ba43-45a3-ac3f-778d4ee9b080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d751543-a534-41dc-a928-af17e3af293d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34d31ce7-ffbc-48a5-9223-e28b189a3cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451b6b63-8abe-4b85-b62b-208c23b7b87a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5796dc54-8deb-45bf-b5b7-95385b062f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0771b932-ad3a-456f-a644-35fb2d8ceadf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda88aa8-3498-4da2-aee9-10a82d971edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0708d6f9-4548-4e82-a026-f5afad59d913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb07007-5ec8-40d5-8469-27294b5b5ed4",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda50433-f52d-4ecd-aeca-6f4229f7b377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b9df656-a7be-4c64-98cd-8b1d9592b6ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a07c32d-38c9-448c-97f9-1b5b6b47499c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cebe7e64-af2b-4403-a43d-5458303c3350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6c08b2-72e6-4135-891a-85df00e262ed",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2132bbca-e363-4ffd-968e-bbc741157e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d38aa1ba-cbfc-44f1-9297-8bc062cddca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98dc529-ab88-4dd8-8795-f3111188ff9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c32da058-28a5-453a-b5d0-812546e7b68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e999ae7-ad63-4db7-b7b3-76b60ad98d0c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e273f91-6398-4652-b026-4ada9486c90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46238735-13bf-484b-be51-0fd126b0faf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd3f65ff-9dba-4fd5-bcf8-1aacefce880d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b8effcd-8497-4b7f-a418-2fb697aa7e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "381d7415-5a0c-4a1d-a20f-3492231a9709",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e55a20-0c35-45f2-86ee-ffccc52ef79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef039913-2a77-497e-8da9-2ca2d7f1c388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f31b6f1-4629-4dc5-8a32-67341dccb839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3732be00-7431-4d30-8238-55b3e04afe53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7bdd584-ba88-48f7-8614-611d59a08b7f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20aa2b35-7cad-421d-93db-dfdd179cb040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05fc0de0-0cf5-4db6-91a1-375d00cd3639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78f93f5-05ff-48e9-a156-40c724cecd73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4ebf9a2-11ad-444c-affc-2f29ff783f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "219b3b4c-e87b-46d3-94d9-7c6d500f4697",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c25d75a-e668-4d95-8b33-dd2f54e48d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "678d7c3f-f146-402b-be20-b9cdb111a93a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29223c1c-137b-4641-957f-5a76deced8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccc5da42-5813-4f65-b59a-d25d843efb3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29edf448-e057-4c07-856e-776d9636c470",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c56a5b-02ec-41b3-bc29-c0c1e471128d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00497f61-1f46-4d4c-bd25-3d84a7312adc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7c5049-1143-4eac-9353-058939960863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71a2efba-913a-4c47-90ef-5475937d4dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e575f5-f8ed-4236-bbea-246d24c3ac17",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3a8858-8d81-4720-abae-1ab003d10620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfe4415a-cabc-4ab5-b1f1-f895faf3b018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f50d0ae-3cc1-4480-9822-3db6a46caf8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1502683e-7e0c-411a-ae7b-15f67815c7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3959b63a-d5e8-4547-8963-8d49040bf250",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c52b68-7262-4b51-9866-1b1f5e458223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "613f8b2a-c304-4eaa-8bc2-b675b7b04ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e819973e-d7e0-4772-b78d-387047617ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "209e25de-6518-40ef-868c-d674f85a439b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786e11d2-12b6-46e8-b23f-479086a8d601",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88df8a35-75e2-43c0-9ba4-edf8de8155cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f922a11f-fbf7-4305-8ba3-284b5ee850d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a56421-9b51-44cd-9211-643eb993a448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59b92b44-a857-4fd2-b49d-9daf887171b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599a234b-e63e-4cd0-ac07-c624cd86f607",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91148c0-c6b6-4b26-993c-eb5ab785609b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef114eb6-f7eb-42bc-b4d8-8a61b7ec5029"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe25211-365f-43f2-8761-41b023436cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09350e35-f2e4-4a2b-a2b3-e639352ebe3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ffe6536-859b-4a93-b1a8-61cc2951194e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c631c843-93d2-4a1e-a3b0-85f3e5f37833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b81273fa-9774-4aa0-afb6-c472e24d06e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7f8313-3518-4689-a28b-060d65b61a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a42e27e5-4b2e-4a76-a141-9f11b14d08cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "015059e2-8a25-4fd2-b406-004aff7f4392",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc24d82d-6b4b-4cb4-ba4b-606c52d87cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e94e94b3-a012-4ebe-a6f2-fb449bea7740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f7d35c-53ab-473a-905b-3e8ef617cfe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc777089-1916-45ee-bc2c-e28725009962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319c3e4f-2698-4d3b-bece-3f980b0ed908",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f127d4-0f66-42d5-b12f-f401d3743ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae03caea-0b7c-4dcb-860a-bcf143bff13b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c104979b-29ea-4265-b3bf-ab4b9354e886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b68af19-528a-48e9-92aa-2993cf2c12f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c42b38-7e4b-4d68-9f4c-be9564813035",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d3a29d-3e35-4842-869d-b50ef455ef1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cfbb9f4-8635-466a-9dcc-872b1f81a94d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea831f50-fe9f-4351-9d0e-5196c7ac209a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b05f1ed5-1bec-4daa-9dcd-0a69b234c9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916e8c82-4e14-410e-a0dc-9761cab3b498",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d1ab48-b7a4-4197-831f-0723531cec23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c6e7c95-ec7e-4c10-a465-0fc087eb20b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1e17c0-f8e3-483b-9f2e-92f2b57f19b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6228903-2239-4f06-8894-624ef2da6bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3acf89ee-27ed-4188-a5c4-c219f1ccbb06",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6ce236-1de3-49e7-94cb-d5008e3d477b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30347de-3673-49c1-b778-65acc54532fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b8feba-10b2-4460-8d5a-abd9391376c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6111f762-2f3d-4fdf-9cae-bb697f371256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7c958c-fc8b-429f-96eb-41081d06924c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2096b9f-c7c3-40e0-b81c-335331c48302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63cde011-ad7e-47a9-bb16-c50dfc63adf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9dc3675-2069-4e68-b230-39770629f7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1adf32c7-7592-49d8-b73e-e17fd9ad84fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa3e374-62fc-4a1a-8065-f7d8e81aa485",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28390e39-7948-4b28-bc97-2a2d4e93b7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea259892-089f-47f0-91e2-205d9cf4b085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad80be8f-a219-4705-a53d-cb028cee71a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "be67c8e9-5a47-4344-b454-b16225b7ec8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0bab77f-4ece-4cea-8785-abbf3f828649",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da740526-e0c0-4ec2-9306-388c47014fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db097272-07de-4759-8fb3-c5723dde8199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4eb12dc-00c6-4755-8d6d-e24d4caac9d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf07ee34-021d-426b-8a3d-26e16c4c9eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b66c46-d4c3-4d6b-a9cc-aa0503b25fec",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d70bf9-6b00-485e-895a-1394e5ec9537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f25ae96-b7ca-4cc0-9f63-3eeea700ce66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f262ed-c2ef-4160-aec9-bf68c92e935a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cb29cb3-0280-4da2-8d86-c563dc9819cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbed8e9-a192-48b9-b9fb-d01d3e58809b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf3dc3e-aaf1-40fa-b8dc-c1d88a64807a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b474a588-07dc-4e1b-bb27-b8708d0621b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afbfa9f-7192-4ebc-9101-bdffdde2a4e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "da80604e-3108-4bcc-ba20-f800d7d51a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff5afeb-6430-4069-90b2-be05f81ebf02",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ecb8e45-1a70-4938-af81-ac68ced53c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5cf59d4-3a69-432d-9e85-4b4f26ac93fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "756fdd40-d6e0-497e-82d5-3a12afd69047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a18f4ad-e80a-459f-8c87-be5d416d935f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ad19ee-8589-4e07-937f-560355cdcc01",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599fb3b9-b69c-4a8d-a086-59bcb4a1b2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7b9d574-5af1-4cf2-b786-0b3063523c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94cc03b7-a81f-4d89-8b82-13e87da498e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "97500584-e60c-4d18-b55b-4643b0836790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2dcd4d-dd09-4ff9-84a5-e02ea35598ed",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c04f8a-eda2-4615-a72a-13ba8cc3e9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2f09989-62ec-439e-8f64-793b5f65637a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af3cd856-86ec-41b4-bf73-f613a1aff523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ad4f0d0-55ab-4b98-aaef-620cf98088ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c434b4c-8e9d-4160-9dff-b3d0ffc666da",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c536585-fd1e-4e77-a0d8-e3830c4b5fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f5af6e2-fe5b-4c93-8119-ed469df59386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "590ef430-8bf0-4602-8be9-d258d19fb257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb5cbffc-d3bd-462f-96a6-40d2acc21873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a11d1a-d8d5-4797-9f58-c5a9650c3edf",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5fa5f9d-dfd3-4ca8-a41e-edd3fad1c913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1476e58-1614-4a72-b572-e27fe70ce44e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e43da73-7477-4432-a103-064aaf9dde1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "451e4e52-469d-448d-ac06-fb22ec94e1b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee10adf0-c90f-4115-a519-3c799064210a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "636f3be9-6426-4f3e-93df-b7a253579be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ddd452c-cb66-4023-bb4a-d4e43f19c7f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61dfb6a1-c5ab-40e7-805f-aff9536a36f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c91b77ad-daa8-4cd4-b544-d1fd6f473577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8995598b-e7bb-490c-938d-e6f0bb31ab29",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc94e14f-df13-44a0-9d06-6bc92bd22b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6542241-addc-46bd-a681-4032474a0ace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "205a5b03-b8dd-4606-af79-ae9a52697373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "48ebd059-c273-423d-afdd-5ee5efc9dce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29682778-d079-49e3-bc23-e475ccea77fd",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f20ef2f-897c-4158-b6af-017ea4d5f152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52c8b2c9-ef47-4314-ba84-b97f65053132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0c2fd5-acbc-4630-98b3-ffcb773be003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d58020b-bc5c-490d-bba7-53191f1b0a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5dccd24-e056-4296-ae31-cb6364691492",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c068bb2f-60ad-4b17-adf5-0f4fed12ebc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13b8c700-0234-4be7-aba0-a0e9492710ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d6b7f9-f883-463f-b50b-b4366519a008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2f1060c1-9409-4db2-9be3-31d6a3d7f931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22114301-34bc-4e97-a2f3-b604fe9d021c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6793d9-4f00-4009-9053-aec7674bb574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bf7dd57-baa2-4d7c-80cc-3274081997d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1b9fb0-b0cd-4ef7-8759-6c93fa8c4adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b0dd32f4-827e-4070-a922-3c8aa2af84b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d6c2f0-996e-49e4-ada1-d0e50cfb2709",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db16de7-b644-41c6-adcd-c54b8c7e86b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb7fef4d-e604-4934-b839-d336509a8f94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6713b0b-a28a-4c62-8765-0d75d414073a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3819eaf-8cd5-4d32-8951-a9546e6e4fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4811eeb-2fdb-46bd-8539-e564b7f6e488",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "335a1e49-2a93-4ae0-bab8-f529d57dbdb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c05901f5-d1aa-4493-ab15-949d61cd933c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c567c5f0-b41e-4135-99c5-1bd6b0429fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b7a7c38-5742-491d-8af2-458947893ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80ba17d-e3ae-4334-8472-53438adcc82c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3830281-8101-4c5c-8807-1bba6de2ce53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a99e3e49-a8f4-40ae-b262-3cce70addb80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c0921a-0562-4130-91e1-ed250580e562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "854ae88c-03c5-450f-8c43-2ac0e53de3ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75c6e7a-a58b-4b55-a006-ee257ff75170",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56508069-8b4d-4080-8174-892f29f516ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9619f058-2757-4219-b58d-42950134dde1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c1ca80-5846-45b5-911a-b005714cc79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5397b801-5773-4d5e-8893-dceeeb24d2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9fca168-6d52-4f28-8c4c-0cfe81b14e71",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb0f466-8644-4c3b-9ee9-47e56aa24527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2199c3a1-2cc2-4b59-96ad-88df48dd441c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e2e01c-ed1b-48df-920c-d64658a88bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b934b830-6abf-41f5-a882-acbbad0ab3e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9e0161-0247-48cf-9af7-48806e898169",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c30cb5-7522-42fb-85c1-4c2511fef08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf8d3208-f0f5-4eb7-9f2b-a000e5127652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ff4700-b89e-4e60-97f7-05816352b571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c637d72d-4e98-42f7-a08e-c3a154b23db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a0ae25-fdee-492b-b235-f5907abf9b45",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39998c73-4dd7-4a73-9b73-14ec73b31b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c6bec8e-4b23-4436-bd74-0715d84f74ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15228d7-b8ac-4de0-8577-8cb7d6c8c64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b79548-d968-48a0-a2f5-c7d0d055b400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe3f923-ff5a-4ccc-a701-b580f75b39fe",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e4eefc-d4e6-4f26-b253-db296c5b3929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66b4efac-9d69-49c9-860b-ab9c7a83d5a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006058b1-e6f7-46c8-9749-4bf7732193a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b8b3d38-5d2a-47fc-bf3f-c5bc2fa1d841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009cf4d5-ac2c-4d2c-808f-5263d001d0fd",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97181133-d94b-4681-9031-a83aec07de2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4628a5c8-a093-4c29-97b0-2451b277209f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2292f52d-dd63-4084-882b-81772563d9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ca74c97-fd5c-48ab-838a-419f638ba5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61fb4066-5d29-4e1d-931a-94cf61eb7d6a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3354755-559a-40bb-8acd-99356d6e469e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27de2d79-9d87-40ea-b270-bccd08b66e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb9a28d-6339-40e7-84d0-fe6ce05443bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "058e1102-fc7a-477c-96f5-7a92d4e91f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8045f3df-fb2f-4772-9c88-772708ccfb5b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5527a7d2-0b39-4e1e-8e11-b821ce088094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20aee41d-5d2a-4f91-8a9f-28913f20974f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616f90c1-520f-4fb5-9fe5-a63c434a2fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3294ff17-fe26-4b02-9299-289a20107df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7574ee-bc22-4080-8dd1-a3aedf3b84fd",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c04cc95-1702-477c-bf0f-fa16e9353555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "975454c1-86cf-43e6-8be7-8e4ee7b0c8d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e054d9-6f4b-4c04-a9f7-159922d505eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "70fb7147-8952-4c9f-b29d-e4dcf4d2981a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422d00f6-e3fc-4d4b-a88d-d9defaac8296",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "823bd533-1128-4e7d-bd26-b888d8af5500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36436e26-7a3d-490f-8c9d-346c09180124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b97f43-5bdf-4568-9a18-c735554e81f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "220882dc-7a8a-4d5f-957e-02ec03aab072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb6de7d-0fb5-4339-802f-780c242e9091",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7d6c7d-0245-439d-b2ed-f9edbb92a6b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "435569d2-cc75-4a8f-b1f8-cc225a0e14e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc21e01f-4368-4da2-88fa-d907725e0b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed112f90-6342-4ab8-90fa-7103bf5d9a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9773f55b-0a33-437b-b648-cb020fd2b303",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e43045-81c7-492c-872b-d0217bd7ecc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72ad4ced-b672-4126-8a74-634dc9382f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63433d5-3485-4451-b304-1c5864bde161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1d43072-1f58-48a5-b0b7-16e3509662d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b13d190-ad5e-4f15-ae99-f1045462efba",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf4e979-fe55-4eca-9eb5-1a0bd49e0aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4625c677-a4f6-4251-8af4-404086f15a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28875d93-1d50-4dd4-834f-2608b390c74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f880833a-69e0-4253-85f6-aa4b7b23868a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3616631-4e1e-4759-8401-ba087a8ecef2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33012a3-c555-4e61-a8f1-3bc9eaf86c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3382cec-4984-4110-995c-c922162874b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5628bef-992d-4484-8ee2-efdfdb5fa09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f880d77-4c53-457e-808c-0ee29c51f7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493e8b75-07cd-4a55-9239-838df4d47dbc",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51276310-c46b-4258-b9a1-7d15e359225f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da9cbcb-6951-4897-b9c4-bf0903e2cb2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d270d0c-d477-4462-8679-39a477fb130b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "999c47c2-dd90-48a2-b006-8b1234c33e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3d3555-0837-40e5-8321-68b0df1d7203",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "195ff977-56c2-4c4d-b4c3-448b0e107693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9e93c8a-976d-412f-968c-559547a76aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65dca1f3-c144-43c1-b134-668381330e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4df5ebba-f45a-4b1b-9cdb-dc8a065fa3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36ef88b-6724-4917-980a-4e0f57634d0f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ddb49a-6846-4681-957c-4c36c076b123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "153ddaca-4aeb-4eb5-b274-c43e1438f7e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2925a18b-c18d-4f31-a8a0-e44cb1843452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "259d4f36-7a79-431d-86e9-14bd38330ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89358336-2ad0-45be-97be-50012e8dd7f5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8647a891-b18c-4b21-b7e0-1efd8cb83f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6610adb-11d0-4e3e-8adc-e2c5773ce4ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a97bd2-ce09-4d82-8fc6-46aefb877566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "19d5bdaf-1e4a-4150-9851-96a3579c13be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16f7102-a57e-4df4-8b30-be3135ef5cdb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe575ed-2841-403d-8079-9ec52560a4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32a13797-09a7-4a49-96df-b3a05bdbb52c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f41e1b6-dc70-4120-8143-6759b5573e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "676d7af7-d799-48e8-a2df-0084cc05a4ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c56486a-34d5-49fa-b0ca-6d5d9793772f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3cb675-39a1-43a5-b93c-9c9a81e36ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8083ad1-2e0e-475e-bc15-efb2923b1110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd01ed9-7703-4a3d-b755-d1e61afb558e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4d239e5-7b42-430a-ba41-546350eb80ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7b79ea-d7fb-4384-98f2-04e8d049a952",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17c50e6-e13a-4225-afcb-21120a524033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f7fea9-2d4d-469a-a68a-482509f873d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d5397f-ed24-424b-951b-289d5b5fd284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e01e128-e0b8-4127-a8fc-d4d3c7f082d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e0eeb5-489c-4015-9fa0-6be9d614c2bc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8ee967-e52a-45f7-98f2-31a1a83a7e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff21ddc-e741-4c35-aec6-43dc5adbe080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339a3863-1435-4b94-9b39-fc7ffe9ea906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f812cc1-90a9-4f45-a533-0bb47a549250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a216452b-7ac5-482e-a14a-4e9fe8a094b5",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c78edb-a215-4220-8ae5-5cd9fa1e8503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081c5853-e29c-4671-90c3-f18d9f8a8c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5854978d-3e5b-4998-8932-c84440f3ae31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5b2780-1784-4b01-955d-b26d08469b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da97127-ebbc-48ea-b097-0fd73d8fb982",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11460507-acec-4e81-81ad-86c235c5f307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02ed5498-0bc1-4c1d-a79e-71ea13cba474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05bfdc71-8632-4ec1-8f37-dc247aae7f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "eaa196b0-97e3-4ad5-87d6-cda6c7352eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715b2d66-c4f2-4d08-8449-d42f495fcde0",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f60537-e374-427d-951e-58929c5570e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f0834e-926e-4db6-8f02-13d82dbfd173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76110951-e571-4b84-b7e2-304d09056de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a39196d-82bb-444a-8ac5-4c507c8d700f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee79697-9aaf-451e-82d7-ea20cae481e2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "262e8d6a-05f0-4620-ae0e-b1051474ba13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b290def-4b64-4b72-a38d-17761740667c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9e77d4-c3b7-4e0e-aa6a-f35a9c2ce544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1fa2a3a-48b3-4eae-84f0-700537b536e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f756478-2c4a-4701-bddd-d6a3ff00786c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9292562b-cf90-4373-a86d-82dc311ab87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d46c66e6-5086-48bb-b065-bd5db65797db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a56837-7d70-41ed-b186-43c9c0c7439f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "01328292-2ff1-4d6a-88f1-23fa39538437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9269833-f8bc-492c-9292-cf03deb8b9f6",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "653fa4eb-a2a9-41d7-8c43-855fc0ff4dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f2dc538-909a-4f51-81e2-d608d14858bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197b68cc-b759-4c60-9b93-6b3091d2c266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8ce20ae7-8aa4-47b6-8e28-a77ca5a791d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7aa27bc-761b-495e-9476-ea760a2a9f0d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e276888-965d-4e52-99a9-aafab2f8cb00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4975d5d4-c730-4487-8496-775fbd8e6419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a83e27-9e07-4396-b042-aa8744f254ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "deac4c41-e55b-4c87-82bf-a4f8bc3ae097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa0e963-57c8-4566-8414-ed414de129da",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9953179f-b225-4f05-ad99-4f4d4dda3fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b33f2bba-dac2-4d6e-b716-3857ef079ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd259ff-896e-47bb-ac0f-d81863c2dccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e84000e-856c-44c8-8ad8-df492762732e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279f641c-fdac-4693-adbd-9f4237dcd8d1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6decb90a-7131-4135-b63f-087db3b53a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc99ecfb-6dff-401c-8c2f-016ff5686c50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e614db-9f51-48cc-b5d7-67e35cd9b35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2be168de-0f46-4aa4-bf33-214907394916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c2f637-c529-429f-9532-a3e5dd5c1655",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d1bc54-3722-4aad-bad1-4babf0408b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25b96fa6-f00e-40c1-8d53-adf62c5e24ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff323ad-33df-4af8-9073-b4c1d290cf3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "157a92f4-293f-4aa7-971f-48741b959d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc5d926-e939-4669-910e-f9753e1d2124",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f67890f-1568-4fac-8505-d659f26ed374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "682560ff-b3a4-48ad-85f7-ffb3590301b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8f994d-a7de-44ee-b1da-ca0fc3d9b74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a2f71fa-b725-417d-b54c-2b29ed5d91b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38693a3f-f767-433f-8cb7-0f10df3fbbe6",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41290f95-c2ff-444d-a4b9-4ca75362f123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c62ab2-c682-4499-a80d-84937181f1f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb69ee2e-31ac-46d1-b125-9bfea1ea8e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "507dfae9-b0d5-45aa-91dd-bea298b5ba6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c8bc87-8546-49e1-9bf6-4955833ef84a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b5c8ca-754c-4b7f-b4df-c62acc385fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc64c7ed-529a-46e9-8cb6-3fb0910c1819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997168f7-fff0-4f71-901e-f69c8ebe1699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3d94d080-2d13-4729-8654-f72f2f47870a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5946ec5b-a654-44b3-b12d-3e6817276ddd",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4315e698-ecca-456e-9d0f-1fc32c179afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "185fe44b-f380-4c50-a419-c0bd170c8105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30b0df9-d88e-411e-b4a4-a7543a2ed8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "12e32aa0-409b-4b33-ab6c-e4880a960c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02308d2d-149e-4df8-b2bf-0ae7dec87108",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5388f4-9e6f-4909-8886-835be5884bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9e91557-d395-457e-87d9-f10c3c339e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70d5398-8f05-44e3-a1e9-8311d7c53be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9b3018a-09d2-4dc5-9dce-671581cf6861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db47c153-b6ff-4c82-a72c-4e2e964ac3ec",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "681ea4f3-39d3-4ae0-a9db-9dbd36604143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8268708-0bff-490a-8a6f-c3503fe26926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0375f9a-68aa-4e30-a6b1-f3fe6744e227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "36e57545-b144-4eb0-8cbe-a3144661f6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c2b890e-0157-4592-842e-d18d88813f0e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3e4c42-22e2-4363-88b2-e5a173a39440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd1f4433-7633-4798-9a65-3cfcc59b5261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65db68fc-ad06-4cd3-b8ec-39b1a05f657b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "129fd1cf-5f5a-4be1-9c37-d15f5f35dbc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b0a0707-a212-4cda-a228-e6b5bec75cd4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3d8f48-fa87-451b-9359-3db344e5e0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ccf36e-6a30-4aaa-8dfa-addabb2aeb6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40219c2-05ba-4dc9-b751-7142b6c7c6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "75fe1984-c73b-4f66-8134-be25fe658c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f845242c-d313-467f-acbc-80b7f9dd4381",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df20a69e-d142-4693-890f-62f5f41e8f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26063595-03c6-4dad-b036-b85b2f1d1e0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8472f5-48a0-4802-8602-1716ccec0b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "96ea319b-1562-456c-bc28-333b7cc80ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f21c9b4-5574-43e2-9746-0eb44d9cb384",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee4ed9b9-34f8-41c0-bb89-727f4f6fa5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "494d70da-0fc8-412b-95e4-3e0d4a22b423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746c1cad-e6c3-41a3-8c16-8efac1ed8ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f1015ae-db08-49a1-85e1-680292ef0379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839e40ce-716b-4de2-b0b0-7449bdcd83c2",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23179d81-138f-485c-8b9e-20b9697468db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc165b2a-6746-4feb-a316-9d5bb9e9b795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c552707-bf14-4088-8316-7e055ef941f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ac76758-11c8-44fa-88d8-fd5ff5dc6601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3e305e-465e-4c76-9583-3beef53a4438",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67e5e0a-d18a-4cfc-aa26-772bd3ba7aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "def10713-1358-408e-a6d1-e2a074c31bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26693b0f-e9b2-4c52-a7e2-9269573e507f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88c40ced-350c-4469-9824-2492021f04c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ef9446-7a9d-48b1-86d7-26651c7b0e90",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1059d76-5c3b-4350-ab83-405278ecd592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81aa319f-05d3-4fbf-9650-34fbc8a25821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20fe3091-da4d-4276-b9a1-c5f2c9de595b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f94b8c28-5077-478b-8cb5-39d1eb11de84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572b7bf9-6a31-40d5-b17a-199075234fbb",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe8df73-e32b-42d5-aa1a-ce6563535e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f4b854-0af4-4035-8027-99cf83119fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9fcbf6-a28c-4e75-b6dd-91be7f901b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "470f42f9-3893-4c41-9bbd-ac2d74536047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942836b6-98ef-4d9a-9d7c-b5b0b5c3e821",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "644f9bd2-e68d-432f-bb1a-49fa443aab4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36823eaa-0309-4c56-abe3-bfded6278f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1523498f-0528-44b4-858e-009deedafa12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a1ba454-7001-416d-a837-814974384c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b0bf66-9e2d-4bab-8b80-6b24c31655fd",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19bdfe8d-3771-4777-aadc-25db4284f9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "577ace64-dc2e-46bf-855d-1b1250e35e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e50f724d-43dd-4a46-8751-3511f2940a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "70a73cad-e523-4904-b063-98c6fe146720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4826c033-de94-4ead-a270-06e4080cc951",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5401b6-82a1-4766-a4c2-d60657c5bc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e2c2c63-9e36-412e-af64-ee8147e64d70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e8ba76-7c79-4a3d-a6fc-a2d40a9debee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d1eeefa-64df-4580-a359-54b40c357304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9f6c61-d87b-4927-8451-c8dc44bc4dde",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c943cd-0e07-4e66-a002-3363a26e05ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e91f18e-8e9b-49cf-bccf-5bc4e2a0f4d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f07c24a-fcff-4d10-8cd9-ae2148d80ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cfe2be53-572d-4509-ac78-1cd4fdd86373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6815b311-c7ca-4517-94e5-0131418ec47b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c18fef-2e33-4aed-b377-c3717e3168e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83b9b690-a89d-4a38-a8f1-a7a5f25ce851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4f5199-de1e-4c52-9f49-a09c3b7fa782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "537a4c81-b64f-4e9e-b22c-bc39c457cc87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a74c0a7-5a83-41e0-baf5-7b2960cdd032",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2138aae4-c3dd-4557-8ba2-877891b238fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0270eb4-718c-4e70-838e-be979dc54c1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39acafd0-d5fd-46a4-87c9-e034d407fc00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "062ad4f3-2623-4505-9ac3-4db1c8b654c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146f55e4-595d-4f60-b424-5db44529bd84",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d79f5f-91bb-4e05-aa97-04f37d374ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "76f82ea0-1cb4-43e8-9073-26347ae9bc58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d97b312-0424-4159-a9f2-9d71a848b764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d55745ee-d92d-45aa-9e15-b920923867d6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "92820f59-7b75-4981-845e-8889d65fb79f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7e25da45-cfd0-4c96-bec5-909c2240a0ad",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836131e9-e31d-4d62-a675-2127557c1377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19207e1b-8f29-4144-b0f0-96679f68ad99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266d3499-7d8a-4edc-94b5-8995aff3b069",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9674ecf5-c7a1-406a-8693-09599dc8c30c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f01115e7-170a-4aef-ac16-bc72b3039572",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3c01c73-7d14-4d55-b87e-bb7f973f8c3d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec6d932f-f17b-4fb4-8452-9694ef41806a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f62d7019-bb6f-4e0c-b9a5-eb576f2a7f2b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8bed8483-d4fe-431b-ac43-2caea0db0d80",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fe24d05c-6421-4a01-8fc0-720a325e4564"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f72d44ef-69ed-411f-ac9c-00b095e069c2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "59609fc9-7c7c-49ff-a0d5-5c0e7a7e7b57"
                }
              }
            ]
          },
          {
            "id": "d36f7ee5-e95b-4201-bfee-e47c6f3fbb7b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1feae369-6272-4b58-8305-6feeff502ed0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8badc96f-b033-4b89-8413-3862ed76971c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "47c7e5f4-d009-4973-8910-d330d7d20c4e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5da8c96d-e9eb-47b2-9b11-a370d309dcd6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1103f524-ecb0-4d8f-a788-3106b2344470"
                    }
                  }
                ]
              },
              {
                "id": "5c799b80-08e2-448b-9434-d0708cc6acf9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f60d1cf-1d56-4d2c-9d91-746c14606c2c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ed273ec-063f-4a5f-ada9-02007cbfbe51"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5700c0c-ddcc-4579-92b2-c57fef7df64e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b240344c-d52a-4721-ba77-4ab675e1e4f6"
                    }
                  }
                ]
              },
              {
                "id": "0db006ec-aff6-4eae-9ba6-5839753a17dd",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "759f118d-3de2-4d68-bd60-1c58c7c69cad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0519da9c-1630-49c4-9fe4-fb79b2820cb4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76df605d-01ff-4b64-96bb-e9b08cd3a620",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5b6be785-0059-4a12-8e69-b7b1db62f12a"
                    }
                  }
                ]
              },
              {
                "id": "6c4bd6cb-e339-45ab-b207-7c2f5f04a468",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e66cecf-bbc9-4e7c-9892-57a66d2d7e19",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "686023a5-94f2-49ef-810a-ec7a821fa890"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe160085-6219-422a-a725-f500e0db564d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "271052f3-78d5-4f9c-ae81-0950ab6f5f5c"
                    }
                  }
                ]
              },
              {
                "id": "b87b0044-bbac-4161-a6fd-d4a6bb811867",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d45d598-bbc1-4eea-a4b9-07c9d7540a66",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "80cba2c3-99cc-4db0-b314-c6025227a6b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c89537e-e089-49a3-8a56-d94e6841bf76",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "12659cca-138e-4bd0-9600-22bd8024ba88"
                    }
                  }
                ]
              },
              {
                "id": "d6e4011b-a3c0-4a62-a68e-652c5f47ebb5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bff8a697-0b95-4fb1-91bb-cf7f319449e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bae64d84-8f84-4262-9465-ce7eee3d85ad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db10c004-0a73-4d96-8967-f81231663eee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6a44ae69-5e58-403d-a01f-c7bf964f1bda"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ae7fb3e1-35c8-412f-b8eb-ea07b762f244",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9127f38a-1848-47ef-83ef-2463febbd013"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5aeec169-dbea-4020-91f2-defde39c66f3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b2c1d0d3-f58a-4cf1-ac0b-c05458daec8a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f6f101b-9180-4c6e-bea5-e8148ddd4272",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8f43247e-86c3-4f3b-a684-b1d4fd18b0d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8668564-4f8d-4503-a5ca-d013fdcfa96b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f2a9fd2-a83e-4c36-ac46-5d9daf52e30e"
            }
          }
        ]
      },
      {
        "id": "2c386571-55f9-4619-a02c-b6f2288c5ced",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c80fd118-3a55-4385-8fad-021025710a93",
            "name": "Negative Testing",
            "item": [
              {
                "id": "23561866-b075-4664-a3ed-1f119e677faa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "59774a29-afc7-4343-93fd-53dc6ca811c5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "375344f7-086a-4078-a41a-a8659fe2e72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9228cba-9601-42fd-b860-3e72170201f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af47dd24-d516-4871-9542-4f08939463f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c16d4326-6e60-42db-8266-3d29fd3a0bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6cd9dd-8e49-473d-a797-89de4e8e41d7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f35a642-0fe3-4e2f-921b-758c9d2106ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef191c63-7823-49fb-bb71-294f1885cee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8e5682b-5383-4ea4-a3f0-71eab0774469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2e76386-8eb3-45d4-812b-0e26ab79e991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8c31b7-c7e1-40a2-bfe2-34bbbac5a2ab",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cfe98d-e942-4a4b-a593-471c15437f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b50a668e-0bd8-4aac-9c5e-b61735646698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60dc85f5-455d-4db5-a7a2-9255dc61f782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4767c2f-992e-4d20-8069-45fd39907da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78cf840-a7cb-4f81-86c2-99a654b7c40e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77947a90-7a2f-44a4-8aa4-bbe1cf1cd6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4925130-2602-4818-957f-135fe7277263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9e3da4-66ac-407c-a9ca-31d42cd009ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1db8b18-cb9e-4b4e-b6d2-0c3a79e10edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279c62b9-4b17-4670-821e-cac20dd91b59",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb1a54e-dd11-4a6e-b2a2-e759e1400775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aaa8551-fcb0-4fff-bc80-375f1b9ef02a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4640541-421c-4e1f-8a40-764bda69a91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce08123f-8c38-4ded-a589-6401d9fd66ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f6cc3f-72aa-41ba-8bba-fa5997830e76",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f775791e-1a30-47fa-aef0-e2c80f97474e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c66a8d9-73f0-428b-af24-c5f8c14136fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea71bbd-a1ed-4648-a42f-5bd3f3277f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbde1a97-87dd-49b0-bb15-258ac965ff5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330b30b1-29ff-4c92-bb8d-df6037216ac2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9623ff6d-e8a8-431c-a4e5-36d364299e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bd3713b-7d7f-451d-b770-d7a3e0a8e3d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76996f4-b522-4e74-892a-79bcff70f8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d3c5f94-ebef-43c1-8c6a-5002f7a03ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d0b881-5919-4226-9f53-eb834aabd803",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11fdf946-3bf1-4334-94b8-79f623a8e36c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b54a29-6e79-49f1-9c84-8b66e3b36dd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9749ca6-7bee-4031-b88f-6180124ed1be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c0885a8-33f7-4219-87a0-a691dc015779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad8d53e-5922-43f9-9b43-ebe1a632356f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "849655fb-3a25-44ad-874f-d18d80070407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a633243-6bf2-4518-a3f1-b8a3039eabd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42dd2dd-6550-40f5-80d7-3dce7d0c8d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5c01b9a-cf10-4380-a7be-95bde3e51c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd284f3f-d2bc-4823-96b0-2e5862ea15c2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a5ea0c-f61c-4f19-b832-fd7be1d19060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3fb10f1-c598-4a40-99e2-94e153f4cb62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e52524d-940f-4f66-98c2-7206bbcc9b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d26e522e-659b-4045-b3fa-ef21b1be3da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8a47c0-2f9b-4bdd-bf83-0eedfb4d305e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d9266c-d4e0-47bf-a504-dfdf9b9ea949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a722ac4c-49dd-489d-9be0-d20b19098d1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12668b57-d631-458b-94ad-334d87336b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "66aa7612-8c44-41ac-bffb-1055156a27bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd84047b-a79e-4c72-8cb2-1776a19ae5fa",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae114669-7e9a-4fbb-9cba-232c6ed499af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e9ef47d-3df4-4304-a2a9-822c345c429f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8bc795-759f-4f24-ad07-a005acc0bc0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "58672e10-cd24-4c46-92b9-300955790164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367b7d2f-7070-4f17-bc14-c1799e09df19",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8c7925-c048-42d9-a237-c48f3fc09c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3409abf1-1719-490d-8502-6c56d7fcdc84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd7368d-b0e3-4b74-877e-b4e87d70a0f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb07aa4d-17b0-4ba4-8e89-f5cfe625624c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb140a7c-eef0-47cd-9bb6-b727774ee0ea",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b865dc32-a894-4805-b97e-4ab9cb2f27c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1039c6d4-f4b5-40ad-8d2e-877e6b33bbf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d48f38-95c4-4bf4-99ed-526c7485b38c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d176f48e-73c4-4322-a158-d7b5b6c5b74d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0057fd54-3267-441b-891e-8e73c75ec7ab",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c98874-12a2-4438-bd7f-26d32fb35891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fda04541-15c7-4e11-9fe8-c0c34b70f059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ffeeacb-5a14-4d99-874e-1659aaef44ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c57274a-7731-4f5a-85b8-1e17f23d04ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935752cf-2187-4b04-9112-b32f7d988510",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacea1fb-4754-4312-82fd-74babd9c9508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c862f885-b04e-4cd3-8644-1b4a958dda2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42a2a41-43a9-47f5-b917-6d4619146d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e175e492-fb18-4f44-a139-f504122fac13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ec6aa3-f876-4d4d-abfb-f2477c28b1d4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d868f2f4-3558-40d0-acdb-ddc8d5085e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a99fe95b-bf47-402c-8356-82ec5f06bd8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306850be-db60-4f91-94cc-7270ed77373c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "78d13169-3db7-4177-a31c-5a05cd50640b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe79d19-8664-44d8-a6e4-a0aa38b47210",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2a999d-c956-4f1d-8cbe-d4bada49e183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e221c271-4786-4766-a782-6a097c318eb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b33e2c-7062-496e-9434-a3edfbabc64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9d27b31-9b07-41fe-b93c-e26093f0d1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af62e3f0-3e0a-4ce9-8e06-05d8b189a206",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3715ac8-837e-478f-97d1-015561d9cbeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a7f791f-4405-4b30-80d7-e58186c8230f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933d41c7-e841-4f71-9e04-ab7899f393c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53b09194-82da-41e2-8ab8-6f000a5bff45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19c269c-7828-444e-9034-5b6d912366a2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29959973-6290-4f4d-b794-ae3f9c968090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d1e98b4-2e23-4eb7-9fe1-d982128e2c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8db2b91-2ea5-482a-abfb-805706d9c8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03d289c4-0dbc-41fb-9e1c-a1ece9498b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e8cc18-d99a-4083-8ae6-e86d333b3bc8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a642494-acb0-4060-a90a-aa4d3a9cf97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52d03d27-1a43-4fd2-8a9e-fa8e086f9390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca617fe-d4c3-425d-8a82-9901b24dfa54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b534bb-2cd6-4026-a58d-8fc0c1403ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ebb609-e07c-4ad6-afca-a931d1241533",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7f4fe5-0a16-4f15-b741-91b0af6eb5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1204313-cbd6-478b-bb1a-daf99ac4dc80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a47c0ce-e5fe-4996-bcac-9e2c0505ff3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "654f9579-f2c5-4c4a-90ed-8b8b0c808d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac45d4e7-af5f-4426-a2e8-93b52ae63e44",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43fed1eb-e3d8-43e9-9d69-b165c2963acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51713070-e956-4794-8d73-2b487035b6fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111868c8-926d-43b3-a38b-93ea3fd3803f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2973a4c-3fb1-4bc8-b785-af03b7f6cab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a593342-3a79-4578-819b-cbd4174fb817",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "714a5f2a-e993-4ec5-a918-7f5b080fc704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61155879-7b87-46a8-b14c-b6740dc968de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c395043d-c086-42bb-a125-686c5d22623c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f7b18cd-8899-495f-a196-d7497634d288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446d5cb1-5efe-45f5-a2f6-d49a34389f1d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac4fe67-ba1e-4ce1-832f-73f3beca49a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c0f7ca-2b14-427d-a011-24179c047996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1f851e-4272-4c29-9c9f-44ee74f7e954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53aec1e6-e5a4-4716-b0ba-7eae6e7d2428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3658f4b3-ca5b-4390-bbab-d71f3bac37df",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e160735d-c7b1-4e6c-a860-2e1488460af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31bb1de6-281c-4f87-8e95-5b776a9ee877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6f0fe4-97a4-4397-8460-11c5dce1e99c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7687d402-9ee5-40e1-8bce-530b4b75cdb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f6c14a-9b9b-4bbf-9deb-b90fb5386388",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f237045-653d-4ada-8675-1b3d477b1994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b71ea237-f524-45e5-ae1b-db36a02f356a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1a9876-c9e4-4e73-8c28-acc512ea3f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34aaf185-5c38-4e72-9021-94960a5d6cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952d3cc4-24f8-4d88-861e-fe32c79476ed",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5bb9a11-5b71-4b89-be8d-a898a81cff91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86470b8e-27dc-41c6-a793-52f5be3813f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd3c2c0-4ca7-4366-b3bd-2bcbf28f1c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30049b02-1ce6-42ee-a135-31a874e299b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b12968-2cfc-42bd-ade5-991c73e1a695",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "061d0f35-48b8-4ac2-9a48-6bc767e1d19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85155fa4-8214-4356-9891-c53d98179a4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e87cdb0-0da7-4395-b1ff-2e2385ac8b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dce6b2a-e821-4eb4-8a86-91b86c20df24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb2890a-3a3f-4321-b0d7-9885b7c85d15",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ebcb2d-a9cc-4d08-ad23-fc4162cc356d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8c3ea3e-8d9b-43c1-ae44-5bce1eea3c5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230e6d5f-9e59-473e-8885-9f8acf263d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4212b411-7e1e-4b88-95f8-2a0053199f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b740695-b770-446c-86e1-7ccfcad214e4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c072d6e3-e69f-4dab-92dc-6604142245ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0802f84b-2332-4a8a-a9f7-ed46a4a948ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bafc6887-94f2-47b1-9e7f-eb4f33ad3d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "733ac82b-7a4a-4d2f-90b5-39b41ea3e2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35c8fd6-87d2-46a5-b96a-5b62976012ca",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b78239d-e28a-4e1c-a01a-0d847d8ba60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "286d7c54-1278-4094-a454-195f1e1d069b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70e36bf-4970-4eea-adef-1c808c02825d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ecfbb2a-f2b4-4092-89d9-dc5299213d29"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b51cf4f3-6b43-4e81-8f23-2a8b2a437076",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9192f400-b46c-417a-8bf0-bc38290567ab",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710ad5f3-1008-44dd-be4e-88a815ef4228",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd6ce4a-f467-46f2-bc1b-c036f3699023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "542f7f54-2d0d-43c2-937c-9b4853dd34a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d63e72f-20ef-4ddc-8d08-ba19bfa14b67"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9d7668a-3ce2-4ec5-9153-68af55c8ce85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5533c531-eac7-412d-aceb-812525df9743"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a16c52e7-624e-4203-b79b-9b555998cfa2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77084b91-b7f7-4d3e-a5ff-2cd4bc2c3d97"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "adf31014-13a0-4902-a673-c944f07a268a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f8cdb5bc-cc3b-4b7d-8de6-72f06f5f2413"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "110ef89f-4428-43a0-bc4d-1bc7272e1e2f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e5c33352-b8aa-437a-a2ec-048f6d4ba838"
            }
          }
        ]
      },
      {
        "id": "16a3c850-a051-4df2-8a74-480dfa3dcced",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8ef38972-508c-4901-8dee-59edbb96568f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "11337d7e-6d66-47e0-a6ae-30a064680398",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ef75412f-dd74-4934-8d9f-5a4d8dbfd43b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ddb5478-bf3d-4e53-9f6b-98ad5afd632e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9160a20d-0768-456e-af81-6e647534a828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0786d8-acfd-4c94-b7e6-8c85ac90b7de",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65be7aa-08dd-4fd7-91bb-9729471dc23b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "188dfccd-7640-429e-a490-cef63f11ba32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78118b0-098d-4cdd-9a87-be71c11dc558",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d61fa27-f596-4c14-aac3-f84727ce2098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5783d2f5-6e5b-4b99-adb4-605ae50c99e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6adfd2-938f-4fdc-a901-95023efa44a1",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33bbe6da-c878-44ea-afb2-7c9011590324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f1fa3b-9155-46ca-95b7-cbd69c510d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d59f053-a469-4e55-8365-1b0fcaeeab0b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4e03c5-e136-43fa-96ec-fdde490148ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f412845-41b0-4f55-bf2d-4699cfd5ae5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f09acc-2d0e-40ac-8b0e-63066aa50a6b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec35c1c1-1682-4d2a-bb03-8ab60ad2d28f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f96b7ccd-8863-4f55-8b8d-72f1bff3ba1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c4db54-e6bb-4f95-badd-474c69b64375",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019fb8ae-780a-4817-939a-293ee370e25f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "231b93f2-4fff-42f8-99ef-c3fc3ae60801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0118ac8a-fc3b-4a1e-8996-c35ac0b8dec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ede537-e5be-47f1-9385-6a73ca6afcab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f4fd40-f1d4-4ac5-bb92-9b6b045fb014",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "940048d2-cdf2-4654-af68-8c117ea95f7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0238c843-928e-4573-b770-6616ad508f62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea62e705-7fce-4930-88a5-181c1fdc1571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd8ab9bb-4e32-4221-9498-87683567f114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f80ad1-163b-4da3-8d89-d93c33e16d11",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da4513f-bd7e-496a-a133-b3e2606e230f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c2326ff-b5ce-405d-9484-243ec338eca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "154f3d0b-6e04-46a1-8d23-c94e099071a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d26a524-9077-4d64-acce-efc7b5e1de71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d053d921-ff36-4b41-91cf-21fb26f3f026",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb9bb5e-9b9e-4f31-bd1a-bfd5073184e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff8525be-5c05-467b-8a0f-63650dc55e2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8abb8ba5-6c54-4b23-b977-a9faf6ba4b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b89f8aba-ff54-46bd-b409-d0b7101c63c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783bc6ca-5de5-404c-bd8d-45ff6e62397f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a65910c-396c-4827-9605-412af3375369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8af7879-3dbc-40fa-9d8b-af0363fc8889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23dd8a3-a71f-4409-ae73-678fc5cf8d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80b55679-9484-49f3-8122-542bd68d367e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9eeb343-84ce-410f-83f6-12d328e05378",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c93b4d-19b1-4694-80c4-6c3b80bc078b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ba7d26-e8e7-4278-9cd3-d1a88c9a3035"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14571308-506d-4f5b-94d1-2df98533e254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2946cafe-b664-43bc-bf37-97f0882ad969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b85b35f7-ef4a-4962-9d6c-b949b2089ba5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2eb6bcf-0b4b-42a6-b4b4-2f9b3ee8409b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87b62aaf-95ef-4940-bc5c-0131caa1ccf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a810c1-10d2-46d6-b6fa-7bbbeeb70e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c1f26e6-a22b-48db-aedd-9a519eba6bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7582f3d3-6ad5-4a08-add5-41d03de457b4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308b64e6-4a9b-4d3b-8a8e-44dbb07add23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64fab40f-5636-4980-ba25-410fad8b7455"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "223b65a5-0329-4126-b30f-2075e23e9526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56b1d85b-e1b5-4d38-b9e2-b62d20cbc63e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c0dd3e-1334-42cf-b193-261a30871f24",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04cd5a97-d244-4107-9446-3350707ee159",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d1bd96e-cbe0-4623-af90-f6b7a40a6b1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2de0e13-6e9c-4e81-8195-79a89e1c311f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c36c5c8b-1bb4-45f0-9683-621b742b84a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c974e339-7a02-4a6d-91ed-8eb115c8677e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b8f727-b056-42f7-a402-e1a9eaca102e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdd2767d-1e07-4f16-a011-7d224599cb34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ee4a41-e771-477f-86ac-55abc2215521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "896b934f-ebcf-40dd-b524-9ea9e06de4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d490b8a6-e3a7-4bc3-9bdb-f3c52617c9d1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1609c911-c3ef-4f1b-952d-558901e16ba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "693acd99-c4bf-4e70-898e-5abba63a54fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3763895-18b5-4952-8a0f-5d2e402d3922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05bbfec3-0be0-4e1c-9ef4-5b19bd9684e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7310a6f4-55f6-495f-8ed9-29e01565c862",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f13618a-2f07-42ed-9f36-6850352efa37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2fae287-75a2-438f-bd72-f26f7434be32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d53b9ba-275c-4cda-b58f-d192339066fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efce3403-a5c7-47ff-93ff-2ce5a7942d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a592f0c-fbad-4310-924b-0ff34653d200",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3793e1-75f6-4ec1-804a-630638ed9cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14889341-e9c0-44fc-96eb-7634527764e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0e21d6-58ea-4e71-8799-0249c9617017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2941296-6884-4c96-82a8-69b4cad69c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb7283a-9011-454d-9228-69fef4908432",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d531157-86b2-4a9b-be6d-58d5f70c286c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c72837a3-91d4-4698-9735-dba45b3c27ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be1049d-4e82-454d-b4d1-190a24c04a37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06fe64aa-e6da-424c-a271-5fb93897182b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a840ae8-6861-4884-8052-8c8000789628",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c331bd-7919-4f76-bff1-85bfda44ed87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "824c9820-02b2-4545-b816-715bf9f177ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2d31a2-54d9-481d-9114-9924ce5f7469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc229014-f59b-45e3-9599-783bf1d2abee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6982e294-8180-41f2-951a-bb33ce88a9c9",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3f6906-145a-43a2-960e-905afa958e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b378dd3-250d-4e25-af0b-8e93472ce236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c05bc77-29a9-41df-b02c-30436145fcea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "365a40d2-0540-408d-8858-654ad4ebb819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e192e52-6b63-4295-94b5-eef5f604bb01",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d242a992-6ee8-40c2-9ff8-fd1933e5f888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c02c77f-463e-42b7-9913-27e2624b8136"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b26806-0e81-44da-9269-dc91ec874212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc6fe186-96da-4962-b54b-4217eb53f740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d151f63-f2dd-4e24-b768-f5b5316efc4c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33dd493f-aefa-4927-ac60-beebf3bdbd33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51ece948-9724-4aa6-bbfa-8dca888fe49b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "861e2935-e872-454b-95b7-712b9ec463ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95087a13-e98c-4e17-b8e7-5d09c34ccceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09376b0a-6251-4895-a3be-9797f7c1c9c9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5cf4bf-ce8b-491a-9744-f424d135a5cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72441147-7b9a-427a-ab78-69c2719c6d55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "136818ac-89c3-4ad6-929f-604598e58681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "310574c9-46a6-43ce-8475-f5e2a85d9268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc56fb6-96ec-4372-9320-5a16837d1f61",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19030667-0d74-42a1-967f-71405531d378",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "390f37eb-9eea-44c3-9978-4aa358204bd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d35c593-ffc9-4f69-be58-2c9f5b1acbd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16a5764c-4fa2-45e8-9795-7ac42d3fffde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c822a155-724f-4983-ab6f-23cedc0dca23",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18848c53-38ca-4c97-a858-40582ab828af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8671e72d-3e5a-4340-bf34-0f9ffe1f99fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cbd6a39-6eae-49eb-b032-da2f463e61d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69a7a00f-15f1-471d-af03-3bf48b90248f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b1e50f-59fc-4b08-8872-468f94c364a5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e93727-441e-4a37-9bda-e852be0200a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e03dbd7-0968-4dfc-833f-dc2b460c547a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "079ab3a8-0325-4f69-950b-b4d2b9f88c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7df0911-6324-46d7-9627-3af5dcf467f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac90f19-193d-41c4-a953-dbffb8302c99",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1554be88-bd48-41b9-be9d-5072e1831980",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b41f1d1d-c148-4bad-9980-dcca00f73edb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2f533e-36c3-464c-99b4-23ffb67450d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "692308f0-d4d7-4d34-96af-6884c446fe4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd92da3a-6680-43d9-9a0e-7b6f0bb0ae7d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21597a37-a609-4244-b81c-745e08dd7136",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71bb7866-7a5c-403f-9328-12fe0cdea398"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f62f47-f03d-407e-b7f0-617a332afe7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cbbd427-7b03-4c7f-8db2-32d009dbaffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ede69f9-dca1-41d3-b573-9eae98187f3d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d1a1ce2-ba6d-4cf1-8a52-ac7d03dba4ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9502b8db-f393-41ef-9544-f712d5b51bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9e2c70-3a4e-40b7-a7d3-642df96d0617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e5cb8f7-d1f9-43f7-bc01-91d8c89997fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1e7643-e50f-4b35-9775-6cc3adee44aa",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e95e14-57b6-4854-be1c-9475aa543540",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3aa032ff-7bff-4c82-aa6c-ea38f43b7d08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "622131c3-8f72-4083-ad86-8fbb20e103fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51293ce-3b3f-4b13-b460-62bc740bd431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a74a1d51-ee5a-4c73-bc16-f8df31094d99",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d79c05-3e93-4691-bc66-ee91593cf16d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "835a82e7-015c-48c5-b232-4b801d9e3deb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c57abda-4682-4c0d-8e4e-92e8fec95414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e7b700-ebe5-4a96-aa5e-cc08dcf6bd53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86cd73a-bfac-42c9-90fe-31a6f10a722f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32dd61c6-cc1d-47b7-a2f4-d4cc098f7f4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a5ae627-c3ac-4ab7-8920-6c0db03f6530"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f3a150-b20a-4745-b655-ff770b03ecc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481bcb9c-5b7d-4cee-acb2-fd6227e08cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ca431a-0887-488c-829c-f13670e41149",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493c684f-182f-4f41-98b8-0e527a6f867b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e1293d2-e7d0-4eff-bf4c-586b9b1b6752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4fb5d65-932d-4b9d-a2d6-289c1245f9e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd784b40-6326-4b9b-988e-b9ee0d088842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbee6dc4-a119-46fe-a820-03dfc3bacbf6",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af9f791-426f-4b76-bae4-a21d0ca90521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0278e6b2-38ba-4058-8c32-8f3fbe9cbdf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9a181b-16b5-4e44-98aa-eda819dd98a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7422f59-a98f-4224-9359-d52b7e36a3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "766d0a20-177e-4ef3-83dc-3b3d65742c4d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7032bab3-c296-4709-881b-c8ae3e9ea851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c3b61f4-b883-4d72-b7c6-66fcbab4c8bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cf1c00-5521-4d8a-8034-d3fdaeecd8f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9772e1fc-7dda-46f5-857f-c391a8d1983e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ec8f8b-45ef-407b-8506-da25a47d797b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eba61ee-da90-48b2-85e8-da8ef2d16077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be8d4b4b-f24b-4400-a8a1-aaf6050dcb4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4f4a60-2604-46ee-945a-97175f5031c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "796b4c08-b8ab-460b-9f40-2dd786ac1ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "940b9544-cc5d-4e72-82da-00b3e54d5843",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b048e12b-9795-4303-bdbe-b7085db6b723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "636a1e5f-a332-4a01-b2cc-8a84813e9a43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef92e254-2569-4566-bb67-37098d183cc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7a2fea1-e56b-45da-b10c-7dcb62332736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f7e4c2-aac6-4583-b164-8d79f740f4db",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bac40e8-0623-46d0-a832-4972c2035b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ffe5934-d695-4b4a-8fb4-96b09664b9a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20a3b2a-c32b-4065-9308-dbb76a61efac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab183bf4-d24f-469b-99af-6961cdf29302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a5aaf7-83ff-4a59-99b1-dacb5d875f37",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41554faa-6477-42b0-a082-29ed212ed1d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9617d92-3b09-4250-a410-071b1c33f8b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd1f26e-97e2-46d5-8ce3-a0a69bf1287a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7187ee64-0439-48e0-9e8e-127c4e4dde9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26521448-4a86-409a-9fee-26e493a116be",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7511010-1a9a-49d9-a88b-406ef75ec85e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fbeddae-7b64-4898-b208-ff96f0dc237f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13ac603-088a-4189-878a-569f30448fe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e08002ad-e071-41df-a42d-558467ab963c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ddc339-e340-45b9-b662-613600d64380",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0105d89-1791-42f5-a312-b6f7d0edb552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a78b774-c5d3-4514-bfd8-ab04dc3ad26d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c819f93-83d5-4b65-9951-9ce69d0cd225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706c890d-a7c2-4282-90d8-cc24e667c993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aaf0a78-c74d-417d-a448-f97140f1ed75",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c03c8f-199c-49d8-aaf9-a23166d2a3db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5534e796-1626-42dc-8b5c-13b47976b8ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b9b1c5-26b8-4692-a3c3-ca2adf002f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "148e24d1-b4c3-4184-a51e-1aef001ad4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dacea9d-16f6-4a32-8555-501575859028",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e00fc57-0485-4968-b034-7f257576bd31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58cdcf99-44e5-44c6-be28-f0c02e26a12c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a544d7b9-5adb-4735-bcc6-66852512fadd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73bced4-41e1-4d3e-ae5f-7524d3719a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b181879d-b8b0-4240-b68c-2a48ca916efc",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08245fe3-6de1-4260-a4cf-a1988aca82b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e74bd0f3-b8d9-4e5b-8977-544381cbc52b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb2aa28-d300-4267-8c2a-97caced48b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a1c16cd-dcee-4cc3-8db9-09d040ce94c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3275ae-8984-4703-b793-fa29785ab381",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1473009-e0d5-4537-bbb7-88fcd9f76643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea4dbd98-c194-41ed-b039-a359f9e1d947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf97aa0-d42e-417d-ac51-e00841c532da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9e5070-82f7-421f-9821-5bd286696b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc3e11f-3875-452f-9af7-5bf2b2392ee4",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12dde3c4-9e1b-4ad3-875c-92d82a926990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc408322-747f-4588-9478-586b8f346775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe6c835-67c4-486b-a737-32501ea59e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62352b1c-7b39-483e-a6e6-014ef1b1caed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d78618-885a-40bc-9fcb-b9a3e92a3706",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295731b0-e483-4a4c-9e1b-2e1685ce9d31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ec6ec8-c03b-47a9-82c4-899811b41d0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da0adf0-88b7-44c0-808d-c25aefb23aa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a410f35-2880-41fb-add3-f433f720e0c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f62a21-7a35-4b6d-95cf-27651b4d6f25",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79cae2e1-7e05-4f3b-a5b5-f38fae073534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd1818c-252c-4adf-b688-b7e135b9d84a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a515aef-6bef-418f-9d49-911d526f8b6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d7bb0f-05e8-4336-a2a2-b167ff6b64eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c963eb5-66fe-4511-b740-02f0b182fadb",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d75ab73-3518-47fd-875f-361ddf14cda8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5441326b-4549-4ec3-ad21-2144622b9d48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec64a3b0-1b59-484c-9025-f9f387fb9918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb801b7f-3dff-46c5-bcfb-80a6efda3c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a34354-152b-4e0b-ae56-2aae111d19b0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14eea4af-649a-4a81-b036-1857e8960890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f26fad-5235-40eb-b238-d86e7d28eaf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d2f89db-045f-47ce-bc13-555aee10d79e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f7cf070-4957-41dd-a112-d8154ea49c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8622e5-bda0-41bd-87dd-2681b2d6e5e8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a001f417-86a9-4ca0-b8eb-c96ffb9a621b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "100e9d0c-cff9-435f-9953-93884e135a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7180c816-d0fe-4f6f-bf48-174e3e0f8f00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68e9a643-a9fa-462e-8cda-824c5c9d4d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dada1c4-61d5-4a7f-8f47-cff17a3676ac",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e8ee33-0aee-45b1-8efe-05cbfb7580d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "204bb3c1-1df9-4fba-85c4-0a2820cf3891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9612ed-3c40-4ea0-855f-9e58542fa035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf8aa21-bf14-4c55-867a-f34a325da0e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186c4ba8-71ef-46ba-9f58-087c370ba8fc",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c624fd42-f5df-4bed-8ebe-57edd2077bb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17c8f409-cf9f-45d5-9482-f2d4578ad831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eae0ae6-cff0-4285-8e06-a13ddfa6ffce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4e8554e-6a14-40b1-b11e-ddbe2a7f0ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84c0529-a1f8-4e39-ae17-4158f15f81cb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a42fd8c-7538-4c3b-81a1-5049425a0f35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1df26c2c-61b1-4d78-8ebe-d9a5bb8e62da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9f4981-f3ea-4879-8ca2-a95f90a098fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbe094ff-9e17-4862-b6db-d5efd99158c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ebe491f-6a13-4306-a5fb-6f608424eb02",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df71d5bd-58dd-4b18-8949-9de2021a5b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92447c38-a3f5-4bf1-a55d-7b861cb551e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6923f2a-453a-4c31-8727-faf0b9c22c73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14f6ed3d-3329-47ae-9d58-293a9cbd4ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f0ecc6-45da-4e18-b8b1-91ae7ff2e4b7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39024b52-2d90-451e-99b3-680489a2af53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f1f4df-82a5-4d30-b33a-6e7b179663ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48efa80-8bd5-4138-863c-5b9e899d291a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f415e0c5-a8c0-451b-9424-e743273c4a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361c51e3-c542-4530-ac26-59ed2a401e1c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2814fc0-1583-49c8-ae5a-f3b80bc32500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d3f3f34-5a55-43da-8490-673aecc606b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b03479-20dc-494e-8db7-de6a3d93e0a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d04f22-06a2-4d6d-adc9-3ec1eeb52757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c512ec8e-c231-42ca-b888-b0c1563d6b1f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a6c094-c837-4318-b6b2-dee882e723a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c46a68-1dc9-4da1-97ea-39e99599bb3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab89eddf-892e-4444-8752-081aa32fb9ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f85e224-ad2f-4aa7-9586-32af70b17f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efd7116-5e6d-43bb-a5b6-4355ebfc39b6",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67be01ba-55ec-4e11-b7bd-2bda99e6ca8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd673bb-2e3e-46c6-859d-09d18ef4187b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18febcb-51b8-42f7-bb32-ab025ae750e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a85ae0-4c01-49c2-a78f-b8c7c125d710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c734b149-e77a-44bf-be3b-5f9b74516263",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8623ca0-ab34-45dc-9804-4d336719dbf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "111018e7-c587-40af-9d07-5984166d3311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7dbbb1-b4e4-418f-9c9c-c6d3400ad76c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94a843eb-e166-4b28-8a9c-3d827d2351d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c721493-8212-4412-acfd-220af513db60",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27470a4-52cd-43fe-8835-588d4b46d3ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21024604-a4ef-43c0-a7f3-45598f2c5743"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12b4d40-78ff-4582-8ae6-5b802131ad08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "500f5890-05a3-4a9d-a3b1-c8e4e2858cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59792a6a-64e4-45b4-a98c-89a46f2e39d5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb1fe17-d8dc-481c-b87d-2d23c607f1cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe9a7a90-c4c1-4362-8ce5-3c5355c09735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2977527-ab05-4cba-8c06-b5e5806de1b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "952495de-93be-40b6-9888-358ff3c1e11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d8c81f-a737-4e82-8431-282a2dcea181",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fa8655-2b60-44b2-8e66-1c09e42b60c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "141105b2-df3d-4fa8-842b-10d44e6cf09c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e707800-393d-499a-becd-9eee24e40d63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f199736-0a02-494f-9dbc-b92a7d66a871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7eac1ab-2cf9-4b01-ab4e-bec551b0d4e7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7720d90f-9b24-47a8-9b6e-b831ad0f4e74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2628532e-a504-4ca5-b2cd-ca8a99059b1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5ef8cd-6f85-4bfb-b80b-bb4fe1d08776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de882c5c-e466-4a6e-815c-1272af76cd1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7c1c8a-8406-4183-81a4-63cdad23dca5",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18190cca-c59f-4ca1-b7fd-804ac45e00dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb43fac5-a7ec-4ae2-ae2b-eabbd646a2b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3f839b-9b69-40d9-9888-95f67d6c946e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eda928f-094f-468a-880c-e980005a5369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1071c83b-3895-4612-9fc8-e23dce00909f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5139afff-3cc6-4b4b-bdd7-1b61ea53ca7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19cca6d6-8fa4-4047-a952-c1058dd74ea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdee7d84-6fae-40d6-82ac-a5a4bf0e0580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad68171-4cdc-4818-8a0f-e1e3c776a30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c93e67-56c6-4142-ac2f-75bd7bf100d2",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ab0c0e-bf1c-4eae-aa60-bdbd558cffc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca466a55-6187-4056-9492-8eaf6af6b669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda191c6-55f0-4a49-a4cf-dc235af4320d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "202ece99-3bec-4a17-b6de-019b38a76c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16105ee4-d32c-49b2-8a30-b5d5213b7e77",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c21635f-b0e4-49a4-850a-48fc0dfac0e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e41dc2d6-85d4-4cf3-848a-d36686af65cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d0779c-13f4-422c-8cb6-a6cf6f3e8d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3407702e-b0b6-422e-859a-f26a9a5acd10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2fc4e69-970b-4bc1-b5c2-80ec50779b57",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14bcda06-811b-49cf-80a4-2bdb596f4879",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cf5ffa9-d647-49d0-be86-926c758e4ef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b57576-f6d4-46b4-b2e0-6c2282a64d04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "155374fb-6913-4319-9569-9cfa583d81ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "239e09ac-fd91-4dae-b658-5d7a669a4952",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "963f54ee-6e9e-4241-9013-8c65bf042686",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee0f340f-afb0-47ad-95ce-d296baf600a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2566ee-b6ec-4789-a614-4244aea97cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25580f92-6656-4313-8897-be280d49e53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e54a0fe3-d9e6-4fcb-97ae-effd09d60ac5",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab76a76-1c28-42f2-a7bf-010db9c62bc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd48394d-cb2f-4833-b0fa-99bcc2ae4270"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a47080-d320-4e64-8a5b-68db232bc471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7338e15-c0af-4bf7-96f6-a3942c0352ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a421248d-6d90-4dbe-b1af-ba1755ca39f7",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5d4af2-b69d-4899-b3ff-f4fc66c792e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0b9bb89-6204-4c43-ad75-3c42eefd4ddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0127c4b5-3f44-4ca3-9ae3-cb454d1ed6a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b8e7a07-dcba-4686-898a-06b1b8340339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834cf7ad-5b1a-4866-ba8c-9d25a4910c40",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee507608-ede5-4226-befa-58bc12d3f68f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ff0e806-23b5-421e-95d3-7fe60aa5b9a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d547bd-c1c6-4df1-bf0c-d5fd66786384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b03755e-b054-4dd4-9272-a5d5bc86d031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3d4c42-9632-4d02-9611-8bde9a4499b9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53716ce8-8702-4ae2-847a-ac38f5bb5705",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82dc35de-5b6c-4a88-a8c3-71bc50dd4576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be69ce63-eb1f-4253-899d-13f3e567d511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d27a9c2-a009-44d5-a6dc-7a02664bdd7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782992cf-348e-457b-b956-b2b38bd80873",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16bfcd28-eae5-4e1a-b50c-924ee2732bb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af228b86-a066-446e-9d75-581242fec090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42f6b5a-cd4b-4ff0-83ce-f14aff6bd94f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5bfa9c7-8f6e-4cbe-9411-0dd3d9b92ded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7adb0f3-e6c2-4b1d-a984-d546afa4bcbc",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c314b3e-04b2-4264-90af-65ed7927cd0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7efaa0fc-583f-4864-ad07-6c9a6c957f81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae2c4ab-61ca-4599-a72b-eda30f6a7d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26b4cf61-a8ba-4fa3-9437-81f8be4b9dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2fe23c-0a7b-4881-a6a1-a48902d6a477",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a557a9-9fc9-42ff-9ebc-f5cf97705f2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f16a12b8-f796-4594-9a9d-ca21859b89fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "814961b5-06c7-437e-98ab-ec3f3a11ada9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97204181-9280-4a9a-b538-9a10438d63d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b657f605-2004-4638-83f3-e8cb1274917f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60303a2e-91a9-4457-b21b-0cc8c293918f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c77c982f-7cf6-4939-820f-b905a3e64d23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e515518-ed9d-4407-bb23-c8ffd2c8aa24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3117e84-22ac-4bf9-96d2-21f920e1674b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f136b9-5d72-4334-8cc1-75bdbd6c4edb",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b310296-2523-49ed-b9fa-78367ec7be28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "254d7124-3219-43da-9682-2417e634c6fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c9d43e-d64e-45e6-81e8-80d1c5d28508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44db84e1-9b2f-4e36-8ddc-7ca218a64385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add20e4d-bbfc-48da-a06a-187d60a28390",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a95dba-e50c-41a2-a402-91cc6086aa4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51087ee8-9755-41d0-8926-6af8e0883fec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d4d9f1-46cb-4887-ad11-bae82baad2a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a36bb584-9835-4e3f-b28e-d1bba44c786a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9625bb91-dfe9-4b16-b281-0346e3b859d0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1462dd-9e44-4401-9262-5a88990aa944",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aa33700-10b1-41e7-b0a9-ba7d45c4e305"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "386e81bb-f9b6-4c1e-a227-065cc658c0a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebaf6457-e2b1-407d-8cae-37ddf829cf33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56a54ce-b8cc-485c-b15b-df12eb69fd9f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba1237e-5716-400f-9c6f-30f511bfa152",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b4c7668-47b5-4c17-a289-84ff64155256"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "159313d6-0684-4a84-9d54-528c5940ab37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17cec4fb-1040-4294-8543-f4c660b73aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c534df-cf0e-40d2-acae-5a1c3c55fb02",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed49f767-0c81-4a27-a42b-58523a2f1237",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fe59c64-1d5a-4bb4-b786-db645c629df0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ad174e-96e0-4e73-8b41-0a434590e2ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "331df79b-fc3b-4bdf-97a6-95cdc4b1f9e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a2d657-f1b0-4ee4-8877-6ad9fc1be36e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133545bd-35f1-4ca8-af58-71bd63787da8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59681898-5c48-4e5d-8355-dc89619b8de3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4371060-ec82-4e1e-aea4-c93cafc5089d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1eee80b-56ec-40da-a02c-747ed058d129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098e131d-2414-4942-a699-618673d78b59",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3692b6a-6403-4922-8158-161c44cfb37d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7f64146-7538-4fbf-8e7b-e94416d4968d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a39fa3-e268-4ae2-acdf-1916fe3a4e35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4072eb15-43ef-4d01-a4bf-06de01f87c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9830712-2f86-44c3-ae18-07dd60303224",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7960d8-6757-41df-8fa6-e7b36ea39bf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23e25cad-8291-4ee1-8ebd-c8dd1fad8bc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b269b752-6779-474a-aed3-25d293c8a621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b16d17bd-cec0-4b63-a7e9-3a33abdeec31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0251c492-737e-4f01-a26d-b7fec09183b9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7951dfe-5a57-4975-9f8c-492ed106d2cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc12e3a0-7202-47c7-b7e6-fb2c2f51e39f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "518faa06-17d7-4c04-89da-6cf59c0b77d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41c55520-e680-4ed1-9043-dcb54632fc0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69cb5bd-418c-4795-885e-13eadc13f548",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d99bb2-2f42-451b-8cf8-2d08f8bb4670",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78359e47-6260-4c19-8b98-5caca8f5dc37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fabd34-af4f-49cb-a193-f1b2fad31d01",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7999ac72-91f5-48bf-871e-409bc1d2b00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f6b99b-ac61-4629-8b2e-447b9bec5938",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597be926-3ec5-4c58-af9f-973fe597cd8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40ec14bd-e80a-4f8b-a4d9-06a77e4c7b96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff00e03a-4789-4076-b76e-08b949a808eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec145d50-86d1-4595-a067-e3bea6fd351b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db396e7a-ea0c-4f06-af4f-cf823adedcd9",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb1884e-46c8-459e-9d32-03d59e63c928",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5afd97e3-ea2e-4cc8-aab0-58cf6ccac42e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c432bb-6d8f-461d-9842-9ddacf1ffcc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6c082df-6e07-458c-86a5-6167d31e6e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4633e159-8160-41ad-9d4a-409f6e094553",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3577375a-dc15-492e-bbd7-7b9130bb276c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9bf7d34-95fc-468c-ae4a-cd60f535011f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8811031-b6c7-4627-af15-7bfec95b5e15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffe25498-7023-4d61-9fd7-bfa33dc5a64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f6862d1-0fc3-4aa2-b983-3efc8f695e7a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2296b8e0-affd-4d4a-a2df-57938a354b08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96c77d15-c03f-4097-957b-770b145aac8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "608d4e29-fa69-4d13-91fb-81e77e841f3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ebb4346-af29-4caf-819c-1a09f6c658dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4f60eb-e348-4c75-8328-8d479fccbbdc",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11eec5d7-929b-4b20-ad53-a32bbc242f58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdd009fe-03ce-4331-9bb4-d76c8bf6738d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25588d02-9978-4e49-a988-7d259840d42b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db9c53e7-9d92-4cae-a676-37b884a4f82b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8039fc4-9697-4b4d-99c1-58c63eb55344",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77cbc1b6-ba73-4b57-9b9f-8892c9d77615",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "075ba487-c4a3-477a-a16a-85621d2d3f19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "516d05cd-74dc-41c4-a70c-6d49f5570644",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da666697-0866-4f76-b9c3-e851e147cbd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9de2c7b-fa84-475d-bf20-df5a7eb5185b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cff4aba-0d29-409a-a797-71f283aaafb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32db811e-57e3-4cf4-8af6-272cbf231dc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a7dee06-3e68-4304-9679-f6af59cfcc60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61a1d46d-832c-4b16-8d46-1a83b277984e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d148a545-40f1-43b3-b0dd-bf570c67ab54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05b534ff-91bb-4126-9bed-d501c74bc8bd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5796d77d-4da1-47fe-ba64-32e4e13bae6b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "41db6b87-7dbc-439d-b342-e548d4af91ec"
                    }
                  }
                ]
              },
              {
                "id": "b197ddc6-3570-49f5-8526-058cacffdfd2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4411c404-1d72-4641-9b16-55d06ae9092d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec47d50-c2e9-46dc-9afc-d55398eae397",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c58744a7-4dee-4c2b-bd92-859e00fd6bda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a809861c-79b2-425d-acc1-14e2430a149a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04d61086-da84-476b-9065-ac86119c46f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33e44205-61e7-4049-a139-b51446729255",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0f5e18a-76a7-416f-be6a-2adc4fae450c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9d33fd9-7ad7-4f37-8fad-9424e5b7ce9c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b1d7f7b-0687-497a-8aac-61a4080afce1"
                    }
                  }
                ]
              },
              {
                "id": "eb0cef99-5246-4ee7-945c-f2562715d63f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "91ea23af-9f86-4c91-8c35-9278171f04a8",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4f1d33-4a95-4109-ab76-5d08d3382394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7be4f3a1-3608-44f4-95f7-506b855e6c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410aa315-ab7d-4531-875f-67ce34dcdc30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b50b3b95-027c-4ef7-844b-fe5a519e3bb8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c947a05b-21f8-43d5-b5ab-f8f148cb35e8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a0b56a61-a2c8-409b-a1eb-59e31b1d1bf7",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9b9907d-62ee-480f-89b4-ce7c49eeae7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "edf94308-cac1-4bc8-945c-dd6fa0b30513"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26cbc8c0-b686-412b-a54c-ccf1ce84ef25",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5bd63dc-cccb-4bb2-a01d-ccbf01b5e829"
                    }
                  }
                ]
              },
              {
                "id": "2104397a-5643-472a-a66f-ed6b812df81f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c89ac2f6-77fe-459a-8313-4ed0a8414cb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4514cd62-312a-4aa6-bb72-e3870fafe2e8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4057762d-c1b6-470f-bdb2-dc3b283bebca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0aa7ce1-14ef-445b-a3c9-0582bb3414af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f6758c5c-6d49-442e-bf15-534819b47065",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9b9006ba-3f95-404d-ad7c-aa1ace7e96a6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df847ca6-6a31-419d-91f9-96a7207c98fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "16e1210b-ffa7-4e41-ab88-82ce7b20c693"
            }
          }
        ]
      },
      {
        "id": "2bcaa197-b97a-406d-859e-c6cd5cd2dafc",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c9e99132-6670-487b-88e5-4bebb25a3c38",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b166332c-91df-4984-bd0a-d9f52cc1c796",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "561a850d-2013-4979-8535-6735b91b8cd9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00944fb1-d56a-47bf-b46a-89d52187ba53",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "35282326-4d3f-493c-a4d6-c30e586eb743"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6564e60-893b-423c-a45c-77736e5107a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4017829-9fbc-4af1-bedc-1c64a04decfb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63dfd735-38d6-4e67-b790-469cc0063b38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b91b2ee2-03de-45c2-8c62-9a356df9e36f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e1de60f-ef12-4363-8f50-06bfdc97f2d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fd3fe87-7cbb-454b-b237-2f2e7d4a4838"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f184fab-fe82-491e-bbbc-3b6cae886847",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "525f574f-a4f9-4816-abfe-240c38bbbef8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9c30661d-b327-4c92-af60-9044b83e6576",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "155eca85-2fc6-4dbe-a86f-293d9e7acf20"
            }
          }
        ]
      },
      {
        "id": "a8b9386c-4aef-4d29-ab14-03012bf31576",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b5f5c6ee-462d-48d2-b9be-08ccb58d07e7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f404b3eb-787b-4139-99fb-19d12809f4b3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82888ba1-2de4-4a05-8bb4-5d4247bad1fc",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ce9135-12fb-4595-8e91-f8f04433a2ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3db9883c-ad32-47a6-8d62-3964b99b473e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ba731d-c525-47a4-80b3-ca44e5420f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02df4a49-cc19-4c1f-9650-76f440713cb5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb5f7845-c3e1-461b-9fe5-74918c8c64dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae1e84cf-1e89-447c-a482-4baa7289d88a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab62212d-d9f3-4736-907c-77e8cd60dd0e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6db3b757-177f-41b0-8e63-17b03348c86e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dfa5a962-dd9a-4a77-b7dd-7e3567376a3e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d7584a73-0386-4344-98fb-41983ea20fca"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b37c4a3a-2dbc-401a-93b1-1259bab00fe5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2aed9f8a-3e9b-4bd5-9354-c23c705ce851"
            }
          }
        ]
      },
      {
        "id": "f2f6788f-408a-4ed1-b62b-56ca52cd549a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5db69254-f9a0-4d60-a381-52e28a349431",
            "name": "Negative Testing",
            "item": [
              {
                "id": "72ff913f-63d7-40cf-a6f1-9760eeda91e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ce8fc9b4-cea0-454c-8720-cf57a7e3e1bb",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0948782f-c740-4db2-af51-dcf9472a6877",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b3aebdd-4809-4b72-9f76-53ddaa386a55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "769af6ba-0e65-413f-b111-1a3b18dc422c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "201a6e4c-8b0b-41c7-9263-2af82d2b369e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c071ee2-8981-44c1-979f-dcc63a9cfed0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f68a0df7-9f81-43fc-83cc-04f741b92060"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe540f89-8163-4ed6-ad4c-edeb7148626f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d73adc06-770a-402e-885a-e2b409014dee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8202783-aab0-451d-9e39-88c802544d9c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f3c8d4a8-8789-4efb-8076-d967d49bfcd7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "02cf4a07-602c-40f1-92c8-db03242b937b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5af2ed77-88d4-42f1-8e55-939ea8ec41e7"
            }
          }
        ]
      },
      {
        "id": "3e6fda02-1e76-4dec-9ebf-d55683550837",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "872a0b62-8efb-4494-bf8e-e917164ad1fd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f562d315-0800-4d9b-b95c-0d2ef0d2a4b5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "38e091c8-d444-450c-a708-e8bdf330b1bc",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "910650a2-fc38-4980-aabd-95e6afda462e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e0a91180-5d6d-43b5-be8a-97c95722a37a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 268.012195121951,
      "responseMin": 12,
      "responseMax": 4957,
      "responseSd": 718.7796991769038,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1686184978231,
      "completed": 1686185054803
    },
    "executions": [
      {
        "id": "3b056e02-d3a5-49b9-937d-4cb77e4099c0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6edec125-cc68-4862-8016-98fddee92229",
          "httpRequestId": "2df5155d-312b-4aaa-b732-e8d4d3210f17"
        },
        "item": {
          "id": "3b056e02-d3a5-49b9-937d-4cb77e4099c0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e933deac-88de-48d7-a57e-85dae6abe539",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 0
        }
      },
      {
        "id": "2c1b325c-3539-4500-b2af-b9d622e27356",
        "cursor": {
          "ref": "b3709df4-3088-415f-afd8-b38ec0da3b19",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "94f88b9d-fc88-4483-b00f-23ad7a1bb7d1"
        },
        "item": {
          "id": "2c1b325c-3539-4500-b2af-b9d622e27356",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "341f48c0-7a0b-435a-b394-af2445720d3f",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 0
        }
      },
      {
        "id": "bb0c21cc-b83b-46ef-b820-b903d4528487",
        "cursor": {
          "ref": "c5f0fbd5-0e59-4cc1-a2e2-893cac160c0b",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6481e7d2-e05c-4e76-a0c1-15307c5794c4"
        },
        "item": {
          "id": "bb0c21cc-b83b-46ef-b820-b903d4528487",
          "name": "did_json"
        },
        "response": {
          "id": "abb6b42a-8aba-4ce2-a4db-27732f9ab8dc",
          "status": "OK",
          "code": 200,
          "responseTime": 347,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7bf17a-20ea-4f52-945d-08e2f8f995d1",
        "cursor": {
          "ref": "ed9ecff5-1198-4bdb-8481-dc682c9a11cc",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "35c63745-598b-432d-91f2-8c9619c74980"
        },
        "item": {
          "id": "0c7bf17a-20ea-4f52-945d-08e2f8f995d1",
          "name": "did:invalid"
        },
        "response": {
          "id": "bf03072f-4675-4c32-9baa-48de3c16fa77",
          "status": "Not Found",
          "code": 404,
          "responseTime": 522,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "0c7bf17a-20ea-4f52-945d-08e2f8f995d1",
        "cursor": {
          "ref": "ed9ecff5-1198-4bdb-8481-dc682c9a11cc",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "35c63745-598b-432d-91f2-8c9619c74980"
        },
        "item": {
          "id": "0c7bf17a-20ea-4f52-945d-08e2f8f995d1",
          "name": "did:invalid"
        },
        "response": {
          "id": "bf03072f-4675-4c32-9baa-48de3c16fa77",
          "status": "Not Found",
          "code": 404,
          "responseTime": 522,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "afa5d89b-0ceb-41e3-98e0-b0ea22ff0bd4",
        "cursor": {
          "ref": "5f9ce9ba-d3a5-42d0-994c-49c76a56f946",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "bad9ce7f-8017-4c50-b53b-1f94da322cf2"
        },
        "item": {
          "id": "afa5d89b-0ceb-41e3-98e0-b0ea22ff0bd4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "144f9167-d294-4fcb-b699-412957479ad4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5133b90c-ec20-4694-8972-0f6f587844c6",
        "cursor": {
          "ref": "484c0bd6-2c47-4f82-b2ca-5a4aaaa442d9",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "906f10b2-c69c-4724-899c-ae91f6d437d6"
        },
        "item": {
          "id": "5133b90c-ec20-4694-8972-0f6f587844c6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b63b7910-4ab6-4f8e-93c1-a85701494e3a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "519f98c5-626f-4d13-86d0-b8d00fe1ef3d",
        "cursor": {
          "ref": "d3557efa-6e14-46bf-8666-2431866f63dd",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cd4ef9de-8a5b-434d-9e8d-db519dd54602"
        },
        "item": {
          "id": "519f98c5-626f-4d13-86d0-b8d00fe1ef3d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8bc09691-d0b6-4424-bb24-c8883820c313",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "799481bc-e126-482e-a3fc-6caeb95f0b06",
        "cursor": {
          "ref": "fbea18a9-13bd-42cc-8cc6-2f3c80086e78",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ba45f261-eaec-4757-a427-ce9631c3b320"
        },
        "item": {
          "id": "799481bc-e126-482e-a3fc-6caeb95f0b06",
          "name": "identifiers"
        },
        "response": {
          "id": "a3090e17-cbb5-4143-a561-3e23f087e172",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44569a5b-c76d-4e23-8cef-7b7927a5fda6",
        "cursor": {
          "ref": "260966be-3bab-4978-b4d0-0cdb24bdd3c6",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "aae4a408-05db-41e2-b1bd-f268bc7dc430"
        },
        "item": {
          "id": "44569a5b-c76d-4e23-8cef-7b7927a5fda6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e7026e45-be25-4c17-9d6b-da9e85199dac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b0b11af-fc5d-4d57-a6e7-3c2c60ed4944",
        "cursor": {
          "ref": "571ad28d-8aa0-4673-bbae-f960b57bc963",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "55b5b389-f412-442e-b3e7-58cf9a3c128e"
        },
        "item": {
          "id": "2b0b11af-fc5d-4d57-a6e7-3c2c60ed4944",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4c9de4c1-3b24-4858-be0f-93a3559a92cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3617a82e-eb66-4825-923b-71e6cdbde0ed",
        "cursor": {
          "ref": "10fa1085-453c-4473-8558-076032f3cb9a",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6644f9bb-da38-4202-bb48-378119edbf9a"
        },
        "item": {
          "id": "3617a82e-eb66-4825-923b-71e6cdbde0ed",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4d7dcd34-2d5f-4b91-bf3a-0703ba47b65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451b6b63-8abe-4b85-b62b-208c23b7b87a",
        "cursor": {
          "ref": "0dd6abf4-36a4-4647-85e5-9278b170d17c",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7825f52d-5b9e-4307-9c99-9894cb02a0be"
        },
        "item": {
          "id": "451b6b63-8abe-4b85-b62b-208c23b7b87a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "69a5e0d8-8276-4b7b-a8d6-2d3b1aea6c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb07007-5ec8-40d5-8469-27294b5b5ed4",
        "cursor": {
          "ref": "1f6f32bf-7335-4885-b2d8-95a15533864c",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5940e186-7b11-4016-bd14-bcf177d7f9cb"
        },
        "item": {
          "id": "bdb07007-5ec8-40d5-8469-27294b5b5ed4",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "337b6b68-bee2-4f87-8ed3-86e00a41b471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6c08b2-72e6-4135-891a-85df00e262ed",
        "cursor": {
          "ref": "0c3f0901-1227-4a61-9c17-158cb048b0cc",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0d25e7c5-f307-4f1d-9ead-430b38e152ff"
        },
        "item": {
          "id": "4c6c08b2-72e6-4135-891a-85df00e262ed",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6b27feff-9f7e-4c46-a85e-c36909c7a3a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e999ae7-ad63-4db7-b7b3-76b60ad98d0c",
        "cursor": {
          "ref": "a77c3308-f019-45d6-9e19-d3696f3de18d",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "19c3eb1b-b8f3-4c85-8924-e7c29b7ca36a"
        },
        "item": {
          "id": "5e999ae7-ad63-4db7-b7b3-76b60ad98d0c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f7c6508e-5a4b-44dc-8ae5-c33fc7186115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "381d7415-5a0c-4a1d-a20f-3492231a9709",
        "cursor": {
          "ref": "90dba0c2-dc62-438a-bfae-67da3ba82969",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "22cf7548-b352-4210-892c-53bbd6a34e80"
        },
        "item": {
          "id": "381d7415-5a0c-4a1d-a20f-3492231a9709",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "134ab5c4-0310-4631-9acb-62a99df93c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7bdd584-ba88-48f7-8614-611d59a08b7f",
        "cursor": {
          "ref": "193f62c5-aa4a-478a-8fed-3831d6b566d8",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1cc5f90f-f204-450b-9131-14a775315b65"
        },
        "item": {
          "id": "c7bdd584-ba88-48f7-8614-611d59a08b7f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "97829ae7-baf4-41e7-9087-a1e00862a583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "219b3b4c-e87b-46d3-94d9-7c6d500f4697",
        "cursor": {
          "ref": "26d2a282-6962-47d4-ac99-071d4d32286a",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9ec8f352-d8df-42c2-8882-d3704c199658"
        },
        "item": {
          "id": "219b3b4c-e87b-46d3-94d9-7c6d500f4697",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "79891cbb-d5e2-4f8f-b728-3d80b710f8bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29edf448-e057-4c07-856e-776d9636c470",
        "cursor": {
          "ref": "ce8c5e2d-2e0e-4cd0-a0eb-9bd93df2db3c",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "98ffbbef-b539-4844-a08a-a23913f12360"
        },
        "item": {
          "id": "29edf448-e057-4c07-856e-776d9636c470",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1c6ae3d9-da6f-4dd9-9f68-a0c74aa46a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e575f5-f8ed-4236-bbea-246d24c3ac17",
        "cursor": {
          "ref": "70adc4cf-3dc1-44ff-bf22-f6fe9caae811",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3ab089a4-bd49-4928-a287-e95a3bb8d25d"
        },
        "item": {
          "id": "80e575f5-f8ed-4236-bbea-246d24c3ac17",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "121798dc-786d-4d34-8288-e7261616f081",
          "status": "Created",
          "code": 201,
          "responseTime": 922,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "3959b63a-d5e8-4547-8963-8d49040bf250",
        "cursor": {
          "ref": "d4854714-22e2-410f-8459-714046f8c70d",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "355fc974-52a9-4a31-873c-6f5b5cffac1b"
        },
        "item": {
          "id": "3959b63a-d5e8-4547-8963-8d49040bf250",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "bdfb3ae8-a49f-4917-83f1-707187da4c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786e11d2-12b6-46e8-b23f-479086a8d601",
        "cursor": {
          "ref": "e055552b-8f59-4609-b38d-7bee6353b51f",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "86d1564c-ddff-44de-9d53-f7f9713115f0"
        },
        "item": {
          "id": "786e11d2-12b6-46e8-b23f-479086a8d601",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8b95f1b2-527a-40dd-a43f-b690e7100756",
          "status": "Created",
          "code": 201,
          "responseTime": 4957,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "599a234b-e63e-4cd0-ac07-c624cd86f607",
        "cursor": {
          "ref": "844feb8c-d705-435c-b17a-892db453032c",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "34f793e2-392a-4453-8173-e59d3d40f68a"
        },
        "item": {
          "id": "599a234b-e63e-4cd0-ac07-c624cd86f607",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "cd5a978d-c676-499a-a378-e34e1bd7228a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ffe6536-859b-4a93-b1a8-61cc2951194e",
        "cursor": {
          "ref": "8fa2ed9f-8288-4741-8916-06bd9afb3741",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "965f30f3-7739-4b04-b0cc-0b5236cf7cf8"
        },
        "item": {
          "id": "7ffe6536-859b-4a93-b1a8-61cc2951194e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "0c33ffdb-d3ed-4f7c-99ed-9956161d5823",
          "status": "Created",
          "code": 201,
          "responseTime": 3116,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "015059e2-8a25-4fd2-b406-004aff7f4392",
        "cursor": {
          "ref": "cd06866f-4987-4208-b100-aa32a833386c",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2b8a3f2e-fd71-4869-95a6-7e693cb9b2ef"
        },
        "item": {
          "id": "015059e2-8a25-4fd2-b406-004aff7f4392",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0c400caf-e38e-4012-8ce6-f6439da1333a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319c3e4f-2698-4d3b-bece-3f980b0ed908",
        "cursor": {
          "ref": "7c591058-8215-4045-9577-94e1fa8ff286",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "9ad0b877-4054-4c6a-87bb-d55869b32f2a"
        },
        "item": {
          "id": "319c3e4f-2698-4d3b-bece-3f980b0ed908",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c75a1c8c-33ad-4270-896f-2757ba5a765c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c42b38-7e4b-4d68-9f4c-be9564813035",
        "cursor": {
          "ref": "4feed85f-096b-4647-92db-90f073765d59",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ae4e2959-3def-4c6c-b572-909cec8cef4c"
        },
        "item": {
          "id": "a4c42b38-7e4b-4d68-9f4c-be9564813035",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "1774654a-036a-439e-ad9f-8e1a68ddf912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916e8c82-4e14-410e-a0dc-9761cab3b498",
        "cursor": {
          "ref": "43bbbc05-48b3-4c44-98f3-994674826c51",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5a073063-63df-46e8-9477-f0e306e7c258"
        },
        "item": {
          "id": "916e8c82-4e14-410e-a0dc-9761cab3b498",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2b093d85-5dce-4e76-b6d9-23e15d2b796f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3acf89ee-27ed-4188-a5c4-c219f1ccbb06",
        "cursor": {
          "ref": "3db61177-54e2-405f-9bd9-ce35fd8e374b",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3d177372-453b-4cf4-a17f-f8a736f1c2cc"
        },
        "item": {
          "id": "3acf89ee-27ed-4188-a5c4-c219f1ccbb06",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "50da3f3a-afac-443e-ae61-13e2a5b87279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7c958c-fc8b-429f-96eb-41081d06924c",
        "cursor": {
          "ref": "e8506fd9-d3f6-4845-b42e-37705b3d33a3",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4804317c-2717-4064-89ab-da34daba5b04"
        },
        "item": {
          "id": "bb7c958c-fc8b-429f-96eb-41081d06924c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "75ff1823-9f6e-46db-bf4c-c871bd8e51b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa3e374-62fc-4a1a-8065-f7d8e81aa485",
        "cursor": {
          "ref": "54a3631e-3708-4d0b-aacd-e72622f3c568",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "dbc57e27-f030-467b-b1c5-232d9428e42a"
        },
        "item": {
          "id": "5fa3e374-62fc-4a1a-8065-f7d8e81aa485",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b31766b2-98ca-4d2e-b8f0-bd0c3acb9d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0bab77f-4ece-4cea-8785-abbf3f828649",
        "cursor": {
          "ref": "d402552c-d991-477b-842e-18a3c4aeabe1",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "08d3a20a-e824-4296-8d31-b8f3ee3fa279"
        },
        "item": {
          "id": "f0bab77f-4ece-4cea-8785-abbf3f828649",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c7cedf6d-b4c3-4e73-a1f9-45b4a14dcdfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b66c46-d4c3-4d6b-a9cc-aa0503b25fec",
        "cursor": {
          "ref": "0c21f8d2-5b2a-4cf2-b93c-db155f7e21b2",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2ba05bc9-5b98-4c27-9c3d-3d22e4bae534"
        },
        "item": {
          "id": "07b66c46-d4c3-4d6b-a9cc-aa0503b25fec",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e1de4c7a-2c1f-4f22-867e-2e82be81ff40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbbed8e9-a192-48b9-b9fb-d01d3e58809b",
        "cursor": {
          "ref": "0b51670a-3e9c-4044-a4d4-ebf4fa115257",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1a048702-7f89-43af-b0ae-c45494f05785"
        },
        "item": {
          "id": "bbbed8e9-a192-48b9-b9fb-d01d3e58809b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3d8a3255-77eb-4eba-96de-de6cc9dca8c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff5afeb-6430-4069-90b2-be05f81ebf02",
        "cursor": {
          "ref": "6ba3f56d-02a6-4e4c-9fb2-63f6494bc800",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "696eca62-072e-45a9-83c9-ff2c6fa5dd68"
        },
        "item": {
          "id": "2ff5afeb-6430-4069-90b2-be05f81ebf02",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "aaf94360-0799-4fab-80c7-cd4525e6de44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ad19ee-8589-4e07-937f-560355cdcc01",
        "cursor": {
          "ref": "2b496dee-2c61-4c11-818d-8a1014fd0bdb",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "52bb2ef0-2b86-4180-b7ba-8d6faf8ec094"
        },
        "item": {
          "id": "76ad19ee-8589-4e07-937f-560355cdcc01",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c7dfeb1e-1cc8-47e2-8751-4eea11f8f5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2dcd4d-dd09-4ff9-84a5-e02ea35598ed",
        "cursor": {
          "ref": "06360ef1-4f74-4ff2-85aa-2fb73f5a5eb7",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5a520036-6b26-43fc-9acd-cd8d9f903bad"
        },
        "item": {
          "id": "cd2dcd4d-dd09-4ff9-84a5-e02ea35598ed",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d12970af-9056-4467-8bc3-7e1929d6d09a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c434b4c-8e9d-4160-9dff-b3d0ffc666da",
        "cursor": {
          "ref": "f16e8688-66fe-4a5f-ada4-4e5573862d27",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "be0e3bdc-29dc-4927-8b87-a83ccb06b6dc"
        },
        "item": {
          "id": "4c434b4c-8e9d-4160-9dff-b3d0ffc666da",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "879ffa44-1069-4f8d-94b0-13c1e689b1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a11d1a-d8d5-4797-9f58-c5a9650c3edf",
        "cursor": {
          "ref": "57a74a99-290d-46f7-b20f-9094b91a4889",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "dd7660fc-76e9-446a-9bca-ba85369d4d5b"
        },
        "item": {
          "id": "c4a11d1a-d8d5-4797-9f58-c5a9650c3edf",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8a5828fa-55f5-4fa9-b864-29938ff7bcc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee10adf0-c90f-4115-a519-3c799064210a",
        "cursor": {
          "ref": "263c0565-522b-4502-8328-069ff1180ac3",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "722ddf8d-38bf-432f-8ad3-247ac7e08388"
        },
        "item": {
          "id": "ee10adf0-c90f-4115-a519-3c799064210a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9ade5fe0-48ad-4717-a33c-acab44df1698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8995598b-e7bb-490c-938d-e6f0bb31ab29",
        "cursor": {
          "ref": "3027fcba-fbde-46ef-b2f1-e862e97fb67c",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "cb482b85-b2bc-4703-81e6-289c9598e7cf"
        },
        "item": {
          "id": "8995598b-e7bb-490c-938d-e6f0bb31ab29",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a15f12d2-a595-4a3b-888e-38524ab01c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29682778-d079-49e3-bc23-e475ccea77fd",
        "cursor": {
          "ref": "34c6b9ef-d711-4797-81a3-1cdbd2152f7c",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "70ae1a7a-1d9d-48a3-b533-da3660a41289"
        },
        "item": {
          "id": "29682778-d079-49e3-bc23-e475ccea77fd",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "93f643a0-3458-4791-a394-5bd3a74fa6bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 858,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5dccd24-e056-4296-ae31-cb6364691492",
        "cursor": {
          "ref": "c731326d-b8ed-4c2d-bbc5-4707fa285286",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b9df3ab5-3313-4792-837b-b3a3b5a5e527"
        },
        "item": {
          "id": "b5dccd24-e056-4296-ae31-cb6364691492",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "fe4265c5-d435-4a47-b0c6-0ba1ea38cae2",
          "status": "Created",
          "code": 201,
          "responseTime": 2741,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "22114301-34bc-4e97-a2f3-b604fe9d021c",
        "cursor": {
          "ref": "7b4df592-d565-4924-bc8c-0ee91da788df",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "79db9ecf-58ec-4d09-a524-72f9b7ef3ad5"
        },
        "item": {
          "id": "22114301-34bc-4e97-a2f3-b604fe9d021c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "776b4048-edb1-4905-8a36-c71ec55304dd",
          "status": "Created",
          "code": 201,
          "responseTime": 2505,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f1d6c2f0-996e-49e4-ada1-d0e50cfb2709",
        "cursor": {
          "ref": "d33e02be-9b9c-4a94-8284-b1b0eb7fabfa",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cec7d274-cad3-4c79-adf1-94e4c941e599"
        },
        "item": {
          "id": "f1d6c2f0-996e-49e4-ada1-d0e50cfb2709",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f97ed9a2-df66-401e-becb-2b748390c719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 608,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4811eeb-2fdb-46bd-8539-e564b7f6e488",
        "cursor": {
          "ref": "2f349a96-fc0d-4fc0-9f10-3b36f7a1c043",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "436a646b-45ee-4c79-96c6-3c42c04a9bf8"
        },
        "item": {
          "id": "d4811eeb-2fdb-46bd-8539-e564b7f6e488",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "42cd0e16-b823-4051-890a-02d0214d7aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80ba17d-e3ae-4334-8472-53438adcc82c",
        "cursor": {
          "ref": "108a6055-b6b1-46d0-b2b2-a910bf5674e7",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6c53d1c8-fe39-45b6-9307-334a3996df7a"
        },
        "item": {
          "id": "a80ba17d-e3ae-4334-8472-53438adcc82c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "322244bc-54b9-4845-90e3-fde71912b0d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 840,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75c6e7a-a58b-4b55-a006-ee257ff75170",
        "cursor": {
          "ref": "622580b8-66d2-4684-a13f-6e2fb763b887",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2853805c-0fb3-481a-9b27-13fd941c7140"
        },
        "item": {
          "id": "d75c6e7a-a58b-4b55-a006-ee257ff75170",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2fbe0ad8-2314-48f2-a5c1-59c02c66b06b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9fca168-6d52-4f28-8c4c-0cfe81b14e71",
        "cursor": {
          "ref": "a96730a0-2142-403c-abfc-c5cd785ae237",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "fce4f595-b014-4782-9ccb-bed7606b1c96"
        },
        "item": {
          "id": "a9fca168-6d52-4f28-8c4c-0cfe81b14e71",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3efa1b46-268c-464b-a9dc-ae9badfb8959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9e0161-0247-48cf-9af7-48806e898169",
        "cursor": {
          "ref": "6bc4a6b0-fe2b-4004-a8bd-4e18e4120053",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "be3d1c09-1256-4671-92ad-c412a5092793"
        },
        "item": {
          "id": "4f9e0161-0247-48cf-9af7-48806e898169",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4359da22-858b-4656-90e5-c7bff4e8be2c",
          "status": "Created",
          "code": 201,
          "responseTime": 2406,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c5a0ae25-fdee-492b-b235-f5907abf9b45",
        "cursor": {
          "ref": "69fa0f1d-d35e-49ee-b261-8eb310f2a437",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2fa0ac6c-ca88-4b29-9ba2-67baeb7e9181"
        },
        "item": {
          "id": "c5a0ae25-fdee-492b-b235-f5907abf9b45",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "64dbc4c9-e9d6-4bfc-b596-4a21969364fd",
          "status": "Created",
          "code": 201,
          "responseTime": 2743,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "cfe3f923-ff5a-4ccc-a701-b580f75b39fe",
        "cursor": {
          "ref": "3dc4f03f-dc93-4763-92f5-c3814b905fe3",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "237e244e-f6ed-4155-bc85-2876a424f21b"
        },
        "item": {
          "id": "cfe3f923-ff5a-4ccc-a701-b580f75b39fe",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "502da05f-152c-47ad-a8a8-50a5eb7c1d2d",
          "status": "Created",
          "code": 201,
          "responseTime": 2656,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "009cf4d5-ac2c-4d2c-808f-5263d001d0fd",
        "cursor": {
          "ref": "8de1efa2-0f98-43bb-a48e-b6aa446428be",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e70725f1-2917-476f-aee5-9b59c96e9f6c"
        },
        "item": {
          "id": "009cf4d5-ac2c-4d2c-808f-5263d001d0fd",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c206db37-f89a-4ab8-a6f7-261eaafcf57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61fb4066-5d29-4e1d-931a-94cf61eb7d6a",
        "cursor": {
          "ref": "ebff6938-5e17-4685-ad24-d10904b3f5fb",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "78f9fec4-9e45-41ad-8480-d8ab3fc6759e"
        },
        "item": {
          "id": "61fb4066-5d29-4e1d-931a-94cf61eb7d6a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "702e5129-7d95-426e-a0fd-0b78bf6e1686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8045f3df-fb2f-4772-9c88-772708ccfb5b",
        "cursor": {
          "ref": "5267943e-e962-445f-84a8-a71ccdbbd433",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "844a0377-7d0a-4b32-b419-d4797ce99b01"
        },
        "item": {
          "id": "8045f3df-fb2f-4772-9c88-772708ccfb5b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e1e5e2ab-ccca-4da5-8d81-bf92184b28d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7574ee-bc22-4080-8dd1-a3aedf3b84fd",
        "cursor": {
          "ref": "b2550a6d-b7cd-4d58-b7f5-f8c02543b894",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a6cebe77-9807-40c1-852a-68bd04fe54fa"
        },
        "item": {
          "id": "ce7574ee-bc22-4080-8dd1-a3aedf3b84fd",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "dd0c6a4c-82eb-486d-bbc1-ae570742f8d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "422d00f6-e3fc-4d4b-a88d-d9defaac8296",
        "cursor": {
          "ref": "b6b4a00e-4499-4d90-a7d7-7f63a7669db1",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4c9951e8-7152-4dc5-9896-86562ffb10a2"
        },
        "item": {
          "id": "422d00f6-e3fc-4d4b-a88d-d9defaac8296",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "71a69d11-f242-455f-9213-8ee34b13d1df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb6de7d-0fb5-4339-802f-780c242e9091",
        "cursor": {
          "ref": "5ab4a73e-deec-48a5-9367-50c155ebe66f",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2e3bc03f-7afc-4beb-befc-222027454670"
        },
        "item": {
          "id": "3cb6de7d-0fb5-4339-802f-780c242e9091",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1cf79977-21a8-4b3e-9fb8-d177ca735b1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9773f55b-0a33-437b-b648-cb020fd2b303",
        "cursor": {
          "ref": "bd985ed3-bca7-4b44-b5bd-a09c082f89f1",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "59aa260d-ad51-4f0f-9b98-81fc6c8751f0"
        },
        "item": {
          "id": "9773f55b-0a33-437b-b648-cb020fd2b303",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "98afd1cc-5f3d-48ae-ad1b-f2838346dca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b13d190-ad5e-4f15-ae99-f1045462efba",
        "cursor": {
          "ref": "6d72a5a8-0e65-4e5b-ad13-4530d3375378",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d7aaf366-e6b4-45d1-aa36-0bb612fe4e53"
        },
        "item": {
          "id": "0b13d190-ad5e-4f15-ae99-f1045462efba",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d6506eb7-8731-4381-9f80-877137f7926e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3616631-4e1e-4759-8401-ba087a8ecef2",
        "cursor": {
          "ref": "6a3591e2-33f7-4add-a719-d2b37a265f81",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b10225ca-56bb-4f0f-a584-c9ec3e9141d9"
        },
        "item": {
          "id": "b3616631-4e1e-4759-8401-ba087a8ecef2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5f700c3b-ea01-484b-88e8-261dd8b462c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493e8b75-07cd-4a55-9239-838df4d47dbc",
        "cursor": {
          "ref": "c53d08d6-685c-4799-a06b-4cc19a0676fa",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ad0c1d1a-ff9d-4e06-9d7d-1693fa7700aa"
        },
        "item": {
          "id": "493e8b75-07cd-4a55-9239-838df4d47dbc",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "72f0fbf3-b2c3-462e-aef0-fa71c577f67c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3d3555-0837-40e5-8321-68b0df1d7203",
        "cursor": {
          "ref": "e2694433-12b6-4412-b10a-a287ad3eb30e",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fac8f1a1-08c9-4335-8f89-01bbbbf566a3"
        },
        "item": {
          "id": "4c3d3555-0837-40e5-8321-68b0df1d7203",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b9d1480d-4198-4690-8817-18daa4961cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36ef88b-6724-4917-980a-4e0f57634d0f",
        "cursor": {
          "ref": "6c4f8009-f82b-488f-82b1-dd4625ea26af",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f340d789-d9b0-449d-b511-d744ed3b4a30"
        },
        "item": {
          "id": "c36ef88b-6724-4917-980a-4e0f57634d0f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8c4b19f6-68fe-4a90-a964-a8638e418a65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89358336-2ad0-45be-97be-50012e8dd7f5",
        "cursor": {
          "ref": "108f4d32-8128-48c0-a0b3-f60bc64b1154",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "35bbb9f6-f9f5-4beb-9e4b-40c55f303485"
        },
        "item": {
          "id": "89358336-2ad0-45be-97be-50012e8dd7f5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "09479e4f-7068-406a-8d09-aab5ae03fd6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16f7102-a57e-4df4-8b30-be3135ef5cdb",
        "cursor": {
          "ref": "6436ca35-a79b-4c4e-a5ea-6577e463645e",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "dbbabbd5-97cc-4820-9d4e-07281f10fa26"
        },
        "item": {
          "id": "e16f7102-a57e-4df4-8b30-be3135ef5cdb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5e8c92c6-c68c-4a63-a888-b19ed2bc4263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c56486a-34d5-49fa-b0ca-6d5d9793772f",
        "cursor": {
          "ref": "2e93dd02-af62-42b5-a14f-6053111c3edb",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7f9ec1e2-5cc1-4a8e-9610-a4f5e2490417"
        },
        "item": {
          "id": "8c56486a-34d5-49fa-b0ca-6d5d9793772f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "37d552ef-ff8a-46ae-bb4e-8078da58d29d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7b79ea-d7fb-4384-98f2-04e8d049a952",
        "cursor": {
          "ref": "64482b09-98b2-4c4e-80bf-25a32a2db0bc",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d74d5ed1-6fbb-4a75-888e-91bd87081a0f"
        },
        "item": {
          "id": "3c7b79ea-d7fb-4384-98f2-04e8d049a952",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "10e9e5ef-0913-45e4-8f99-93ae2ed294ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e0eeb5-489c-4015-9fa0-6be9d614c2bc",
        "cursor": {
          "ref": "8bc16951-fb35-4e28-a8ac-02ded1491f32",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ea4e90ec-67a3-4432-a3e9-e2fbc0336b70"
        },
        "item": {
          "id": "71e0eeb5-489c-4015-9fa0-6be9d614c2bc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "37efc068-14d7-455e-a9c1-f7a6bacac0a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a216452b-7ac5-482e-a14a-4e9fe8a094b5",
        "cursor": {
          "ref": "befc7d21-310f-47c9-b598-4ddf095f003e",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c12856f2-0391-427e-913e-5cf99dd92952"
        },
        "item": {
          "id": "a216452b-7ac5-482e-a14a-4e9fe8a094b5",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "cd0e8b72-321f-47d6-9c5b-f1eb0264e6f0",
          "status": "Created",
          "code": 201,
          "responseTime": 3419,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "9da97127-ebbc-48ea-b097-0fd73d8fb982",
        "cursor": {
          "ref": "d969a923-abc2-4da4-b664-5cd3319af974",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c93d55f2-039e-406e-a98b-27007483f8fe"
        },
        "item": {
          "id": "9da97127-ebbc-48ea-b097-0fd73d8fb982",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c94b56c7-f1d4-493e-92b0-194b4f806f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715b2d66-c4f2-4d08-8449-d42f495fcde0",
        "cursor": {
          "ref": "ea2ed217-3e49-4af2-8074-1bf3807dc5fd",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "20a28457-ed99-4439-ab08-6453dd7ee6cf"
        },
        "item": {
          "id": "715b2d66-c4f2-4d08-8449-d42f495fcde0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "697aacce-81aa-47f3-8001-0c1241f57a64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee79697-9aaf-451e-82d7-ea20cae481e2",
        "cursor": {
          "ref": "5cb599cc-9e16-4c2b-97c2-67f6f89c8869",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "90dd7c64-de29-44d2-a292-fdff2f073e6b"
        },
        "item": {
          "id": "7ee79697-9aaf-451e-82d7-ea20cae481e2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "be24f414-b7f0-4729-9e65-bb56468c36f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f756478-2c4a-4701-bddd-d6a3ff00786c",
        "cursor": {
          "ref": "045c7298-e62c-46b3-a686-c5ad4e710ea3",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "3ed9f2ab-4f73-4ab7-a309-8a9708907ae0"
        },
        "item": {
          "id": "8f756478-2c4a-4701-bddd-d6a3ff00786c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c8d667f9-0927-4cc6-bdaf-e0e1069ed985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9269833-f8bc-492c-9292-cf03deb8b9f6",
        "cursor": {
          "ref": "1de8086e-fad3-4745-8334-c37505892470",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f0a9eb11-749b-4eeb-9c45-d490c36b97d3"
        },
        "item": {
          "id": "a9269833-f8bc-492c-9292-cf03deb8b9f6",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1214a7da-58b1-4b8a-9069-0c66167b00d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7aa27bc-761b-495e-9476-ea760a2a9f0d",
        "cursor": {
          "ref": "23a72171-a41c-4453-aaab-c7ca5c5eca2f",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2775c9bc-ab2a-4b05-968b-742770747f16"
        },
        "item": {
          "id": "d7aa27bc-761b-495e-9476-ea760a2a9f0d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8992593c-d166-4d5d-b0ea-d3b384e18b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa0e963-57c8-4566-8414-ed414de129da",
        "cursor": {
          "ref": "fc20fe15-8485-4df9-94d1-90cbd2e1ef69",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5824cddd-f59c-4baa-9360-2e72492c7274"
        },
        "item": {
          "id": "efa0e963-57c8-4566-8414-ed414de129da",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e0b7d089-bd93-4a80-af02-2757e2b65dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279f641c-fdac-4693-adbd-9f4237dcd8d1",
        "cursor": {
          "ref": "dac15ab2-5a8d-4a0b-8880-cb9adc04204a",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8ac44d1f-26dd-4cb9-b0a4-ad4dd178dc03"
        },
        "item": {
          "id": "279f641c-fdac-4693-adbd-9f4237dcd8d1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "defb415f-8b19-4e91-820e-7c2936a701cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67c2f637-c529-429f-9532-a3e5dd5c1655",
        "cursor": {
          "ref": "a64b882a-9400-407d-9a0d-e28fa08d33fe",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c51903f4-cb6b-4270-8a7d-f323570b6b37"
        },
        "item": {
          "id": "67c2f637-c529-429f-9532-a3e5dd5c1655",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "85b73189-9a54-44ef-b6dd-8fbe77e3bc9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc5d926-e939-4669-910e-f9753e1d2124",
        "cursor": {
          "ref": "adae3e8b-cdc8-4f3d-b516-e3b6bd75e4f9",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "75df47cd-8e0e-4edc-ac2b-58e0807f2eb2"
        },
        "item": {
          "id": "bcc5d926-e939-4669-910e-f9753e1d2124",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4378ea8b-d62a-4ccd-948c-a1d8177d4435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38693a3f-f767-433f-8cb7-0f10df3fbbe6",
        "cursor": {
          "ref": "ed60541e-f716-48c8-9cae-fa1811a68d8f",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1080dc5d-b6a3-4610-a72c-a919a50b8c5a"
        },
        "item": {
          "id": "38693a3f-f767-433f-8cb7-0f10df3fbbe6",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "018b7e81-90ac-434e-80c7-fb83d56e2f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c8bc87-8546-49e1-9bf6-4955833ef84a",
        "cursor": {
          "ref": "2ef706ff-4b88-4dac-937c-f530fe3db670",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "39ed458b-a0a6-43a3-b73f-5ea78997b1df"
        },
        "item": {
          "id": "c1c8bc87-8546-49e1-9bf6-4955833ef84a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b84d78de-d973-4e12-841e-397327c1a43b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5946ec5b-a654-44b3-b12d-3e6817276ddd",
        "cursor": {
          "ref": "4d25a062-bd69-48b7-8970-cf292fa78552",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "3c2a17b8-d1f7-45c9-904f-38a8f3d81b8e"
        },
        "item": {
          "id": "5946ec5b-a654-44b3-b12d-3e6817276ddd",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a83cfeb0-73fd-4227-a954-ae982c33c7f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02308d2d-149e-4df8-b2bf-0ae7dec87108",
        "cursor": {
          "ref": "1817b341-717b-42cd-b5cd-2d94e80653cc",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b0f60d55-dbac-48ad-add3-ab3adea17a11"
        },
        "item": {
          "id": "02308d2d-149e-4df8-b2bf-0ae7dec87108",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "91642e87-69e5-4592-9610-e63c30083023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db47c153-b6ff-4c82-a72c-4e2e964ac3ec",
        "cursor": {
          "ref": "5b2a618f-d9f1-4f41-ae36-640e018cfadd",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e447a965-2e47-4821-af1c-94f6f135a46e"
        },
        "item": {
          "id": "db47c153-b6ff-4c82-a72c-4e2e964ac3ec",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1605c485-3e20-4882-81f2-00cf99191193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c2b890e-0157-4592-842e-d18d88813f0e",
        "cursor": {
          "ref": "e423e873-6fa4-48a5-af71-f2fa8dfeee80",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ccef7c47-ec4a-4892-abc9-da79b8c093d1"
        },
        "item": {
          "id": "8c2b890e-0157-4592-842e-d18d88813f0e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f290c81d-52e0-46db-9e2c-9616f32256ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b0a0707-a212-4cda-a228-e6b5bec75cd4",
        "cursor": {
          "ref": "6a1622fb-5877-414d-9120-c4a540443200",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "257a46e3-f55a-4a1c-8c14-1a576571a7c9"
        },
        "item": {
          "id": "4b0a0707-a212-4cda-a228-e6b5bec75cd4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4d13acc3-3de3-409c-9d10-4747ed68c514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f845242c-d313-467f-acbc-80b7f9dd4381",
        "cursor": {
          "ref": "763b06fc-6005-48e0-9f05-fd405c020067",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "cc500b65-cb6e-4b15-86a0-b14693c9d8d9"
        },
        "item": {
          "id": "f845242c-d313-467f-acbc-80b7f9dd4381",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1e57da81-7d98-42ee-bb0f-257c840e1571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f21c9b4-5574-43e2-9746-0eb44d9cb384",
        "cursor": {
          "ref": "b5f5f909-9b62-4819-9e50-e23915db6fbe",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "2b1ca83e-09ab-43e0-8fcb-95ee60f034f8"
        },
        "item": {
          "id": "6f21c9b4-5574-43e2-9746-0eb44d9cb384",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "fe4aded9-236a-4006-a20c-d8575aec9488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "839e40ce-716b-4de2-b0b0-7449bdcd83c2",
        "cursor": {
          "ref": "9f8a8017-f4df-43c8-8785-00d7f49f0f19",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3ba6b1b1-33fb-4738-bef6-fa01fbef24e8"
        },
        "item": {
          "id": "839e40ce-716b-4de2-b0b0-7449bdcd83c2",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4ce876be-72f0-4b9b-a790-7d71ccab369a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b3e305e-465e-4c76-9583-3beef53a4438",
        "cursor": {
          "ref": "abb0a2a2-8da8-4037-815f-2f63a061015b",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0cf5c447-75a1-4b94-98f3-5b2524a48fec"
        },
        "item": {
          "id": "9b3e305e-465e-4c76-9583-3beef53a4438",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "cba00117-1290-4e92-9860-81505ae05b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ef9446-7a9d-48b1-86d7-26651c7b0e90",
        "cursor": {
          "ref": "321af63b-980e-49fb-b6f1-065fa096ebf2",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6ce1e780-9fde-44ac-b00b-6001d4e61d05"
        },
        "item": {
          "id": "08ef9446-7a9d-48b1-86d7-26651c7b0e90",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8ef533a2-f26c-4175-9516-fa9a4f3e518b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572b7bf9-6a31-40d5-b17a-199075234fbb",
        "cursor": {
          "ref": "7cbc3401-1169-4ddb-aac5-4cdec6928592",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f6cfa6d9-93e3-4023-bef8-35e329dc37d0"
        },
        "item": {
          "id": "572b7bf9-6a31-40d5-b17a-199075234fbb",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7a59f693-e9f1-4189-b311-9b837f27063a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942836b6-98ef-4d9a-9d7c-b5b0b5c3e821",
        "cursor": {
          "ref": "38951be8-8021-4395-9be3-d1b199cc794f",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a3e23d18-0e7d-4431-ae49-f1ed6a5fe27a"
        },
        "item": {
          "id": "942836b6-98ef-4d9a-9d7c-b5b0b5c3e821",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "da538e5b-b238-4bb7-9b1a-6d45caa81059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b0bf66-9e2d-4bab-8b80-6b24c31655fd",
        "cursor": {
          "ref": "a6249017-e349-4f23-8afd-686bce5d8ad3",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "89f52d29-fe4c-465e-8c36-b3bd665d672e"
        },
        "item": {
          "id": "e3b0bf66-9e2d-4bab-8b80-6b24c31655fd",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c6ec11d9-f275-4fd5-b4f7-0531d533e09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4826c033-de94-4ead-a270-06e4080cc951",
        "cursor": {
          "ref": "c96a47a1-5ba5-4faf-aaea-c37fd159925c",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "03f65247-0ff9-4b51-b953-3db1083d0c04"
        },
        "item": {
          "id": "4826c033-de94-4ead-a270-06e4080cc951",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "16fd9af5-2790-45e6-a085-053de663e3a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9f6c61-d87b-4927-8451-c8dc44bc4dde",
        "cursor": {
          "ref": "fa8acd78-1427-4db5-89e3-442fcffc0cdd",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9da1b7c5-53d9-4eec-bbb0-b9485d827745"
        },
        "item": {
          "id": "cb9f6c61-d87b-4927-8451-c8dc44bc4dde",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "fd6cc38e-0c83-4cdd-8141-eb24681b4e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6815b311-c7ca-4517-94e5-0131418ec47b",
        "cursor": {
          "ref": "4b222801-4a26-4fdd-87e9-9afb99ed42c9",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ba0f84ff-7c84-49a3-817a-3d72900115f1"
        },
        "item": {
          "id": "6815b311-c7ca-4517-94e5-0131418ec47b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "240a54d9-9097-4707-a4ef-b8061756a6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a74c0a7-5a83-41e0-baf5-7b2960cdd032",
        "cursor": {
          "ref": "0c0d38dc-05c9-4c4f-b4ab-9d5fa6050357",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0cc89fed-ccfc-41e5-b516-31b111ad012a"
        },
        "item": {
          "id": "6a74c0a7-5a83-41e0-baf5-7b2960cdd032",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b5782c07-9003-4d8d-9f0e-50c22d733d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146f55e4-595d-4f60-b424-5db44529bd84",
        "cursor": {
          "ref": "0adac890-9c55-49b2-a202-a41a54a5eeaa",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d16b79c6-f489-4423-abcc-971f81eece04"
        },
        "item": {
          "id": "146f55e4-595d-4f60-b424-5db44529bd84",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "69943049-ee6b-41b1-b742-f74f979bdf69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e25da45-cfd0-4c96-bec5-909c2240a0ad",
        "cursor": {
          "ref": "eb8bcc3b-713c-4207-af3f-c81e382657b5",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "37d6a549-601b-4734-90e2-4ee8644f9254"
        },
        "item": {
          "id": "7e25da45-cfd0-4c96-bec5-909c2240a0ad",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ec105350-7680-4197-b6f3-f8d25f45e5a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "1feae369-6272-4b58-8305-6feeff502ed0",
        "cursor": {
          "ref": "91df97a4-3ce6-4581-a802-be84ce6875c9",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "163d45bd-9022-41f8-9c1b-5c8fa3406ee6"
        },
        "item": {
          "id": "1feae369-6272-4b58-8305-6feeff502ed0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9497c922-52db-434a-8e19-0014a7f4b1eb",
          "status": "Created",
          "code": 201,
          "responseTime": 2188,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c799b80-08e2-448b-9434-d0708cc6acf9",
        "cursor": {
          "ref": "7fe2a039-389f-4f54-8176-4064aaa3b2ee",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b38b46ca-40fc-4b4a-8d9c-f459fdad48e9"
        },
        "item": {
          "id": "5c799b80-08e2-448b-9434-d0708cc6acf9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "94dd8d13-92df-4df0-a4af-d5651afd6d39",
          "status": "Created",
          "code": 201,
          "responseTime": 2306,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db006ec-aff6-4eae-9ba6-5839753a17dd",
        "cursor": {
          "ref": "820906dc-d090-4899-8bf6-0396ca521565",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6849701a-6096-43ff-bf00-d9840ffdec7f"
        },
        "item": {
          "id": "0db006ec-aff6-4eae-9ba6-5839753a17dd",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f6df2d57-16e4-43f1-8715-9531b0ca6e22",
          "status": "Created",
          "code": 201,
          "responseTime": 2464,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c4bd6cb-e339-45ab-b207-7c2f5f04a468",
        "cursor": {
          "ref": "6ffa8501-8551-4bb6-9426-deff67ea4d74",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2314c5db-6206-4136-ae6c-12f77bf8d224"
        },
        "item": {
          "id": "6c4bd6cb-e339-45ab-b207-7c2f5f04a468",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "24054ee4-2061-4d52-b1d7-c4ddf40bb83b",
          "status": "Created",
          "code": 201,
          "responseTime": 2506,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87b0044-bbac-4161-a6fd-d4a6bb811867",
        "cursor": {
          "ref": "0ef3bf39-aff9-4df3-91bf-4d7fd8962e91",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "993202ae-5aeb-48cf-b520-ee46d06ceeba"
        },
        "item": {
          "id": "b87b0044-bbac-4161-a6fd-d4a6bb811867",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3f3b900c-b1cd-40da-b679-e576c8eb539e",
          "status": "Created",
          "code": 201,
          "responseTime": 2591,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-08T00:43:47Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-08T00:43:47Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "d6e4011b-a3c0-4a62-a68e-652c5f47ebb5",
        "cursor": {
          "ref": "bffcebb6-a4e4-4505-bf94-e0a729a2fb21",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "eb81c5dc-5c60-4154-9a34-8dc9edd9f91f"
        },
        "item": {
          "id": "d6e4011b-a3c0-4a62-a68e-652c5f47ebb5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b50816ed-0572-4d2f-905c-81fb0fad88b9",
          "status": "Created",
          "code": 201,
          "responseTime": 2557,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59774a29-afc7-4343-93fd-53dc6ca811c5",
        "cursor": {
          "ref": "b8096513-6b5b-4126-826b-a5f9f06961ce",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "25710e60-8c98-431f-9a43-da0e5235b061"
        },
        "item": {
          "id": "59774a29-afc7-4343-93fd-53dc6ca811c5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0a8b257f-5606-417f-baa4-efa79c19dd47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6cd9dd-8e49-473d-a797-89de4e8e41d7",
        "cursor": {
          "ref": "b2684c97-f918-4798-a361-a36b47d19af8",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a61bc312-3bbc-4d3a-8a94-202971a87244"
        },
        "item": {
          "id": "8f6cd9dd-8e49-473d-a797-89de4e8e41d7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "78a42be2-c994-4f96-8e4d-96896c206782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8c31b7-c7e1-40a2-bfe2-34bbbac5a2ab",
        "cursor": {
          "ref": "37774ad4-141c-4f3e-88fc-2feb56761b94",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9cc143db-97ec-4331-83a9-f558993d7163"
        },
        "item": {
          "id": "af8c31b7-c7e1-40a2-bfe2-34bbbac5a2ab",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8fe1fffa-0115-42c9-993b-208fbb9a9e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78cf840-a7cb-4f81-86c2-99a654b7c40e",
        "cursor": {
          "ref": "3a406ffb-4b3c-4684-99bf-2b691822fae8",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "56cdab8b-aed6-4c89-b09a-258886dc4de4"
        },
        "item": {
          "id": "b78cf840-a7cb-4f81-86c2-99a654b7c40e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7bea5508-25d3-490b-9a54-f43531653cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279c62b9-4b17-4670-821e-cac20dd91b59",
        "cursor": {
          "ref": "a5ca872b-9b54-43f3-b102-ebf7cd89d068",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "834bd28b-1b02-413c-9cf2-ed6824262b33"
        },
        "item": {
          "id": "279c62b9-4b17-4670-821e-cac20dd91b59",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "addd7263-695a-4082-be83-ca50065f668e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f6cc3f-72aa-41ba-8bba-fa5997830e76",
        "cursor": {
          "ref": "4169a39a-66db-4b7b-a28c-4539772b4adb",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "99e076b6-1601-4f86-89a9-bcc90f664d6a"
        },
        "item": {
          "id": "85f6cc3f-72aa-41ba-8bba-fa5997830e76",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9ca347ff-7ba0-4536-a395-b68ed207c2a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "330b30b1-29ff-4c92-bb8d-df6037216ac2",
        "cursor": {
          "ref": "49563333-732b-42fd-9082-0fd91c9411af",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d62b2eed-acc5-4f49-9c89-71876bba33bb"
        },
        "item": {
          "id": "330b30b1-29ff-4c92-bb8d-df6037216ac2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6b13bafb-6110-458e-a16c-5f1b659a5ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d0b881-5919-4226-9f53-eb834aabd803",
        "cursor": {
          "ref": "6930c1f6-a479-4250-892d-9c5a9868b5b2",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "45626d16-3a1a-4a98-a15d-000069ec0994"
        },
        "item": {
          "id": "f7d0b881-5919-4226-9f53-eb834aabd803",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "16988853-248d-431c-a71b-dcfa4e2d83f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad8d53e-5922-43f9-9b43-ebe1a632356f",
        "cursor": {
          "ref": "721b0d53-fb2f-4678-8c78-3ed5aa463693",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9f1fde50-0374-43c6-8ffe-786a1384d908"
        },
        "item": {
          "id": "9ad8d53e-5922-43f9-9b43-ebe1a632356f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b7ed317d-e0d1-4d80-93d1-d5bb2f2ed5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd284f3f-d2bc-4823-96b0-2e5862ea15c2",
        "cursor": {
          "ref": "fab7911a-5fce-461f-b970-f077c6ddb749",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "252afc67-f9ca-4a2d-94c9-947cc25467b1"
        },
        "item": {
          "id": "fd284f3f-d2bc-4823-96b0-2e5862ea15c2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "48209cd1-7880-4530-bbcf-307d228739ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8a47c0-2f9b-4bdd-bf83-0eedfb4d305e",
        "cursor": {
          "ref": "11e422df-e9d1-4cd8-b216-1ac0609afc12",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8bb8fb7e-e800-47fc-b43c-bd1d2321b577"
        },
        "item": {
          "id": "4e8a47c0-2f9b-4bdd-bf83-0eedfb4d305e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a6f68611-2913-4537-8836-d71bca3ed213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd84047b-a79e-4c72-8cb2-1776a19ae5fa",
        "cursor": {
          "ref": "b01e616a-5f67-4ce8-aabf-8e870eab866b",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8f3850af-eb5c-4b14-8446-aad824dc62b5"
        },
        "item": {
          "id": "fd84047b-a79e-4c72-8cb2-1776a19ae5fa",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b1822066-b827-4d9c-9cb5-ec7528531626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367b7d2f-7070-4f17-bc14-c1799e09df19",
        "cursor": {
          "ref": "30c40387-406f-4e04-b415-976b9c59e465",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f9b5e57d-66a8-44a9-8b01-ed755d6b4ac1"
        },
        "item": {
          "id": "367b7d2f-7070-4f17-bc14-c1799e09df19",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c66818cb-acda-4ad4-965c-1e1eddd95738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb140a7c-eef0-47cd-9bb6-b727774ee0ea",
        "cursor": {
          "ref": "f6eb65ac-7080-4bd1-a40a-6465cde37b46",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "4e95cf50-9fa1-434b-ad87-9a77695d6440"
        },
        "item": {
          "id": "eb140a7c-eef0-47cd-9bb6-b727774ee0ea",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4ea16ebc-1abf-4797-b883-a67afbe12863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0057fd54-3267-441b-891e-8e73c75ec7ab",
        "cursor": {
          "ref": "342dca8c-baf6-4b24-a63c-ef8f79a876f2",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8834e28c-4719-4f92-a724-6e7ff6f44d04"
        },
        "item": {
          "id": "0057fd54-3267-441b-891e-8e73c75ec7ab",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c916ea56-69a6-4b18-b9c7-633a0ccb1811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935752cf-2187-4b04-9112-b32f7d988510",
        "cursor": {
          "ref": "b8c7bdd1-778a-4041-a001-9e309dd9230d",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c8d11023-faf4-447e-9d28-6917d662ac30"
        },
        "item": {
          "id": "935752cf-2187-4b04-9112-b32f7d988510",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "18d00f86-a894-4c48-8f5a-565afd7ed533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ec6aa3-f876-4d4d-abfb-f2477c28b1d4",
        "cursor": {
          "ref": "d0726c34-6762-46ee-9c0b-f846e9f5d707",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2a45fcd1-373d-4a2e-b03b-8c78fb524e1b"
        },
        "item": {
          "id": "c2ec6aa3-f876-4d4d-abfb-f2477c28b1d4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "561f1500-1c23-4790-bd9e-8fe947d2553b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe79d19-8664-44d8-a6e4-a0aa38b47210",
        "cursor": {
          "ref": "7e6a17f7-daf0-46e2-86fc-93f1bf73d01e",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "35586b19-5076-4671-8c45-a3f149b3cba2"
        },
        "item": {
          "id": "ffe79d19-8664-44d8-a6e4-a0aa38b47210",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "064c1a1d-71bc-4b18-8563-299be0d952f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af62e3f0-3e0a-4ce9-8e06-05d8b189a206",
        "cursor": {
          "ref": "2b5c4ae8-a93b-42b7-a043-3ca30bba1e79",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e259430b-4457-49e2-aa32-a5b07512adc8"
        },
        "item": {
          "id": "af62e3f0-3e0a-4ce9-8e06-05d8b189a206",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5d754e4c-4bb3-4347-b2b5-3c4004e026c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19c269c-7828-444e-9034-5b6d912366a2",
        "cursor": {
          "ref": "877a54cf-7211-48c7-baae-e84f9e3a02f6",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4bc255a9-7339-4361-b701-a68831d4b3bf"
        },
        "item": {
          "id": "a19c269c-7828-444e-9034-5b6d912366a2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "91ad0689-e568-47c8-85b1-87a79ba16136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e8cc18-d99a-4083-8ae6-e86d333b3bc8",
        "cursor": {
          "ref": "288177bf-0b8f-42d0-a929-142b75113bc3",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "705a7e83-808c-42c1-9644-a6482421c0ce"
        },
        "item": {
          "id": "91e8cc18-d99a-4083-8ae6-e86d333b3bc8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bbec4a96-eb3d-4740-9e7a-d980aee0664e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ebb609-e07c-4ad6-afca-a931d1241533",
        "cursor": {
          "ref": "72062f02-a958-4630-8ebf-6c14789592a2",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "cc84768c-1d26-4c60-b444-08289988b080"
        },
        "item": {
          "id": "d8ebb609-e07c-4ad6-afca-a931d1241533",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bbc60b35-c512-4a08-b11f-7aa885767d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac45d4e7-af5f-4426-a2e8-93b52ae63e44",
        "cursor": {
          "ref": "1df93b12-1f30-4bb8-b3bd-d58b51beb850",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2897b29d-be4c-423e-853d-699a0ab6f42d"
        },
        "item": {
          "id": "ac45d4e7-af5f-4426-a2e8-93b52ae63e44",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c14cf301-cf07-4308-84c5-6ad550f866f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a593342-3a79-4578-819b-cbd4174fb817",
        "cursor": {
          "ref": "6708161e-1b4c-4672-af76-94db3976453a",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3e80f9f3-d6d9-434c-926a-10dd9a1b9380"
        },
        "item": {
          "id": "9a593342-3a79-4578-819b-cbd4174fb817",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "80ea9d22-dfa6-464a-b5b9-7b46749c40d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "446d5cb1-5efe-45f5-a2f6-d49a34389f1d",
        "cursor": {
          "ref": "06e3d943-2bcf-4fb4-a971-d95e124fde22",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "703e605d-d989-475a-815a-5aca6b1d267d"
        },
        "item": {
          "id": "446d5cb1-5efe-45f5-a2f6-d49a34389f1d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "305e2a07-1508-43d3-8292-cc2852ce6902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3658f4b3-ca5b-4390-bbab-d71f3bac37df",
        "cursor": {
          "ref": "d25c594e-46b9-435f-a62f-6029332b4199",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "585a1281-fc8b-46d8-a04a-9c0f17b3012d"
        },
        "item": {
          "id": "3658f4b3-ca5b-4390-bbab-d71f3bac37df",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1c6c798b-9a8a-4a15-992d-abfd71180f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f6c14a-9b9b-4bbf-9deb-b90fb5386388",
        "cursor": {
          "ref": "c1807f9d-5586-4b58-beea-ad07550ddb87",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3a19f8bf-7f5f-44ba-9020-44c26fd79d91"
        },
        "item": {
          "id": "95f6c14a-9b9b-4bbf-9deb-b90fb5386388",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ac1be220-0a60-42ee-a866-af610b998d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952d3cc4-24f8-4d88-861e-fe32c79476ed",
        "cursor": {
          "ref": "7d5e6fee-a8f3-4541-b811-5f3a5faedf53",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5072f166-038c-4020-afcf-1dc2e9a7ea8a"
        },
        "item": {
          "id": "952d3cc4-24f8-4d88-861e-fe32c79476ed",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "176fcdbc-fa1d-4afb-876a-2b0515c1a32f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b12968-2cfc-42bd-ade5-991c73e1a695",
        "cursor": {
          "ref": "ddebcb77-ba1b-4bb5-ab0f-949225297c70",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "134b2a22-95f4-4d4f-bf2f-9587f2a07e6b"
        },
        "item": {
          "id": "62b12968-2cfc-42bd-ade5-991c73e1a695",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d22a5673-f524-4b68-9175-43884664a1ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb2890a-3a3f-4321-b0d7-9885b7c85d15",
        "cursor": {
          "ref": "fdae1015-011f-4b7a-9977-e844c74b8d71",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "91e8789a-7851-4dc7-bd9c-735a819bea0d"
        },
        "item": {
          "id": "1cb2890a-3a3f-4321-b0d7-9885b7c85d15",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5dbd9843-44d5-46b7-bb0b-5882ca7f2567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b740695-b770-446c-86e1-7ccfcad214e4",
        "cursor": {
          "ref": "d021490d-c5fc-432c-956a-8b0e34125596",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5a858d94-0bef-42a4-b75b-87c787f9dd6a"
        },
        "item": {
          "id": "9b740695-b770-446c-86e1-7ccfcad214e4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1136847c-3092-49c9-82b6-ed716ba271e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35c8fd6-87d2-46a5-b96a-5b62976012ca",
        "cursor": {
          "ref": "eebf7e32-aa1b-49a0-9a39-6f7f9726e217",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "964cfa60-9736-4998-a5ec-5e8a9ebe968e"
        },
        "item": {
          "id": "d35c8fd6-87d2-46a5-b96a-5b62976012ca",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "dea79c9c-bf00-4313-9098-8ca98697db81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9192f400-b46c-417a-8bf0-bc38290567ab",
        "cursor": {
          "ref": "fb926cc1-11a2-4032-8e66-c0101b816b97",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c5913250-ddc5-4c09-8558-092f78943acb"
        },
        "item": {
          "id": "9192f400-b46c-417a-8bf0-bc38290567ab",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "433e1b13-f6e5-4a5d-b0e9-49981392bd0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "ef75412f-dd74-4934-8d9f-5a4d8dbfd43b",
        "cursor": {
          "ref": "5bd81910-8bda-43ba-966f-91329eca0ee7",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "05572dc6-2512-4e65-a9a9-80e040ba25b4"
        },
        "item": {
          "id": "ef75412f-dd74-4934-8d9f-5a4d8dbfd43b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1de5a1d6-a5bd-4dee-b87a-37f0596d4c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d0786d8-acfd-4c94-b7e6-8c85ac90b7de",
        "cursor": {
          "ref": "fd3a3686-0406-4e0f-9b39-792913a58cb8",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "bcb3b25e-2f7e-47d5-a6f2-18af56fec0b5"
        },
        "item": {
          "id": "8d0786d8-acfd-4c94-b7e6-8c85ac90b7de",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "82f2f0c9-18d8-42df-bffe-0ff75e8f99b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78118b0-098d-4cdd-9a87-be71c11dc558",
        "cursor": {
          "ref": "8d9c6fea-5903-4cd0-9252-5f03e0163455",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "09026b69-4620-4601-aedf-4ca2b6f960e3"
        },
        "item": {
          "id": "c78118b0-098d-4cdd-9a87-be71c11dc558",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ca59bbd7-7a5b-4694-9daf-b31409e2405b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6adfd2-938f-4fdc-a901-95023efa44a1",
        "cursor": {
          "ref": "61c4e25c-94af-4f53-90d0-04de8d8e7330",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9c15b22d-e440-4f29-8fe0-c4141e47583a"
        },
        "item": {
          "id": "cc6adfd2-938f-4fdc-a901-95023efa44a1",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "11a3350a-0349-4b2d-aa06-47b4ac565b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d59f053-a469-4e55-8365-1b0fcaeeab0b",
        "cursor": {
          "ref": "858a4094-bb99-498d-aed0-a1e6e2d581d0",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e6d53d3a-135a-4b17-9b44-1078fd396a3c"
        },
        "item": {
          "id": "6d59f053-a469-4e55-8365-1b0fcaeeab0b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "42103435-0c53-4cfc-9a5e-d5739f83dbf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f09acc-2d0e-40ac-8b0e-63066aa50a6b",
        "cursor": {
          "ref": "2020e97b-3a57-4b70-b1d5-e2dc05751d31",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f640116b-2999-41ae-93df-18509698aabf"
        },
        "item": {
          "id": "31f09acc-2d0e-40ac-8b0e-63066aa50a6b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2829e257-1b4a-4901-a9aa-acf766255af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1c4db54-e6bb-4f95-badd-474c69b64375",
        "cursor": {
          "ref": "d13581f6-7b76-4af8-9a86-772daaf34e25",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "938dd7e7-5c7f-4bf1-86ec-538cade8d780"
        },
        "item": {
          "id": "b1c4db54-e6bb-4f95-badd-474c69b64375",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3ed55dbe-4eca-4b46-a57d-b857bafbb688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f4fd40-f1d4-4ac5-bb92-9b6b045fb014",
        "cursor": {
          "ref": "9b49bdfd-70f4-4fe2-9de2-e48215d4e996",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "7f58ceea-f065-4ec9-a83d-1d3c6ff522ef"
        },
        "item": {
          "id": "63f4fd40-f1d4-4ac5-bb92-9b6b045fb014",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "61b5417d-44d0-44c7-94c4-c3bdbf8743ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f80ad1-163b-4da3-8d89-d93c33e16d11",
        "cursor": {
          "ref": "3cb9064b-2c35-4391-9460-f94e4fd168de",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "db8547c1-31d2-47e0-9d62-0a451639513e"
        },
        "item": {
          "id": "b7f80ad1-163b-4da3-8d89-d93c33e16d11",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1ad76c1f-e429-43a8-901f-750b8701722e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d053d921-ff36-4b41-91cf-21fb26f3f026",
        "cursor": {
          "ref": "b987094e-030e-4e98-a9ef-904c4d37687f",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "96d0b71e-1157-461c-bd34-870f2c320d2b"
        },
        "item": {
          "id": "d053d921-ff36-4b41-91cf-21fb26f3f026",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "81685bb6-0fc6-45d7-ac7b-095ce5c409b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783bc6ca-5de5-404c-bd8d-45ff6e62397f",
        "cursor": {
          "ref": "c74ec405-4a51-4105-81df-b13878854701",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3f09c092-fb37-47fb-bf61-eb3d3bd02c12"
        },
        "item": {
          "id": "783bc6ca-5de5-404c-bd8d-45ff6e62397f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "928a9f05-83d7-4cce-92f0-fc68d07cb5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9eeb343-84ce-410f-83f6-12d328e05378",
        "cursor": {
          "ref": "5db98a40-b8f6-49c2-bb88-f2fcd4e97111",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "aefe494e-d760-4fc9-8085-f13c5dca5d5e"
        },
        "item": {
          "id": "f9eeb343-84ce-410f-83f6-12d328e05378",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6ac00abe-042a-4d5f-a317-118e8eb2bd6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b85b35f7-ef4a-4962-9d6c-b949b2089ba5",
        "cursor": {
          "ref": "d07e9219-7f5b-42b8-8753-092165c7141f",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7533de86-15b5-4614-b023-d7e332a41e7d"
        },
        "item": {
          "id": "b85b35f7-ef4a-4962-9d6c-b949b2089ba5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ac4b8487-bedd-468a-a51c-cebf43ed43cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7582f3d3-6ad5-4a08-add5-41d03de457b4",
        "cursor": {
          "ref": "7073d2cf-e168-4e2d-a55b-b171ce633364",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "388631db-74ae-4667-b789-f3758cda384d"
        },
        "item": {
          "id": "7582f3d3-6ad5-4a08-add5-41d03de457b4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7a8b1625-7f1b-4550-8ac9-0759132b1740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c0dd3e-1334-42cf-b193-261a30871f24",
        "cursor": {
          "ref": "120e19ca-64a1-4f89-a820-9403a2017ccf",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b7487052-0d84-4991-8e65-2387831bafd5"
        },
        "item": {
          "id": "43c0dd3e-1334-42cf-b193-261a30871f24",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "344819cd-bace-4d33-87ca-792d4ea42ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c974e339-7a02-4a6d-91ed-8eb115c8677e",
        "cursor": {
          "ref": "6fa77525-06d2-4167-8a3d-4d04e30059f9",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1bb9d610-5bbc-4179-8b70-6dcb9b283910"
        },
        "item": {
          "id": "c974e339-7a02-4a6d-91ed-8eb115c8677e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "825f9bee-025a-4344-bdb4-bbdbbcf999e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d490b8a6-e3a7-4bc3-9bdb-f3c52617c9d1",
        "cursor": {
          "ref": "8542bc6d-ad6b-4fe1-a61f-84a647767400",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "37000fa8-61dd-4f95-9cdb-fa2459c0119f"
        },
        "item": {
          "id": "d490b8a6-e3a7-4bc3-9bdb-f3c52617c9d1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5f3c58cc-6688-4f1d-af23-abcebc4a2b7b",
          "status": "OK",
          "code": 200,
          "responseTime": 272,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "7310a6f4-55f6-495f-8ed9-29e01565c862",
        "cursor": {
          "ref": "1e35f145-e44d-4302-9fed-3da68813ae4b",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6f676dca-435f-4d2d-9078-6688491f1d0a"
        },
        "item": {
          "id": "7310a6f4-55f6-495f-8ed9-29e01565c862",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b32eafed-55ab-48d1-b425-98fd49407da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a592f0c-fbad-4310-924b-0ff34653d200",
        "cursor": {
          "ref": "f9df5f99-905f-4b7b-90fe-a366d00330aa",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a6660ec4-17b7-47ca-90cf-8a1487eb8a97"
        },
        "item": {
          "id": "8a592f0c-fbad-4310-924b-0ff34653d200",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2e6b5230-6f6b-42e1-8554-a655c05f3b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb7283a-9011-454d-9228-69fef4908432",
        "cursor": {
          "ref": "bba650da-a54d-4a7e-9f58-2b1dd81f1890",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5270db06-f92b-45fb-8850-64ef39ebef59"
        },
        "item": {
          "id": "ecb7283a-9011-454d-9228-69fef4908432",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2ab25d5b-d7d0-4084-ab7a-ee331450f2bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a840ae8-6861-4884-8052-8c8000789628",
        "cursor": {
          "ref": "eea78aa7-cefc-49f2-bb85-b210d757fdbe",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "57e60d40-8a21-401d-96e3-bd4faad53357"
        },
        "item": {
          "id": "8a840ae8-6861-4884-8052-8c8000789628",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "eff11eaf-fce0-45ad-8e77-88c9d5dde7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6982e294-8180-41f2-951a-bb33ce88a9c9",
        "cursor": {
          "ref": "afc68890-affc-4d4b-ae36-30daffbd2194",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f88ea18e-4529-4797-af4b-58ebc85e8388"
        },
        "item": {
          "id": "6982e294-8180-41f2-951a-bb33ce88a9c9",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8a402f8f-6606-426b-bd0a-336cb671ca2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e192e52-6b63-4295-94b5-eef5f604bb01",
        "cursor": {
          "ref": "b2f99b0b-5383-47b9-9f74-4fe817c59e69",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9e0c3814-0374-4f8f-bb99-987c159d4810"
        },
        "item": {
          "id": "5e192e52-6b63-4295-94b5-eef5f604bb01",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "df38d799-2500-49e3-85ea-69d7827232e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d151f63-f2dd-4e24-b768-f5b5316efc4c",
        "cursor": {
          "ref": "9447405a-b809-4120-ba32-6cf46ba4cd86",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "7fe827dd-7720-4233-af3a-0fa897c6aab3"
        },
        "item": {
          "id": "8d151f63-f2dd-4e24-b768-f5b5316efc4c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "2215f2b1-c80f-4e85-ac16-8707f4cd0a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09376b0a-6251-4895-a3be-9797f7c1c9c9",
        "cursor": {
          "ref": "1102a371-67f7-429b-ac1c-c6959f66ac4c",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "999ea984-cdb2-448d-bf23-335936da8228"
        },
        "item": {
          "id": "09376b0a-6251-4895-a3be-9797f7c1c9c9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "357c499c-31c4-44ac-9e2c-715d1536c56c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc56fb6-96ec-4372-9320-5a16837d1f61",
        "cursor": {
          "ref": "229e7c0a-f8fc-43b4-bfdb-f155bd974d8c",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "de94699b-87cd-4319-858d-7be0b346a02c"
        },
        "item": {
          "id": "1fc56fb6-96ec-4372-9320-5a16837d1f61",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2c0e3061-dab6-4018-a799-4a855e042fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c822a155-724f-4983-ab6f-23cedc0dca23",
        "cursor": {
          "ref": "a06654d5-7eb8-40c6-a20d-db71e2cd8460",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5a186c7c-2526-40c8-9334-b98d7affe54c"
        },
        "item": {
          "id": "c822a155-724f-4983-ab6f-23cedc0dca23",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1e6c975a-afef-4c39-ae35-8245be325ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b1e50f-59fc-4b08-8872-468f94c364a5",
        "cursor": {
          "ref": "d5c19d01-f8fd-42e9-ad21-853bfab57dbd",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "916314b0-dee6-447e-8b38-b7a8b0420c7d"
        },
        "item": {
          "id": "07b1e50f-59fc-4b08-8872-468f94c364a5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0b89cfdd-6000-4ec3-84f5-bfd44285ad47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac90f19-193d-41c4-a953-dbffb8302c99",
        "cursor": {
          "ref": "888db983-2221-4823-b1ad-b3d898a7f7ac",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b68a1509-527d-4c6a-a43e-0e2e99a998b7"
        },
        "item": {
          "id": "cac90f19-193d-41c4-a953-dbffb8302c99",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ad2ae4d2-4324-4434-94a8-758ef6cfd06a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd92da3a-6680-43d9-9a0e-7b6f0bb0ae7d",
        "cursor": {
          "ref": "69a30caa-c338-46fa-b1bf-5422b4fbcf06",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "dacbd19c-b5e4-4220-aa12-7b2aeb8af94b"
        },
        "item": {
          "id": "fd92da3a-6680-43d9-9a0e-7b6f0bb0ae7d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a8984518-74e9-489c-a7a9-9b72b788c053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ede69f9-dca1-41d3-b573-9eae98187f3d",
        "cursor": {
          "ref": "5ae77594-01c4-4f00-9e67-045c67d2da23",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6c2f47b8-d892-40d4-b68e-f483d8740de2"
        },
        "item": {
          "id": "0ede69f9-dca1-41d3-b573-9eae98187f3d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b6db3bea-f170-4e59-a483-a4e36a07af7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1e7643-e50f-4b35-9775-6cc3adee44aa",
        "cursor": {
          "ref": "ce5e61f3-13bb-43ff-88b7-0812cffd5381",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3da93f52-730d-4a6f-b519-10eccdf20ced"
        },
        "item": {
          "id": "0c1e7643-e50f-4b35-9775-6cc3adee44aa",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "39611190-159f-4486-aad1-3527d82a1f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a74a1d51-ee5a-4c73-bc16-f8df31094d99",
        "cursor": {
          "ref": "69d5538a-5482-4da6-8a90-27f78462e810",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "615fe722-2f64-4b46-a57a-5c48e245f5e3"
        },
        "item": {
          "id": "a74a1d51-ee5a-4c73-bc16-f8df31094d99",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "64d39489-1f37-41e6-9ea3-ec6baa70fef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86cd73a-bfac-42c9-90fe-31a6f10a722f",
        "cursor": {
          "ref": "2cfb79bd-2743-485f-b37c-5c5cec63b7c8",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d5a5902c-a9b3-46d2-8e19-ddc8ce4ff672"
        },
        "item": {
          "id": "b86cd73a-bfac-42c9-90fe-31a6f10a722f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7b567315-9984-4994-a18b-c9dc0c0f2b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ca431a-0887-488c-829c-f13670e41149",
        "cursor": {
          "ref": "46388587-57b7-4e8d-b9d7-2d618525315e",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "02dae075-6a26-4b6c-b2b2-1b0611e9cfd0"
        },
        "item": {
          "id": "58ca431a-0887-488c-829c-f13670e41149",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5f276623-4ffb-4fbc-9ebb-ce08b650fc2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbee6dc4-a119-46fe-a820-03dfc3bacbf6",
        "cursor": {
          "ref": "a516b8e4-fa3f-4e6c-a1b6-2b557ceeca07",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0f9a6b02-7a98-48a4-9f1f-8d2e3571abe1"
        },
        "item": {
          "id": "cbee6dc4-a119-46fe-a820-03dfc3bacbf6",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b27877fe-a567-4142-bfb1-0255ac03037d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2545,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "766d0a20-177e-4ef3-83dc-3b3d65742c4d",
        "cursor": {
          "ref": "63be9d29-2331-47df-bedf-1a97fde8d1da",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "25cf2e53-6528-4b98-b80d-eb1230bb7ee2"
        },
        "item": {
          "id": "766d0a20-177e-4ef3-83dc-3b3d65742c4d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "16075641-0dde-40cb-9111-1fba5955453b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ec8f8b-45ef-407b-8506-da25a47d797b",
        "cursor": {
          "ref": "303e9748-e6bd-45ef-b2db-24953504d280",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3c08eeaf-1d4b-4934-ad46-df6e278fe91a"
        },
        "item": {
          "id": "90ec8f8b-45ef-407b-8506-da25a47d797b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "86293e49-e7bd-4ef7-8474-d99d2b72dbe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "940b9544-cc5d-4e72-82da-00b3e54d5843",
        "cursor": {
          "ref": "a688487c-035b-4356-a223-217283e7bb47",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "37573aca-87ab-4f16-b063-779403eb68ad"
        },
        "item": {
          "id": "940b9544-cc5d-4e72-82da-00b3e54d5843",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0404789e-4bae-4f6e-adc9-5f2b8ca6e0a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 691,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f7e4c2-aac6-4583-b164-8d79f740f4db",
        "cursor": {
          "ref": "a061044f-1c6e-4959-95ef-c035ca907566",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "485fb6a4-b92e-4acf-a254-3f71ec88da3a"
        },
        "item": {
          "id": "95f7e4c2-aac6-4583-b164-8d79f740f4db",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "db04b204-faca-4fdb-8b4f-903572eb5b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a5aaf7-83ff-4a59-99b1-dacb5d875f37",
        "cursor": {
          "ref": "1216101f-2834-4ca9-bcf3-61bfdb4d8c7b",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "bb7c4338-a38b-464b-8287-a1533df1bb9b"
        },
        "item": {
          "id": "04a5aaf7-83ff-4a59-99b1-dacb5d875f37",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "353647bf-3871-4efa-8606-bc15e5696a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26521448-4a86-409a-9fee-26e493a116be",
        "cursor": {
          "ref": "13712a55-f9c0-4458-a225-8b5f16b3fd7b",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0a6d6ff8-16ab-41ae-99f0-e0d052a8ff2f"
        },
        "item": {
          "id": "26521448-4a86-409a-9fee-26e493a116be",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8ab08e7d-af3d-472c-8f01-2aa800086f00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ddc339-e340-45b9-b662-613600d64380",
        "cursor": {
          "ref": "08d69705-056f-444e-b3ca-5e5f9c52b0a2",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c24b70e0-f7c0-42b8-8c18-0fc5da460729"
        },
        "item": {
          "id": "44ddc339-e340-45b9-b662-613600d64380",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2d568674-e765-47cc-b89e-cb4524eac7ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aaf0a78-c74d-417d-a448-f97140f1ed75",
        "cursor": {
          "ref": "5ebac0db-389e-4416-9755-7d2326edc972",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a63a47ce-99e2-4357-84d2-d46c31f4e7a0"
        },
        "item": {
          "id": "9aaf0a78-c74d-417d-a448-f97140f1ed75",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "866bcf4f-51ef-4eed-b6ad-d30f2af9b58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dacea9d-16f6-4a32-8555-501575859028",
        "cursor": {
          "ref": "7402fe8a-32d8-41c1-91f2-fe2316df4bbc",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f42d4b3d-d1cb-4ab9-b95d-c9cf0b462bf1"
        },
        "item": {
          "id": "6dacea9d-16f6-4a32-8555-501575859028",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3d0e15be-a45c-4f9e-9beb-ff7c5226449b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b181879d-b8b0-4240-b68c-2a48ca916efc",
        "cursor": {
          "ref": "8cd5147c-d9bb-468f-ac0b-d37f59b2852b",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "11c290ac-a7b0-421c-85c5-e42b4d8f78b2"
        },
        "item": {
          "id": "b181879d-b8b0-4240-b68c-2a48ca916efc",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "257c236e-737a-4e3a-9a5e-e69ab73da510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3275ae-8984-4703-b793-fa29785ab381",
        "cursor": {
          "ref": "c3fab9c3-95cb-4a28-ad16-dbc9b3495d15",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5eedc5ed-308d-4bd9-b798-6f930d424736"
        },
        "item": {
          "id": "bb3275ae-8984-4703-b793-fa29785ab381",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bb74f768-e3e7-451b-a60f-f4e395df6272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc3e11f-3875-452f-9af7-5bf2b2392ee4",
        "cursor": {
          "ref": "bd86cb66-8f60-49fb-89f3-4cfb3157d2ed",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "32873f06-6956-46db-8337-37225c601a79"
        },
        "item": {
          "id": "dcc3e11f-3875-452f-9af7-5bf2b2392ee4",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "28883c52-6b4a-46f7-8b51-f8fb0f001710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d78618-885a-40bc-9fcb-b9a3e92a3706",
        "cursor": {
          "ref": "7fbd7462-c1df-498c-9637-60afc74b3c2b",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c166be77-46e8-439d-82c8-ea7ca136d97d"
        },
        "item": {
          "id": "91d78618-885a-40bc-9fcb-b9a3e92a3706",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "fc143dd4-2fc4-4c3c-a3d6-639b65d9d2b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f62a21-7a35-4b6d-95cf-27651b4d6f25",
        "cursor": {
          "ref": "a03ef9fa-a433-4c80-9329-5a6206c7e096",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "adffb725-8bad-4c31-8f06-9b382db698c0"
        },
        "item": {
          "id": "61f62a21-7a35-4b6d-95cf-27651b4d6f25",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4931d57f-73e2-4642-a637-3ab010198c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c963eb5-66fe-4511-b740-02f0b182fadb",
        "cursor": {
          "ref": "ee306a90-73ae-4fb2-8bb3-0eb51a405783",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "72a3a212-7297-45d5-ba5f-d9257e805129"
        },
        "item": {
          "id": "3c963eb5-66fe-4511-b740-02f0b182fadb",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "43311d00-4dab-4039-88c6-841ede2f3957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a34354-152b-4e0b-ae56-2aae111d19b0",
        "cursor": {
          "ref": "02b2361e-30ba-45df-a06c-2c19d59c4b9b",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "579d6b5c-d619-4fbd-8cc4-6df025c754fb"
        },
        "item": {
          "id": "d8a34354-152b-4e0b-ae56-2aae111d19b0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ed51a2ee-3fae-4897-9d3e-22550359c223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8622e5-bda0-41bd-87dd-2681b2d6e5e8",
        "cursor": {
          "ref": "425fc2b5-c1a6-4fa7-a8c0-0d1c9cba6895",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c60ef56b-33b7-4283-9efe-d38a2b2991ca"
        },
        "item": {
          "id": "1f8622e5-bda0-41bd-87dd-2681b2d6e5e8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c38dfdcb-8b62-45ad-b7f2-82696be3b1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dada1c4-61d5-4a7f-8f47-cff17a3676ac",
        "cursor": {
          "ref": "f53e3a0f-94e5-42aa-84ef-8441518ac420",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5719bf1d-2850-4c6e-b20f-0fc3d78fed9a"
        },
        "item": {
          "id": "4dada1c4-61d5-4a7f-8f47-cff17a3676ac",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2043df84-25b2-4b79-86bf-572ea8a88b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186c4ba8-71ef-46ba-9f58-087c370ba8fc",
        "cursor": {
          "ref": "507e94cc-ac0c-4bf3-9091-93391c23a9db",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c7b33d7f-2c44-42c9-9010-b96072fa969d"
        },
        "item": {
          "id": "186c4ba8-71ef-46ba-9f58-087c370ba8fc",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "451cb9e6-4f12-46f4-a25b-a99d6a1978a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f84c0529-a1f8-4e39-ae17-4158f15f81cb",
        "cursor": {
          "ref": "e63d166c-f7b7-43e9-949f-8c5e3f60b974",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2ec5aea8-c450-4313-803a-e1ed56f62693"
        },
        "item": {
          "id": "f84c0529-a1f8-4e39-ae17-4158f15f81cb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c51d3300-4258-4ec8-80f4-cc910e628295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ebe491f-6a13-4306-a5fb-6f608424eb02",
        "cursor": {
          "ref": "822f085e-fecc-4f12-8406-5b9369880549",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0496fab1-ab10-4757-ba2c-6bac6be3e2e2"
        },
        "item": {
          "id": "9ebe491f-6a13-4306-a5fb-6f608424eb02",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f8a25fd8-0ee0-414e-b268-fea23746e997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f0ecc6-45da-4e18-b8b1-91ae7ff2e4b7",
        "cursor": {
          "ref": "08851e2c-22cc-45ab-bc49-0d6b7045c9a3",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "20d5d288-aa1b-4f03-93e7-2ea1ff359e7d"
        },
        "item": {
          "id": "38f0ecc6-45da-4e18-b8b1-91ae7ff2e4b7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6f621b5a-2ca0-4dc5-864e-052fb39ae620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361c51e3-c542-4530-ac26-59ed2a401e1c",
        "cursor": {
          "ref": "03b2309d-36c2-42b3-9cb1-15999348a2bb",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "11b3d591-147b-456f-a414-ae9392d7b84b"
        },
        "item": {
          "id": "361c51e3-c542-4530-ac26-59ed2a401e1c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "00041d10-ffbf-47b7-9bd3-4db9e9e6ba80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c512ec8e-c231-42ca-b888-b0c1563d6b1f",
        "cursor": {
          "ref": "5b1a35a3-df1d-4d55-af88-e234690ddc4f",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "78955858-443d-4d80-99da-d603d2cd6346"
        },
        "item": {
          "id": "c512ec8e-c231-42ca-b888-b0c1563d6b1f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d797d4f1-57c1-4376-8a50-6867cc08d02c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5efd7116-5e6d-43bb-a5b6-4355ebfc39b6",
        "cursor": {
          "ref": "64d219a1-ae0c-488a-a10d-30a53140da20",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "82c4359c-af78-483a-a831-a12f3d694161"
        },
        "item": {
          "id": "5efd7116-5e6d-43bb-a5b6-4355ebfc39b6",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "81f566d5-e6a3-48de-9781-83f25d1b6ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c734b149-e77a-44bf-be3b-5f9b74516263",
        "cursor": {
          "ref": "9692039c-f5c1-4f09-84ed-fd6ae54a32ef",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "fb65483f-1666-479c-9994-3590eb7bf01e"
        },
        "item": {
          "id": "c734b149-e77a-44bf-be3b-5f9b74516263",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a1804fa4-15d9-4133-8cfa-c4b28f1d2f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c721493-8212-4412-acfd-220af513db60",
        "cursor": {
          "ref": "12e5da08-65d1-4778-9aaf-4e723d1a89af",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b9469e33-6352-408a-9ea4-98d482aef3e4"
        },
        "item": {
          "id": "1c721493-8212-4412-acfd-220af513db60",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "abcad05a-c507-4624-b8a3-5955f849b152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59792a6a-64e4-45b4-a98c-89a46f2e39d5",
        "cursor": {
          "ref": "c118a92e-3c14-4594-b35f-22f759c7eeed",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2dbcbb59-2ef9-4f00-b37f-d3db72110609"
        },
        "item": {
          "id": "59792a6a-64e4-45b4-a98c-89a46f2e39d5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "33866d69-619f-4dbd-b85e-b093e8cc8335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d8c81f-a737-4e82-8431-282a2dcea181",
        "cursor": {
          "ref": "c0f788a3-7b75-4890-ab57-8ffa5773bd54",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a11f74c2-cd9d-4bdb-baec-bc236a112a27"
        },
        "item": {
          "id": "20d8c81f-a737-4e82-8431-282a2dcea181",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fbae5b94-cb3f-46a7-b05d-8904075098bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7eac1ab-2cf9-4b01-ab4e-bec551b0d4e7",
        "cursor": {
          "ref": "5d0b6b7f-d9c6-4dfb-a64a-a8cdd0a1b07c",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b1f8b726-d55f-4dd4-9ede-42a6b442868b"
        },
        "item": {
          "id": "c7eac1ab-2cf9-4b01-ab4e-bec551b0d4e7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "45b069e1-faf7-4dd4-b4ef-adf8228ddc5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7c1c8a-8406-4183-81a4-63cdad23dca5",
        "cursor": {
          "ref": "9bf65242-784a-4a92-97de-13c8235b6601",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6df49821-edf3-4ec3-a7b1-be0d024d751d"
        },
        "item": {
          "id": "0f7c1c8a-8406-4183-81a4-63cdad23dca5",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "31df2af7-cacc-47ee-ba51-0624a0776290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1071c83b-3895-4612-9fc8-e23dce00909f",
        "cursor": {
          "ref": "1d0ca5b3-772b-4714-941d-a431677b813a",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0ceda632-2f65-45de-bcb5-7ff1d0b7a74e"
        },
        "item": {
          "id": "1071c83b-3895-4612-9fc8-e23dce00909f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "37cebcec-e50b-4e0e-9879-3c512e5e3580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c93e67-56c6-4142-ac2f-75bd7bf100d2",
        "cursor": {
          "ref": "46115c2d-500e-4411-b2e8-9839e5588139",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a42a782a-2e7e-4b5e-8f00-47f530aa572c"
        },
        "item": {
          "id": "30c93e67-56c6-4142-ac2f-75bd7bf100d2",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "619acf21-fedb-4fe7-a8f4-5c668a7cf172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16105ee4-d32c-49b2-8a30-b5d5213b7e77",
        "cursor": {
          "ref": "66eb5eaa-2fb3-4700-ba13-d4f80ba02c60",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a33da3c8-16fc-4796-8e91-7b660096ee84"
        },
        "item": {
          "id": "16105ee4-d32c-49b2-8a30-b5d5213b7e77",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "63c502a6-1a7f-4e6c-8f9c-aceb85e68327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2fc4e69-970b-4bc1-b5c2-80ec50779b57",
        "cursor": {
          "ref": "01ac800e-8086-4a71-aa28-b61ac9dc76fd",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8070aba2-43fb-465c-ba9b-8e00b14a16fe"
        },
        "item": {
          "id": "a2fc4e69-970b-4bc1-b5c2-80ec50779b57",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "91e5153b-18c5-4a23-8544-6c3e9cccfc95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "239e09ac-fd91-4dae-b658-5d7a669a4952",
        "cursor": {
          "ref": "f325a3dc-1300-4e98-9833-d938d25dbcae",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2d4e12fb-cede-4f38-9494-42d777d3e261"
        },
        "item": {
          "id": "239e09ac-fd91-4dae-b658-5d7a669a4952",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f416194d-759a-44cd-83b7-f45658bb1ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e54a0fe3-d9e6-4fcb-97ae-effd09d60ac5",
        "cursor": {
          "ref": "a17e2705-bb54-4c07-9d1e-bee4e2fe06a3",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "46575925-ee36-48c2-a862-7a956bddffc4"
        },
        "item": {
          "id": "e54a0fe3-d9e6-4fcb-97ae-effd09d60ac5",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c3a25faa-264f-4066-8a2f-6d6355bbeaf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a421248d-6d90-4dbe-b1af-ba1755ca39f7",
        "cursor": {
          "ref": "b29a4e25-6cd1-4b73-91fe-6d05871034b2",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "15c34372-623b-425b-8f98-379ef43e0292"
        },
        "item": {
          "id": "a421248d-6d90-4dbe-b1af-ba1755ca39f7",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1b931139-c7ca-493a-a1c5-92b2858e6214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834cf7ad-5b1a-4866-ba8c-9d25a4910c40",
        "cursor": {
          "ref": "08dad2b2-d50c-4d7f-8c96-c0678638dda8",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1aa50127-3307-41ef-bd48-3f1947aecc1d"
        },
        "item": {
          "id": "834cf7ad-5b1a-4866-ba8c-9d25a4910c40",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f4ae4f18-a447-4a3e-85e6-72f66bd334bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 314,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca3d4c42-9632-4d02-9611-8bde9a4499b9",
        "cursor": {
          "ref": "a8c54fa1-6a6d-4636-b751-b08ad82ea3f0",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1a34e11b-390f-417d-8651-b28932a2ff9d"
        },
        "item": {
          "id": "ca3d4c42-9632-4d02-9611-8bde9a4499b9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "68a75ee6-95a2-4fe1-be5e-752f636fdf2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782992cf-348e-457b-b956-b2b38bd80873",
        "cursor": {
          "ref": "629ba309-ce2a-4c23-9647-53d12e90d3e8",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "298186c4-4359-4ab7-8c3e-e71172c6f984"
        },
        "item": {
          "id": "782992cf-348e-457b-b956-b2b38bd80873",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b29b43c5-b391-42f6-a427-6bf1a37417ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7adb0f3-e6c2-4b1d-a984-d546afa4bcbc",
        "cursor": {
          "ref": "5beedc2d-aac2-4cef-bcf4-ab63dc35ded4",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8a7c449d-9b19-4aad-bad3-2e658a99f898"
        },
        "item": {
          "id": "e7adb0f3-e6c2-4b1d-a984-d546afa4bcbc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e77f5006-501c-4683-8263-9a9f3f3820b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2fe23c-0a7b-4881-a6a1-a48902d6a477",
        "cursor": {
          "ref": "49d849fa-90d9-4e39-a00d-42c9ba4340ea",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "2e017438-11b0-4b49-85d0-07ad9e7d32f9"
        },
        "item": {
          "id": "3e2fe23c-0a7b-4881-a6a1-a48902d6a477",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a1234ad7-cd26-46a0-b54a-abce19a538fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b657f605-2004-4638-83f3-e8cb1274917f",
        "cursor": {
          "ref": "948a941b-9f18-4d78-ba8c-9db32c6ed1ab",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "729a1138-b99f-4d74-a4ab-b901e1bccf1b"
        },
        "item": {
          "id": "b657f605-2004-4638-83f3-e8cb1274917f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "902fa3a8-b330-4a3b-9357-170cf15a7538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f136b9-5d72-4334-8cc1-75bdbd6c4edb",
        "cursor": {
          "ref": "58df5a43-e135-45c6-bedf-77fdf7fda572",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3661eaa9-d683-45f0-b141-951ae440457a"
        },
        "item": {
          "id": "29f136b9-5d72-4334-8cc1-75bdbd6c4edb",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "77e78bfc-013c-416f-a077-41ca4485547d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add20e4d-bbfc-48da-a06a-187d60a28390",
        "cursor": {
          "ref": "5afdf12a-c576-499b-9c9e-4bfd6b47b09a",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b5ac5f2f-91aa-403a-a910-70dec750084b"
        },
        "item": {
          "id": "add20e4d-bbfc-48da-a06a-187d60a28390",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6a9fd305-48a1-41ff-a8e1-da3c6f9285ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9625bb91-dfe9-4b16-b281-0346e3b859d0",
        "cursor": {
          "ref": "6ba391ab-e1b2-44a8-881d-7025981c1294",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "09de11ed-9c2f-4c91-8114-ade3f34c6bf8"
        },
        "item": {
          "id": "9625bb91-dfe9-4b16-b281-0346e3b859d0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "36d9ebda-8837-4fae-8074-8dedfddc6365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56a54ce-b8cc-485c-b15b-df12eb69fd9f",
        "cursor": {
          "ref": "18ba3721-ce25-4d0c-9a65-3b21b153f478",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d4d7d67a-8113-4003-82a9-c03e3cf90458"
        },
        "item": {
          "id": "b56a54ce-b8cc-485c-b15b-df12eb69fd9f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e7780493-e625-4832-8fac-286444ff752e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c534df-cf0e-40d2-acae-5a1c3c55fb02",
        "cursor": {
          "ref": "7d4037f4-5e77-4df3-9598-46dd558f8a51",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "28115de0-c7c1-4e2d-8795-762642f4859f"
        },
        "item": {
          "id": "74c534df-cf0e-40d2-acae-5a1c3c55fb02",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "86d542a5-6cab-4524-9d85-5109cb499778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a2d657-f1b0-4ee4-8877-6ad9fc1be36e",
        "cursor": {
          "ref": "5562df0f-81de-4ebd-b74e-d0b41e69ae10",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "dc8cd0b0-5dc2-429b-ac38-bf9a1d986ed2"
        },
        "item": {
          "id": "d2a2d657-f1b0-4ee4-8877-6ad9fc1be36e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f7d8a31c-ab08-4de4-901e-097c8386e76f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098e131d-2414-4942-a699-618673d78b59",
        "cursor": {
          "ref": "24883220-4ef5-4276-a77f-de83faa0cf80",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c4684068-c2b9-4822-8ac7-4f3e2a1d6613"
        },
        "item": {
          "id": "098e131d-2414-4942-a699-618673d78b59",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ca91cf85-0443-41a6-bbee-10b89fd1f990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9830712-2f86-44c3-ae18-07dd60303224",
        "cursor": {
          "ref": "f35a67fd-b8f0-491c-84a2-e4225b050e60",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a87c8c97-fcb5-47b4-bb9e-68390363b9fe"
        },
        "item": {
          "id": "b9830712-2f86-44c3-ae18-07dd60303224",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e0329750-9f68-49bd-9cdf-69a42365d679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0251c492-737e-4f01-a26d-b7fec09183b9",
        "cursor": {
          "ref": "b7d1f74e-d585-4b8d-98e4-14c53d19f170",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "cafc4132-6cdc-4a7a-83c8-76a9a4dc72b8"
        },
        "item": {
          "id": "0251c492-737e-4f01-a26d-b7fec09183b9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2ab14fd0-9af5-443c-8876-3ce47dda0f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69cb5bd-418c-4795-885e-13eadc13f548",
        "cursor": {
          "ref": "b4b3d8e7-ecff-4b98-843d-d20c5b9b6b49",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6c7dd6ae-958f-43bd-9297-6bf9d58b42fb"
        },
        "item": {
          "id": "b69cb5bd-418c-4795-885e-13eadc13f548",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6ea23c22-d1f5-43e1-9ea1-a5e1c8d2579f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f6b99b-ac61-4629-8b2e-447b9bec5938",
        "cursor": {
          "ref": "ca0a9581-24a8-49d1-b8f5-b73999554fb1",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "072eaa2e-bc96-4ecc-9a2c-66aa804e52b0"
        },
        "item": {
          "id": "c0f6b99b-ac61-4629-8b2e-447b9bec5938",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "08407bcb-5c55-47cd-a700-7790ef4f2a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db396e7a-ea0c-4f06-af4f-cf823adedcd9",
        "cursor": {
          "ref": "71f5e5cd-523e-4cbb-a895-5ace9b397007",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0b958540-333d-4574-aa58-b1e4093877bf"
        },
        "item": {
          "id": "db396e7a-ea0c-4f06-af4f-cf823adedcd9",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c2e47520-c7c0-4edd-bc58-b1ddeb6a1bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4633e159-8160-41ad-9d4a-409f6e094553",
        "cursor": {
          "ref": "b0fdf75f-286b-4065-ba51-8ac96492daef",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a043bb73-534e-40e6-a77d-6f167ae81b27"
        },
        "item": {
          "id": "4633e159-8160-41ad-9d4a-409f6e094553",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9d0287e2-8d67-45ed-b5b6-6958bfedd163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6862d1-0fc3-4aa2-b983-3efc8f695e7a",
        "cursor": {
          "ref": "ff7ce135-c670-4660-8999-e9458f917c6a",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d32de9d6-dcd2-4ede-849d-f9b1b141fbb2"
        },
        "item": {
          "id": "4f6862d1-0fc3-4aa2-b983-3efc8f695e7a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5925ca45-72d0-40ce-981c-cce4dd94cbcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4f60eb-e348-4c75-8328-8d479fccbbdc",
        "cursor": {
          "ref": "e7796b2d-f2fe-4a84-8e2a-c45fb77733a9",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1058a47c-dff7-4c76-932b-b8ca94438170"
        },
        "item": {
          "id": "1f4f60eb-e348-4c75-8328-8d479fccbbdc",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d5905ddb-1912-4016-8e98-ffd73271507b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8039fc4-9697-4b4d-99c1-58c63eb55344",
        "cursor": {
          "ref": "7ce3aa52-720d-4ba8-9e87-adc97dd4b850",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "11dd9465-a769-41fe-9e49-fe26fa9d47af"
        },
        "item": {
          "id": "a8039fc4-9697-4b4d-99c1-58c63eb55344",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ba9b90b6-7173-4287-b858-45ce4baffaf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9de2c7b-fa84-475d-bf20-df5a7eb5185b",
        "cursor": {
          "ref": "79afd29c-2512-4a91-90ab-36663ad2dd3a",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "81b7ba6a-5f97-4c55-9a6b-46dbbf64d3f5"
        },
        "item": {
          "id": "b9de2c7b-fa84-475d-bf20-df5a7eb5185b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7023aeec-a114-45ae-884a-85866512c98c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4411c404-1d72-4641-9b16-55d06ae9092d",
        "cursor": {
          "ref": "aaeea522-79f9-4b25-8730-1959f6e6f96c",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d01f8a97-f382-4722-b09f-2ef49cc2fa47"
        },
        "item": {
          "id": "4411c404-1d72-4641-9b16-55d06ae9092d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e16603ed-bd9d-4197-a842-4c4a9eb29c81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "91ea23af-9f86-4c91-8c35-9278171f04a8",
        "cursor": {
          "ref": "1a690075-2a31-48ac-be1b-4852f79df019",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5a6e48e7-c699-4341-9316-ec77e2500fb5"
        },
        "item": {
          "id": "91ea23af-9f86-4c91-8c35-9278171f04a8",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6340e2ff-350d-47fb-8bec-8abd2fccc385",
          "status": "OK",
          "code": 200,
          "responseTime": 441,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b56a61-a2c8-409b-a1eb-59e31b1d1bf7",
        "cursor": {
          "ref": "ce43996e-6cde-4363-bb0a-cfcbf5e8423d",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4859b60b-2813-449f-a56e-e14e1406a789"
        },
        "item": {
          "id": "a0b56a61-a2c8-409b-a1eb-59e31b1d1bf7",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ee2b5538-305d-4b7d-8ea8-4c1396a2f2c0",
          "status": "OK",
          "code": 200,
          "responseTime": 2857,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2104397a-5643-472a-a66f-ed6b812df81f",
        "cursor": {
          "ref": "c66b2a80-1d27-4c6f-a7df-3876b0fab85e",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7d5d6ff9-1660-4f5a-9514-3f13678bd7e4"
        },
        "item": {
          "id": "2104397a-5643-472a-a66f-ed6b812df81f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "218b2cae-35dd-4773-9379-fbb572a82c38",
          "status": "OK",
          "code": 200,
          "responseTime": 2638,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "561a850d-2013-4979-8535-6735b91b8cd9",
        "cursor": {
          "ref": "31a35fcf-056e-4389-ab0c-b1fe6424d7d3",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "87a590bc-b80c-4b31-ad0d-e8c65fcacce8"
        },
        "item": {
          "id": "561a850d-2013-4979-8535-6735b91b8cd9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5a0604ba-332e-4748-aa61-2cbd6f9f724f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "561a850d-2013-4979-8535-6735b91b8cd9",
        "cursor": {
          "ref": "31a35fcf-056e-4389-ab0c-b1fe6424d7d3",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "87a590bc-b80c-4b31-ad0d-e8c65fcacce8"
        },
        "item": {
          "id": "561a850d-2013-4979-8535-6735b91b8cd9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5a0604ba-332e-4748-aa61-2cbd6f9f724f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "82888ba1-2de4-4a05-8bb4-5d4247bad1fc",
        "cursor": {
          "ref": "69d88aa2-55db-4426-b4e7-0592e64daf80",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "77dca0dc-2b03-4f81-b093-c142a72bde24"
        },
        "item": {
          "id": "82888ba1-2de4-4a05-8bb4-5d4247bad1fc",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "cb42025d-3e57-4dad-8ec7-facca68c0b4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "ce8fc9b4-cea0-454c-8720-cf57a7e3e1bb",
        "cursor": {
          "ref": "9d24174f-512e-47f6-a707-3c4f733eab25",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c8090d0f-cc61-47c6-8f25-874010c74e32"
        },
        "item": {
          "id": "ce8fc9b4-cea0-454c-8720-cf57a7e3e1bb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a5623ad9-dcd4-4f7d-aa4c-aaec9158717d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}