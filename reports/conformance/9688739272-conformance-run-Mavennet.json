{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6d626253-bbb0-44d8-be74-d93f27d43d82",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b9c67aad-da3a-4cfd-9bf5-d749bba4b3ae",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "123d86a1-8384-4beb-a6f5-f8460cb30cc2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3d253ba5-355a-445c-8dec-42f8683110d6"
                }
              }
            ]
          },
          {
            "id": "4dfc4419-ff95-47a7-a8b8-e49b1d72dd14",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9831b13c-8d9f-4b50-bde8-9b2df8d5b2ba",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "58161abd-1605-4fdc-ad63-fa883416d8b2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "277a3efe-7ee3-4486-b8a5-99191d263cae",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7026b646-9ad9-4e2e-a625-6e50bb28b839",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8af8bf32-479a-4e23-bdeb-82ce6aa6539f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16f57b8a-40d6-4b21-af22-96e0e017e563",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ca6a83df-2347-4cb7-a79d-ad514263677d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4b23512c-b908-4d2b-80d5-6d621031f92c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c23156c-be0b-4646-ad1d-1523863000e8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "da2c73ab-5828-4ce2-976b-e682d88ad912",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d4ca9cdc-8922-42ea-b838-70cbbdc818ca"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f0837d8-7404-4acf-a5d1-c50c390d1436",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "19ab7168-9985-4bf6-a8b8-f9a33c983430"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "11451283-d32c-4163-a9da-e58cc199a8d4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1c8087b6-e6ce-4b09-9ce9-b4873802e479"
            }
          }
        ]
      },
      {
        "id": "1549b345-f1dc-4ce0-9f76-656023713c5c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8d4bc0f0-c329-4746-bb7e-ac55536cbda9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1fd80509-e167-40d3-97bd-172c93d7cfd7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6fd9cd86-7eb5-4502-a7d6-b932790b1125",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99d89bf-2948-4000-bbe9-002f3d368639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47f15e8d-1cac-4014-a839-8da796e28861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9a83a0-d65f-4adf-8965-8e96e15b3f9a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34aaf66-86c4-463f-88f9-b84e0ea4137f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c4dd0ece-a0b8-4460-bc76-0857868b65b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce19599-f3bb-4246-b9b7-6140026f496e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7c0fda-1039-48ef-a860-45fff1a9ec01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0930196b-4f62-433f-b235-c10fa586d470"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "733e9568-2db9-420f-b1dd-d51ea78d9066",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c3800465-8402-4d6f-82f2-f010733200b8",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e35d9f-5f43-4317-8525-a581833c99ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a4fa049-8d4c-4194-bcca-1d64e91f20a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c4b9af-b6c4-4a76-9c31-6590ee3b03a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "282319e2-e2de-4b78-b2f6-551f3f2f9182"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "24a423f0-9a69-45fc-b740-9cb0d349718a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "180b950e-8abc-4da0-894e-bd32f6965472",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e0294f8-fd50-4223-8473-8c0c9a337c67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "dabe5f34-1db1-4cb8-b06f-8ceb5ec0ddf2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fffb08b8-8c68-49cc-81d5-59e0435e683a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "4a6a2078-97f2-4788-b109-d129cd79912d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "607b5db3-20a3-4215-b2bc-b495ad819ce8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7bd341a-9b26-4e32-ac5a-cbd5b565d0de"
            }
          }
        ]
      },
      {
        "id": "9af24c1b-c5c7-43a6-bd92-8ab98f5fe54a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "460a0489-bb48-4dac-a441-75a936851c07",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fa3cde95-a558-41ca-8ce2-4f6ecbd21f16",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "abb5d5c1-b19f-4348-83c6-b35267251d27",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d4c4de-b0a0-476b-ad66-22362192aa91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "056ef2af-ffb1-45be-8e7f-e538fdc27adf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49cc3c80-9068-46ed-9d1c-ee2458fdd459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "279da5ae-672a-45e4-a23f-2fc38c593080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e75949-0e62-4763-87f1-994c663201c9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1c7b4b-d6c1-4a22-a421-5249856a3d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aed4f80f-c8f0-44d1-af81-5cdeeb976879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60115ff6-fe62-40b8-92b1-f31dccb7c789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "262ca07c-a5ad-4d53-99e9-815e53e1ef77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25580db-0d58-4828-8fd3-a0cc362b28d6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331ead51-767b-49c6-b4fc-2c337e0c5bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f4349c-ecb8-407d-9621-ffd4a4de5c13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65be6ec2-37a9-4d05-bd62-408b32c1caea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3790b4f-c318-4fdf-b40c-f79204b27fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3706eba-61a8-407e-b444-3ed6b5d5ea47",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7beca72-9864-453c-8588-3174322a5731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca8b92ea-349e-4e33-8a3a-278851b8b1d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51fdf6b-3eed-4150-a3aa-737ff6eb8cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c0846ba-2ca6-4d8e-8c07-b8f93c05a3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce5469d-da65-4976-9887-e8daab783ea0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf8482c-9eec-4fc0-af00-4d0b506ee33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f1c0c7-5d4e-4d26-b0db-9dca40789634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5ada85-0963-4eb3-98ab-5b85650fb59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78841da8-bc15-4a6b-9786-4a2490e34e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a63e8f-ac65-4c16-8712-2804df314d16",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d617e0-e8d3-4b52-807d-d09e122380f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dafaf6f7-c811-4e23-90a6-36c51f22c16c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17169727-f919-4a5e-8eb5-146afae886b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "953165ae-0cf5-4bcd-8ead-79e214cbc9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e24a975-77ed-43bf-a680-60df58beea4f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "542b72dd-f7ac-4db7-bf68-e64270749e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d07ff78a-17c2-4451-b657-429cc6008edf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e81a40-029d-42f7-89ae-3f3ef1d11b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b623153b-f565-4e9e-a9fa-603d076da64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3493a06b-49eb-473e-9493-366114d174c8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09ad793-c662-4855-aaca-a67baa4c797d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "055c0a0d-87ba-43e8-85a9-6ad5ccc6125a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fdc66e1-3803-48ef-ae5b-9e515563e61b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab583822-2dc7-4fe1-8e96-5d27fcd79c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341f5524-f22c-4b55-a3ff-e83edf7f12b3",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f15cd57-bdc9-46b9-97c7-5187645bc933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6bc89cf-b164-4b3d-a5bb-0deda2eb05dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7710fd-daa3-4ef6-abe6-8bea769a4256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92991b81-15e2-432a-9ade-4eb7f2b375f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43774dc2-8f82-459b-b129-b0a2bb0d9599",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cecfa36-50fa-4159-ac11-826f81271892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "974c448c-75dd-47ff-b1d8-3bd692a0f06f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d99d32-55c9-41e8-91b4-9379e3abc5e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63c7bc4d-9638-425c-8f2f-6e75d8f6fb55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78505f5a-43f1-4db3-8db0-ef6f639f65f1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1154f905-dd5d-4ceb-bfe0-cb063c12566f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "089579a0-6ec3-4442-9d6b-8b8ad0fca8e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3641cdba-e613-433f-987e-cc48408ccb08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40f3ec7e-d428-4fab-aa2b-ad8a7318bb2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ab8d3c-df35-4bc2-a68b-c47cacb5ac5f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83788c9e-56e5-4b09-9a64-5bc76b71c608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acd098f4-79db-435e-b5fd-62efcc834e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f54e470-3be3-474b-9c38-a29ad011cce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7afcdc80-574a-4676-a84c-63b50009ee31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978e4339-54e0-475f-8861-4ffaa5a31508",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4772e327-dd88-4a18-a1cd-d4916d95112c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06ee3df8-8a1c-4adf-8128-5de67a3ee893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11e217b-36b7-42e5-8749-6646ddc84355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57c48912-706d-4c26-8cd9-cd0e98910ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfeccc8-a14f-4ea5-aace-07e56351e693",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b11c199-31d9-4d65-976d-45a3731c4fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8866667d-1c1b-456d-b50c-10f8a7969c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d432f87-8c1e-4b8f-8e87-e2114a5014c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f2103ee-8184-4592-b137-226175f27aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7955fad4-8e73-4920-b4fe-ec25a3350113",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f8f38f-80b0-4b69-9454-4558002e36ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db5c1af4-92c8-4ad8-b9f3-ee04599d21c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e9aa88-023f-4789-a953-b3d2ca2025ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77b44aa6-b19a-4310-b41b-f9864fa42adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34f7b50-d0ec-4449-97b6-2e6f640a2fec",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4627bc01-2145-4bfa-a9cc-da6c1fed0aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11cf3785-6005-4b32-92bb-7462904568dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed3f37e-e59b-4d1c-b8e2-fcb9fe88aeb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "467754cf-83ba-431e-bd91-22c22cfedb87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef1f86b-79a8-4e13-8d2c-ae2c1548d001",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c8a455-e6e8-45e8-9c42-ea37bc57dd99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97680b5b-b1a0-4d0c-bcd1-7b39cbb89a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e29bd9-4529-43bd-961e-d3e830378904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d57babb1-66bd-42e0-a953-473f547d5158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa79d0d7-f6d4-4654-a50f-a6cb0e2cca48",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "586415f8-8faf-4cec-8500-a61a27ed59ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e83196cd-088e-4690-a48d-41b2f4a59177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a7d73a-7bf2-4a92-9ba4-0c84e791b4c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b0f3ac-3802-4ea3-8f14-5913e3600f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36eaa6b-5b41-443a-a008-5bf89f8a40a4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c389a2-ec78-4147-afc1-3e13457c319b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7850ecbb-5ec8-4d96-80e1-aeb9997aa26f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed63f33c-4a9b-47c5-b77e-f446f0cd07a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "92e16852-1759-492d-962b-eeee38fa666c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0e9070-3cfd-475a-94e0-ed1d192ba00c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29ba217-9bdd-42ff-b282-632fa0302c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f91de52-bffc-4101-997a-80c57636cc48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25647268-12b5-47b2-bd64-c5e255f17fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1a1ef2f-641a-41c9-9611-b80f995e84a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4e2f9e-6030-4357-944d-878dd2ea8cc7",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0377d7c-a45f-4a7d-b7c9-fd18af722108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97bce584-f59a-4a83-82b9-09d58ebbf75b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9071f261-9a7a-459b-93a7-967e8509866c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fa75a89-a00c-4d35-b23e-0e018fef5f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56608544-13b7-4785-b18e-d42998755a4a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a78e60b-697e-4169-baac-b7e675cc5a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a2a0f5a-70a9-4b09-a56a-1d485758ac89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d2885d-f324-4312-b493-83812b925014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f38a741b-e8dc-47c8-bc48-f7b4a6b31bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822cca67-981a-4026-82b7-8ef1ebbdab0e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f150ffa1-02bb-4c8c-8bda-bccc375fc37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ebb96cc-e7f4-4906-bd99-13a8beab021d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a1ba4b-666b-441b-a893-767ce530903c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b18f3016-ea60-4652-8800-181b10dca56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4953f07f-edbe-445a-afdf-dbad2e2f9b24",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ee85df-43f0-4792-9013-3e21b02a2644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bad693d-cdfb-452a-ab64-227ee3ea6409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7ae02e-8b93-4120-9948-68a698d7651d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "66062dc9-2e95-40d5-add5-003e77873466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce7282b-cf89-4724-a047-bf3a08f5f74e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c909ef7-7f6d-49f3-94bf-c73dd17ecf8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f3b17b-b553-41c6-ba06-167ddad47e97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebcff270-3e1a-42b4-8982-043a3bbab407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a01d37b3-faa1-4d60-aed1-3d9da2572ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4d5cb8-e039-4f82-ba2d-ebe868b82775",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bdaf06a-0b5f-498f-aa5a-7edd1b17026b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "804b0ff7-b3e2-4487-9cc4-41f3e9b723fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34badc77-eed8-497c-9ff2-aac2e8c10dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddda6f93-ea8d-4315-8aaf-cc2578f0ee2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dfc9b64-5f5f-4c90-94fc-e07ed85ac1f8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7c2554-1cb0-4ac4-8470-94d87cda0332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68522cee-a7af-4778-a06b-fbe43404be1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94f1492-c4e4-403b-a901-a65a0de8333f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e168f2ad-597a-4e02-ae95-656a2aa28063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43255a3f-1989-4fcd-ab87-9610dba39ddb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cce2256-8236-4bcc-a790-0c8bd6c9df1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6342e17-fd3b-4ace-a966-d299dc198397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b245c6f-73e7-480c-b7b2-8c805223dfc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2e3749a-e139-478c-9eb4-3f86ada49475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6978844e-1f54-45fc-8dc4-0d9aada21602",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28be14c8-c8de-4132-94ff-1c8785913f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22e2bc67-ee04-40a0-9669-503f08bdf3de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4acd1851-f53b-4799-b789-59708412dd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa9d2dce-24ae-4b22-91fb-983489414aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7316ad9b-dcbc-408f-b6f0-6724e2041a14",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9430d027-8b2f-4fe8-bc45-76831a4da5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8450e5b0-7020-4baf-bd25-a14d449ed251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb4ca40-e25d-4f06-822f-8b42fc7b8fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "9409acb7-5277-44bd-bffc-6b50b1047b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743c8a77-918d-4ef1-9bf8-c3104b24afc8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2dad75-40e1-4d5d-b45f-d4b2d8d97cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56c0dec9-316e-4b52-8f6e-0a866f138e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51731d52-c2a3-46ce-b5b7-41097415521a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "89d2ae1c-7560-419f-be44-2f5b91a59985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62cbe836-6d4e-49ec-87f1-22d770f3b199",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6f3246-eacb-44ce-b73e-71b9c0fda1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f56234dd-8c35-49b5-a5c0-29b535fbb71d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bfb1b0e-27a9-402f-9150-dc7f194f3a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "91e9220c-513e-4130-8f4f-1848729b55e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73e7e5d-ae56-44ea-8eea-8719c1b27445",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b05761-a5b6-4223-9ef9-0e0d4f74d47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0fd2db1-f067-443d-9425-194081c4d746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "404f14ac-141f-41c1-9587-68b99c9725db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "69213711-6af2-424e-bde6-383785210579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e1b3ed-1a85-49d7-803b-6c29da6ce6c9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d131c01-6f05-4628-85e7-2f0d5e6626ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c167b5a-5802-45f9-b960-32bc9cb4b0b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6d0eb4-db2a-4310-970b-4c1eb4450ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50cac7b3-c54a-49b2-ae94-de841b684b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d00733-2bea-4987-ba0c-021f0a957ea6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e217ad3-3339-456b-aeea-200f1eaafac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1cbbbe8-c58f-4299-9c52-7ad710e58bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53225ca3-9955-499c-9296-3de57abb3d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d68d035b-5999-4183-8f17-2b75d5dc67dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c402bc49-5809-40a2-8285-ec0dba235b26",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "416a6c5f-0a34-4cc4-a2b8-8425d2136481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5aae1112-e263-4f35-9122-b9086474374e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf15ad6-c8fd-49c4-b0e8-12761dc209ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ac44f6d0-2671-4bf9-90eb-f2483f201596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967b77b6-4b11-4bb6-9c46-7f6cabec93a3",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcee9612-6921-46a6-af5f-5b38d78466e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "820be3dc-8ebf-4dbc-9f4a-78b36146871d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2403e1-9ba7-4a3e-b0ee-e9fe99066530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cb2d936-0e57-49e8-96d7-07fb6b53db1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ac36cd-97df-4fee-9219-cd8be32d67dc",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db609d7b-8047-4d87-ad7b-cd14671f4fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb5a62f0-c037-4e2d-b67f-e22c94a80e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee931bbd-94e4-4147-a6af-c0c448b5eab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f05e3602-3ec4-4c87-91fd-ad6ab62a6f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c90528-aba4-40ed-899e-b2698c9c58fa",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0305bd1-28b9-4cb2-bbe2-216f9bb421ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ce4d9f-6877-4e95-913b-7b9ee3f55ee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c763a80b-5aa0-422d-9101-8ed4726ac75d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a9f0c87-f10c-4e44-9a18-054f6a59f035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f91224c-e1dd-479d-b768-b3e0985c5c3f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f906a7e1-8103-458a-9122-24890dcd7c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfbd5903-6850-4b27-b093-bccd3ded56c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53944eec-a80a-4dfe-ac8f-cf58b9179262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "75440bf1-2fdc-44f8-9d63-983e5de55f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d062c8a-3b96-4079-bd14-42395211fe29",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dfb9fed-9aa0-4d5e-b889-41266c7795e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5259cc35-9a74-4285-bc04-c6df98e19416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94513a12-28e7-4b16-854e-4212ae5dc164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c54a3fc1-dbff-4e37-8944-ddf67cf6daa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3aaede3-efdf-4529-83eb-069af5775432",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6218947c-6135-4cc1-a703-de65a60c78bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a75ea38-d0b3-4714-b0a4-2af2ab99012e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5f01c0-e61e-466f-a58d-a77d69949e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "4a61aba8-6e25-4e1a-b624-71903446dbfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f098c42-0ff4-4d60-82ba-58d502ba37f3",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c49047-57bc-4bb5-9f9d-c79a52397955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21733461-578e-4337-9a60-197e51f3f961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a39d15-3f9d-4ebe-9ae9-a313a299dca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4b123e8-4cf8-4deb-9514-968ab7e717ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab6a914-03c8-4a55-a5b1-a618ff24a1df",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65699a4b-c70c-40ee-955b-131955149f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c394fd-d790-49ab-a971-c4e27fda88f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d7e7fa-f54f-4532-82ef-63132b44ee20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8889f018-5981-451d-8bb1-7712a5603b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e67bac-06d0-45dc-8977-58641385c683",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0665b42d-4035-43a9-88d6-aa5c2dc4a13d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a323140e-9a09-4423-8e4f-09a6760309b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd785e89-4684-4bdf-bc70-31fd39ad6064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ceca89f-c999-4f1a-afe1-1a66f0b6f3aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8909c10a-5392-4a8e-be39-005c05d4c788",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61851c32-d073-4149-a170-317f3e44db50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79efd83b-4e77-47f8-9c81-c1bfbfca2a48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "845fcb9b-583c-4740-8ac0-edac9f8a7ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd08a140-831f-49e4-84c1-65a1da82233b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "631a043a-4909-4cf1-ab32-293d87147e49",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3dfaf9-8c11-496e-8889-5b4f65eda18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b71c891-af40-4594-a0ee-a9b4dd7fc793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fd48a7-7ae4-4600-b359-3b7b0585bd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b997626c-d763-4dbd-a9cb-339135f06cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d186b8f-2e1d-4273-8d58-cd07b930ea21",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcded982-9849-4279-a4ea-fa5d1662e10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "708d7c41-d246-4adb-b6c0-799e69499be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944e390f-17e5-436c-bdc4-37df80951ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e22bb541-bd54-4df2-99ae-909f54895c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e82376-a60b-43e9-adc8-7e6f129e4fb0",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef373d1-2e55-4be5-a3e4-d5558c14333a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b07e8b9c-9f8a-41e7-ac2a-034845015ab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7bf22f-f7af-4a6e-8cf6-67a3ec495c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "52738e37-cb68-4cd3-8201-e8312e2ee4b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f99ced-1ec5-4bbd-a535-051cd27ce351",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97617436-943d-40e7-ad9e-9f3c04fbf5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91568241-8dc3-49e1-89be-8867dc68b14c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5932cfc3-c35c-43b0-8e63-340288eeed79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ec57826f-75d2-4193-8a55-bfa759a04524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe62788-2444-4013-a5bc-f5a718807123",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d07de9-f406-4670-8e4a-5c1b847ce78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3de553dc-8f82-48e8-8bd0-44f895ec0733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4b3cb1-b02f-49c5-9297-65fc2b7f8a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "426a5d7f-df09-474e-b92b-ff61efc1ddac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6c12b8-981d-447a-aee8-2d247acfc35f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2096d3-762d-43c8-809b-b50931eead1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2705a8f0-bdfd-45ad-9201-50bfe42a5e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45a9031-dc2a-4d71-8fac-e93a5cbc8e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb80bbf4-a6b3-4690-945a-8b7ea03dfe97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3373972f-0eba-421e-9b9b-0ba5cee06234",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37bd8116-4166-4961-b16c-4b862a4fb05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e377ff-8154-4cfb-bc7f-0c6268d314e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03afc2a2-3387-4346-9528-8cb917aeca2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01e0536e-7c2e-48b9-b496-6ebaf01e4010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1df9b2c-ea02-41c2-86ac-218511fe728e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80d4810-707f-4586-b9ca-8e09418a6d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "521f82a8-7c4d-446c-afb2-0a4a6bd75a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1800d478-1382-40df-ac7b-1a0880218ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "df6816d1-74b2-4022-a34f-d3ad1c6cd8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a70a0f-e089-4e6b-948d-1ac673997942",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c4eee9-82f8-45c8-862f-a5ee62b99a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "788f5e82-3bd1-4751-8d60-c8afa301c541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5833a860-a6df-4cbc-accf-7b2cb3ea05c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "71efcf4a-c960-423f-a8db-f81f38b8b5ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef5c561-61c3-4feb-adf3-3e1f48df35a6",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88ad165-74d4-4d4d-acda-ce0053d559b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8c862c-c5ca-4664-9113-1abe98ed0f4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3a2d35-e3e2-425b-89a2-d6a556bc7a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4d99c7ac-6180-45bb-9c74-7b6352f92af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f96031-6f84-4abc-b28d-ad9b373fb0df",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14056c7f-cb2b-43e5-9fb2-a898585afe66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd483556-1678-433f-95e3-404c1547cc3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddae376f-1b89-462f-8e98-dbc4a8fa0a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2bc0835-0ae6-412f-a368-5a623199104e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c9bc8b-5e09-4e37-8b58-59bfb5f74ff5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7efcb067-9092-4290-856d-5cf883d8eb8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aaf90cd-0eba-455d-b390-0e5ac94b2d2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f77ffe4-71cb-4794-a4dd-95a76ca8f8c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4bc40db-2000-4e84-ae15-ca17e0fe69f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf1a989-ae6c-4e38-81ea-d6c209031f00",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aab56e2-6366-4b55-bfcd-dbe802f22693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "838231e1-8c6b-4239-9802-06dc741f0e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b50f1f-c6d8-4fc2-94db-669ff5aec725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "017aed62-3045-4958-96a1-77ec01be0747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f1485d-7f5f-4109-8b04-47cc4a08076a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99c6fac-5ed3-4607-85cb-72f870b5fbb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "636184ee-7ac0-449d-ac4b-bc8c7977634e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e47026-23b0-4bd1-9f6b-ca5ecbe668f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0b4ec00-8200-4cd1-b29c-a015b10542e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "635e738c-f137-4420-8905-1cb764d80108",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95341f2-8afd-4aa7-9971-70d53cbd67c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a6760b7-65eb-47b4-a47c-33846d41257a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758537bb-6e35-4f0c-8a8f-9f82dbb4f7a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c302137-5ed7-499b-81f0-acfe2749a657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98c3716-e619-46a6-9531-eb8309d6cf07",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a22419-06da-4146-bfac-0ad4048c68df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7329e867-38d8-47f5-a2c6-7bb45135560b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb5a67e-53b2-4d5a-8bc2-69134a293417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3774b8e-6226-43ac-a64a-6a5df1547792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5138e16-4348-45fc-925c-2a0a45878a47",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8e140a-ed16-4831-b2ff-2cbbf473dd7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ebaafba-86f1-49ad-93dd-377b40971d20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451cb13d-a525-4ac6-b6eb-51d29fbb2fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "858a73da-e8ac-4dc2-83d2-727606130c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff7592d-820d-46d9-8166-dde9556edbc6",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb93ec0-3f73-4e75-8a8d-b2da296534a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab7008aa-91a7-4f52-a3fd-2f6a1f2cb905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8207eced-988e-4bef-9732-aed8db15f58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e37def1-25e4-47fb-8dde-8dbedb95e3ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b7d958-0188-448d-b486-3d5a2bff5244",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8487b5aa-b0c6-40ef-b5c7-9a7ced47afd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eccd686-a6a8-4362-a5e7-fcd6e36616ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552b7762-eace-4a73-a03c-6a457297ad52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d50c1bb-3f4a-4ac2-b4f9-43253999ab13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0a7fed-0063-497d-9d03-f872d9efceab",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3bcbeb-015b-404a-9e68-0346c53c96bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca289edc-4ff3-467c-841d-665c2491bdf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55799dea-e64f-4be8-b7f9-29d672f2b92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b4adc8-d116-4afd-9c8a-faec7dd26045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7ac358-a7ac-44d2-9158-5c2fd590a8e4",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2467cc3-03e2-4ccc-bcc7-f82ab7993d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f757f3eb-8cad-4b28-b666-c43b08ed18f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "278b9e3b-8f79-4e53-9675-877ecc24c754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0206d609-4c8b-4c8b-9aca-f29824786311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3e0de7-9fef-4b1d-9fb9-8dbe5d2cbd07",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ccee74-b10f-451c-aa1e-8efecc58f58a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da9c52a3-b839-49f1-ac5b-4bd93b421f94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3701e9c0-fef6-4908-ae93-aaf0fb5b9ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4450290a-4352-4d34-9cd5-40bc60bb345c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae4cfeef-0baa-4b64-ba91-eb4fe13573f1",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a2adeb-15e6-43e8-9b1e-0d63e8a9f678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71c54e32-64e8-4fc9-ab82-9e7330dd5d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ceb8ad-433f-4517-bb92-8552fa2b4d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f5b7266-a603-40d0-9731-174c7c93a217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c8fa4b-a728-4192-8ab9-242735fed596",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46716d2-97b8-4a9d-826c-db223cfef4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e462cb2-7c53-4851-b940-b3e8ba1b031a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226cf6e4-212e-491f-8bc7-67a61a2c251f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "caa9143a-d1f2-449c-a5bf-dcb532db38d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d499e7-a535-474a-bada-7d50fba060a4",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94227305-aaaa-4442-9563-5570a08ce8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1caf6ac-fbf5-4083-a01d-16dc634f0a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b37c57-71bd-4e37-aa87-e3e8084573d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f585aada-2e09-44d3-9b1e-c97f1d50208a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca5d0cb-3475-4f7c-b62a-9bbd802e5b91",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c656614-8e8e-4165-8a5c-a3036df1ffea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4137acc-bb70-4dfc-9ac3-04e09b91b80e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf4dcb1-077d-4508-8221-97e12f6f5f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a689436-4ce7-40f7-b4d7-bd04ac897633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9a407b-d207-4563-ad9f-e3051e2f90ba",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0341fad-79e2-4ab1-ae1d-7757840e8717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35aab779-6481-4ee3-9f74-897b17259656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9fbcf7-7bdd-4db5-bf45-3556829762e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e247b4f6-eef0-4add-81ea-34009a2ed838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebea2d22-3784-469e-abd5-27485c97b7ba",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a89a73-e6f6-49c7-91ac-f50f48e83947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4990dfc8-801f-40e2-a9cb-deab6b1ba448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66f83d7-d5b0-4c08-91d5-4a8207ed6041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "42bfcea9-de45-4aaa-8c5f-64bc0211041c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e30d5b-17bf-4f7d-adf0-4e26b3501dca",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "707fdc79-cdb6-4284-a05a-b069d3ea04f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12ee213c-322e-4b4a-ae8f-0eee938a0291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a15f4da9-d43a-4824-af72-a2ff07850b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9feca309-b5a4-40fe-b65d-bfbba8784e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1463fbeb-4767-44bc-b690-6904dec26146",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2269652b-4619-4ca9-bdfe-d34e0f7bd0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb16b4be-19ac-42af-b193-5bfa3f6c0581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d7f58d-1893-49de-9a78-56f047d76fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cdbe01e-a3a2-4d79-bc6a-7bca015413ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5358fb37-5708-4c5c-8f12-b0e929809067",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03db933c-7a85-4575-b985-1ee9041b09ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5193ed63-d038-47a6-adb0-cb9b6412ae4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be48f336-f2ba-4326-a43b-2f2580186255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6241329-4ca9-4109-8c64-5a2b5df2c099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d84ce783-1974-490c-9b7c-e9079d031f5a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc726b7-3fc7-46af-b20c-6af37f25a5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea987f8-6ac5-4754-8bad-9da76374b77d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d9f5fd-f085-4e9b-b7d0-4630ac64828d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98ea3a73-3a8f-49ac-aaf3-6ee2e4032c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ce394a-98f7-4a77-bbb7-23ae626359c8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "208e6364-4d84-4f14-826d-6218df462e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e43839f2-b859-460b-a9a8-e1005447f723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c01626f3-9a9c-4152-adfa-ee7be333bec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a086075-c586-4c98-9c5b-5c12748ee798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518407f3-b11f-4c59-b60e-9762f2af1883",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "768f605c-9440-4229-8cfd-dbd7eebac93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b82ef9e-a572-481b-8cdd-22822c980cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cbe0032-258e-4c98-81ab-706dfd2b231b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa1425d-d7f2-498a-a655-9215071416ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd0d37b-4643-4407-a8bc-d66dfe829a6b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "292004e1-c8ce-4cc6-b9b9-578612d20e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d7bd2a-dfda-42cb-aa86-46e5271f5c4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8542655f-f766-41a6-9e80-b511273830be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2a195ac-e274-4cf5-a30d-005dbf2a3a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f8b636-40e1-4162-af2e-eca7f66492a1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80c482e-a9d5-4933-baa2-6a3aadbef413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "493c05ee-525c-4e84-b81e-34340c0c5563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0825d43e-2bdb-4d61-b442-0c60186388a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fb1e162-7516-458c-9931-835143ddfb94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9343debb-3216-4c1d-8a05-48d54a37df20",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9b1635-08c8-4d6f-8887-4c67b7b64a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91eb612c-f91f-4ffa-8fe4-49e433ab749e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93997a8-fd68-41c2-b580-6558074079f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b12e4e9-1654-4735-b270-727ebe85ab07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbfba83-678a-4793-afa2-1d0d26b5ce7b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b7b682-627f-4468-b105-5aa831edb9c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a63c060-8b51-42e9-9b38-78a0c796f3d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9b8e2c-6a96-4a54-80c7-e4bbf1fffb64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "154c2d57-b518-4da0-8134-6edebba2e0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90bdffa-a5f6-413b-9749-63c67fec8f22",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1934db6a-b1bc-49e0-9c2e-e0a75f8d4cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5edfd387-46aa-4331-846c-d7910349d78b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287224aa-3e1e-4b3e-b913-cb1c892e50dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "012c42e9-a837-4ca5-986e-73a61d15de96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daad051b-b822-41c7-bcbf-bd34badcbb49",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc49fdf-155b-413e-9182-b9cc7a382b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c4a622-6d81-493c-91d9-ba06e5a35db6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0825540-b8dc-4ee5-b4d2-f60b73891eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd4888e6-de1c-422f-8be8-95a7d787bfbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f02d40-87d3-46a7-abbc-99db5f09a2a2",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "694d8548-a7c5-4090-85c2-b1b24c95c331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c72e08a3-7343-4ba8-971b-7e05434f71cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da23b78c-6bb4-4c09-9176-c188e857971c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1c28de5-6a91-4583-8b00-7cc1eb52feae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c89307-cca6-4e2b-ae45-8028b29e0ec0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de6fb1a-8ca7-43e2-954f-d47b53717be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b9da99-ce38-4b7f-bd48-7a316482a9ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e591582-3a64-4fd5-ad61-faeadb8775e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "59a71291-4193-4beb-824f-eeacd3d79269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885e60b7-d321-4213-81b4-c4c860aefae1",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5936d9c0-3a16-4d1a-bbc9-8be5744ca4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a96900c-e063-4e49-93c9-ef647f1963c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8486f890-b815-435a-96f2-efa2818e8f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8283c4a9-8f92-440d-999d-7b417004a6eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4997a3a-ccc0-4c3c-bec4-5e04bd86086c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1b90ac-c547-427f-bb1a-de444f101a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8382175c-b8b6-40ec-81f9-234c8461ae3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e3ced1b-2412-4da7-8ca7-bd29cb0eea4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d7da982-a222-4f7a-a50c-49dc5f7a22dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf70a22-b67a-4fa4-b3a1-56869f79f0d5",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2fa155-f190-43e2-a298-f2d89a9d35fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9382f5f2-747a-417e-831b-03b4068edc8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc84a05-bc0a-4dbd-9459-1c3acd1de612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "621795e5-7bf1-48e9-bbfb-e66f5633a996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc255ee-1a09-46b1-aacf-e956d090c045",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb3396e-3863-40e4-b8c6-434d630f93dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "70194c75-b39e-4d96-b498-3754a24962c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1237f47-e72a-4128-bb8e-2517ea5fe4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf13f89a-e0ec-4f70-b55b-63a88c02534a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6883a2de-836a-4ac3-990b-c24dbcfa7e70",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a93fe845-b4bb-4d49-b17e-461e7e6673ea",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce3d85a-298b-4935-ac32-2cbcd89acbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5eb6d6a1-e09b-472c-822a-3e17536c6f6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3dc082-a177-43ff-81bf-d1d25c094f35",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "559af6b9-c6b5-4cd9-a549-9bbc3e8f83df"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63e3136f-8ebc-4700-b09c-b12c36ca0591",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6433a8f0-9ddc-4d14-a7ff-3736745c9b4b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87415469-32ac-4daf-ab04-ada59550aa47",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c9cc698-5dae-4a2f-8ad5-85655381ad5c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f588d0d0-39ec-4467-8f8f-16c26b21de47",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c2755267-683b-48ae-b951-dbdce2720964"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "93d04a55-f211-4d7e-b5cf-ee8467100a9c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9e5e53f3-e0d0-4b21-9122-610ad77d1f5c"
                }
              }
            ]
          },
          {
            "id": "084c3768-7e77-4631-a7e0-3c4ff32277f6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "67783b8a-9d0c-4898-b937-911d99cc5e3f",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "a9de2fe2-853e-4d59-9810-a3a74a5dbd31",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "233de771-861e-43aa-a0a5-bc3e9d23663a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "db436988-bcc2-4b8f-af32-1b5c9e7147fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2bc8450-79fa-404a-925c-a3734522446e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81bb0cfe-775d-4a7b-a2f5-50c7c7f77567"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "86692fe6-1714-488d-adde-a3e0a8ebe6ce",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "26bb358a-4a60-4895-b558-d0c02a52cf5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f55ed4fa-d80c-40eb-91f3-afa75ecf9980"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1e6e582-ec48-4253-a2d6-b39689284b58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ad05bd05-e857-47e3-b473-8e060267cf85"
                    }
                  }
                ]
              },
              {
                "id": "24c43817-0955-4b30-a131-ad9e1800e9c8",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5af4f16-17a5-4023-89ae-d9c0d3348fb7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1336cb41-b7c9-4016-9351-66c2b2ec47cb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3d5f405-2f8e-47df-b880-a401b2ecd41c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dde68541-7f79-4fa5-bb6d-f66993052f31"
                    }
                  }
                ]
              },
              {
                "id": "1bd2d800-2a6d-4ed8-aa31-0f39615118c2",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "825da1c0-ee86-4c5d-8c08-0645d4873adc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a231645-13cb-4d95-bfda-2dec6909e6cc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c458f73-90cc-47b1-a31d-de954dd42c1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "03ac11b2-97ea-4ca5-b0a8-94159bdc7797"
                    }
                  }
                ]
              },
              {
                "id": "caad0c21-96d8-4d0e-aea2-b32db4b3f0e1",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bb8c1d2-6215-450a-9be2-ef23219a2750",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cdfd4249-eac2-419b-90f1-8cd6e1cdcf82"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b25ae26-1212-421b-a199-8ca7a399ed88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f6146b64-9fef-48bd-b472-7e700a5d103a"
                    }
                  }
                ]
              },
              {
                "id": "91a762b2-f633-4e6f-9e23-8e61b5f27833",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae120c7c-7bb7-403e-a1bf-e54b9e6c866d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9f282ecd-dc40-4de5-92eb-d95edd8e3b69"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f45eb77-5dc7-4628-b620-43428411b086",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c1882bb0-9853-4b76-b503-76f606d878ed"
                    }
                  }
                ]
              },
              {
                "id": "8815eb17-b15e-4169-87ff-46842e16d48f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "79236842-d8e5-4f5f-83a8-c307c627d8a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "296b528c-0c29-486c-83fd-8fc7b414cc9e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58d5e44a-4dd6-4255-a74f-dcbe6f9091fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "db007956-0e25-4e04-af49-63886a95a083"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cce776ab-8e01-4ed5-a351-c893507940fb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eb0cc214-a530-4d99-a4cf-ddf70205a14a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1c9c363b-dd59-47c5-a0f7-38fd9782b32a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a2fe50b6-4fa4-48d7-ab98-cf10a0d12092"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7408855a-0995-4b21-9afa-c7e209774823",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0dd6292e-824f-45f9-924d-6c9f303eedd7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a5662d8-bb9e-4698-aa4d-3501cb1aaf86",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9df2b2e7-c430-4816-be29-c159eb5c1221"
            }
          }
        ]
      },
      {
        "id": "a462d945-c33a-42a6-bb85-b07966abaccb",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "35789bc1-ca43-4bdd-b024-8fdfa9a8d27c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a48b2425-203c-4871-8d14-c085ddaca2f3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3a088cf6-db8f-46d4-bccb-c8f04100a060",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "586b3bd4-1bcf-4e93-9f83-936d80864479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fff47c42-c56c-47c9-ad56-e7b82f542ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b59aa2-0892-4bb1-9745-4da27c39ca5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "39d0ba9b-dc2f-4b79-94bf-76c97c43ccc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936297bc-83de-4636-b6f1-f5cffe3a98ae",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b308ae86-889c-4317-bab7-23a38b242132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f18de71-6dc1-4d5c-a5eb-3baa1487cf45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f239421-8abc-4936-9bd3-902ca9865a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "25dfdb52-035b-43a3-90d4-586d1e71ca1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b229d5f-46fe-432e-a312-1eafbe438316",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4dd6336-337d-414a-aefd-1fb1cf4de8bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13db9a67-07f8-4ba1-9b32-a7c655eaa26b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da227e0-fd4a-4414-b588-fc3a067ea34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a89c17dd-b510-4da9-8a54-d44991e666fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a448d4c6-50af-4458-abbc-792e93cc338c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41230271-5064-4ade-9edf-361dc4de2d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2de69186-03b9-444c-9df6-20a67d89199d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10deeb87-63d3-4bdf-92b9-82a1aabb334c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f720ea51-efb4-45be-b53a-0d27dd05ed74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce2f22d9-e1b0-44ce-b065-57c7120b1003",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6598e3-9031-4021-9270-442b8acaa85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f07df1da-2521-406d-914a-f658a3f6b99e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d88293-6948-4c22-aa17-2b0a26c6443e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07e23edf-4600-4bfc-abee-e768f77619ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b40fe6d-27f2-480f-bf74-d4bea8960d7d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb92e2d8-21e6-4171-91ec-96e244c4b827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fc1d22f-d08e-4c8e-b7c7-2f8105775dc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24ff7d1-6a59-45e3-b1dc-2216e3bc7638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ca97f94-8c4b-48ed-a821-bf08d7aaa7fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e617af7-a914-4f18-9694-f3391f588ce3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c7232b-cd4d-4606-adae-bb258c5b9ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b2efc6f-83f8-4cf7-8efe-d45ac42a7511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b583a0-c439-4a2c-9c64-3abd55b884d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d22ba256-d51c-48c2-aac2-b08f26246ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466630cb-1661-432b-accf-3d3b06bc8a97",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8070c8-4362-4876-b604-d5136080d813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a18641c0-0214-42db-917a-c2d91cb35aa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac995dc-2961-467d-8ce9-6414f0905ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "257e37a4-9975-470f-a81e-45f0d0dda282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fa963f-c529-44b1-94ef-1928f0c1346b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8393f1d4-213d-4b0f-a35a-e100184e2434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d9c030-2905-4334-bc1b-33d5398de93e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a626ed-0287-49d5-8722-89ebe4dbdfb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c89969d1-4f97-4bf5-8201-d54534c838d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b429ff85-9fd0-47d8-b83b-a4343d1cde0d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8cbe529-b7b5-403c-b9be-1eee1bed1a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b469bb78-3009-4d37-884f-afdc870eacee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55382576-889d-4c6d-a3b4-33bed5475a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c93007-f2ef-4205-836e-c336ecb40f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eff4a66-2bb8-4017-8d43-8d3daf379519",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64aea503-83c1-4171-871c-0f7d2a266662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "944f8caf-0bd4-41c9-b7a5-de017972b9bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52739c5-85e1-42f1-bf19-40ed36fd8427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "169854bc-7826-4085-b642-b5ba2d890e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e839dc-5d77-488d-be75-02ee4af9edad",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d01605-b41b-4d0d-89e8-62cd68dc08de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73baeace-ce9e-4c2d-8d9d-07e6b60c4772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f109bab8-b629-47ce-9299-66bbd43f4920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c4255781-509d-4cb9-8cce-4a202c1b793e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613027ef-3821-47ae-ba90-1d2e56302848",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0846c95a-3c8f-4b97-b020-52c75008a147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69e7d962-9a7e-4ff0-8b7b-adef78eb6be2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beae959f-8877-4093-9984-f028a36f75d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b72409c-2b08-4cb6-b351-45d637c427e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d581f4-8901-4796-82e3-5acc82af0ea8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42537d46-6d42-4bd5-a322-ddf22d4e2c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f8e41dd-33be-45ed-b6c2-9412c95489db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf9884d-86b1-4656-949a-3f69b2254db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7e82e83-c56b-4d2a-8394-7f5eefaf7d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c3051cf-f028-4cba-af4e-70292d7ec634",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a052f68-159a-4ad4-8978-6641c77396a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02cfbf47-50b4-4353-a28e-e1fa6408af36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee12295-2b45-4ca2-bd72-c241b095cc22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee16f69a-d94d-40aa-80ab-79427a5cd353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc1276b2-9bc9-448b-acca-bf5154983a2e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3518cf5d-e4a6-4023-a341-746554f0a908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe3539d-7a68-4a64-ae98-0785c8dc383b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4054ae0e-e3fb-4294-914e-355b11a59db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "384b7d4f-d588-489d-b440-3a96891f213c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdbdb8e-a871-44de-b007-f66476fe8837",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0dcc78-e8e2-4392-83f7-b5b4ef50fbeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55b3c376-6bdf-40c0-913b-381b7e602696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1fa8f36-bc9c-451b-b7db-38e284373f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a96d3970-6659-4108-855b-8b8caf37a74e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40471cbd-4bb5-4d6d-9e5d-1f20c3180dec",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "874efcff-64d4-471c-b8aa-e8f285788aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d9fccfe-f25e-4a1f-b1c4-81914abf6639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e51f7f94-3aa8-4923-9137-469b430fc883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9e7d4da-c886-4fc5-9ade-941f5d72556b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e09f6f-0032-47c7-b892-9b1136fdcaee",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6857df-3aa1-408f-9e52-a42871b1545a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081c26a1-f50e-49d2-b58f-8b7eed6669ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc90e1a5-80c1-4301-af0e-241a562802cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1b3091-5606-4353-9614-738317ebcbce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799626d1-90af-4dba-ac92-415d8fbbd7e1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae3c1ad-10dc-4001-b405-114437a2cd93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ca1fa9e-5097-4b6e-93d9-39ab2bc58004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b219acd8-12d2-4e9e-8a6e-6545cbee29db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ca39474-b5b4-497a-b979-5a694bcd158c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b2b33b-2341-4db2-bf35-c1f2b9c90bbc",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e3ece4-cac1-42c8-8468-6013296c4a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4a74eb-2a5a-4899-a51c-5f818203ea16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64ee795-acb7-4ff7-88be-d28564b06b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "356f0a34-2806-46c3-8188-57e56a377506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46707ea-771a-41ad-b51c-94c790c9f811",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8800ca03-482c-4d1e-ac7c-cca18dcbb0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f52e8fd0-0120-4808-99cd-fd298c7f8d2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9528fec3-3268-47b8-87a3-e89ec0670f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d409149-a2c6-4fa7-82cf-dcbe8c9c8fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd74501-ab67-43dc-b450-f99365f6233e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f197c2-1e69-44f4-85ce-336784f0a7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee20b633-311a-4bb2-a5d7-d6775e4a085a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9dec869-6d3c-44f2-8878-937f7b160f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4853e1b-cacc-4afd-8591-dd216491f067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b54c2f06-e212-4f33-908e-0da2bd90f008",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33feeb60-1a43-4a17-8a56-950fe4380619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a7e71b-9ce9-4df1-b2c8-643ac75cf6fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d30809-6b37-4ea0-8ef1-a6f586ceff70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d281aa6-5b0a-4d08-a175-2ca17603eddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5eba73c-9604-49e3-857b-9d1246263bc8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5252307-efa7-4022-987d-59baf8ddd972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8cb2044-d7b6-41f1-b406-4f0f7f55cc20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff627052-8d66-405d-971e-1b70412508ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4c6de9d-d196-46a4-bfdf-fb4252e8e527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8c20fb-5984-4535-bdd0-b47fde98af2e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44aea844-d671-4d71-9a3d-3170329cb286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc67f074-0f3c-4412-a89f-26a879407213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b46d77f0-8a17-469c-be20-db2905642b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a675163-bd48-4b6b-942f-2f327c6989a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a658cbc0-15b0-489c-8091-1df887e48b66",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "184c0221-4048-4cd4-95e1-ca5a55922eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2113f212-3761-46e5-824a-052af0d42de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71907af-ed91-47c0-bdf4-b40133712f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f95db7c2-78d0-4205-87e4-5d977bb2d61c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77566f30-8241-4a7e-92b3-fc9f1dd97e6d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6b8124-2f2c-4e8b-a53f-528fc64cd19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a2d8a48-42d0-4387-bf28-b0ef6b0ebf27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c049c3f2-efd4-4b8e-b9e8-73530adcde8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "702adb01-b8fe-4b8b-9120-bebdeaadbd54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfebe080-14eb-4b8e-afaa-5d6ba28d8a03",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef952428-8e33-41f3-8549-a878648b7c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c820d71-b266-4e2f-9e48-9e03f8036d25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce1249b-e10f-48be-a96d-c423bcbaa105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b47fa165-58f3-44be-a7a9-c9c06002f06f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e2f87e-6fd2-48e1-bc54-001edf816065",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc74bb3c-a6a6-4504-8089-db15354848e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af784f3-9279-4ebc-8e19-6b1aa6a73669"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8753f62f-06d4-4aa4-8147-c7b92901d360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd9e2e79-4766-475d-807c-f1497c8c06b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84890781-22e9-4443-915a-c71a14e56f61",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad54483-5bc3-42de-a4fc-5af8b78d4d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e97aaf0-524a-4c8e-bd4f-a85c7d7cd953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf5992e-cc67-470b-aa52-384fb0d6ce6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aca6b388-b842-4a13-8c61-21db1b28a8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a55f42-37fc-4926-bd66-6f6a84f08d73",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81216e24-d2d2-419f-b1b7-afbce99fad7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f88b9ac4-618f-45ee-bec9-22d9277e5d3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c774ae02-9e8d-463a-a09f-5cab048f4349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01b67096-33d5-4383-8fa5-04d22af644e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d18397-f6e3-4a14-96b3-f7721ba18f38",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7854e3fc-e404-4e7a-ad66-ee24b7d32122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ba638b-4eda-4bfa-a0f9-9e3bd1a0725c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b023c691-d11a-4c33-ba63-c90d5b7adb8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6027c61-6770-4baf-8613-c8b61092cefb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d29adf1-0cea-4ec1-bdec-c277c2e00faf",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c9f29e-b6dd-4102-861b-c65ee0dbcb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5771a6b2-a1fa-4319-8f6f-ec0820e36ee4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309ab56e-7487-405a-a42a-ed62d77e67da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b2a4b76-6b09-4adc-aae5-4955993c064d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06ad975-0336-4876-bc74-be8ed50c4570",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c712ecc1-8503-4e8e-8c38-27088609c973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a78885b-9006-4ebf-a047-7f41c431c633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d7d564-f365-4507-96e9-8fb1c71ae157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "598af497-55f4-42d8-8653-531e1ab90597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecad9216-adc2-494a-8482-fea5c4a714da",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f856d3-b772-4f58-adf7-97a1359f960e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a555e7cf-3c1f-488f-be22-4112c12f6ab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34c18af-4528-464d-be11-b67bf4c66a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac0ab21f-228a-4ed3-a8f0-9822a610fc24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43deb39-7d2c-4ba3-8149-c93b06a27aa0",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45984b18-ccc4-4a34-8f75-8d36424791dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "985412fe-ca6c-49ba-8377-10eb0b2a7fec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b7df6b-db85-437b-96c2-f4d6d4afd441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a392ed7-2ba3-4b63-a1e9-7ccde3fa5883"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d66102d9-ae62-4681-908a-c2bde5f5a82c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e9e4c51a-9b1a-4fe2-a3a6-88dffff8a09c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3bb1915-b4de-4e30-ad0e-1ddf1a914e1c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ffb1ebfd-09ec-4812-a16a-773ca5cc2b32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5769c252-9302-4acf-888b-add2662d6eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "deaee5c9-538e-4276-b170-8d531d617f6a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba2907e6-965a-406b-a8ac-6e5e3482d901",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73779c2d-fe5f-4599-ae45-e7ad624ddf23"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2e914ea-dd27-491b-ad2f-a2a2b90151b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c96e288-7b5b-48a7-bc58-6d89d48d2a6c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1b97d716-ea52-4587-8499-8a7592d6d3d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d724fd18-a4a2-4c39-b82d-ac1ef269f430"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e5eefeb-d3d1-47f3-9db9-f65b0bd3cda6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "14dc4973-fde6-4e5f-ae92-590a4d458c1c"
            }
          }
        ]
      },
      {
        "id": "e4a030cf-3fe8-46c8-9846-110d867991d6",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b044e3e4-17d8-4bb9-851d-a5c1374f0391",
            "name": "Negative Testing",
            "item": [
              {
                "id": "05784364-3312-432e-8cf5-200fed80c929",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c1485a29-4ab7-4e1d-8f11-98efd893da57",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6038da4b-bdc1-4e70-ba1a-8a0e2fd8f87a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88e8ffcc-29fa-41f7-aed6-bbb27a646493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9fe9629-ba13-412d-834a-ae85f59520c8",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb2e966-1367-4b5a-9881-491b75d1f3ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe0acc00-032d-4051-9623-079af1cdecbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0b5236-3add-4ec3-9bf8-2b22e5ee2d2f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f98eea-3dcd-47d6-b0db-b1d5f0233666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47dd3362-ecf9-400e-9ad2-e2a7511cf48d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b556c971-d996-4d43-b6ef-3fdc145b9256",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a938edc4-5529-4bde-affa-d1dacca752d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52636f7b-f095-4c7c-ac20-92df2d007a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba4da27-7001-497b-8038-b65d2cd31cad",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52158b47-147a-4ae2-bf21-b2e34fd8baca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0934d211-bc6b-42fc-b4e5-f8faec0d818c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0309de74-6212-414d-bcb5-379014534ad6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48064a5c-f18c-445c-83f2-945fa1ba293a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dcf1542-09e2-498a-8da7-e5379c3048de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8dd5894-221e-45bb-89d0-91066190cb71",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b511a8-4e33-4a29-9a4e-eee5bce5408b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83fea62e-b92c-4485-80c8-8be8025e4126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab51d86b-3f81-4fe2-88a0-0555432dc9f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf670cb4-433c-4c71-9688-b99d9040d958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6686680-6caf-4845-8dfc-c76974fea684",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d008bef-03b2-47e3-9c93-90c48afe242f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1f053ad-f9ee-4f59-97d2-5e4c0224c4f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfae1f0-6e77-4809-8c85-3b0ab9c08662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf95fd4f-c96e-4c17-9e99-67d78ca70096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26eeba00-eeb2-4261-8d44-7d32741542f3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1f3c16-51d0-456b-8005-c765b710c95b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "991e6f50-13bf-4b8f-ac2d-50787979deea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3601b91-d724-4794-beb7-6b2510dfb7fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b2fe742-f90e-42e4-80f9-e17d6a8380bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3552663f-6f75-4140-bf18-5a9387ed15b8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87b50d98-a4cc-4cfd-bbef-f18dd083a841",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b90d23c6-4d09-491d-a6ff-af02786eb4ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbcc57a2-7a39-4ae6-b460-72199d86f7b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "961bdeae-4bc0-43f5-a9b2-e30069333bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc6bcd3-7989-4c50-96d2-3b38bbbdb2f4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff90c31-19b3-4b06-8c10-ca687120379b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccff1c4b-239b-47c9-9ae0-79a32c33109a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6cd8dc-96ad-4b1b-b89a-62468dc52cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60c7dc98-d186-4a0f-bf0e-ded5997b27c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb966f4-dffe-4cc3-998c-dff112bde103",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be715bd8-df46-4414-85ca-fd3399215d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f722b324-c0c3-4cbe-aa94-dc59c37f1889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd2843a-3ecc-4960-96f2-5a6b490f9f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e63e418-c678-4bee-964d-7c6ede936385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0422f34d-c4dc-4104-8809-8c2a69d07276",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7332c0fb-3fd1-4b4e-9c16-922509f7719c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e7f594e-6c21-431d-b908-779920fc638a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45159ddd-ddeb-4662-b9ab-ee01b587010f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e61fb8-ab3a-4d1b-b33a-443ceca34988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f7dfae-1b91-48da-b8fd-2ef9c60ffe1d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f95e27-1dd2-48fa-81f6-5ae3b8eba74f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "552d53a2-88c8-4437-ba98-740b7396aa51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa84ef2-c737-48be-95f0-e51b26b1fd68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9933f920-4e19-4c4e-9ca8-a05caad615eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d88587-3b64-45e4-8a7a-80cd3ff092e1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf854080-d01e-4501-82c5-5b734e16b18d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c80b1e8a-aecb-4687-9900-6ce159adf0a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e30788-6edc-4c49-89d5-fb83d410177d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a49ab07f-ad2b-4917-9025-5293ee4ebd55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95da9005-542f-40fc-acd7-8021e36c227b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22dfe707-d33d-46e1-8e23-aec6e53c93eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf80d93e-de9d-4197-9e0d-618db8b2a1d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "844b8edc-39cd-4aa7-99a6-b808f6cbc73c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2bb078b-bafe-4d43-bc70-41111a3704be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b53ad48-67dd-4490-b4e3-2695e9403984",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae56ebd-9fd0-477a-8f28-dcd6ac5ed273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "795a6358-4b01-4254-9a4b-61ab38c832a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3d18fd-3ca2-4039-a89a-486f1e46809c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9feb9c52-bded-4440-9543-dc8cb382a0aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89640de0-8924-4614-a734-00dfb81c3b2a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ccdab9e-54dc-416a-87af-70695f13dcb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa4d907f-93fc-41c3-a802-61be12b4eb15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c272f53b-5b13-478d-87e0-99b790c960df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af8e2516-cf79-45db-9158-a7b3ea13084b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4417216-1a18-4596-9071-667b11bc4906",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9b3120-6f2a-4c12-8823-d67e6a219074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0423af5b-071a-4eee-892b-3488895eee55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00469699-6a44-4123-a7a5-aa21ec58af50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "039b54f4-5ec0-4727-a7b1-d25bdd6f786b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63ae7af-ffd4-4699-a467-a62620296704",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9207b831-8aec-45b0-980f-77b4e111a47c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b00cdae-77a7-4fdf-a331-8c3c3f8c59cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "093a80b6-bc6d-4f5e-8484-a85629cd4d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d77d2fbd-add6-4502-ad7f-e22bb0146446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67dbc826-83e5-4088-8692-934a999f456d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fe4925-ade8-4221-a7d6-2543acfd8df0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "415b2974-1245-468e-a1d3-6d4492fa8398"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b860a3b7-a3df-4dd0-afaf-f6fec9c3601d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd17cbae-e2e1-443a-a89f-3d6baeea0198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96b07aa-fcb2-4214-bdbd-c447658ff10e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15bdf0a2-8fc4-4302-b8b4-c90b3f77b17e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d491880c-04c8-4882-8ac8-40d117094513"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c1bc62-7860-40cb-953f-631941eedaa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe757712-5a87-4f80-a7a1-e83e18701d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aacc4974-f91f-44a8-b880-a6eee255c84c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e92fbf8-a6dd-4253-a52a-581708291f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab979684-0862-4631-981c-68fa800f569c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e37aea-2560-4a74-bd19-00a967897c04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3703811a-1cec-4924-be3c-e419d8b732f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efce366-2b52-4d12-9f52-c75b3c4a4059",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993e7d34-f017-4cda-9d3a-cf17185dda78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "653d0d58-139b-42bd-bc1d-47963268414d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b7a6b6-edd6-4ff8-aca5-ce8052415f5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60c2aa92-e259-4397-8d7d-ec3ab2dd0f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49cf9501-088b-45e6-8363-6be902dec609",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccec54e7-769f-4e60-be62-86859d3690c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf4fb131-47f4-4c89-b317-5c3b611b676a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b200caa-53fa-4d65-b4a5-190f019ec38b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e56f3f08-f88f-48f1-a6bf-af6205a0c22c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46ef056-23ba-4adf-bddf-967ccf314f64",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3805713-968c-444e-9b87-f2ae9d0467c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25213ded-a947-4322-a1e0-05aafb305f8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb456b0c-1232-4aa5-9584-56885d3eec0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ea9506-2e5b-4d49-a1e2-4e708713b85a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a453f4b-ec96-48eb-aa5f-5c52796aa13a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c0eb13-f29f-4953-8016-022f77c69ee0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7baac4b4-1de0-45eb-9501-acc17ad7cb81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f35aa8-742f-4bfc-8adb-1cf30ea39753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb7a6dc7-b982-441e-9a3f-3ee338d92df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b204166f-9a7b-4169-944f-85460975e917",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b20c3e-3be7-48be-b915-efa8a84bd5d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ea83af-b0fe-443f-8460-d781ff9ff037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96712f2-c3f5-4000-822c-4477c6485a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36b61d6c-4c62-4cb2-a648-2bb1d015b5cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "502be50b-dba3-43b2-aa8f-2b0f986218c7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7476b63a-a76e-42f6-8968-c132e5a85738",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "132ac7db-2849-4875-a24e-0ac69400d024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b32d13d-6f6a-4c8f-a5a8-03f828215b7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03144c29-c79b-4498-b3b4-f92dfecd36ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70dd141-2be6-4582-b8ae-6410bd821a4a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39cb29c4-5c2a-4c5d-a0c1-87bf8bfda463",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d43b712-8add-46b5-bdf1-70631a643535"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a464efce-cbbd-4786-b81f-0c0df9d54468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dda83034-3b7e-44a3-b132-eadd8e3c327c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85cfef2f-92ab-4cd7-9e98-e9d00536cd79",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb8b4f8-379a-4cef-b9f1-5b2848dedf8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82709e50-25ec-4596-8800-b7e477a65b1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2282d35a-51fc-4334-ab01-8ec5a3d6c3e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce755d36-91c5-4caa-851e-a64853b612d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab97d1ef-2050-45ed-bcc7-1a7a13ba3df1",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c83da78-55a2-4ff6-9803-e392d6f98fe8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cf95e27-234d-4bc7-9a92-f29cb77a2658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3dc8e20-9a84-4503-852b-990da0a31202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6391ef72-3063-4f16-a5f1-a24c334d138f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7b55a4-6ad3-4b2e-ab2d-3a856a57ab6d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aabf8878-ea0e-43d6-965a-fe1f9491255a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e0df959-ff13-440a-9276-c7db41047a66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab0315c0-fc5e-4b44-840f-c7773fecf8b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a017b15c-3514-4bcf-878a-afd0ea7fd76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a97274-4c49-423f-83e4-f9d3fe62c1b2",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc7804d-f17e-4b12-bcd7-f96e7670715e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c283d0b-50e1-4ced-b34d-37d27ea805f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8888b3e-ff01-4e18-8441-9f4702fb4866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7640fdd7-8066-4723-88d4-4af4437b03bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273a832b-7cc7-45f0-ab0a-7bd8a12be75e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75239bc6-e6b8-4071-947c-dd99f5d9ebf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae59ad65-346d-4cee-b2d4-eaf9f07e7d3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbdd572f-41b2-4bf5-91c5-cb8520d7a10f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa912c0f-23d9-473d-a12f-a40f79d52c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9c2b25-660e-47c2-9edd-c6b7f2545638",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f4b953-499e-4a65-bd41-a0befc278f85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66be2cd4-cdcc-4577-87f9-24603bf1676d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0770c09e-be53-4afe-90a3-39ababb242f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9199273c-3232-4ffd-822a-60b84d6977d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48792414-c34f-4974-87b7-e876e76caa33",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab34569-45f0-436f-863c-25633b28c441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98442a52-3037-4982-b0e6-a69c177486d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c831b259-2628-4336-9e01-9069922531f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7f809ca-01b7-4d77-95a1-be90cc8754ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0642adb2-9325-4813-9045-5280d80730f5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25fcf7e9-1cae-4420-b213-0637a9aa38fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30cad366-6efe-4742-bce2-a6d14dfe5cd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef88777-5f97-43c9-9d36-63f24e331fa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6784c18b-4fc7-44dc-81ca-265b9a7b40a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0713166d-bf9d-4439-8531-14ba7583ef4e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f56286b-8996-4fc4-bc5c-5404ede32f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43d8426a-b036-48f8-b676-29e4c3bb77a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f404b87-5c3b-495f-8a3e-477443e29949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ade533c3-dbb6-497f-8ce8-624fccf058e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d913a442-8661-4338-b52b-167804e6f10c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e141f084-8d41-4d60-ae19-78674e3559a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784d45ef-7788-4a29-b7c2-49254d15b5b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "753d14c2-2f84-40f0-b6ee-d491bb171db6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a8329e-6984-4ce7-a263-f86026997b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44fcebc3-1b56-4b56-971d-c7aa3d2e996f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df29236-ff8e-42bf-9fb2-9bd4a2890677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73049a71-58f6-46db-b41f-e31a40c75ade"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad2c6ad-1587-4e0c-a933-e799541ad546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8279ea5f-14fa-4c6c-87a3-25a34f390e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c305a874-5754-409c-9635-baed8f25e4f3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827dab97-679d-4b50-a433-d5ed2b61f90a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "587676c4-da75-4da3-ad16-1f9fd44b2e6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "751c0637-f363-4cd1-bd1d-177dc48e7adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47cc7ba2-d383-4b2c-bc0a-165153612397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ac7a8c-b9b2-4624-872e-d7a2224941e4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57534a78-dcfb-4714-a84e-e3d00474fe34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f2fadc-4f97-441b-96d7-4ee69071419c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cccb1ef-94b9-40be-ab0d-8105f6aebfe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48d32d40-ed13-42ae-953a-84f37b095fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb66adb-87fa-4eb1-92e6-5a18e72c2591",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd082c0-a461-421b-b945-33704728ca91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf2132d-0f49-4ba5-9963-b5d4b37c17c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "269df65b-c476-447a-b037-10e4dba9a080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e640dc6-3dc4-40e7-a450-2fe0b649e300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a88538-a27b-4c91-b974-c3bc9d760320",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fc54cb-63c9-4110-9000-3e6e62b172c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19a1568-106e-4e14-b676-71a4d7413821"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9197bf46-4ca2-4fa0-88d3-8bf750e8a904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af1bad0-eec8-40cb-a076-2cfde8997649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16954ce-81e6-4a64-85b7-4db08e6e62bc",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15be30e5-a325-44b4-82a0-94ee281c7bc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77645091-a1a2-43be-a9ba-03b1db94250a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42531be-4497-43a4-b490-145c21719b6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d198cedd-0e2d-4e07-ad88-f8f0a486faf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ca0cd7-66b6-4dca-9e22-5cdb5430b059",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b1e235-e50e-41ba-851c-0eb2a90a7db2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3a6b65a-a5c5-4d39-81a6-36a78a9a79ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf5fead-5ad1-4ae5-8f7d-d4b0d749c2d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8a077bf-3957-4c52-bbe5-5220ffaa935a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce98425-c178-4790-b819-85f68f83cfb1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053a1142-1a40-4c80-87af-726848c64a67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0772c78-edd0-4827-a1c3-e879f9d41134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a14af6c-19a0-42ca-ac81-7588f1aad027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ac7e083-1daf-4134-8583-0534a20dc473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d710cd-72ef-49aa-8405-755e9fedc837",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931c6167-c486-423b-9d9f-4db24fafd53c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7707d8ac-f89d-4f59-8076-e48d24a635eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d87df7-6585-40e2-9b20-74ddbf9cedae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7612be1f-eefc-4470-bc35-2be65c213bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c77e30-c489-40c6-be1c-0620d59624b1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954e5bb7-265b-4d4e-b95a-f08e09c97a9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4862820b-63c2-44f9-92b9-74157a3dc27b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15dcdaf0-db5d-4286-8661-236eed99c1db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3efeae50-b1cd-436e-810e-e406523a3a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2530c07f-37d3-4ba2-90ea-6637a809dcaa",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e7213d-080a-4f80-bb4a-4f6670c248c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49c3beb7-cd19-4b67-bd7f-9193707a7286"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87be95eb-75f5-4e33-8297-eea3ea077fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5652fac9-6c49-4ca4-b91c-624b67bb483f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0470778-4446-4503-abe6-a01ef428d4a2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d62520-ee10-4cdf-9248-f37fd2318de5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c3a6ae0-16e0-4e06-8a1d-17394b47625b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd88ea6-0d0f-4652-aba4-3170ad17fbdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eff0957e-d6e1-4250-8e6e-9c3a3847e5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6bac991-3571-4d00-a0a8-11681aa969b6",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02cada50-bca8-436e-9707-1bcd45187a8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f9afd95-611e-4f43-b60d-a838e7d8232b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6487bf2d-725d-4227-a17b-25777be560ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecfc1882-21de-4bfc-83b1-0ca9595e86f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb3bb7e-ddb8-4de8-b4c1-74d94c5614d1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3454e233-f7ce-47ae-97c7-7ccbff16f47d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d45afb-21f8-4c53-9c31-e91793171547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd6d1bae-0b44-4869-892b-1b90617b7a0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348f1395-53f8-4241-bdfd-bf673fe1d1fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebc7870-636b-47e4-bed7-447197533028",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0302a673-1bf3-4390-bd47-1ccb23ecd25b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f49098a2-ed68-4913-8a54-16c0cb341d73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a5505b-7206-43ef-9e04-98ac8b5f8fa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8584bce3-389a-4f3e-90e9-5ee4b4791fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966a049e-40c3-4bfc-a78d-d0b322e71d86",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35652870-91bd-47fa-a82a-acba850a3c45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "472c2c26-97fc-413d-a79b-d861729875c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db327c22-7069-4fdb-b9f3-502decbf132d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58efd1cf-7d7a-413f-b627-624dea06d7b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8999e15-47ae-4495-a314-a6bafff56d50",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e640e7b-70e4-4196-b77b-374c44e02b02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1dc5ab-27f6-4299-8a1d-67014badafae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5edb16-fba1-4ecb-80e9-de372bb0cd50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96974f1d-b81c-4659-b0a0-429d16a875d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e55952-8ddc-41a0-9118-8325ab2523d1",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8188c24c-eb79-4f62-aae7-30abfc9eae19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e57b90d9-db7f-4c89-b071-098e1bf5a187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0092e9-4edb-45bd-b115-0ddf4a15c087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "522238cc-80c5-4232-ad76-5c9a447e8fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5bf3569-35b6-44d5-95f9-3cdba6c8aeab",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09773fdf-3768-4b4a-a102-c840d65cbe48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1a82b5-60d2-4317-af30-1de9766d43bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5470c3-5543-445b-b5ef-b43e88fe8d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f61ecd9-0246-424d-98c5-8c2ff38754e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20182f2d-006b-4f07-abb9-dda7ab2cbfb0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa4e20a-4e6c-42b3-8e08-f8a39ac39b7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3d97ca0-0663-4160-acbd-a902311b417e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a99b61-317d-43da-931e-e73c9cd4fe73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c69a97e-53cb-48f2-9af8-195d3cc64d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5ef462-333c-4686-9598-fe506a2fdefb",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfbd4ef5-cee1-4461-affe-27c03c5a1611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "577fe15d-44ec-4d40-a379-9b150c8d95d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "690357fe-e803-4d58-bc53-f7f939522ab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4633eb7b-29e8-4922-a157-35b4d89c7f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f2b314-c19b-4d91-aa6e-b940d3393618",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b50d2a-11cb-4c17-a18d-25e4c4097d70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60a65646-9469-4a46-89e2-860cc6dd5ff0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a3b145-282d-4335-bf2b-860fa162f57d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c43e4f5f-4162-4493-b351-e1d540fad10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb07639-af07-461f-b545-0585eb8f8fe7",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa1e134-b527-45e3-a7ec-4c1596d81816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "294afef2-8c05-400e-9310-9f0176ce7026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e4f44f-9a12-4344-b7f5-5e0b30f44a99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56d85976-2f39-42fe-8b79-472b5cd826b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326100d2-146c-4fa4-b22f-8fbe5d4646bc",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96b14c8-1e48-4c3a-aa55-5ae538b3dd27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d92dce32-d438-4eec-8baa-b47657aa6d97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6887bf7b-a2c7-42f2-aca3-c3def411cce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adba7ae6-6407-40e3-a360-5a83cc313427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f46c90-fe69-4279-9c66-74512d060de8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f082943-2ea6-4cfb-9d4a-ff9345342f38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db3a2780-5393-4117-b1c6-e36ff2d93798"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a765ca1-efdc-440e-beef-6cc178bb701d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6923e410-07a0-4412-8ed4-cfbc2191d75a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b2ecc17-8f91-4bbc-adcf-c1f60c2f1091",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0d6e63-375d-46ef-a99b-84f6f481d398",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "288af405-dc93-419a-afef-907bc4b36edc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56dae172-a85c-4d41-8f83-2171220c93d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dcdc4a5-746a-4cc0-ac66-8d412106f493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4246147b-7f97-4d5d-a415-4676a41a1840",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc63e9be-8ade-42f4-b0eb-758eb7f14d98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9465874-2b00-4acf-a0be-d4c2bf09c094"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a2f1a8-1b2c-4998-aeae-a9f8e206d9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9088ce07-9f83-4b43-ba4f-3fa9b26b33a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24eae7c-77ec-4786-90d5-1a1f12c88550",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55668b9-3e11-45e7-8190-bc6a13f3ff51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98a80b5a-1c23-4aee-908e-455f302fa6bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2786243f-4fc3-4d05-810a-fab206312859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd420ed3-9949-40f2-8d6c-cac34575faad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02aa453c-bc61-4cfc-a6e2-19bb84d0367e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e00428-ce11-46d8-a856-e6264d3a40cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1117b592-4ed5-4400-a91f-42f55a50d20e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ce0d1a-ab93-472b-a0a7-4ef04b45354a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "544b4f0e-d3cf-4658-9b5b-79f44d57a754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c25fc67-6e1a-430b-ae13-b523ff42592f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601c094f-b777-47ad-a03c-913e202219b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b25546d5-2610-4876-8570-83227fd9df93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86439f63-6a87-467b-82a0-8c4f4de0b4da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a250d583-0e7c-41f0-b2aa-102de70caf09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c83bba9-9854-4a8f-8796-46b6e3f70c07",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c1d631-a46a-41ff-baed-69383efe1d9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6c39a77-857d-4068-a4ae-a2c8b848be2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f7a90f-3d52-4924-900a-26121a249434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e1f76c-6dae-461e-8ef5-ac382ba08fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b07377-2a90-45fe-84ab-d028f500bea2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1faa0cc-caa9-4b4f-ac02-e14c6ba4d5d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd692fc0-2a17-4b34-a847-ce9baa237319"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83a8bea-85bd-4700-adf1-abc20f746470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6437acf-d717-4291-b445-d1296c31a690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c361790-6a93-4665-ab6b-15b5bbb46cd9",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6f1474-75cd-4946-818a-7af2b1598465",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73395457-ce1a-49ab-ac51-578a229f2385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15f4ab3-a302-4c7b-8997-475c27e0da0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5387b59-6647-4940-abcd-1f989e0372d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "492d4d1c-4997-423a-9189-90f761d96199",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ccab7d9-8043-4d86-9a99-4a9972c0b70f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63edf53a-cce1-4fd1-9681-eb63918e38a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba82358b-4e34-46e4-be62-269c29497d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6012409e-586b-46c2-ad17-42807bf1da9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0921bef7-4c4f-4b16-8141-c1daf2d3da5c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdbfdc6d-718f-4dc0-9316-fc7079bc73b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "441010f7-2d53-46c6-8406-7697bc14b42c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aced54cf-7346-4ec3-b888-58a29c5c1474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e1820f-8122-45b3-820d-f67524e26770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7eb8f37-dd2a-423d-95fe-4ea73dde44a7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c6d0e1-56ed-450e-ae71-ea32bfc2080b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abd2d670-a2c2-41db-8a7e-ac4c5cc48f3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7691661f-a15d-41f1-8113-0305397604bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2509d963-37c4-43dc-b32f-1482c26d097d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f244256-0c0d-4037-81b8-d36d02771dfc",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e3a82a-c762-4306-b14d-ccfcf201aaf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7659341-7360-4f08-bcbc-e37acbce464b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06be7931-2e74-4ac7-9729-88bee3ec4bbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d570c78b-a9fc-4fe9-938f-aeba52167312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e42f58-0a07-4751-9fa2-2f1875154417",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea236e57-c311-406b-873a-d40e7f94b063",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fafc941-5c28-47ef-8f7e-72c754dfe09f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ad3308-c80f-4519-82ec-2d713eaa8f13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5122a453-fce6-42d8-8722-19fe318b6e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f69c67-dfdd-4234-9746-23a50efb66a6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c337320c-de8d-48fb-946c-c4f21c1eef1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "595aeab1-ee74-40fe-9de9-0eb7995e888d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62871018-011f-48b2-98e1-0864d70b46da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "649f3032-2201-4d58-9228-84bc6f5e541d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ba3c6e-dbfd-44f1-8938-f69903efdac9",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e83b8e6-8df5-46a2-b73d-c2336dc6ab48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d3f56b2-3826-4078-a1f7-1496de304f68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2fbfbe-5eba-4555-b45c-0c1619edc100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "177bdcdc-dabf-4e73-94f8-d95d2045b155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "901cc51d-8c3e-4bda-b9e2-73db9583244e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d021c60-19e1-4ada-a1fb-534b27d273f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9067449-88a4-4453-aabd-6e3dc9a9700d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "173446d5-3442-464f-bcab-796f7c64213d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d01a4a-e603-4928-8bd0-14b8155e7b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e10cad3-705e-4b64-99ac-4d5188f4e2ca",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a1432d-b95c-40ba-861a-620587a6696a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4741355f-8290-469d-9d15-1b648254c3c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9563b0a-c925-4fd2-be30-875bd9e5504a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4b8ca30-befd-42dd-969f-eb79af110f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d399be8a-0476-401e-a130-ae6d325606cb",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de826309-b9f4-4484-8438-c491cf356442",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bad9a1c-9e6e-4417-ae84-021444ac4cba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9c4c00-951c-458b-af21-b81b6c68b9c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "528544f7-0675-4fa0-a7d2-8d78f3c094fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090be278-5884-47fc-b13b-ee5d38246b41",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befd24d2-6f70-4fe1-aefc-67997cb2749a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b34baeef-3d57-456e-891d-905a9358b835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced4361d-d752-4136-ba25-e69c91eafe98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff6ecb91-e645-4dc4-875d-b511528f51e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c0f2af-373c-4a92-be35-3af0d2bc2f2b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e7e68c-bcd2-48ef-8551-13de970d17a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e706b009-c895-4404-b084-395da7122f2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "178c12ab-b5e9-4743-b6a0-249575927465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f1224b0-aa39-4507-82c9-b915a2a1cbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b99628e-f42b-43a5-a0b8-491ac73b0603",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa585440-6223-4951-a3e0-036963cec53a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ace5ac0-627d-45c2-bcf2-8d9192936ff5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a50a880-65dc-4c48-8b87-00b000f68e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b30f19f-0346-417f-9ff4-4e7b7264178f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04b2d54-519a-4a6c-9e80-a28d6aed93f9",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710e05df-8ee2-44f1-b729-31d64a6d62bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "261d953c-6f0f-4367-bd5c-5a40f50459ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "108c8424-bfc8-42d0-aef0-262ba6ebeced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5a22f03-01b0-4b91-96b3-ddbc662774d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b92ef28-0853-469c-9480-f627b5dea485",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71e3595-aa5e-437d-a240-9d1aa8bd50bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20257aa3-7a40-4608-8f2a-fe0e8c2273c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d5bde0-7145-4aba-9330-9f4703d04c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ba2c2e-00c1-44dc-981f-431e00b6e35b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0ef60c-5f18-47d5-8f77-469bb4c955ef",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b223869-9936-4f34-8298-47565e931217",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b70d7be-8e11-4f26-9998-774bd3fddee4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b320db-f7f5-4e54-9366-ae1bbdf82b22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e38ccb2-c4e9-4f87-96ca-a26c26aea77d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de5be7f-cfd2-4e53-b335-69513346c691",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889b0da7-76bd-435b-aea5-331c1b57b351",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fadbb997-815b-4472-a295-1b384d8b8503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc5e76f-ab1e-49c1-a007-1cd338a6c26a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d28ea49-6b66-4180-8d14-28f30de78db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9a7ad4-9e92-49f3-8292-ec54e1c6b10d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40266a08-8880-4538-8a25-1b7b9729ce8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f893a715-5d53-4033-8306-09cca57d1685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "151ad660-070b-4e1b-a095-b3ec329e6c1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f2be3e-8e31-41f8-b807-4688d46fb803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfcd601f-caa9-426d-8c75-7d26b46713c7",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf3ad90-f15b-4176-9829-12a1c915fef3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a722136a-9004-40e5-99d5-3db6b9663906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88195fdc-503b-4185-bf43-d5553f13dfa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bcdc6ee-0ea3-4733-b11e-cfcecb05cbf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8357acf5-cc3c-4847-9218-612f716eb6d7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b266285-608f-4f1f-b031-666c8072bb82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8ba76fc-0859-4374-85e5-e9ffdacdc0d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a15e6a-1354-467e-b57e-83c8dec2f37a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0339942-9b28-489a-95ae-21f74466d0ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a0c1ec-fd72-40b9-811b-52137c63d7df",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d3f8110-6694-42f1-8d30-00068bb35784",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faf04574-e822-47be-a89d-e998fc988d47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf3fec0-0b46-4304-90f5-532dccbf69e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f805ac3a-72fc-4a04-8b24-bf15a9b727b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daaf2996-b38f-4dd7-8054-b9646c789cf4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9125de-1aed-46f4-a651-a6fe5fecc8c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cea82159-78de-4854-ac4b-d043afca3997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5649e7-75e1-4463-9b8c-97bc058f9327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3df518e-1eca-4bd0-bb66-bc1a05e70863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1702ec20-ffb2-4f75-bac6-e1804412f62a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e912534a-247f-4b23-91a2-29e8a5862d74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "599636ae-d706-4032-b8a2-b13ba7a246a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5236bae9-83c4-438a-b2f5-8f4d715a11ef",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c92ec10b-1712-4c67-8696-570be0fba7c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc878318-f684-48ca-8bed-e254966ccd63",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8af843e-e1e3-4cdb-b2e1-9bcd262ed387",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9aa5333a-d96b-4b5d-819c-b9fa7b9d0d4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f442588c-25de-4cdb-9912-677511210f06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a829ca-14ce-4971-9d94-fa345df0d11b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06cc0078-fb6f-4027-a786-48a8c7256b27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07333fe8-863c-4181-9d08-285b739060cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41bb5ffd-3588-43af-b53e-d6b0a605fc11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6a9d56f0-bcb4-4cae-8f7b-a5c8e3f13d9c"
                    }
                  }
                ]
              },
              {
                "id": "dd39a8fa-1a35-41e4-95ed-5d9278f04fe3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3530c69e-2c03-44d4-995c-34c801a11fb7",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1106a23-8176-4c03-a0ca-7c25fa8abb24",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c211a431-196f-4f8a-bb5c-4d95e1239e18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d82ca6d-a7ed-4312-8baf-095be47f4ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3cb69de0-8320-4f33-b9b0-5a910a5c9947"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9f9b128-9d44-469d-8c90-f250830ad1ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6045640-0dfe-4016-838d-3dd6c3bd7577"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9838f569-33ed-41c1-af36-6c5ccf452b68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24676cf8-7707-4d22-a17a-12f227d03435"
                    }
                  }
                ]
              },
              {
                "id": "9b588ce7-1a56-4347-b40e-298aacd3c13b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c4ba7c4f-4cef-4c6a-bd44-61fb0274f4aa",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a70eb7-c523-4524-998c-4e858fb4ee92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "94688e27-132e-4d3c-8754-b2b39c6aa26a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552c561c-4cdd-44b3-bfeb-0355ba813bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e528fe-62a0-4f06-bbda-f134c8f606dc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "35c3f705-c4fe-4d66-91e9-da94c413f53c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "109c5146-83e6-408b-ab69-e690b65436ec",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e72e8298-88e2-436d-a74a-d2dc958c2d49",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "435051e8-d3d2-4520-a959-664e4277599e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c8787e1-d4bd-4992-8eb3-0b72155bc24f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b28dfcd-0c3b-4315-834a-bb789a296ce5"
                    }
                  }
                ]
              },
              {
                "id": "f7428f95-17b1-4c09-8ca2-7e745e4aa5ce",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "04226140-a01d-4a8c-bb35-87346070585e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2baece10-e95b-41ac-be96-0134039db898"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f9b7455-ff71-4439-90e1-6e10f82f2d84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0f3502a-d6c7-4a8d-9236-8331a96a4079"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d82bf70c-bdfb-4900-9583-9ae2b9b5465c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "58b334cb-8a69-4c30-af8d-bfc669b1e4df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9e0f0316-e2cf-420c-a0b5-653e337470d0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48f2035a-3b22-40d0-8a61-3274c49fba6a"
            }
          }
        ]
      },
      {
        "id": "5f0f6924-fcbb-458a-8882-265c77b17fc4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "92efcbb6-f629-4586-bc15-79556c926594",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c680e98-c6fc-4ee2-b97f-f1c713f73778",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a79df094-77c0-4dac-b46f-00037279f59a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a5d417-ac46-4703-aee2-6c06e1112b6b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "409add67-dac1-4000-a7ac-238af428eb89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "724ea847-e2d0-4f46-b2cf-ae77c6a4310b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3b10758-9474-4c80-99b4-230ab37ef18a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d839c410-be11-4c84-ba57-cf9c98cb450c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7a2abce-0453-44bf-99b0-c542ec4ba392"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "49686500-7947-46e5-a037-9763558764a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4056c86d-35c6-441d-bd7d-ef26454b8b41"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bed65815-7a8a-4c2a-968e-0089ba72b264",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d411631d-deb6-4c77-bd23-261240c9870a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7031016c-8f35-48a7-8372-17afd71b5caa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ac011a33-223d-4dbd-8efc-0acb232fe5b0"
            }
          }
        ]
      },
      {
        "id": "f95756e3-c510-48ef-821d-caf7a8481a07",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "92eda442-35d9-4b75-aea2-239a253cf10a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d40e6f0f-f46b-4507-b6ef-e0f91f8af001",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "304f5f1e-153c-4121-8e4b-bd175f536ce5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa8869c-9b1b-4d1a-a56c-9a3b43061335",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67a217fc-5184-4a96-9b6f-4c2b2e3b4ec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80d6257-ffa0-489d-a6ea-52ee9debf4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1da1ffba-acc9-4641-a9cf-b56aed7ad82b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8287b5c-e614-4541-a281-5bdc54a65b51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbb13f21-457b-48c0-a8ae-64434d029d71"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c26f8778-e527-4780-a65f-703696cb7a38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0a03df7-8b71-4f66-8e33-a73277c23c2b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e240f992-745d-46c5-afdb-50b6e4ddcbe6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f7d2a941-f727-4dfd-bd6e-169dd0700a48"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77418990-7488-4365-8631-8856be58797b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7f64bef2-96b6-403d-8211-ace1c9189533"
            }
          }
        ]
      },
      {
        "id": "535bf024-07f1-4272-8bbd-a6635d79580d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "752ca11c-b0db-454b-aa23-1687653a9217",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9fbf5d05-5dc9-4b1b-9c47-403aae08d240",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "78882e99-fedf-45f6-b179-e2ef0fceb62f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c6512d-4ee2-4321-bc5b-a891502dae5a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81c50985-87a8-4539-b650-45b0ded88bad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27cd619f-e65d-451b-8469-d288bf9e55fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7da593ec-83d4-4b4d-80c3-11cced3d8e2b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5814a39d-6d73-4f28-9c18-d4ae5934cc4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5024db49-88bb-4634-a1a9-75b42c7f177d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "da2cad05-aeaa-4184-bb8e-bfab1201bb0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9031d18-0a94-4b29-ba24-241c82b01e12"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c910fba6-94de-4caa-994e-d475e59db0ec",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ced55ac8-707b-43f1-bc0e-54cd0b1f0ae1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff2bb9da-3fed-4fe8-a213-1ec72af1d17d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc8fea3f-169a-400a-9b23-32f8b498298d"
            }
          }
        ]
      },
      {
        "id": "e92bf3f2-40a1-4104-8d8d-44b5b63d1a4c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8a0465c3-114f-4873-9b62-bb518a05f777",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8a59270-d944-431f-b758-4617c419971c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "284e098c-235d-46f6-9bf5-dd25d1907094",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10b082ef-c786-4676-8069-5eacbfee9302",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf027508-a120-4c73-b39c-17b99c0320c8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 78.88095238095241,
      "responseMin": 10,
      "responseMax": 836,
      "responseSd": 91.06731394377582,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1719448707618,
      "completed": 1719448735881
    },
    "executions": [
      {
        "id": "b9c67aad-da3a-4cfd-9bf5-d749bba4b3ae",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "856db7af-bc45-44b8-a868-cfd31a240de9",
          "httpRequestId": "c74d337c-c34c-4cdf-84a4-53ba10664b6b"
        },
        "item": {
          "id": "b9c67aad-da3a-4cfd-9bf5-d749bba4b3ae",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "79095a25-75d1-450d-a55a-4b86c794d5d6",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "4dfc4419-ff95-47a7-a8b8-e49b1d72dd14",
        "cursor": {
          "ref": "64295fde-3998-46c8-9501-b79c90db32d2",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3e54d844-148d-4931-9b88-d33307fd848f"
        },
        "item": {
          "id": "4dfc4419-ff95-47a7-a8b8-e49b1d72dd14",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "69490e30-4d2f-4328-91ac-c2a19240b4b1",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "8af8bf32-479a-4e23-bdeb-82ce6aa6539f",
        "cursor": {
          "ref": "74e46b02-0b6d-44b2-8d0a-594300e319fa",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ffcfb700-f5e1-4602-bea8-ad48159d946e"
        },
        "item": {
          "id": "8af8bf32-479a-4e23-bdeb-82ce6aa6539f",
          "name": "did_json"
        },
        "response": {
          "id": "2cd0706a-ba28-405d-b673-78022d68bc28",
          "status": "OK",
          "code": 200,
          "responseTime": 258,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd9cd86-7eb5-4502-a7d6-b932790b1125",
        "cursor": {
          "ref": "74b63c15-8191-405b-8803-7d5edf4b2049",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "19e7e856-18ac-432d-969e-73fa7114424c"
        },
        "item": {
          "id": "6fd9cd86-7eb5-4502-a7d6-b932790b1125",
          "name": "did:invalid"
        },
        "response": {
          "id": "8190c9de-a14a-41db-b7e5-29ea8c6df63c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 527,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd9cd86-7eb5-4502-a7d6-b932790b1125",
        "cursor": {
          "ref": "74b63c15-8191-405b-8803-7d5edf4b2049",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "19e7e856-18ac-432d-969e-73fa7114424c"
        },
        "item": {
          "id": "6fd9cd86-7eb5-4502-a7d6-b932790b1125",
          "name": "did:invalid"
        },
        "response": {
          "id": "8190c9de-a14a-41db-b7e5-29ea8c6df63c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 527,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec9a83a0-d65f-4adf-8965-8e96e15b3f9a",
        "cursor": {
          "ref": "e916f1a6-f2ea-4e11-ba79-9f54f3240605",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8fbebde5-af20-4b0b-b7a0-d2beff1db485"
        },
        "item": {
          "id": "ec9a83a0-d65f-4adf-8965-8e96e15b3f9a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e2a1ce8d-d119-419b-8eeb-5de090474e19",
          "status": "Not Found",
          "code": 404,
          "responseTime": 105,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce19599-f3bb-4246-b9b7-6140026f496e",
        "cursor": {
          "ref": "add1ab86-ee60-4acb-8d81-8aeaf9f9a53d",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1028f7e9-cc7a-4d65-9d8d-b58dc370082a"
        },
        "item": {
          "id": "fce19599-f3bb-4246-b9b7-6140026f496e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f68688cb-66dd-479c-98f0-2987875d498b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 44,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3800465-8402-4d6f-82f2-f010733200b8",
        "cursor": {
          "ref": "19591a45-0565-40fa-b4e6-616a2ce74d1f",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ee4f73c3-3204-4d87-aab9-8a480676b1ab"
        },
        "item": {
          "id": "c3800465-8402-4d6f-82f2-f010733200b8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "11756aa7-4190-4be4-a70b-296bdcc9bdfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180b950e-8abc-4da0-894e-bd32f6965472",
        "cursor": {
          "ref": "137d2278-83c0-4eb5-98e7-c24857f286c7",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8079b112-96ca-4c66-b4b6-70483b5b6ffe"
        },
        "item": {
          "id": "180b950e-8abc-4da0-894e-bd32f6965472",
          "name": "identifiers"
        },
        "response": {
          "id": "1c21f3ca-602d-4bd3-b1c2-f38c7f8dff70",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb5d5c1-b19f-4348-83c6-b35267251d27",
        "cursor": {
          "ref": "43ad1e22-badf-464c-9373-8312f22a3800",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4c0468dc-778e-4998-88bc-0d17a1b8c6aa"
        },
        "item": {
          "id": "abb5d5c1-b19f-4348-83c6-b35267251d27",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e5ffd3ae-598b-4f4e-b88b-452365ee141b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e75949-0e62-4763-87f1-994c663201c9",
        "cursor": {
          "ref": "7d12e248-8816-47dc-9b9c-a7b05dc8b154",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5361e677-ecad-4780-9f1a-a5c105351801"
        },
        "item": {
          "id": "f1e75949-0e62-4763-87f1-994c663201c9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "94830e87-7b41-4b59-8516-aaf10400cafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25580db-0d58-4828-8fd3-a0cc362b28d6",
        "cursor": {
          "ref": "10c3ed64-033c-4ddd-9897-9190db003746",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f86ac2fe-f06c-4c0b-820e-9c92c77b8acc"
        },
        "item": {
          "id": "f25580db-0d58-4828-8fd3-a0cc362b28d6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9228d35f-1a0d-40e4-832c-979a397af267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3706eba-61a8-407e-b444-3ed6b5d5ea47",
        "cursor": {
          "ref": "b7f9ea6c-3636-4ba1-9c70-ee29b9c13086",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "89d8dae7-1ca6-40d6-9fe8-6f2df5bb1246"
        },
        "item": {
          "id": "e3706eba-61a8-407e-b444-3ed6b5d5ea47",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "20b2b115-fcce-4037-b5a4-e66bcd0c62ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce5469d-da65-4976-9887-e8daab783ea0",
        "cursor": {
          "ref": "f126fc91-5d0c-4f5f-ab02-b6ebca71bbb7",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "01d3010d-d243-4b30-9dd8-b7ba1c0dfda1"
        },
        "item": {
          "id": "3ce5469d-da65-4976-9887-e8daab783ea0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "792079d9-9362-4d12-b1de-31a92907ee78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a63e8f-ac65-4c16-8712-2804df314d16",
        "cursor": {
          "ref": "80b1f35d-2947-4cc8-b1c7-16fa97af6fde",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "959202af-5954-47b9-b8d0-8faf0fd7a16c"
        },
        "item": {
          "id": "c8a63e8f-ac65-4c16-8712-2804df314d16",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "cd7b01ef-24dc-4974-9c40-30f0498b8f92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e24a975-77ed-43bf-a680-60df58beea4f",
        "cursor": {
          "ref": "073758f5-0a5f-4f6a-bdff-814ca0d20fdc",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "88b645e6-0c7f-4c59-85c0-200773a88c6e"
        },
        "item": {
          "id": "5e24a975-77ed-43bf-a680-60df58beea4f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "71ad6a5f-892c-48c8-b87f-3ede01810278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3493a06b-49eb-473e-9493-366114d174c8",
        "cursor": {
          "ref": "633ad4ba-b830-4e3a-8ed3-0bf970f3f9c1",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "70870368-bf26-43b5-b40b-ea35eeab281c"
        },
        "item": {
          "id": "3493a06b-49eb-473e-9493-366114d174c8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5b9e4a20-121a-45f4-a5ae-31b550230644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341f5524-f22c-4b55-a3ff-e83edf7f12b3",
        "cursor": {
          "ref": "cae7f657-b410-4184-8a03-fc90e07dccf4",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "767332b9-75ed-47c2-813d-2a5c7b75af6b"
        },
        "item": {
          "id": "341f5524-f22c-4b55-a3ff-e83edf7f12b3",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "72c5360a-6cec-4e2d-91be-ec5acce64f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43774dc2-8f82-459b-b129-b0a2bb0d9599",
        "cursor": {
          "ref": "77d559f5-0fbb-4708-b9c8-7b28173bdeb7",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "698bfdf6-62ba-4c6d-9ba2-56fca6e77d50"
        },
        "item": {
          "id": "43774dc2-8f82-459b-b129-b0a2bb0d9599",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "50addd59-d301-43e0-b5b0-e15726db9f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78505f5a-43f1-4db3-8db0-ef6f639f65f1",
        "cursor": {
          "ref": "ab4acfac-868e-4b22-a0a7-a9fcb166080f",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "29b9e60f-1982-483f-945b-9c4d4d1c0966"
        },
        "item": {
          "id": "78505f5a-43f1-4db3-8db0-ef6f639f65f1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b0d15aac-9a93-470a-8874-8031f594dc51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ab8d3c-df35-4bc2-a68b-c47cacb5ac5f",
        "cursor": {
          "ref": "2bd5e966-fb8c-414a-af8c-6bd519496ac2",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "137d34e9-04c0-4822-ab6b-e4c4429702d0"
        },
        "item": {
          "id": "b8ab8d3c-df35-4bc2-a68b-c47cacb5ac5f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "92c88aed-f30f-4a7d-aeeb-c0c2e96176e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "978e4339-54e0-475f-8861-4ffaa5a31508",
        "cursor": {
          "ref": "fc51687e-73e3-4338-b4df-e9e71a49a1c5",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "29088bd0-4e62-45f9-add7-98b3853af05a"
        },
        "item": {
          "id": "978e4339-54e0-475f-8861-4ffaa5a31508",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "089e7854-fd0d-4fd6-a614-43b6af5ef6c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dfeccc8-a14f-4ea5-aace-07e56351e693",
        "cursor": {
          "ref": "74375abb-0ed9-4dd5-af96-e4fb7b7d8ff9",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5859df5e-e504-43ff-b016-b3e7a56f72cf"
        },
        "item": {
          "id": "9dfeccc8-a14f-4ea5-aace-07e56351e693",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "86b21a41-007b-4f0c-a3dc-f5618efd567d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7955fad4-8e73-4920-b4fe-ec25a3350113",
        "cursor": {
          "ref": "cbe7bd25-8134-4498-862b-9633506576e1",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c9a7b27e-e2de-4bf7-a72d-056a31957f86"
        },
        "item": {
          "id": "7955fad4-8e73-4920-b4fe-ec25a3350113",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e5e1e3da-5cc9-4593-a242-f7dfa277d114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34f7b50-d0ec-4449-97b6-2e6f640a2fec",
        "cursor": {
          "ref": "bc9f2715-577c-42f5-9c20-709225832dc6",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3e20727e-0470-40d3-b112-3324c9d791ca"
        },
        "item": {
          "id": "b34f7b50-d0ec-4449-97b6-2e6f640a2fec",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c352bcd8-793c-4e9a-83fa-c730725e76f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef1f86b-79a8-4e13-8d2c-ae2c1548d001",
        "cursor": {
          "ref": "c5011876-8fec-4250-94bd-ce2e98ea3420",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4103624f-2813-45de-8f0c-2cf0e2b8b381"
        },
        "item": {
          "id": "7ef1f86b-79a8-4e13-8d2c-ae2c1548d001",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e119f61a-9239-401f-99aa-4e7551c5cc30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa79d0d7-f6d4-4654-a50f-a6cb0e2cca48",
        "cursor": {
          "ref": "a24c84cf-5596-48c7-a2c1-5b088b3e50d8",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "71b0cdf4-0a7e-4b13-9b62-755f0eb5aeea"
        },
        "item": {
          "id": "aa79d0d7-f6d4-4654-a50f-a6cb0e2cca48",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6f5c2dd1-b5dd-42f2-b2b7-e5a3ab79e7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36eaa6b-5b41-443a-a008-5bf89f8a40a4",
        "cursor": {
          "ref": "e7f2e131-676e-4be0-a966-706892eb00d4",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "fffd9c2a-04b4-4193-ab33-08cdd864d0b0"
        },
        "item": {
          "id": "d36eaa6b-5b41-443a-a008-5bf89f8a40a4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2feabeeb-33e3-418d-bc60-f57bb1acaf20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0e9070-3cfd-475a-94e0-ed1d192ba00c",
        "cursor": {
          "ref": "400adb80-be10-4c1a-920f-f9ba29a8464d",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "934e9bd8-4189-430f-8718-da037f32f519"
        },
        "item": {
          "id": "ab0e9070-3cfd-475a-94e0-ed1d192ba00c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "029eaa98-7fb7-4296-ab7a-d277bcd4dc9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4e2f9e-6030-4357-944d-878dd2ea8cc7",
        "cursor": {
          "ref": "631ceef3-7e36-421b-bfcb-451d75cca421",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "39fd9e8d-f440-4a47-ba25-0ed0c18b15f9"
        },
        "item": {
          "id": "4b4e2f9e-6030-4357-944d-878dd2ea8cc7",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "94e5cab3-ff0d-4b8d-8ed6-5b27f5c3f8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56608544-13b7-4785-b18e-d42998755a4a",
        "cursor": {
          "ref": "e5a749a5-f35d-4d6e-8c27-f1ee42ae3831",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a2b9101b-d025-4bb5-bac1-8a09efa9bb13"
        },
        "item": {
          "id": "56608544-13b7-4785-b18e-d42998755a4a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8d60a421-8d3a-402e-9520-64616356032d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822cca67-981a-4026-82b7-8ef1ebbdab0e",
        "cursor": {
          "ref": "a40632d7-840c-4622-b8ed-6593db81f82e",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ad67737e-20cd-4d8a-baa2-f35181362760"
        },
        "item": {
          "id": "822cca67-981a-4026-82b7-8ef1ebbdab0e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "052531ea-d0e8-4e37-b518-2e8a75bf370f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4953f07f-edbe-445a-afdf-dbad2e2f9b24",
        "cursor": {
          "ref": "89044c99-2d1a-4ccb-8deb-9616bf220da3",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1fa086b5-b7a2-44dd-b917-fb12a605fe3e"
        },
        "item": {
          "id": "4953f07f-edbe-445a-afdf-dbad2e2f9b24",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5d9e6cbb-52d5-403b-8526-ec37aeaaf5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dce7282b-cf89-4724-a047-bf3a08f5f74e",
        "cursor": {
          "ref": "408986e4-04a3-4e4c-9fca-5cc582815275",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "60d8aa3b-ae6b-494e-84a7-34159d2620d3"
        },
        "item": {
          "id": "dce7282b-cf89-4724-a047-bf3a08f5f74e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "386aeccc-640c-4f3f-8f15-c5b6c5d460dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4d5cb8-e039-4f82-ba2d-ebe868b82775",
        "cursor": {
          "ref": "6b135c24-fd2c-41e4-817c-6e11a80d9e26",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "88c1c108-5f38-43a2-b129-782e0ee6324b"
        },
        "item": {
          "id": "df4d5cb8-e039-4f82-ba2d-ebe868b82775",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3ad3bfe1-99e8-4a31-987f-fc29dc1d24fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dfc9b64-5f5f-4c90-94fc-e07ed85ac1f8",
        "cursor": {
          "ref": "c4b04bed-69e9-475f-ac91-857e6d12b809",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9689709f-b112-4f2c-9f70-b80ef71416b5"
        },
        "item": {
          "id": "5dfc9b64-5f5f-4c90-94fc-e07ed85ac1f8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "78f100fe-1597-4bfb-a4cd-ace8daf3c8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43255a3f-1989-4fcd-ab87-9610dba39ddb",
        "cursor": {
          "ref": "23c2eba5-732a-4aac-9ada-7a7f1b327620",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b1afa290-441a-48c6-9ebf-825cd9bd4413"
        },
        "item": {
          "id": "43255a3f-1989-4fcd-ab87-9610dba39ddb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "516bbad2-f4be-4abb-b36b-a7c97dd6dfe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6978844e-1f54-45fc-8dc4-0d9aada21602",
        "cursor": {
          "ref": "76241c7e-70b6-4280-a7a8-68dbd4ccb509",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ffefb57c-466f-4cc5-8ac3-d3ca23d29741"
        },
        "item": {
          "id": "6978844e-1f54-45fc-8dc4-0d9aada21602",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6f22b675-c0f6-46bf-bb8f-48640aa16d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7316ad9b-dcbc-408f-b6f0-6724e2041a14",
        "cursor": {
          "ref": "2b2b2a05-3c0a-4ad0-b1bc-781358e661d5",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e1cfadff-c812-44e4-b01a-41025ac80b49"
        },
        "item": {
          "id": "7316ad9b-dcbc-408f-b6f0-6724e2041a14",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "26f13c6b-fdb4-4c53-966b-2b0bf5585ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743c8a77-918d-4ef1-9bf8-c3104b24afc8",
        "cursor": {
          "ref": "1eac28c4-a9cb-494b-8b5b-16e8a8772e78",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "52116156-31ca-46b3-bd0d-ad134367bd5a"
        },
        "item": {
          "id": "743c8a77-918d-4ef1-9bf8-c3104b24afc8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "47de6680-c55f-4031-9458-5ea7a46fd486",
          "status": "Created",
          "code": 201,
          "responseTime": 836,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "62cbe836-6d4e-49ec-87f1-22d770f3b199",
        "cursor": {
          "ref": "ece9acb0-9718-4e5d-9841-4fa5f1bd7ca7",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b39cd9a7-2da5-483b-8d79-e8bd7049e92f"
        },
        "item": {
          "id": "62cbe836-6d4e-49ec-87f1-22d770f3b199",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8edc2a02-f7e7-4273-aff7-2e6981532231",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "a73e7e5d-ae56-44ea-8eea-8719c1b27445",
        "cursor": {
          "ref": "ed58d3af-0abb-496c-bbaf-2b28c0e855dd",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7d41cbbd-f4f0-49f8-a750-90fb7cb83761"
        },
        "item": {
          "id": "a73e7e5d-ae56-44ea-8eea-8719c1b27445",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d5727019-4e64-4dda-93ec-e69e8a1f7b5a",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d6e1b3ed-1a85-49d7-803b-6c29da6ce6c9",
        "cursor": {
          "ref": "d07e87de-17c9-4f7c-ba3f-0f91083b3d7a",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8cd00e11-ae33-474d-beda-0e4565751fd5"
        },
        "item": {
          "id": "d6e1b3ed-1a85-49d7-803b-6c29da6ce6c9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6f560e86-358d-4e4e-b185-5969ef5de9fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d00733-2bea-4987-ba0c-021f0a957ea6",
        "cursor": {
          "ref": "0df85375-fe75-421e-a872-8e3926a82e80",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ae541e77-2147-4ec9-8d26-9f9d414e10e7"
        },
        "item": {
          "id": "e8d00733-2bea-4987-ba0c-021f0a957ea6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a605a914-40fb-49c5-ba66-42fc6e4c5925",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c402bc49-5809-40a2-8285-ec0dba235b26",
        "cursor": {
          "ref": "21889645-f801-4849-a6f7-3dd4b202eab3",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ada97fcc-ad18-4d6a-8a95-1b94b95703eb"
        },
        "item": {
          "id": "c402bc49-5809-40a2-8285-ec0dba235b26",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f7f76910-2157-4a42-a842-f138cb1ab8ab",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "967b77b6-4b11-4bb6-9c46-7f6cabec93a3",
        "cursor": {
          "ref": "51575be2-2913-48e8-a590-ae7479ef7149",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6510b834-fbe6-498f-a344-9a72fdf93e77"
        },
        "item": {
          "id": "967b77b6-4b11-4bb6-9c46-7f6cabec93a3",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "41f81984-06ee-4c5b-913f-f1b3b172e791",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c7ac36cd-97df-4fee-9219-cd8be32d67dc",
        "cursor": {
          "ref": "e0470eb7-76fb-48f3-a74f-be12d4ee14fe",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5def983a-c29a-4472-815b-4769a320b3bc"
        },
        "item": {
          "id": "c7ac36cd-97df-4fee-9219-cd8be32d67dc",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b6293a55-1db5-4066-8fcc-f550accc3fe6",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "39c90528-aba4-40ed-899e-b2698c9c58fa",
        "cursor": {
          "ref": "aac3446f-e397-42b5-9cb9-774f0e877609",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6adb135a-5879-407f-a6ad-d9f467eb2528"
        },
        "item": {
          "id": "39c90528-aba4-40ed-899e-b2698c9c58fa",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "00156356-4204-4b50-bacf-c146512abc8a",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "4f91224c-e1dd-479d-b768-b3e0985c5c3f",
        "cursor": {
          "ref": "3275b50a-55c8-4c85-abba-d04b0a9bdddb",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1688fd4a-547a-49d6-aba1-f0e588879948"
        },
        "item": {
          "id": "4f91224c-e1dd-479d-b768-b3e0985c5c3f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e60bd4f4-c2a9-4511-a9cb-2b430bf368e1",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "2d062c8a-3b96-4079-bd14-42395211fe29",
        "cursor": {
          "ref": "147149cd-d0e9-4439-882d-6b313bd37d4d",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "70948bcc-7fcc-4f31-9267-cc85df303b94"
        },
        "item": {
          "id": "2d062c8a-3b96-4079-bd14-42395211fe29",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "26e3d414-5590-47bf-9306-a56d4ccdeeec",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a3aaede3-efdf-4529-83eb-069af5775432",
        "cursor": {
          "ref": "c194c971-5908-4698-81bb-fffbd5752a1e",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "26eaeaa9-c85c-49fc-ae05-362625750a12"
        },
        "item": {
          "id": "a3aaede3-efdf-4529-83eb-069af5775432",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a26f1c85-1a48-4899-af39-abf279e0bb3e",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9f098c42-0ff4-4d60-82ba-58d502ba37f3",
        "cursor": {
          "ref": "a22e49d4-da6d-46b0-99c1-43a513b27399",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1a3eb5d4-d969-4ee4-965c-71c3f268c5d2"
        },
        "item": {
          "id": "9f098c42-0ff4-4d60-82ba-58d502ba37f3",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c62d2065-239c-4f69-af8c-1fec0d057d41",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "aab6a914-03c8-4a55-a5b1-a618ff24a1df",
        "cursor": {
          "ref": "d0af9732-1222-4e87-a5b5-cfb29fc39ccd",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9815a1c3-9364-4f57-b0e5-be78431515e6"
        },
        "item": {
          "id": "aab6a914-03c8-4a55-a5b1-a618ff24a1df",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7a970d23-0624-4cc5-8868-10005304046b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e67bac-06d0-45dc-8977-58641385c683",
        "cursor": {
          "ref": "ee9e065b-4a6a-4e1b-ace1-92062cb14e64",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8eb0c990-610c-46d9-bb85-3c066b743fcb"
        },
        "item": {
          "id": "58e67bac-06d0-45dc-8977-58641385c683",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e5ce2c01-973b-414e-a263-b503bffae774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8909c10a-5392-4a8e-be39-005c05d4c788",
        "cursor": {
          "ref": "b9b5bf9d-6c0b-4436-a6d6-403e62e254d9",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5a9ec282-08a7-4863-ac2a-bc2fbfaa49e5"
        },
        "item": {
          "id": "8909c10a-5392-4a8e-be39-005c05d4c788",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c82be101-7334-4ff2-87ea-11ffaa908e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "631a043a-4909-4cf1-ab32-293d87147e49",
        "cursor": {
          "ref": "843a0fa9-63ea-4b69-9271-ea94b80c05be",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "aa830f3f-23a7-45c9-ab12-a5386a9c39f6"
        },
        "item": {
          "id": "631a043a-4909-4cf1-ab32-293d87147e49",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ba31ccbf-fd2d-4fea-b1a9-b5d972856b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d186b8f-2e1d-4273-8d58-cd07b930ea21",
        "cursor": {
          "ref": "bfb40258-3420-4dcd-999d-645ff9f6d7e4",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a79dad9f-0dd4-40e2-b9be-59ba66ac95cc"
        },
        "item": {
          "id": "9d186b8f-2e1d-4273-8d58-cd07b930ea21",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "eafd8709-c74b-4da8-80a4-400fedf1d74f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e82376-a60b-43e9-adc8-7e6f129e4fb0",
        "cursor": {
          "ref": "8496565a-1191-4bb1-b876-c42513bf3376",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "65b50fbf-a429-4ab9-904a-e4212b621a5b"
        },
        "item": {
          "id": "f9e82376-a60b-43e9-adc8-7e6f129e4fb0",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e9debdc4-d679-4f4b-939c-bd68ada7da38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f99ced-1ec5-4bbd-a535-051cd27ce351",
        "cursor": {
          "ref": "22f18d72-ed80-45a9-abe3-465c72a1216c",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "40a8871c-de0c-43c9-b6f5-784193028325"
        },
        "item": {
          "id": "d9f99ced-1ec5-4bbd-a535-051cd27ce351",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7d27c0de-6ab9-4f02-9e51-40e41ece4364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe62788-2444-4013-a5bc-f5a718807123",
        "cursor": {
          "ref": "2f4ab47c-980e-4510-aa1b-f85fdc4c1bde",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0de73568-e79a-4255-ab9d-5ce2eeb8eb52"
        },
        "item": {
          "id": "3fe62788-2444-4013-a5bc-f5a718807123",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fa9873b7-5ea7-40a2-b264-02e14abbc6a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a6c12b8-981d-447a-aee8-2d247acfc35f",
        "cursor": {
          "ref": "b8e63b1a-57f8-477d-8536-8f6dadc06c61",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6a7e4c6e-fca3-48b2-8187-c2fb3ae48123"
        },
        "item": {
          "id": "5a6c12b8-981d-447a-aee8-2d247acfc35f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "61bef2c9-2bdb-451c-92d2-86a087cfbf7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3373972f-0eba-421e-9b9b-0ba5cee06234",
        "cursor": {
          "ref": "b8785a11-ee97-4e30-81d1-dcfba006d9b3",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e701f673-d959-4320-bc78-fae6c515302a"
        },
        "item": {
          "id": "3373972f-0eba-421e-9b9b-0ba5cee06234",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ce0065cf-7f24-4729-a38f-86d075f05cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1df9b2c-ea02-41c2-86ac-218511fe728e",
        "cursor": {
          "ref": "4166bd22-f028-4320-b11a-3c77374d42a0",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b15e5136-7aa0-47bc-9c31-5718dda3eebb"
        },
        "item": {
          "id": "e1df9b2c-ea02-41c2-86ac-218511fe728e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "4daae1c6-69ff-4e8d-9846-9be850baca21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a70a0f-e089-4e6b-948d-1ac673997942",
        "cursor": {
          "ref": "477aaa92-d95a-48f3-ace7-8dda35ad5385",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "16beddee-96a1-4ce3-8455-84dc86b3d748"
        },
        "item": {
          "id": "23a70a0f-e089-4e6b-948d-1ac673997942",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9b7dc21a-990c-4e1b-bd1a-254ebc4833ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef5c561-61c3-4feb-adf3-3e1f48df35a6",
        "cursor": {
          "ref": "366684b8-51fd-461a-a4c6-8343a6f255b4",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "35369693-2233-4602-80eb-c99fae404cac"
        },
        "item": {
          "id": "2ef5c561-61c3-4feb-adf3-3e1f48df35a6",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d98d0118-408c-4567-aa36-d8c90a524cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f96031-6f84-4abc-b28d-ad9b373fb0df",
        "cursor": {
          "ref": "eaeb46df-d038-4738-b71c-c15eb57c84ca",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "01cede3c-0605-4d0e-9506-161688ed812a"
        },
        "item": {
          "id": "24f96031-6f84-4abc-b28d-ad9b373fb0df",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "63a90b98-f6ee-4f00-bb1a-e935a50b7117",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "29c9bc8b-5e09-4e37-8b58-59bfb5f74ff5",
        "cursor": {
          "ref": "9c9323e1-ab06-4ce2-8c74-016c880979c4",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ae08d529-bdb2-47e0-a365-b74e78443fd7"
        },
        "item": {
          "id": "29c9bc8b-5e09-4e37-8b58-59bfb5f74ff5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "97751fa2-07b9-4e69-8555-de7598e033dc",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "baf1a989-ae6c-4e38-81ea-d6c209031f00",
        "cursor": {
          "ref": "28065f38-7c18-40b7-9f8d-4c1c16ae2983",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "01c77d17-c504-443f-8875-0e5fe1b777e9"
        },
        "item": {
          "id": "baf1a989-ae6c-4e38-81ea-d6c209031f00",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e42f2b79-15b3-4a8c-8af7-9dc388d48e44",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "06f1485d-7f5f-4109-8b04-47cc4a08076a",
        "cursor": {
          "ref": "ea58ae4f-8d08-40ca-807f-a7f677c29de2",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "08dde26a-4da9-4004-aa9a-9d8c32797a3e"
        },
        "item": {
          "id": "06f1485d-7f5f-4109-8b04-47cc4a08076a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "12cc5593-d7e0-4157-9993-12dd2b8b11fa",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "635e738c-f137-4420-8905-1cb764d80108",
        "cursor": {
          "ref": "d2a875dc-053d-48c3-b2aa-10e6dbea97e5",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ed250d67-f5c6-48c1-a72f-4160efc59fd8"
        },
        "item": {
          "id": "635e738c-f137-4420-8905-1cb764d80108",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c3cccb7f-f3fe-41ad-9f3b-c3137d05d5fe",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d98c3716-e619-46a6-9531-eb8309d6cf07",
        "cursor": {
          "ref": "58e0612b-e44e-4e65-a9c0-88a11fb17ba3",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "65d0cf5c-3fb1-458d-b761-2471dd204767"
        },
        "item": {
          "id": "d98c3716-e619-46a6-9531-eb8309d6cf07",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e590f4cd-d754-4359-a1fe-4d5313c8145c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5138e16-4348-45fc-925c-2a0a45878a47",
        "cursor": {
          "ref": "b2cbe7ac-4fc3-430a-b2e1-06fa69d4c193",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3be6d0b0-2b9d-4b20-bdc1-e1ac444c768c"
        },
        "item": {
          "id": "c5138e16-4348-45fc-925c-2a0a45878a47",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e85c180d-96ca-4c26-8d47-5cb250e3ed0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff7592d-820d-46d9-8166-dde9556edbc6",
        "cursor": {
          "ref": "473410ec-1621-4a34-9a1b-db9a4fe1ecbe",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "18ce7ff6-fdbf-4d9d-8242-363c70483740"
        },
        "item": {
          "id": "3ff7592d-820d-46d9-8166-dde9556edbc6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8fcb6ca1-fb52-4ac6-83bd-ae892fda2641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b7d958-0188-448d-b486-3d5a2bff5244",
        "cursor": {
          "ref": "e4f8959b-af72-49d2-bd8a-4d66e96abd2d",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9388db6e-71b5-45f0-81a4-d61d333d432f"
        },
        "item": {
          "id": "f5b7d958-0188-448d-b486-3d5a2bff5244",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "69628af3-0d19-471c-bdc0-c309874b8596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0a7fed-0063-497d-9d03-f872d9efceab",
        "cursor": {
          "ref": "8e63d97a-c22c-4be6-bba2-e72c32b68308",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1398e999-7aa9-4105-9af6-35f8dac493f0"
        },
        "item": {
          "id": "de0a7fed-0063-497d-9d03-f872d9efceab",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6da74fca-5cc5-4a7f-aad7-e3e97801d27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7ac358-a7ac-44d2-9158-5c2fd590a8e4",
        "cursor": {
          "ref": "719849a0-b9cd-4836-bd99-27b4f4911d61",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "4f1ef090-8209-4b98-a7f9-cb911d0be20c"
        },
        "item": {
          "id": "ab7ac358-a7ac-44d2-9158-5c2fd590a8e4",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "aca00421-e3d4-4df8-b313-0908b9e500f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb3e0de7-9fef-4b1d-9fb9-8dbe5d2cbd07",
        "cursor": {
          "ref": "9b481f30-bb6d-4be2-a562-f8a70ed3ca0d",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "75e2e9f5-6c28-411f-95ce-0c938efe962a"
        },
        "item": {
          "id": "cb3e0de7-9fef-4b1d-9fb9-8dbe5d2cbd07",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "98323089-e364-4964-9872-5d76222ccd09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae4cfeef-0baa-4b64-ba91-eb4fe13573f1",
        "cursor": {
          "ref": "e2206a49-4194-4f05-8a87-246fa7045c14",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "fc51c05f-a006-4df9-9ed9-7185ef08b5ae"
        },
        "item": {
          "id": "ae4cfeef-0baa-4b64-ba91-eb4fe13573f1",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6f66348c-abc4-4bc2-9fed-91d7db1d3911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c8fa4b-a728-4192-8ab9-242735fed596",
        "cursor": {
          "ref": "1479c986-96a9-4441-9eae-ba9c856977fa",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "eecccb8a-527c-454a-8897-6df1f94d0b7e"
        },
        "item": {
          "id": "a5c8fa4b-a728-4192-8ab9-242735fed596",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "bfb22fab-d5aa-4cf1-83d9-cef0177214ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d499e7-a535-474a-bada-7d50fba060a4",
        "cursor": {
          "ref": "fc2b71de-f5e4-41fc-a304-871819e64445",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "41d014a5-850b-432a-9927-f1eed7df0c8f"
        },
        "item": {
          "id": "78d499e7-a535-474a-bada-7d50fba060a4",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f9bbd259-4aaf-43e1-b856-bd8941800924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca5d0cb-3475-4f7c-b62a-9bbd802e5b91",
        "cursor": {
          "ref": "0585238e-d7fe-4f6f-b3b4-9c6de699b68a",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "103ed520-9974-48f8-805c-5e05feeeb4aa"
        },
        "item": {
          "id": "fca5d0cb-3475-4f7c-b62a-9bbd802e5b91",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "77b33360-5719-4078-a247-8a12272983cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b9a407b-d207-4563-ad9f-e3051e2f90ba",
        "cursor": {
          "ref": "e57ef20f-8c20-46fd-95e5-e517fd613414",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ac6ff745-e183-4606-8d53-8a609e0e0f4a"
        },
        "item": {
          "id": "5b9a407b-d207-4563-ad9f-e3051e2f90ba",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f36cc704-5ca0-4ec9-bdb4-7a9eb1a5a758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebea2d22-3784-469e-abd5-27485c97b7ba",
        "cursor": {
          "ref": "0a8afa4d-84e5-4e8e-94a6-654a8d14f717",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "29fa42e6-781f-4bee-a571-02bfebaaa19e"
        },
        "item": {
          "id": "ebea2d22-3784-469e-abd5-27485c97b7ba",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "82a98aae-9773-4c12-a84d-0dd85db280f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e30d5b-17bf-4f7d-adf0-4e26b3501dca",
        "cursor": {
          "ref": "bd73292a-cba3-4c1f-90eb-330776b244c1",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "efa5cae0-8da8-43b7-926f-b293ae9504b5"
        },
        "item": {
          "id": "65e30d5b-17bf-4f7d-adf0-4e26b3501dca",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4355c844-d08d-4a0a-a754-b65d24c9564f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1463fbeb-4767-44bc-b690-6904dec26146",
        "cursor": {
          "ref": "1cda5398-947b-4b76-af09-08c586fa463a",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5023b3a6-dbd9-4cc9-94b0-bcd78f556ea7"
        },
        "item": {
          "id": "1463fbeb-4767-44bc-b690-6904dec26146",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "cb86e9d6-c9d8-4e9c-81d9-06eab678b6ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5358fb37-5708-4c5c-8f12-b0e929809067",
        "cursor": {
          "ref": "a2eb5114-4a22-4093-a226-5f65830d0f29",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c033234b-2dd3-4554-a13c-f8da044223dc"
        },
        "item": {
          "id": "5358fb37-5708-4c5c-8f12-b0e929809067",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "10aa808f-ff6b-4aec-981e-d5f9fe481eb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84ce783-1974-490c-9b7c-e9079d031f5a",
        "cursor": {
          "ref": "adfa0c8e-46b8-4bef-ac0d-839c00122100",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5443dcc3-ff82-4d49-9337-729c4a2fe914"
        },
        "item": {
          "id": "d84ce783-1974-490c-9b7c-e9079d031f5a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "790ff31f-c738-423b-95ad-1963779d9a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ce394a-98f7-4a77-bbb7-23ae626359c8",
        "cursor": {
          "ref": "b897e334-fb77-49d0-838b-bd29904f2102",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "bbd60f31-8ec4-4ec7-bd1c-f1963e9afd58"
        },
        "item": {
          "id": "77ce394a-98f7-4a77-bbb7-23ae626359c8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d1fcc56c-7fdc-42a2-9fbf-1bc013b65031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518407f3-b11f-4c59-b60e-9762f2af1883",
        "cursor": {
          "ref": "0d793676-7a9d-4cf4-ae36-c3a7866dafdf",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ffc5ed0a-7393-466c-bb80-7b4d4ba12cab"
        },
        "item": {
          "id": "518407f3-b11f-4c59-b60e-9762f2af1883",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "96e9004c-790d-415e-859c-7e898ff91ce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fd0d37b-4643-4407-a8bc-d66dfe829a6b",
        "cursor": {
          "ref": "42cc1d92-e540-48e6-9143-19dc3d3a585e",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "cdfded63-81a7-4a17-9bf7-c0235913b333"
        },
        "item": {
          "id": "0fd0d37b-4643-4407-a8bc-d66dfe829a6b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8860f971-25a4-4b4d-9b8f-ebf9b5a00ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f8b636-40e1-4162-af2e-eca7f66492a1",
        "cursor": {
          "ref": "2daab494-c01c-4b12-9227-dd204d4b4de3",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f3825435-c2a5-4742-9cd0-089c3fb2dce7"
        },
        "item": {
          "id": "d9f8b636-40e1-4162-af2e-eca7f66492a1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "939e001a-3595-4ae8-8c8d-d474e1e5aed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9343debb-3216-4c1d-8a05-48d54a37df20",
        "cursor": {
          "ref": "783b75eb-7db7-4cbb-8299-457306d67d6d",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "78a70e3c-7b0c-4829-9a2b-98b12bc65a4f"
        },
        "item": {
          "id": "9343debb-3216-4c1d-8a05-48d54a37df20",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "033c4e4c-982f-4187-9301-917c29ffa670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bbfba83-678a-4793-afa2-1d0d26b5ce7b",
        "cursor": {
          "ref": "55a8c40a-9f64-4004-acde-933fa1333949",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "09ed8a05-5f55-4550-98b1-0cc573736e26"
        },
        "item": {
          "id": "7bbfba83-678a-4793-afa2-1d0d26b5ce7b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e80664ed-571f-4f9b-bfa2-427e54c8fe73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b90bdffa-a5f6-413b-9749-63c67fec8f22",
        "cursor": {
          "ref": "ea79e499-a84c-41a0-97c6-4ab40627ddcf",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5104e887-9796-4afc-bff2-c25234ce0642"
        },
        "item": {
          "id": "b90bdffa-a5f6-413b-9749-63c67fec8f22",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "318bcaa9-bb81-42d3-b32a-d7d41090cf94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daad051b-b822-41c7-bcbf-bd34badcbb49",
        "cursor": {
          "ref": "b1e97437-75a8-4447-8019-47447609952b",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e61fed00-b7e3-4107-b59a-d840c8145168"
        },
        "item": {
          "id": "daad051b-b822-41c7-bcbf-bd34badcbb49",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "4d7584ac-3781-4c61-b696-c4812a52cc8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f02d40-87d3-46a7-abbc-99db5f09a2a2",
        "cursor": {
          "ref": "936542bd-c0f6-49d4-9a22-c7f4085e1b4f",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "063239dd-947e-40c8-85fe-2175e5383e5e"
        },
        "item": {
          "id": "00f02d40-87d3-46a7-abbc-99db5f09a2a2",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0ecc334c-0afc-4b4c-9296-c1bec76276f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c89307-cca6-4e2b-ae45-8028b29e0ec0",
        "cursor": {
          "ref": "4727d696-f559-4a02-896c-caebc43a039d",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ee78b997-5218-4c70-8f19-95cae5057bf2"
        },
        "item": {
          "id": "61c89307-cca6-4e2b-ae45-8028b29e0ec0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "43bd900c-d0f7-4704-a9b9-6dc97da69f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "885e60b7-d321-4213-81b4-c4c860aefae1",
        "cursor": {
          "ref": "df55ec2c-4656-400c-b29d-e4e23bb8eeb3",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "590dace8-3524-4b21-838c-b9c85da435ae"
        },
        "item": {
          "id": "885e60b7-d321-4213-81b4-c4c860aefae1",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "51b592b8-de65-41ed-b8cf-142927bac624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4997a3a-ccc0-4c3c-bec4-5e04bd86086c",
        "cursor": {
          "ref": "0e46eb23-2929-4ef2-a95a-e7adbed504f4",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b70973be-8d81-4263-b8b3-193c08e38c89"
        },
        "item": {
          "id": "c4997a3a-ccc0-4c3c-bec4-5e04bd86086c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "9019a3c7-04d2-4997-87e9-d21d32e33ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf70a22-b67a-4fa4-b3a1-56869f79f0d5",
        "cursor": {
          "ref": "010f0f65-e330-4041-9b77-166e500668b9",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "887bc40e-3a46-493c-82f0-de9beeabd888"
        },
        "item": {
          "id": "7cf70a22-b67a-4fa4-b3a1-56869f79f0d5",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e07636c9-3041-4dc9-9fef-907fe1749b3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc255ee-1a09-46b1-aacf-e956d090c045",
        "cursor": {
          "ref": "7b3f074f-81be-404d-9143-c18f272f250f",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f58c3996-e67a-4dac-843f-3b312a218dc3"
        },
        "item": {
          "id": "1cc255ee-1a09-46b1-aacf-e956d090c045",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "95ff676b-241a-42bd-8039-94e592b724a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93fe845-b4bb-4d49-b17e-461e7e6673ea",
        "cursor": {
          "ref": "3449545c-e28a-4444-a9d0-b2dbf753d1a6",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d658bb71-381b-4b8d-b161-06eceba82cfd"
        },
        "item": {
          "id": "a93fe845-b4bb-4d49-b17e-461e7e6673ea",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "92b2a51b-659a-4c3a-bb91-4d4039c75559",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9de2fe2-853e-4d59-9810-a3a74a5dbd31",
        "cursor": {
          "ref": "d7a41154-1f7a-4679-a272-6762661f81f8",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5b07c03f-173e-49d6-a2a3-85a76873e42d"
        },
        "item": {
          "id": "a9de2fe2-853e-4d59-9810-a3a74a5dbd31",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "f0d67c57-35c7-46c8-8ede-8f5eb870b567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "86692fe6-1714-488d-adde-a3e0a8ebe6ce",
        "cursor": {
          "ref": "960430df-d0ca-4bba-a73d-b93bd8c68e65",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c1c0be1b-3044-4494-b7ec-edbb89bc2533"
        },
        "item": {
          "id": "86692fe6-1714-488d-adde-a3e0a8ebe6ce",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3ecd103b-dc79-4d34-810a-5429afc5529d",
          "status": "Created",
          "code": 201,
          "responseTime": 377,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c43817-0955-4b30-a131-ad9e1800e9c8",
        "cursor": {
          "ref": "eeb2561d-bfe7-408d-8840-66b8507fce76",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "42772c76-6e8a-42f3-851c-bd80f12c5857"
        },
        "item": {
          "id": "24c43817-0955-4b30-a131-ad9e1800e9c8",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "2a3d0828-4cb2-4a38-8a2d-324cb013527f",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd2d800-2a6d-4ed8-aa31-0f39615118c2",
        "cursor": {
          "ref": "44b09218-ee42-427c-b730-4ce7305cf994",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "16c2c78e-de82-4e91-87fe-437366c60644"
        },
        "item": {
          "id": "1bd2d800-2a6d-4ed8-aa31-0f39615118c2",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "88c69fc3-fef2-46fc-b8d6-6cf947d0e5e9",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "caad0c21-96d8-4d0e-aea2-b32db4b3f0e1",
        "cursor": {
          "ref": "a3774391-ecab-4f4e-a0ec-9e768176d4e2",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3ea85833-ad9d-4a07-93e7-f384147c4350"
        },
        "item": {
          "id": "caad0c21-96d8-4d0e-aea2-b32db4b3f0e1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2936dab0-beda-4cbe-a20f-b08e60e2c2a7",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a762b2-f633-4e6f-9e23-8e61b5f27833",
        "cursor": {
          "ref": "af03be48-20f3-49aa-94f8-1208e8c704ad",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ce96ac30-bf69-4e53-bbb8-ca57cbea7573"
        },
        "item": {
          "id": "91a762b2-f633-4e6f-9e23-8e61b5f27833",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "45e02494-5767-43d7-a6d3-963df495eb13",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-27T00:38:43.368Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-27T00:38:43.368Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "8815eb17-b15e-4169-87ff-46842e16d48f",
        "cursor": {
          "ref": "b2c4aae6-010e-4224-8d7e-a050798a0ff4",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "20a4cc0f-77de-48df-a1f8-364dd7ded1b7"
        },
        "item": {
          "id": "8815eb17-b15e-4169-87ff-46842e16d48f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0cc2f51f-52f7-40ec-a83d-aa52eb553d6d",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a088cf6-db8f-46d4-bccb-c8f04100a060",
        "cursor": {
          "ref": "fc50788b-b30e-4fcc-b98f-0b041246454f",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "da256f33-ef15-4633-96d2-3e467cc46238"
        },
        "item": {
          "id": "3a088cf6-db8f-46d4-bccb-c8f04100a060",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "24b38d2e-4a41-4592-88df-fff7436a448a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936297bc-83de-4636-b6f1-f5cffe3a98ae",
        "cursor": {
          "ref": "804ff754-1765-429b-9d02-cf5678133e48",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ac8b4d91-2a83-4933-b387-c5cc804c9514"
        },
        "item": {
          "id": "936297bc-83de-4636-b6f1-f5cffe3a98ae",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "bc9b38cd-d8ed-49de-9432-62611ebd0329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b229d5f-46fe-432e-a312-1eafbe438316",
        "cursor": {
          "ref": "de328d37-09c0-4428-9ad2-19984cbae9f8",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cb79fa1f-0293-45a2-aaf9-0136f756956e"
        },
        "item": {
          "id": "2b229d5f-46fe-432e-a312-1eafbe438316",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2711d66a-059c-4ec7-8211-0f75d2330202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a448d4c6-50af-4458-abbc-792e93cc338c",
        "cursor": {
          "ref": "1fd7b315-60a6-4f2c-a7be-5a164fb8ac71",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "84831163-7ef8-4e74-ad3b-f21d385e575c"
        },
        "item": {
          "id": "a448d4c6-50af-4458-abbc-792e93cc338c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ed4b2e95-445a-435a-a08a-622b85ce1491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce2f22d9-e1b0-44ce-b065-57c7120b1003",
        "cursor": {
          "ref": "0a9a7720-5254-456c-ac0a-42c13aa19cfd",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4707cb36-f2ad-48c3-9b6b-89d245329075"
        },
        "item": {
          "id": "ce2f22d9-e1b0-44ce-b065-57c7120b1003",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c245f7aa-0728-4963-863a-9852fec71f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b40fe6d-27f2-480f-bf74-d4bea8960d7d",
        "cursor": {
          "ref": "1e86ad2b-3933-458f-a36b-08fdfbbcd525",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2b03bfed-55da-448d-8d0f-268e51754cdb"
        },
        "item": {
          "id": "7b40fe6d-27f2-480f-bf74-d4bea8960d7d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "74d91065-ddef-4d6d-b966-cc6fddfbee63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e617af7-a914-4f18-9694-f3391f588ce3",
        "cursor": {
          "ref": "134fbac2-189a-4eba-9f59-60929cc66be5",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "66698346-21c5-4070-a6c1-57ad211d6aec"
        },
        "item": {
          "id": "0e617af7-a914-4f18-9694-f3391f588ce3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4d8cf78c-89f0-4516-8adc-5291a5ca4fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "466630cb-1661-432b-accf-3d3b06bc8a97",
        "cursor": {
          "ref": "ee6e6416-0044-491f-a911-d7050c075587",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7d0e2235-0daf-4b65-be7f-25a7829aee37"
        },
        "item": {
          "id": "466630cb-1661-432b-accf-3d3b06bc8a97",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a132c9b1-6286-4752-81d0-1129af6328a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3fa963f-c529-44b1-94ef-1928f0c1346b",
        "cursor": {
          "ref": "55d61181-2c0a-4ad4-9856-d190ff9784d0",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6d7066f6-464a-4c13-8302-5d9fc9d3c6f1"
        },
        "item": {
          "id": "d3fa963f-c529-44b1-94ef-1928f0c1346b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "115e64b0-4166-4f3e-a739-b256a91bd9df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b429ff85-9fd0-47d8-b83b-a4343d1cde0d",
        "cursor": {
          "ref": "618169cf-b2ed-4951-96b6-8fd0e00c2df7",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "aeb8bfbb-e61e-43c6-a6d7-f057be1db01c"
        },
        "item": {
          "id": "b429ff85-9fd0-47d8-b83b-a4343d1cde0d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cdce71da-4bb8-473d-a013-056777220532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eff4a66-2bb8-4017-8d43-8d3daf379519",
        "cursor": {
          "ref": "ae9badf3-2657-4fc1-9abb-453a62326eb5",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "afe45c0d-0867-487c-8904-6a85b1ac49e5"
        },
        "item": {
          "id": "8eff4a66-2bb8-4017-8d43-8d3daf379519",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ddd45ae5-efcf-4392-acde-24188ff6608f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e839dc-5d77-488d-be75-02ee4af9edad",
        "cursor": {
          "ref": "c4f275ed-ef39-4fc4-93f2-9631634f9468",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0e014bf8-6f09-4a9d-b9b6-904f6e9c3452"
        },
        "item": {
          "id": "15e839dc-5d77-488d-be75-02ee4af9edad",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cc7e19d4-ed9c-49cd-8cc1-0a4ada89d983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613027ef-3821-47ae-ba90-1d2e56302848",
        "cursor": {
          "ref": "d330c634-ebab-416d-bdbd-f20660b824d1",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9c4385b1-d140-45d1-ab80-bbabc8a31507"
        },
        "item": {
          "id": "613027ef-3821-47ae-ba90-1d2e56302848",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8de3e6a1-1caf-4058-abc4-dc7ae9026017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d581f4-8901-4796-82e3-5acc82af0ea8",
        "cursor": {
          "ref": "18823a84-b2b7-45fe-90dc-3571e8c40147",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f4562232-4c0c-44b1-9e5a-aea3b81bd2b2"
        },
        "item": {
          "id": "59d581f4-8901-4796-82e3-5acc82af0ea8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e4c2fbf4-2826-460a-8210-841c1917c042",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "6c3051cf-f028-4cba-af4e-70292d7ec634",
        "cursor": {
          "ref": "024f3727-e4de-4412-9094-fe8a04661637",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "848939ed-40cb-475e-ac9a-aef7b956c190"
        },
        "item": {
          "id": "6c3051cf-f028-4cba-af4e-70292d7ec634",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "496c8ff2-8ae5-4986-a511-e78709d6777e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc1276b2-9bc9-448b-acca-bf5154983a2e",
        "cursor": {
          "ref": "cbb1b513-4fcc-410c-8a97-202fd47a80a2",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6d389577-9b69-4e9d-a3ff-f2cc7cdd7db5"
        },
        "item": {
          "id": "cc1276b2-9bc9-448b-acca-bf5154983a2e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5b0b6930-7a1e-4448-b120-092d8823e691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bdbdb8e-a871-44de-b007-f66476fe8837",
        "cursor": {
          "ref": "fc4a3db4-ad8b-43f9-9029-62ac19901753",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3c76094e-0a5d-4e3d-a72e-79a1382a2bad"
        },
        "item": {
          "id": "0bdbdb8e-a871-44de-b007-f66476fe8837",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0eb8daf1-4a28-467e-9693-b9017e308633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40471cbd-4bb5-4d6d-9e5d-1f20c3180dec",
        "cursor": {
          "ref": "208fa717-d07b-4ce3-bb5c-f2cf10364b2d",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "cf91e37a-764b-4500-9bd9-da1e4fb792fd"
        },
        "item": {
          "id": "40471cbd-4bb5-4d6d-9e5d-1f20c3180dec",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d5d145b1-ab4d-4063-8445-8ba9838a4924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e09f6f-0032-47c7-b892-9b1136fdcaee",
        "cursor": {
          "ref": "177aecaf-6159-4c49-b7d7-2ec4bde67944",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5414242e-7f15-43b0-b7d4-8051e610c418"
        },
        "item": {
          "id": "c6e09f6f-0032-47c7-b892-9b1136fdcaee",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "907d2e7f-5165-4fa8-8bbe-d5e5c22e598d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "799626d1-90af-4dba-ac92-415d8fbbd7e1",
        "cursor": {
          "ref": "0054cda0-4804-4ad7-903c-80414c2d9e68",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ee02f5c1-3b06-4a5b-9759-36e576c37943"
        },
        "item": {
          "id": "799626d1-90af-4dba-ac92-415d8fbbd7e1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e10ea68e-427e-4fd7-b9e0-b2391942118a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1b2b33b-2341-4db2-bf35-c1f2b9c90bbc",
        "cursor": {
          "ref": "a608162f-1feb-4dd6-81fc-1d558b78c06d",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6955e22f-b2e1-4cdf-90c3-398b0eb7afde"
        },
        "item": {
          "id": "f1b2b33b-2341-4db2-bf35-c1f2b9c90bbc",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c0625386-79b4-45a9-9d6e-f480266007e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46707ea-771a-41ad-b51c-94c790c9f811",
        "cursor": {
          "ref": "a11f247c-302c-422b-90ac-c2437fc08017",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "43231a56-6ee3-4425-8bdd-2f1e220764ca"
        },
        "item": {
          "id": "e46707ea-771a-41ad-b51c-94c790c9f811",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a2c1d2b7-e504-4225-8722-0aa0b1feb3bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd74501-ab67-43dc-b450-f99365f6233e",
        "cursor": {
          "ref": "934dc6fa-ca32-4796-a066-613dde11ce66",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "79a9ad7b-a073-4708-a6c6-82589e88d14a"
        },
        "item": {
          "id": "9dd74501-ab67-43dc-b450-f99365f6233e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c493c955-46fc-4da3-850c-956f669c8ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b54c2f06-e212-4f33-908e-0da2bd90f008",
        "cursor": {
          "ref": "8fab44e7-5dfa-4db7-884b-295cffe4e63a",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6ffd5ca0-2103-4e90-8b3c-bd24bf610fa5"
        },
        "item": {
          "id": "b54c2f06-e212-4f33-908e-0da2bd90f008",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2054c458-b0b7-4179-9065-276372dc659c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5eba73c-9604-49e3-857b-9d1246263bc8",
        "cursor": {
          "ref": "afada8a5-f3c7-42d8-a971-926a1278080f",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b285dba3-271a-4a38-8b2d-eb16288d9123"
        },
        "item": {
          "id": "e5eba73c-9604-49e3-857b-9d1246263bc8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "646c63f0-09be-479a-9c3d-d3ff45300ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8c20fb-5984-4535-bdd0-b47fde98af2e",
        "cursor": {
          "ref": "35f123e1-f433-4e70-8c7a-7b1fc570959c",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7c70b579-4e71-4969-a0c7-a7b8414e5b27"
        },
        "item": {
          "id": "6a8c20fb-5984-4535-bdd0-b47fde98af2e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8505f1dc-9997-4202-82a0-102624cbc55d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a658cbc0-15b0-489c-8091-1df887e48b66",
        "cursor": {
          "ref": "c63e10f5-ff97-4bc1-97af-539fa393643c",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1d7d6fda-0a33-4ae4-b442-0dad7e36b2f7"
        },
        "item": {
          "id": "a658cbc0-15b0-489c-8091-1df887e48b66",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "bb37b121-6c7c-42b1-b97d-c66a014dbfac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77566f30-8241-4a7e-92b3-fc9f1dd97e6d",
        "cursor": {
          "ref": "ffae10fb-4faf-4867-8d81-39d74cc52bf4",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7f7a502d-9b24-4d7c-adb3-4f6e86e5b6cd"
        },
        "item": {
          "id": "77566f30-8241-4a7e-92b3-fc9f1dd97e6d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "16770123-1e15-435e-b880-4b6aed4080b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfebe080-14eb-4b8e-afaa-5d6ba28d8a03",
        "cursor": {
          "ref": "f591193d-ccc2-4bad-ada0-5f276c2221e7",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "be46382a-c4f7-46df-8acc-490fe1a409f9"
        },
        "item": {
          "id": "bfebe080-14eb-4b8e-afaa-5d6ba28d8a03",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "81f299d5-3801-49b4-bc8c-b7b8f48c56f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e2f87e-6fd2-48e1-bc54-001edf816065",
        "cursor": {
          "ref": "6d99d099-8aa6-405d-98c0-78f17478a9e6",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c77f5870-b322-41f4-a5e3-164cc8b2bb32"
        },
        "item": {
          "id": "68e2f87e-6fd2-48e1-bc54-001edf816065",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ad349180-6283-4232-95c1-aa83b02a347e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84890781-22e9-4443-915a-c71a14e56f61",
        "cursor": {
          "ref": "93f4629d-c19d-4057-a125-fdc1a051bb12",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e15a0dcb-5baa-4d2e-89b6-8705c2321627"
        },
        "item": {
          "id": "84890781-22e9-4443-915a-c71a14e56f61",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c82f1bd1-2e42-4d61-82ee-788f2c44215d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a55f42-37fc-4926-bd66-6f6a84f08d73",
        "cursor": {
          "ref": "fafe42b6-80c0-45bc-85e8-c798c02bf8a5",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4f801e31-6100-46fa-8be4-2cc63cca8e26"
        },
        "item": {
          "id": "b9a55f42-37fc-4926-bd66-6f6a84f08d73",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "14737046-adff-40c3-a484-167626af7bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d18397-f6e3-4a14-96b3-f7721ba18f38",
        "cursor": {
          "ref": "e7dcbd2c-44eb-443d-95d2-a7787935dff5",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c126d2eb-31b9-40a3-9649-e954d67093a6"
        },
        "item": {
          "id": "91d18397-f6e3-4a14-96b3-f7721ba18f38",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "27464e53-5770-4ef2-89df-9d5227789d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d29adf1-0cea-4ec1-bdec-c277c2e00faf",
        "cursor": {
          "ref": "30c4dd86-994b-439e-a61c-d79f3f61bc47",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "401154f5-22a0-4216-b070-784b7026229c"
        },
        "item": {
          "id": "4d29adf1-0cea-4ec1-bdec-c277c2e00faf",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f0b1646f-1edd-41c4-9591-68afdd381d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06ad975-0336-4876-bc74-be8ed50c4570",
        "cursor": {
          "ref": "8c4bfd7e-955c-45e7-affd-9f0df1aefd2d",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9d96fe30-f2b7-4f2a-9297-39cc8fa0ad08"
        },
        "item": {
          "id": "c06ad975-0336-4876-bc74-be8ed50c4570",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "02f0552b-302c-413d-bb84-b921105dc714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecad9216-adc2-494a-8482-fea5c4a714da",
        "cursor": {
          "ref": "2b7eaa3f-ae39-4d2d-9e97-1a6479e9a4d1",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "02992f38-b4aa-44b1-b76a-0e2d28fc6f87"
        },
        "item": {
          "id": "ecad9216-adc2-494a-8482-fea5c4a714da",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3b373af9-60bb-4bd6-a91c-c5c7c3c3e2a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43deb39-7d2c-4ba3-8149-c93b06a27aa0",
        "cursor": {
          "ref": "3efc8dfb-8de8-40c1-b22c-6e2f270dda7d",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b7ba5e56-2fdd-4eea-af67-0c6b4a01ba3c"
        },
        "item": {
          "id": "c43deb39-7d2c-4ba3-8149-c93b06a27aa0",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "ebe12108-5e23-483e-90d7-0fa6c1e6bd61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e4c51a-9b1a-4fe2-a3a6-88dffff8a09c",
        "cursor": {
          "ref": "5343ae2a-23d3-41de-8a2f-8a0192e42cd4",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "676ad177-7422-43aa-b48a-312ec43c4e80"
        },
        "item": {
          "id": "e9e4c51a-9b1a-4fe2-a3a6-88dffff8a09c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2e0f0dd3-27b6-4ee5-bd9f-10837a77490c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1485a29-4ab7-4e1d-8f11-98efd893da57",
        "cursor": {
          "ref": "808e95f7-289e-4e1a-bb75-0ba92f3231fd",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "04d000cd-b17a-425a-a4e7-f3d0e7745c0b"
        },
        "item": {
          "id": "c1485a29-4ab7-4e1d-8f11-98efd893da57",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c0406d09-17de-49a2-8908-894f448f3edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9fe9629-ba13-412d-834a-ae85f59520c8",
        "cursor": {
          "ref": "6538fe12-6d4a-4af6-be49-bcf3d2f162a5",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "385ba065-ae99-43a0-9dc1-55f7b3dd1854"
        },
        "item": {
          "id": "c9fe9629-ba13-412d-834a-ae85f59520c8",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6cf2aa17-ac3a-4aad-8864-e649f96e4a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0b5236-3add-4ec3-9bf8-2b22e5ee2d2f",
        "cursor": {
          "ref": "dbe356fb-76cc-4ff5-8f7a-94e1dfe836fe",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "416c3c2d-fa17-4ce5-b860-7906d57e4335"
        },
        "item": {
          "id": "fe0b5236-3add-4ec3-9bf8-2b22e5ee2d2f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "820eb58d-76a1-449e-8620-ee0507a98e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b556c971-d996-4d43-b6ef-3fdc145b9256",
        "cursor": {
          "ref": "e6f85091-8bc0-48ec-a616-207abf9d3ef0",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f4bacb79-8c47-42d7-81b6-472d697f2bef"
        },
        "item": {
          "id": "b556c971-d996-4d43-b6ef-3fdc145b9256",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e8fc9857-f67a-4b1f-bf39-1c016e8c2561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba4da27-7001-497b-8038-b65d2cd31cad",
        "cursor": {
          "ref": "80aab688-24cb-454a-8b90-68bb5fbf28c1",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "821bdf03-efe6-4fa4-b275-5b71d2ac3651"
        },
        "item": {
          "id": "5ba4da27-7001-497b-8038-b65d2cd31cad",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "58f714c6-1bfb-4216-86b7-518e56a4f254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0309de74-6212-414d-bcb5-379014534ad6",
        "cursor": {
          "ref": "272e95b7-597f-44a2-985a-43444a656b4f",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7b4932f6-b577-4aa0-b509-e6994abd27c2"
        },
        "item": {
          "id": "0309de74-6212-414d-bcb5-379014534ad6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cd9c83d9-5447-4aa5-b664-e72c86087d7f",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "e8dd5894-221e-45bb-89d0-91066190cb71",
        "cursor": {
          "ref": "de97b293-c6dc-4d76-ba11-9a424e98c151",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "15a5e3ac-da0e-4549-8b5e-295013da9994"
        },
        "item": {
          "id": "e8dd5894-221e-45bb-89d0-91066190cb71",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5e42c538-7032-4974-910d-22244cca1b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6686680-6caf-4845-8dfc-c76974fea684",
        "cursor": {
          "ref": "d6af7dc0-b67d-452e-93e2-c617e058e397",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e0343111-d733-4a1f-81ae-0682e9812df6"
        },
        "item": {
          "id": "b6686680-6caf-4845-8dfc-c76974fea684",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2411d75a-389f-4107-93b5-5cbd27e719dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26eeba00-eeb2-4261-8d44-7d32741542f3",
        "cursor": {
          "ref": "b3a2a81d-d4e3-404c-9caf-1dd247394783",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "63b34f94-6005-4725-844f-e8401ba41957"
        },
        "item": {
          "id": "26eeba00-eeb2-4261-8d44-7d32741542f3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6a15bd3a-a5a6-413e-b000-8602605b6777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3552663f-6f75-4140-bf18-5a9387ed15b8",
        "cursor": {
          "ref": "e62a5a80-b8f8-45e0-b808-b35f97069e4d",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c0c6d9c7-49ba-4c2a-816b-81e4da50a16a"
        },
        "item": {
          "id": "3552663f-6f75-4140-bf18-5a9387ed15b8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3b46a355-7311-46c5-9afb-59c169eb07c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc6bcd3-7989-4c50-96d2-3b38bbbdb2f4",
        "cursor": {
          "ref": "224c4090-f7c9-46ab-9b7c-f9ba25bb884c",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1f0542f9-0888-4131-8297-bed57d7da752"
        },
        "item": {
          "id": "bbc6bcd3-7989-4c50-96d2-3b38bbbdb2f4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b6816c45-9a8a-4829-a1dd-3e498c152aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb966f4-dffe-4cc3-998c-dff112bde103",
        "cursor": {
          "ref": "2fa461ea-4efe-4b8d-acd9-3a440b7f74b4",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e1ae8e80-c60e-4973-82d5-e768a8ee2d87"
        },
        "item": {
          "id": "dbb966f4-dffe-4cc3-998c-dff112bde103",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6149726e-9a54-4bc4-becc-f241ea4c7ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0422f34d-c4dc-4104-8809-8c2a69d07276",
        "cursor": {
          "ref": "fcf7cf8e-77cc-42cf-8aa9-9d9b5c427a74",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "cfb5167c-21ec-439a-a0ae-b74ed466ca55"
        },
        "item": {
          "id": "0422f34d-c4dc-4104-8809-8c2a69d07276",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "329b904a-09da-4f45-a732-24aaa8b9fa94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f7dfae-1b91-48da-b8fd-2ef9c60ffe1d",
        "cursor": {
          "ref": "8b2aa56a-5f77-436a-83a9-0d137c898b9d",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5e880d78-3249-45a0-9bdc-a5484538f734"
        },
        "item": {
          "id": "91f7dfae-1b91-48da-b8fd-2ef9c60ffe1d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b247a9b1-fc5a-40ca-bffe-50ba93e21c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d88587-3b64-45e4-8a7a-80cd3ff092e1",
        "cursor": {
          "ref": "8d7328c8-3fe4-4694-aa52-26a64fe17092",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7d2d6e9a-30a9-4a95-8b83-6eb1d852972c"
        },
        "item": {
          "id": "33d88587-3b64-45e4-8a7a-80cd3ff092e1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "dbd8b67e-a003-46c8-b160-d094a9d8663d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95da9005-542f-40fc-acd7-8021e36c227b",
        "cursor": {
          "ref": "d7967bed-ee93-47c6-a5ac-bb89b0381c40",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d1c44977-79e0-40e3-b698-0ea2ad2e991d"
        },
        "item": {
          "id": "95da9005-542f-40fc-acd7-8021e36c227b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9e7b1688-9c76-4879-a53c-4c9e134198ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b53ad48-67dd-4490-b4e3-2695e9403984",
        "cursor": {
          "ref": "8f4f44d2-313f-496b-9732-cd5c1b1890a9",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "446608da-f698-4f04-98e8-17f6414c5681"
        },
        "item": {
          "id": "4b53ad48-67dd-4490-b4e3-2695e9403984",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d753998f-977f-4ff5-8f85-539f93f0a6e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89640de0-8924-4614-a734-00dfb81c3b2a",
        "cursor": {
          "ref": "4b3d681f-dd09-4444-9813-641c5f5f53be",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d7e12c5b-aea2-492b-8a7a-fd3e297b20ff"
        },
        "item": {
          "id": "89640de0-8924-4614-a734-00dfb81c3b2a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0fd3fdf5-9a72-486a-8424-49fa6f3f60db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4417216-1a18-4596-9071-667b11bc4906",
        "cursor": {
          "ref": "aa02354f-2ec0-4d67-9a03-8c4337755f72",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0f2da294-3ccc-454f-adc6-693a85cc0b54"
        },
        "item": {
          "id": "d4417216-1a18-4596-9071-667b11bc4906",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0089b99e-b345-40dd-9404-421c32b1fb25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63ae7af-ffd4-4699-a467-a62620296704",
        "cursor": {
          "ref": "3f51361f-66a0-4d71-9e27-ae4093869386",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "173442bc-177d-4c82-bb78-9eaff4b2ae43"
        },
        "item": {
          "id": "f63ae7af-ffd4-4699-a467-a62620296704",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "cd15307b-a945-4295-a54c-df1c9c2f2ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67dbc826-83e5-4088-8692-934a999f456d",
        "cursor": {
          "ref": "7db5cc83-ff13-42b0-946c-81dbe466cd07",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "df737e4a-f447-4d3b-9716-0be55cbde96b"
        },
        "item": {
          "id": "67dbc826-83e5-4088-8692-934a999f456d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e03953a4-baca-4135-98b3-f491e0b1388d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96b07aa-fcb2-4214-bdbd-c447658ff10e",
        "cursor": {
          "ref": "cd00d9ed-b74e-46f5-a345-aa9cc4c2c2ea",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "358c4621-25d0-4e6d-8bda-88b9a2f47c69"
        },
        "item": {
          "id": "c96b07aa-fcb2-4214-bdbd-c447658ff10e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "fa9af8c2-3e1e-429d-a820-4b1adfa365dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aacc4974-f91f-44a8-b880-a6eee255c84c",
        "cursor": {
          "ref": "ed305ea5-51e8-4e50-a883-d90a5a3a1d8d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "44844c44-747f-4b12-bf1b-25ef721ca606"
        },
        "item": {
          "id": "aacc4974-f91f-44a8-b880-a6eee255c84c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "145a2cba-5886-4c97-8e4b-f31532205961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6efce366-2b52-4d12-9f52-c75b3c4a4059",
        "cursor": {
          "ref": "a817ba16-b148-48d5-bd0b-c48582d08c1a",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "da3af943-7077-4941-8376-0c2e9f663f1a"
        },
        "item": {
          "id": "6efce366-2b52-4d12-9f52-c75b3c4a4059",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "307d16bb-10bf-4884-a9ac-ce455f994f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49cf9501-088b-45e6-8363-6be902dec609",
        "cursor": {
          "ref": "22bf480c-db78-47f1-a486-7cfd1fd47ea1",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5037ed49-7390-4ee5-995e-9b9dc88331ff"
        },
        "item": {
          "id": "49cf9501-088b-45e6-8363-6be902dec609",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b1170761-5493-4f1b-a3c5-c0a3b949e27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46ef056-23ba-4adf-bddf-967ccf314f64",
        "cursor": {
          "ref": "69d2ed39-d439-401b-a5f6-33bce3bb7dc3",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "bdb4af23-9d41-4716-aa18-c6d691458cb9"
        },
        "item": {
          "id": "b46ef056-23ba-4adf-bddf-967ccf314f64",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "090731d4-e603-4f29-b512-46706cf5bd9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a453f4b-ec96-48eb-aa5f-5c52796aa13a",
        "cursor": {
          "ref": "f2fc0ac4-9b8e-446a-8619-d39d2793cfab",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "73107056-f32c-49dc-8be7-c9e35e040746"
        },
        "item": {
          "id": "0a453f4b-ec96-48eb-aa5f-5c52796aa13a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "aeb83072-6a5d-4998-a19a-8c2ab91cd73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b204166f-9a7b-4169-944f-85460975e917",
        "cursor": {
          "ref": "92139d14-10e9-477c-afc4-6dcc09ad1e1f",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "76a5e267-0229-4d80-a0e9-5d42d635bc1f"
        },
        "item": {
          "id": "b204166f-9a7b-4169-944f-85460975e917",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8dcdf7cc-aecc-42a5-bba8-52964c5c1eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "502be50b-dba3-43b2-aa8f-2b0f986218c7",
        "cursor": {
          "ref": "05548a59-8357-44ff-acd8-b0da7e0b072c",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6ca55e6c-c954-4fac-a6e2-eb9267ffd1b5"
        },
        "item": {
          "id": "502be50b-dba3-43b2-aa8f-2b0f986218c7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "fd188372-7a04-429b-bd7c-a8dd2ad8a3f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70dd141-2be6-4582-b8ae-6410bd821a4a",
        "cursor": {
          "ref": "41d80989-4111-4f74-965b-72de53545d46",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "77c8b50d-a4fa-4e8e-9b4c-e263469ba81a"
        },
        "item": {
          "id": "e70dd141-2be6-4582-b8ae-6410bd821a4a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "25a5eb21-f1cf-42b8-b06c-f140308a9a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85cfef2f-92ab-4cd7-9e98-e9d00536cd79",
        "cursor": {
          "ref": "26c05832-6608-455f-a5a1-991d5539fa7b",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "fdb6f621-7dd1-4b45-a41f-f7708979cd47"
        },
        "item": {
          "id": "85cfef2f-92ab-4cd7-9e98-e9d00536cd79",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e6a47f06-bf9f-458a-8c7a-390bd0447f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab97d1ef-2050-45ed-bcc7-1a7a13ba3df1",
        "cursor": {
          "ref": "1aef69d6-7f3e-4aa9-ac9c-cb5cfa00f533",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "cb45b538-2cf0-42c9-ad2a-c6595da7c587"
        },
        "item": {
          "id": "ab97d1ef-2050-45ed-bcc7-1a7a13ba3df1",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6e8d20dc-d2b2-43c2-97c1-4d5b3921f977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7b55a4-6ad3-4b2e-ab2d-3a856a57ab6d",
        "cursor": {
          "ref": "acc9d01e-2bf4-4436-a7c7-05529c51265d",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3c4a4567-b291-4e24-9be5-67248397079f"
        },
        "item": {
          "id": "ef7b55a4-6ad3-4b2e-ab2d-3a856a57ab6d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "42267c2e-6310-432a-adc3-3c202b22543b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a97274-4c49-423f-83e4-f9d3fe62c1b2",
        "cursor": {
          "ref": "b021ee94-ad0d-4335-9c08-cc3be9fb9981",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e4eedb27-2f82-4756-9a51-d030114d0c20"
        },
        "item": {
          "id": "c8a97274-4c49-423f-83e4-f9d3fe62c1b2",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d68e07db-a6e0-4258-89b9-86238c0363e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273a832b-7cc7-45f0-ab0a-7bd8a12be75e",
        "cursor": {
          "ref": "19c72ebe-a028-453a-97c8-f531d4dc2172",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "da890793-61b7-4fcc-a8de-b88d1a66ae2a"
        },
        "item": {
          "id": "273a832b-7cc7-45f0-ab0a-7bd8a12be75e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b9efb428-fc9b-4199-842b-6bb82f6e90c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9c2b25-660e-47c2-9edd-c6b7f2545638",
        "cursor": {
          "ref": "0f84b036-80de-4e64-9983-ba2a94bdf14e",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "491f35ec-7d42-4623-932c-ba613cf70372"
        },
        "item": {
          "id": "4f9c2b25-660e-47c2-9edd-c6b7f2545638",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "36812b51-55dd-44e8-97ec-6e638bf139ba",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "48792414-c34f-4974-87b7-e876e76caa33",
        "cursor": {
          "ref": "7117410f-0581-4deb-9adf-08206736625f",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e5378d8f-50e5-4bb9-a32a-de8636401007"
        },
        "item": {
          "id": "48792414-c34f-4974-87b7-e876e76caa33",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cc6040e4-dd83-44b1-82ec-2b8a22b7bac9",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "0642adb2-9325-4813-9045-5280d80730f5",
        "cursor": {
          "ref": "abb87ecf-81d8-4882-aeda-c15b25fdbcd0",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ff205fe8-1500-472b-9cf3-c3961072f2c9"
        },
        "item": {
          "id": "0642adb2-9325-4813-9045-5280d80730f5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5cc26eab-3652-45dd-b0eb-98d6e1e88dc8",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "0713166d-bf9d-4439-8531-14ba7583ef4e",
        "cursor": {
          "ref": "4ab50f9c-a25f-47c4-b254-8d0842826674",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "fabc4063-e8a4-4494-9f2f-4083c919da50"
        },
        "item": {
          "id": "0713166d-bf9d-4439-8531-14ba7583ef4e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "62c2cee5-f0e1-47a3-b082-b0e6826bde91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d913a442-8661-4338-b52b-167804e6f10c",
        "cursor": {
          "ref": "1d4ff1c4-b238-444b-ba1c-de23d134d5e4",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "de2970cc-835f-4900-912c-4c33e9235bd1"
        },
        "item": {
          "id": "d913a442-8661-4338-b52b-167804e6f10c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3bff3663-6a64-4538-9810-492f81f9d58d",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "44fcebc3-1b56-4b56-971d-c7aa3d2e996f",
        "cursor": {
          "ref": "24371ef5-fd47-48a6-9b03-e8f2395511c8",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c3dbe4b3-409d-43d0-9abf-0673f935dd78"
        },
        "item": {
          "id": "44fcebc3-1b56-4b56-971d-c7aa3d2e996f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "70c7e161-9b43-4231-8d16-cddbd1c926d7",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "c305a874-5754-409c-9635-baed8f25e4f3",
        "cursor": {
          "ref": "3b6dd728-bdf6-4aa7-914b-d3cf7113bc42",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "fa6caf0d-f9e4-4d5c-b5be-3d751df0fc6c"
        },
        "item": {
          "id": "c305a874-5754-409c-9635-baed8f25e4f3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "cde24a65-efeb-45fe-a849-f6793ff16a33",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "37ac7a8c-b9b2-4624-872e-d7a2224941e4",
        "cursor": {
          "ref": "9c21b241-bf63-4f9d-9e02-c8cd832bd8d6",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1c7cd1e7-5e06-4b12-8a42-ae266208349b"
        },
        "item": {
          "id": "37ac7a8c-b9b2-4624-872e-d7a2224941e4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9f562143-4844-4eef-b59f-af626a5c5155",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "9fb66adb-87fa-4eb1-92e6-5a18e72c2591",
        "cursor": {
          "ref": "7448852c-5566-4dd9-8e6a-60370a15cde4",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "43758ed4-8203-4da6-940f-e7ca942484f1"
        },
        "item": {
          "id": "9fb66adb-87fa-4eb1-92e6-5a18e72c2591",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5ab8e003-dbac-481e-ae91-a9d5a4e3fb17",
          "status": "OK",
          "code": 200,
          "responseTime": 190,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "96a88538-a27b-4c91-b974-c3bc9d760320",
        "cursor": {
          "ref": "fdbb1412-3f87-4138-a44d-76b8350a5a60",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "20979060-984c-40c1-9085-c204c9f376f4"
        },
        "item": {
          "id": "96a88538-a27b-4c91-b974-c3bc9d760320",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d59bda60-0132-4a88-8d2c-42bd9c969c5e",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "d16954ce-81e6-4a64-85b7-4db08e6e62bc",
        "cursor": {
          "ref": "a498fc95-2e32-4ddc-b727-657a9284a4e9",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "18269663-6e52-493a-bd38-8957fa6f4cfb"
        },
        "item": {
          "id": "d16954ce-81e6-4a64-85b7-4db08e6e62bc",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6e9a163b-30cc-43b5-a832-41bf7f240801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ca0cd7-66b6-4dca-9e22-5cdb5430b059",
        "cursor": {
          "ref": "cdb03706-ceb6-425e-aec7-b9793ec081fd",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "3dcc7d89-7e0f-4224-8918-b65966ca2e5a"
        },
        "item": {
          "id": "31ca0cd7-66b6-4dca-9e22-5cdb5430b059",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e6dc7567-842f-4f05-9560-8c8fe4abcb3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce98425-c178-4790-b819-85f68f83cfb1",
        "cursor": {
          "ref": "9d9ced12-69e2-4da2-9d22-a7cf13bf18d3",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "118f4d48-da55-4fe1-8cbf-7b80153cb8d0"
        },
        "item": {
          "id": "fce98425-c178-4790-b819-85f68f83cfb1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ddb263f9-b5f6-4835-9c7f-a3792d64ad80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d710cd-72ef-49aa-8405-755e9fedc837",
        "cursor": {
          "ref": "0a911845-4fec-4559-a46f-0ce58027b324",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4625c12b-0f79-4266-a859-36f69d7bce22"
        },
        "item": {
          "id": "27d710cd-72ef-49aa-8405-755e9fedc837",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3c516d81-8b7c-461a-8aac-88ac9b98fbf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c77e30-c489-40c6-be1c-0620d59624b1",
        "cursor": {
          "ref": "d109f21e-4716-46a2-944e-d820f42f3733",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2f1a877d-f504-4179-a1c5-ade27908fe6a"
        },
        "item": {
          "id": "20c77e30-c489-40c6-be1c-0620d59624b1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3b71e99c-cf56-4ba6-be00-6543d31f9a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2530c07f-37d3-4ba2-90ea-6637a809dcaa",
        "cursor": {
          "ref": "44803588-e477-4c32-8619-d11114ef56fe",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "674d383c-cffb-4b4c-a8ac-239ccb30a762"
        },
        "item": {
          "id": "2530c07f-37d3-4ba2-90ea-6637a809dcaa",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1caa1169-cfb7-40fd-94a3-14d50b13e8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0470778-4446-4503-abe6-a01ef428d4a2",
        "cursor": {
          "ref": "54758334-47be-4644-b05b-2370ad0afa7a",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "03df8b9c-7099-474a-83d0-c4b4a203df25"
        },
        "item": {
          "id": "a0470778-4446-4503-abe6-a01ef428d4a2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "bb1aff70-05ec-4ca9-b4c3-1d16fa2cc7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6bac991-3571-4d00-a0a8-11681aa969b6",
        "cursor": {
          "ref": "bab4a389-fbd1-427b-9003-356f0fa17be6",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c290da6a-71e3-4a3c-9cfd-650d632c15ff"
        },
        "item": {
          "id": "d6bac991-3571-4d00-a0a8-11681aa969b6",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "526d9da0-16ed-4162-a1f7-86545b41332a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb3bb7e-ddb8-4de8-b4c1-74d94c5614d1",
        "cursor": {
          "ref": "2574521a-7448-4221-8fd0-557e1183a68a",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "279b083e-f06e-4203-a328-e5eafadf18e5"
        },
        "item": {
          "id": "7cb3bb7e-ddb8-4de8-b4c1-74d94c5614d1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1bf5e3f7-af5d-43cb-b91f-1b8b2f761f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ebc7870-636b-47e4-bed7-447197533028",
        "cursor": {
          "ref": "afe16070-88d4-4a78-bc24-bd130a4afa14",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "34cfc632-28ae-427e-8b5a-1fa89bb6bedb"
        },
        "item": {
          "id": "4ebc7870-636b-47e4-bed7-447197533028",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d561c128-0b2e-4a82-b11f-6dca7782c80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966a049e-40c3-4bfc-a78d-d0b322e71d86",
        "cursor": {
          "ref": "48cb744f-a14b-4963-a016-858998476097",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f7eaeb75-a038-4894-bf46-aeaa1cd49dcc"
        },
        "item": {
          "id": "966a049e-40c3-4bfc-a78d-d0b322e71d86",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5b0857ee-5077-4041-bfb3-5b01bf6e25eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8999e15-47ae-4495-a314-a6bafff56d50",
        "cursor": {
          "ref": "da8f0125-1320-49dd-8207-888b25901281",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7e386cbb-f028-4506-ba13-e4bbab840143"
        },
        "item": {
          "id": "a8999e15-47ae-4495-a314-a6bafff56d50",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e1a73b3a-be3b-4cfc-90b4-bf8045f66f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e55952-8ddc-41a0-9118-8325ab2523d1",
        "cursor": {
          "ref": "cd3c4e3f-14e5-452a-9fa5-b8c780145593",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a7342706-3832-4864-ba0d-ef300caea580"
        },
        "item": {
          "id": "b2e55952-8ddc-41a0-9118-8325ab2523d1",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f046124d-4f8e-4cd3-8b11-e6217fd866d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5bf3569-35b6-44d5-95f9-3cdba6c8aeab",
        "cursor": {
          "ref": "0448547f-b634-45de-aa39-748bd234bff2",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a2637ddc-64ca-4ba1-8976-111d68212ac6"
        },
        "item": {
          "id": "d5bf3569-35b6-44d5-95f9-3cdba6c8aeab",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e8df2876-6565-42b3-a338-077bd17d840b",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "20182f2d-006b-4f07-abb9-dda7ab2cbfb0",
        "cursor": {
          "ref": "110cea11-6a1b-4bc6-a129-d4314c3b397c",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "115361fe-339c-4791-aa9c-d06a398fe2e3"
        },
        "item": {
          "id": "20182f2d-006b-4f07-abb9-dda7ab2cbfb0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5a2f8005-cf42-48ed-961e-0a4106541680",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "9e5ef462-333c-4686-9598-fe506a2fdefb",
        "cursor": {
          "ref": "e385d87e-a2a8-410f-a09b-935c8d90b142",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "84e85116-efc4-4d59-ae12-cb549d844922"
        },
        "item": {
          "id": "9e5ef462-333c-4686-9598-fe506a2fdefb",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f74b85be-3cce-433f-ab98-9c3925c7f21c",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "48f2b314-c19b-4d91-aa6e-b940d3393618",
        "cursor": {
          "ref": "a96e50b7-ee96-44df-95a0-e680163f13df",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2834e558-1684-444c-a8dc-5e03d616af25"
        },
        "item": {
          "id": "48f2b314-c19b-4d91-aa6e-b940d3393618",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "524a85d0-d33f-4609-8e0d-9986d98b11f8",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "7bb07639-af07-461f-b545-0585eb8f8fe7",
        "cursor": {
          "ref": "9cd59c4a-284c-4645-8804-fab9502a7df6",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "211523fd-190c-4ce7-b4f5-eccdd10d79d6"
        },
        "item": {
          "id": "7bb07639-af07-461f-b545-0585eb8f8fe7",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "76bf8c5d-adee-4790-b84f-54d68716120d",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "326100d2-146c-4fa4-b22f-8fbe5d4646bc",
        "cursor": {
          "ref": "21991b16-4b12-4d30-9a67-52e474e58d70",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "90b97838-606e-4f26-bd4e-457a5e6a7b81"
        },
        "item": {
          "id": "326100d2-146c-4fa4-b22f-8fbe5d4646bc",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2fcffa6f-55be-4813-870e-f091e23f66fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f46c90-fe69-4279-9c66-74512d060de8",
        "cursor": {
          "ref": "1a3da584-8feb-4f12-a9ad-bbb47cbeff8f",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bfa4a315-4b18-4e4b-8312-c901f9c2c93a"
        },
        "item": {
          "id": "70f46c90-fe69-4279-9c66-74512d060de8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "cc6f8160-4650-4cc2-a307-54473d467de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b2ecc17-8f91-4bbc-adcf-c1f60c2f1091",
        "cursor": {
          "ref": "d146907c-290d-4544-9d81-4703405a31e9",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8eb87c45-ba59-4c1c-b280-d4f1780f423c"
        },
        "item": {
          "id": "2b2ecc17-8f91-4bbc-adcf-c1f60c2f1091",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f679f363-cd1f-4393-8b54-a504c09c66f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4246147b-7f97-4d5d-a415-4676a41a1840",
        "cursor": {
          "ref": "1fce26ab-c2ec-40a3-875e-f9c20e49af5c",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "78837057-7db0-4313-98e9-1a66f78a849d"
        },
        "item": {
          "id": "4246147b-7f97-4d5d-a415-4676a41a1840",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d37e0c34-733a-4d67-a2fc-ea38a10c64d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24eae7c-77ec-4786-90d5-1a1f12c88550",
        "cursor": {
          "ref": "7a4963d6-4934-4ccb-ae68-3691e0ac3f90",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "dd3ef635-127b-461a-858b-633e19042697"
        },
        "item": {
          "id": "a24eae7c-77ec-4786-90d5-1a1f12c88550",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "945e68d3-d386-4357-9b7a-e646eed5bcd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02aa453c-bc61-4cfc-a6e2-19bb84d0367e",
        "cursor": {
          "ref": "a279dfd7-ec29-4eb3-b447-147771d4e5c3",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d0982de1-25cd-4701-adc9-87575fced049"
        },
        "item": {
          "id": "02aa453c-bc61-4cfc-a6e2-19bb84d0367e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7f034ccf-573a-47f2-9da5-f0ebbf8eb363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c25fc67-6e1a-430b-ae13-b523ff42592f",
        "cursor": {
          "ref": "8b2f1198-8c61-4861-b57e-63ef095f0032",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ecc186ce-9a07-4cbf-b53c-14bbdc542ce9"
        },
        "item": {
          "id": "1c25fc67-6e1a-430b-ae13-b523ff42592f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "eaba1f39-eea7-4f9e-b8f8-33633f611c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c83bba9-9854-4a8f-8796-46b6e3f70c07",
        "cursor": {
          "ref": "dd2bd153-f9e3-4dfb-9ac5-2c868f30827c",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "052fa5ab-f932-4f6b-8734-ab2c13a9f9a2"
        },
        "item": {
          "id": "8c83bba9-9854-4a8f-8796-46b6e3f70c07",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3032d14a-3384-4d9d-9e21-cfe99c25817a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b07377-2a90-45fe-84ab-d028f500bea2",
        "cursor": {
          "ref": "d833394a-b637-4a1e-862d-0339c10734a5",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2dfc3996-4cbf-43dc-8127-def94be29aef"
        },
        "item": {
          "id": "e6b07377-2a90-45fe-84ab-d028f500bea2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ece8e425-8524-4bae-82e3-9d5cf9c9518e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c361790-6a93-4665-ab6b-15b5bbb46cd9",
        "cursor": {
          "ref": "6a2907c3-cd1a-4d47-8467-8049f63a8176",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ddb5fbbb-bee7-4fdb-8336-14f66b64e83e"
        },
        "item": {
          "id": "4c361790-6a93-4665-ab6b-15b5bbb46cd9",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "90ba622d-be01-469f-b362-c5331610cf52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "492d4d1c-4997-423a-9189-90f761d96199",
        "cursor": {
          "ref": "859c9bbb-1815-4270-b01c-27e305156ccc",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a0fea898-6785-416e-b9d7-5428b660c2ea"
        },
        "item": {
          "id": "492d4d1c-4997-423a-9189-90f761d96199",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "2ecc9b4a-a18e-4665-a53f-338b474f784b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0921bef7-4c4f-4b16-8141-c1daf2d3da5c",
        "cursor": {
          "ref": "0ee9e320-47a8-412f-b320-1e73e52d5960",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2a2048d2-9931-4b69-8f35-8810e46672a0"
        },
        "item": {
          "id": "0921bef7-4c4f-4b16-8141-c1daf2d3da5c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c20f2d65-b757-4b4d-8d84-17239a20f62e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7eb8f37-dd2a-423d-95fe-4ea73dde44a7",
        "cursor": {
          "ref": "818e64db-c273-4093-9b30-bac756b6ae5e",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "61dbae2c-425a-43a2-884d-aef68251484a"
        },
        "item": {
          "id": "f7eb8f37-dd2a-423d-95fe-4ea73dde44a7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e08b6bdf-c7b5-4029-b650-b0fdf2ef543e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f244256-0c0d-4037-81b8-d36d02771dfc",
        "cursor": {
          "ref": "59cf1915-704b-4ad5-8556-5cce567971f1",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "807719c7-891f-4492-9fd5-e160026ae18b"
        },
        "item": {
          "id": "5f244256-0c0d-4037-81b8-d36d02771dfc",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ad667da9-6895-442b-8f41-e56d8c36e2e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e42f58-0a07-4751-9fa2-2f1875154417",
        "cursor": {
          "ref": "791011c7-2462-467c-b383-a4c8798e3103",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6e9837f2-1b44-40a2-bf44-67500b2b9e3a"
        },
        "item": {
          "id": "c6e42f58-0a07-4751-9fa2-2f1875154417",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f2566c43-0865-4e8a-a716-d63ddf5677db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f69c67-dfdd-4234-9746-23a50efb66a6",
        "cursor": {
          "ref": "7efe9d1d-9dcf-4814-a787-aa37002787bd",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8cb022e3-1120-43b3-b5c9-b5ef824b1776"
        },
        "item": {
          "id": "59f69c67-dfdd-4234-9746-23a50efb66a6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f5ed1b6c-385c-48d6-b966-9e27e71d7ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ba3c6e-dbfd-44f1-8938-f69903efdac9",
        "cursor": {
          "ref": "26d931f0-8cbc-46f7-a83b-8739be3c3a5d",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e5e1ce40-e696-43d2-b3c2-b7a86ef7ca3c"
        },
        "item": {
          "id": "44ba3c6e-dbfd-44f1-8938-f69903efdac9",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d1ab021c-9a4b-4de9-93e5-fa8366bd8df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "901cc51d-8c3e-4bda-b9e2-73db9583244e",
        "cursor": {
          "ref": "2b2b6f1f-0293-464c-90e9-b587e1005f16",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0c25b8d2-017c-454c-b4ea-5edc447ab8c7"
        },
        "item": {
          "id": "901cc51d-8c3e-4bda-b9e2-73db9583244e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0fc6415e-c63d-4ed9-9dd7-4f051f68aa9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e10cad3-705e-4b64-99ac-4d5188f4e2ca",
        "cursor": {
          "ref": "2f3d5e11-ea2b-42b5-943f-89109e7ad9e7",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f96c9280-00d7-4c13-aad8-33b3a7557766"
        },
        "item": {
          "id": "0e10cad3-705e-4b64-99ac-4d5188f4e2ca",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "2aed4ea5-e219-4b39-a668-fc2652ad1dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d399be8a-0476-401e-a130-ae6d325606cb",
        "cursor": {
          "ref": "91b2d483-4d4f-403a-b95a-c56a3d5f4347",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a150929c-e8b1-47c6-bd40-d083529d3689"
        },
        "item": {
          "id": "d399be8a-0476-401e-a130-ae6d325606cb",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b8c1dde0-e8f4-4c20-81fd-def1585fcad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090be278-5884-47fc-b13b-ee5d38246b41",
        "cursor": {
          "ref": "ee60317c-3924-48b6-8cc2-3f2a3c8b036a",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4abf98a7-bff4-4828-b3bb-58502d38b068"
        },
        "item": {
          "id": "090be278-5884-47fc-b13b-ee5d38246b41",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e120e882-e836-4067-9b91-7912a0a8abf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c0f2af-373c-4a92-be35-3af0d2bc2f2b",
        "cursor": {
          "ref": "782dc53c-654a-432c-973e-88a4c2da98cc",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "69e571de-af57-49f9-87f6-fa74d08fc6f6"
        },
        "item": {
          "id": "b4c0f2af-373c-4a92-be35-3af0d2bc2f2b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2cbbdc34-18ec-4c30-afdc-26ff39e40750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b99628e-f42b-43a5-a0b8-491ac73b0603",
        "cursor": {
          "ref": "ab4b2833-a5c6-415d-83fc-78f49310f9f2",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a3dde2c7-1862-4ca7-9371-a7a8ec1126e6"
        },
        "item": {
          "id": "5b99628e-f42b-43a5-a0b8-491ac73b0603",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6a333115-f776-47d4-8bd8-61297a0ae6fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04b2d54-519a-4a6c-9e80-a28d6aed93f9",
        "cursor": {
          "ref": "004dcba3-ac23-44e6-b329-1e0eb8cfbf43",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c687d4b0-a2aa-43e7-892d-54da4572a858"
        },
        "item": {
          "id": "b04b2d54-519a-4a6c-9e80-a28d6aed93f9",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b3fb6509-851b-4f7e-81d0-189abb3e9e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b92ef28-0853-469c-9480-f627b5dea485",
        "cursor": {
          "ref": "60311c89-b932-4cf2-ad3e-7b52505e90cf",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "755529da-7014-4645-abb1-eea1a60b9afa"
        },
        "item": {
          "id": "8b92ef28-0853-469c-9480-f627b5dea485",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b02d33a4-ecfa-40f6-a65f-a201f7918b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0ef60c-5f18-47d5-8f77-469bb4c955ef",
        "cursor": {
          "ref": "20cfa757-ec3e-4e47-9bfd-079725e43410",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "98433697-af73-48dc-8cab-7ed13b35fdc2"
        },
        "item": {
          "id": "de0ef60c-5f18-47d5-8f77-469bb4c955ef",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e8ca4ce7-f7a0-47e1-be5a-0490a309be7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de5be7f-cfd2-4e53-b335-69513346c691",
        "cursor": {
          "ref": "a9a5937c-b053-4694-ae01-cfbfc5045ef8",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a7279aca-785a-428c-b276-ab2111aab6ff"
        },
        "item": {
          "id": "2de5be7f-cfd2-4e53-b335-69513346c691",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d207a025-f21f-4e17-a1f9-a4951c3bb25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9a7ad4-9e92-49f3-8292-ec54e1c6b10d",
        "cursor": {
          "ref": "47787e77-5db8-4e73-8871-7fd6fc1685cb",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "986bb1a3-d0d0-44c1-adfb-ce6c27ca58ca"
        },
        "item": {
          "id": "cd9a7ad4-9e92-49f3-8292-ec54e1c6b10d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2af2f146-d168-4fef-8306-2da4435feed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfcd601f-caa9-426d-8c75-7d26b46713c7",
        "cursor": {
          "ref": "d82607d6-febe-48ad-b3e6-6c56bb0735f8",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9b5cb75b-4c4b-4859-bfaa-fa3c394597b0"
        },
        "item": {
          "id": "cfcd601f-caa9-426d-8c75-7d26b46713c7",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "eff86407-d7a8-47bc-8ca7-5c2a7ab023d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8357acf5-cc3c-4847-9218-612f716eb6d7",
        "cursor": {
          "ref": "4fbd28dd-ae24-47ce-8c27-2ca12e6147ad",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "cc0fde61-1372-4453-b291-993633c1f6e1"
        },
        "item": {
          "id": "8357acf5-cc3c-4847-9218-612f716eb6d7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5b38776c-1e37-4347-ae04-14220b4bc466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a0c1ec-fd72-40b9-811b-52137c63d7df",
        "cursor": {
          "ref": "1cc0c9d0-8c37-4704-9dcf-fd1e1e17dd91",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a2e7f252-7756-482f-b6ad-654c6842503c"
        },
        "item": {
          "id": "a3a0c1ec-fd72-40b9-811b-52137c63d7df",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "54bd4be0-3ddd-4033-bbf8-47ccf894eb49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daaf2996-b38f-4dd7-8054-b9646c789cf4",
        "cursor": {
          "ref": "81ea6701-e9e7-47d1-87a3-1e36222ca5ad",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "32e004e7-73bf-4245-90a1-90c02adebbc7"
        },
        "item": {
          "id": "daaf2996-b38f-4dd7-8054-b9646c789cf4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "dbedcc62-ac5c-4486-a632-a70bbf3fd075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1702ec20-ffb2-4f75-bac6-e1804412f62a",
        "cursor": {
          "ref": "1237e67a-5f5d-459c-b288-58d3c395481f",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "421625e9-da42-43d0-bcf4-d131aec9587d"
        },
        "item": {
          "id": "1702ec20-ffb2-4f75-bac6-e1804412f62a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "347dd4ab-d00e-49df-9e1d-d1132ec2dddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc878318-f684-48ca-8bed-e254966ccd63",
        "cursor": {
          "ref": "e806236e-d9d3-4393-8ac9-48f71d826bb9",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "15871a88-b3e5-4d52-940a-db096be9c3f9"
        },
        "item": {
          "id": "bc878318-f684-48ca-8bed-e254966ccd63",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "966384b3-a3d9-401e-a7c5-cb4c60eb4287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3530c69e-2c03-44d4-995c-34c801a11fb7",
        "cursor": {
          "ref": "5057a36c-44df-4998-b306-6ad5ce141fd3",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6c0d0af5-b6c1-4254-9828-44d23e50a937"
        },
        "item": {
          "id": "3530c69e-2c03-44d4-995c-34c801a11fb7",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "aadd0262-15a4-4886-9971-39f980add894",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ba7c4f-4cef-4c6a-bd44-61fb0274f4aa",
        "cursor": {
          "ref": "4ed7bd7f-cdd3-4484-87a1-09e402acd876",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2f402e53-4e23-49f0-b0ff-2a3a4c3b8c28"
        },
        "item": {
          "id": "c4ba7c4f-4cef-4c6a-bd44-61fb0274f4aa",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "722ef632-f02c-4b0a-995e-e9daeea77d21",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "109c5146-83e6-408b-ab69-e690b65436ec",
        "cursor": {
          "ref": "6179b7b9-0240-42ce-ba4e-3b1b614f4b88",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5bb4b440-8b9f-4ccf-bc87-fd7b45c5aebf"
        },
        "item": {
          "id": "109c5146-83e6-408b-ab69-e690b65436ec",
          "name": "credentials_verify"
        },
        "response": {
          "id": "38c32a34-105c-489e-b9f3-dd9e4a148fb4",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7428f95-17b1-4c09-8ca2-7e745e4aa5ce",
        "cursor": {
          "ref": "a2619114-b0a5-4f9f-b8b5-4326b5ba58b7",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4fccf12c-83a5-413f-b133-5182aea94406"
        },
        "item": {
          "id": "f7428f95-17b1-4c09-8ca2-7e745e4aa5ce",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "92bc5c0a-ae50-4c97-86cc-24dad0ecc031",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79df094-77c0-4dac-b46f-00037279f59a",
        "cursor": {
          "ref": "2345bfb7-de16-450b-a2f6-94f04f9dc8cb",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8cea51ae-b3cd-4852-bfa9-6c85a03e77ed"
        },
        "item": {
          "id": "a79df094-77c0-4dac-b46f-00037279f59a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3bf95c5f-d442-4c35-a6db-764e8fc405bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79df094-77c0-4dac-b46f-00037279f59a",
        "cursor": {
          "ref": "2345bfb7-de16-450b-a2f6-94f04f9dc8cb",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8cea51ae-b3cd-4852-bfa9-6c85a03e77ed"
        },
        "item": {
          "id": "a79df094-77c0-4dac-b46f-00037279f59a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3bf95c5f-d442-4c35-a6db-764e8fc405bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304f5f1e-153c-4121-8e4b-bd175f536ce5",
        "cursor": {
          "ref": "7229474e-4bdb-4e96-8744-cf7e1dfb3eea",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "bc692ee5-1009-49ad-aaff-7739a792740b"
        },
        "item": {
          "id": "304f5f1e-153c-4121-8e4b-bd175f536ce5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "646ac15e-9868-43f5-802e-72d56dd1e8c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78882e99-fedf-45f6-b179-e2ef0fceb62f",
        "cursor": {
          "ref": "dec13548-39fc-43a0-89fe-deae4c3dbb9d",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ccedb237-5508-425c-b2d7-0bcd52e11d23"
        },
        "item": {
          "id": "78882e99-fedf-45f6-b179-e2ef0fceb62f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "be3c0962-801d-4f01-9c8a-c206ad4e5409",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}