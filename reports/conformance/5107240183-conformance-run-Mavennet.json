{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a7be2225-edc1-4fd6-bb82-8180f29286ab",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9cd46782-a15b-403c-9f87-2344bf688b00",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "53bb5215-5e1e-42a5-838d-8d7a417dd80f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4cc0497d-62ee-491d-a662-655cbc1ee366"
                }
              }
            ]
          },
          {
            "id": "5fe495ce-5d27-4420-aa2b-b660a3f75dde",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "45e544ec-b4ee-40e8-918f-b3c136d3c54a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "042e9359-c296-49de-aa80-b0e2144735d2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "17d6f9a2-c3d8-47c8-a53a-b7caf4fb2b0d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "bbf03676-d62e-4fe9-a9e5-0df60b3ea7e4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2cf6e73d-7150-440b-9caf-f84377aee623",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "008268e7-7e42-4f62-9cc0-66a3028ecbc2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "979a29bc-df14-4b97-a9e3-f783d04657fb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "90e6dcdc-4128-4e4e-8a3a-acf887799485",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9e23780b-c8c3-4528-8a9b-c9ba3909fd9b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "497d83a6-b7b1-4f3f-b801-447be7d22ee4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3c9ef293-0724-4de3-8031-bd31fa99020b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4e01a4f2-dbf0-4c66-b6cf-77649fd31322",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6d5117c8-baee-468a-8655-3416055551d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2b19ad6-456d-422a-8740-da831d748f1c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2370fc09-4211-433f-914b-fb8c20bf2f6d"
            }
          }
        ]
      },
      {
        "id": "fa73dff3-ed2e-494f-a73e-3d48854f862c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9ff95d1e-1d61-4fd5-bd95-056c4e18323c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "886d0be8-d4c0-4d3e-8011-9c6ada109b37",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "23f4b944-5756-4e98-a923-92c53f65fffb",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b1965c2-bfcd-4c3a-beda-e493f0bb12cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31c9a5e0-2a09-46b2-b172-73587225847c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2408565-957e-4dbb-aa3e-a5869bd58706",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f621fb8d-a794-43d5-8c00-d1acc4785725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b08837a1-fc11-437d-9b93-71c8fea8164f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f52f6f-1714-4ba9-939a-ebc0ee916378",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff6c0e2-973b-4cc2-b8fc-d4838fd42409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "37622072-d9a3-433d-8648-af20a5d8e1d2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "229e02d9-d39c-41a3-92a7-6882b5ac0262",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0561eaad-75ea-4011-b4f1-7b2ff115f823",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d73d814-9b55-4e5f-ae47-b6e7cea13b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca555438-4e01-4a8a-a23f-a68bf820b6fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47054da1-5a15-4efb-a0b6-0ca35f10df93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2c8dfcb-3a64-472e-9236-5ca9652adfc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd309ee-4c76-402f-bfc3-526de357622b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59f76b7-c91f-4c8b-ae2f-c07d4dc6bb54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8592e429-ccbd-4c71-8a61-e7067aefaade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc992b4-329d-4e54-be2d-dcbab2df029d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "02fb6bde-5957-4b85-8d1d-8e18c00df505"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "775080a5-519a-432c-9d72-a8656dbec4d3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "77e916ed-48e9-4cbf-bd31-f2b0f47933cb",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab46986b-649a-4798-a1b1-ad3f345f2629",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f059364e-e9c2-4589-b3c7-b44fcd68db16"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85b74e54-3605-46c0-92a0-b7df48f68c1f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "80a563e3-0a16-49b7-acc5-14fd18834632"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4fd2f7b5-9008-495c-8a5c-62ce79efc899",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7014fd2b-2d1e-4555-889b-e0d466ef0e9d"
            }
          }
        ]
      },
      {
        "id": "9288d4b8-e9a6-4ed4-924c-5527042bcf83",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7799587d-2e5c-43c1-8d33-27dc01665d27",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c69c5df5-d39a-4618-ba1b-29be6c292243",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "696b73ce-5288-49d6-9b23-6d27e7dd8444",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd878b33-4e51-401a-aef5-d3fdcf0c8a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba625592-7ff6-4fd5-bcaf-85244055a445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a328b8fd-67a5-497a-871e-d6ebfd9bf9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ae386ff-fe02-4a1f-9243-26be408e81f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1031371-67e6-4dab-b12d-9b789cc4d79f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12902dfb-4e2e-4d88-a253-5065a733f4b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f24f0f5-9dfa-42f7-8dc1-fad890de9521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b82b67-1ad5-4b6c-8110-db4b7ad83c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5e9a31c-93d3-4715-999b-e57147ba3383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ed3876-b700-4d8a-8b8f-390da306abbe",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f62501-ed5e-4282-9d4f-ae099766be07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2206a16e-a305-4e38-a36b-50008b82c832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e386df-d4b6-4eda-94b5-d81fc213d661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10d3f1ed-25c7-4a58-abbd-c547ca13300b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da73744-0e0f-4e5c-a30b-597db98b8bb5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb1b2ce-8eb4-4225-8aea-b6c9db986d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b81fd553-2db4-482f-9954-69f1aadfcdfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb06ac70-8713-4125-9dbe-49e0ce45f9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5205462-42b4-4e41-a9fd-f4f82b857abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd772353-2413-4019-b974-c6ba839596c0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1495db7c-dd41-4c8a-9b83-54726ad146fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "739f4fb5-0736-4692-acb7-d642b33ad761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b20583-65e5-4564-be8d-32881dd5f1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30fb031b-4b34-47d0-a643-d221bbfa07ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863eee5f-cb6b-46bd-89a3-66bfaec1c1e0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe7d672-e65f-49b7-a8bf-a16cd7bafa00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08b17f64-a8f7-4a55-b160-ce9d5f37c261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd80ee34-e06b-439b-8c5a-1522b9007f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66a18ce1-8c16-4543-b125-e649c658de47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81cb5b3f-0d07-4502-b9d0-04a45702ceab",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c24ebe-ef2b-4cdf-b1d3-8a2fd05d7f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ca7d71f-2f16-41af-ba4f-2e26a22942b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce2925b-25a3-499a-a0fa-0234bda7b321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c05a575-3452-46ff-8195-9674b3c60188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b50573c-cd4f-49ec-8bd9-017cd162b790",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4301f4d-407a-4069-944e-dfa85d56ed47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb281ae9-6395-4059-9b9b-dfef9da1a116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862658ad-48e4-4272-874e-1b55c497e559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e278bba7-f11a-4dd0-9dc1-6ee0351c25c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93fdef0-303a-4670-b2a3-77391ba9405c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bb6129-d6b7-4b89-bb10-858a36c66465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08d84a63-b025-4747-b616-2d0c4b2bde61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c32513-ad36-414c-9fc7-718ab7c12863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7f1849e-fbd3-40ae-ac12-dc522d86a979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff60ec67-5181-49da-90be-22d9e2ec353d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "052b35ec-bccd-44b1-bd53-668a4ec79940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb0de6ae-308f-4c1e-b425-d5ca7fa02ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6754ca-ed2e-4089-8ce5-bb08270ce6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "deefe58b-0093-4383-8fc8-5e877dc4e844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df51b2c0-89ae-4e98-8a12-31de838f2dc2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8765061-99db-4848-af75-c246829c6fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39fc4e97-3181-458e-8612-822f065a3bd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51c7965-4e08-4a53-a34d-fab928ad57bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec34d191-9285-4a99-b287-1876a1551ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c563d2fd-2e72-48c7-9463-a162dcc67bc8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60524f4b-e7bb-4a72-a3d7-fc2aef4f5649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c6fefd-53b8-4e92-babe-86b8cb53167c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208137d5-7a29-456e-af89-8bae663ad137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97f4f662-d7d4-4dfd-9212-e1061db07b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf1588a-506b-47e5-a81d-d72c9cbdb83c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "328c4a1a-4f05-4ac9-b7d3-56e899d3a011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95dd831e-b7d9-48a6-abcb-5166e77da3a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712584d2-cf3e-42c0-bccf-ab0e3ef38663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54b461c7-f6a1-4f0f-9ba1-e36c477a16e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d498458-4ae6-4819-a29a-b796b08da13f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d41005d-e7fb-491b-8862-457460585b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a5c85f3-fa50-49e4-af25-c8868d95cb3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be78158f-e236-432e-87e4-a953d8ab286d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "501a51c7-8833-4da6-a841-4654bb33c537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a554592-03fa-4b59-a000-f447a89a391d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a993d39d-a4ca-4e4e-939c-91b1aac68648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b083190c-e564-4f42-b233-419e99e87a3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4ebdcb-1563-472c-ba2e-1a1a79fa22cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11feca25-6715-4c86-9ecc-1826bcad1944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61514005-08d9-4d2a-98f9-449c34dd2a5c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86918c88-c50c-438e-93e7-c5c11adcc0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4935b3c-9053-4c89-9fab-1e687b6a7889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b36cf2fb-880e-41f0-9227-82f69475b959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9963ac3e-6f7b-4c1b-9e93-ebce30837301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cace1f1a-1976-4338-84cb-071ae3534dba",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7839a8-f69f-43ea-ae2b-6a5812636e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da436b1f-bb21-4c4a-b7cc-677ce8804a0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10d3878-702b-4b62-8493-b461ec9918f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16cc53f1-cb28-4693-b9d8-8c6d46fe6133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e1e9b7-f349-4477-9dd7-51a2db6f1403",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c81e51-159e-43dd-ad7f-5d35d09d1e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a96bb58-0bc7-4f17-88f7-7570ed8782fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6db29f2-cee4-4756-a19e-d0f92a17abc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bce30476-2c01-458c-9d5d-4069e2298f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45eefc36-4007-4ced-9a06-f4f70dc6fd1f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb4d731-8c15-4f4b-aaf1-61d81ab80778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1b0a30-85c7-40f8-a533-4723cdc4c9a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e49885-4e3e-4d47-8452-4e7bad89c0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "75cb7462-87f1-42e3-81dd-432f5debf6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2735dfc6-7ada-4123-b4f8-e78b790b1289",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d8baa9-f2f1-4bcd-b77b-65705711c865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "285f4501-5aa9-4bea-b20d-93fde3c1abec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48c3fb7-eb61-441c-893e-6a181fbcdd9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4d9777a-d870-48d2-8c5f-d300552dee44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebebafc-41c0-45b4-a7c0-93debc18e15e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57aa3b4f-89b2-49a2-bf31-02eaaa2e87f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1117972b-ae3b-4c9f-8dbe-e692a0ab578b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2951cc5a-f312-42f4-86ed-670882c9f9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f3b6ba-c370-4418-b407-2a3d1cacfacd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d47245-21b9-41eb-ae17-396ed86a3b6e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57131c0f-a125-436a-bf8d-76e6aa43ea5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d2ccdc-f24b-4745-93ba-c30b182ad6a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf10883-56d8-400e-bb4b-85fa12226b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b80f872f-3f50-4a6d-b9a9-78d12b88f198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be20a9b-ba69-4c97-b588-5d52fd6c858b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1b46d2-e8e3-49bf-af7f-e056762f7b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "129ed482-b3eb-41d5-ad1b-cf8edabbc391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e1aa53-f5dd-4a50-b5a7-c87b30ff8b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "32a62bc0-3e18-4977-802d-4b3cc0da1130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c123e6-8d9e-4618-8c7d-97f2ae5e5fcf",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e2a1da-2dc2-4365-842c-c80a10a01b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70efcd28-29ca-42d2-ae58-a0e813b7ec67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97dc339e-49c7-454a-8238-9d044eee2864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cbe70ed-9b3a-4266-ba3b-e48e81262cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9fe478f-5549-4ee4-bf74-56aca5afd931",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c99a6e-aef4-4f94-ad2f-a510d195b598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92274400-cd2b-4e81-b1f2-c7638101d179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0cc3fd-d95e-47d3-8ebf-4b79a5660c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb5b34d-897a-4920-996b-e293c77b4a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c968d071-c77b-4d66-af30-8c5fe223e72a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "058900db-9650-4aeb-9184-9873f12b6988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1a0df09-bba7-422a-899b-13ae8e2bf8a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d85b0840-9812-46f3-acfd-64f447f02508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f294905-b7eb-410d-abd9-fa765f9e2ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e027152-35f4-4eb9-8aa7-535cd38c07e1",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad3fdf4-2ffd-4c23-9bb0-2d5c005c44b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cebf7db-aeae-454a-a419-331e731d9aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9d4045-be87-45d3-8d9c-5f19b74c734c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a07b22e-b7d5-41a9-b686-64410df5137e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c66e14c-1f7f-496a-94ee-e2e6a74ba7ce",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b3b6d3-c1fb-4ea1-9254-f841ca4ab47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df05df12-6c63-4bc8-91ce-bd80c5c42be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771c835b-7947-4f59-a2eb-51772842d6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "35d2b1dc-c8a1-489b-9601-8d8b5f63f20a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396a99a4-cbca-44ee-b2e2-4367cc74b44a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a89e91f-d0f9-4c0d-b51a-97640d022690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9e66e30-c015-4327-9c3d-32de53843505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123cb983-ab84-4976-ba3c-44e19fbd4b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ef588fa-1e09-4669-9117-56c0ca189567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a49cdd-9457-472f-8766-328000e47a48",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71915172-6c59-47fa-b009-0dd10a81591a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a5a09b0-42ee-433e-a9b0-75988c5ceec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c000409-7524-47cb-a608-0627343f6140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6757d1c4-c574-474d-8b20-cc348e6938b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c23468a-735e-4f3d-bde2-691aaa23870b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "992f8e66-25c1-4f39-b319-28fcfa6fdcbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e7e6cfd-e1fd-4fe6-9479-0146c1c9c1cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "747faf6d-3d04-492f-9247-3c5d49708197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "87c9bb99-aa26-4ba6-8910-a85fa68f545e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f7680ae-f46d-446b-a66e-a0e31fa409b0",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "771587d2-7bea-4bee-b73d-e47b756ae28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "222c03b9-0645-41da-9bc2-bad109de297a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c07651-04d3-437d-a0f9-a479a5abb291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84fa5e8a-31b1-482e-baad-f574e9a468b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef83aec2-122d-41e6-b839-92520fe4eb84",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "124c5d3a-696c-4d5c-a764-cd67736d9f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1746cc6-d01b-4e65-9f40-810bd375a952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5e9004-9e8b-4614-8605-004189051e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "382cb05f-3971-457b-8224-0b26a7d99b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bbc302b-a7de-43d3-891b-d4cc5bafdf3e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1687c1a8-7f8c-4fd8-877b-7f563860b902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59aba80f-64c8-4660-adf2-9fed73b49537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4002fad1-1358-43cf-b2f7-ddfdca26063d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ba398d7-dc3a-48ea-b486-7a0b81edbdea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bc6bf42-42f4-4244-a112-fb205e47ecec",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3718f20-8a6e-4164-9e43-874529347514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af0913db-7351-41b5-a028-8b1ae43b6c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369f109f-1ad9-49d9-ace2-3d9cdf78c32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c25c2acc-e891-4fce-9b35-cf81466eebce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b0d29eb-9ad1-4aef-be8c-b845b5f82cef",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa9283a6-44a6-4889-877c-6a8563d3f32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "588648e5-d7be-437a-b46e-3e7b1c589519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1979bfef-085f-4501-954b-589b6bbcd23b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "721eda88-a131-4449-b0f2-5371cead6381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c069b64-8ec3-4e24-91bc-7d91b601b93a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9528b3a3-85ff-4b1a-b5ce-1c998e5a14e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b662515-48f7-4fc8-bb6d-6540bebc8a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4672f1e5-48aa-40eb-bbf8-d304341bb2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "919437ba-0937-4e51-9975-92598ec41981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf31a7a-cc8b-423b-8cfa-640e6c98d042",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61841883-e83f-4d77-898d-79853dbe8087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12cd4951-d874-42ef-8e9c-713700214024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58ef46e-bf4d-48c3-96af-dcd2b3b798a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "74ab3294-831b-49c9-86b6-72a94c0ca295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3fa43be-2101-47aa-9cff-6b0dd835eed5",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "856d1557-783f-4619-8bdb-7949e09a3610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ef06eef-0ac8-4836-bcfc-fa25c4889a8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d82c7c-471c-4ae3-8eb6-85afab4ce7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d6993f3-1683-4ee2-a46e-522f0a7082aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ef0b32-d662-4e20-80f8-c431a717c4cf",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3001e968-fa5f-4506-81a7-39a3e240fa61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "841c7c9c-32ed-4cc1-9724-6843a0eb9cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6184f8-79a6-4835-9f6d-ff5444c5ce32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "52795b61-c3aa-43fa-91b3-7468412021a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b35fae-b0fd-42b7-9aec-2c978d8205cf",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a161b769-f082-4fa1-ab02-ef9175d1887a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c582bfa-5d71-4b01-be62-af68850c38b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf7c14a1-2728-4b20-9e07-009ab61c799e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "792f246b-0836-43c6-932f-7ef4e81d8fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c58227-b917-44f8-a706-7632cd3cd6d6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0922f686-e3dc-4543-a362-b48169c1f589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc70373d-c280-40c4-bd2f-d190f6d504cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a0972a-3b97-4c98-9e11-55348a59c1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8f651b70-1815-4767-b736-2e32cc11b40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e636f2eb-ba79-41e6-94fb-8b314af67c70",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9bb5422-dda2-4638-bb57-ccbb53786f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2407811-507a-436f-a799-e024aa07075a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb691476-d102-4255-86e2-1ca113649127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a313be66-0c1f-4419-8c0f-82cbcb75fecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1475c62-4c03-4d15-96a9-42fc2cc9632a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4dce066-459d-41bb-8576-3f38f1cc5404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8385b8d-f837-456b-84ce-ad9410bd96a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a299188f-1402-4381-b431-e44122dc3bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a61e5283-048a-4f67-ba01-916e2603800e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e5b6b9-3a68-40fd-84b2-4f1167898eb7",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba087fb-031f-49c4-a4ef-52afccf3d156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81112a2f-29e9-4368-bc2d-56f6d4398f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf40baf-5a13-43f7-b76e-10d5b8ec3e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f86b1723-e2f5-4e90-977f-039726243b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf4bda2-deb6-47c1-acc2-e7072d9d5243",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a36968f-f779-418d-9b8f-4a7fa0f04b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4c26978-ec49-41f3-984d-ada1785294ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b6c7391-2eee-49fe-b395-2e1434df2a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8771fc31-8a28-4826-a427-94a27555533d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8bab94b-4d88-47db-a099-13ebc5916a30",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c841344-b42c-475b-956e-b62eeedce1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23233f90-7fe1-4df6-a477-124999ded8c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1e1e91-4001-436d-bd30-c734485f8ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f9e945a-29cc-4562-9cc4-e5dedb2d5bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e1cb30e-5261-4062-98f5-21e374457110",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33faed0b-66d3-4c8a-8faf-cc2a4084c512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a969c32-f9d6-4372-a4b6-39c40e5b871c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de230ad5-b9d6-456a-97d4-cbe12f8ab5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3de6abc1-f386-48ac-ad6f-cff53f80e77f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07fc7b9-7266-477e-8c22-025e3a93d0cc",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a6e1bb-350d-40ee-8ad9-706708095e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbb36b2e-a093-447c-9216-d5eeb30d1394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be6ebd9-3867-4314-aa50-507fac464d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "91f92d32-68bc-467a-9ded-acb102f2786f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e1d223f-cde6-4be8-b51d-29941128839a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d5a3a5-bec6-4df7-b1d8-d3e069c8a4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fa41650-0a7d-46a0-b8c2-0e766463714d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f93c6ba-edf7-43d6-b837-9d624f3c5fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "91e51fd1-7d13-4070-963e-b62271531f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22290099-9a48-446d-bdbc-686823187d5c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c265455-6cdb-4365-923c-f19961fca70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4891f04d-340e-4a5a-ab29-b95c66bb1358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a400d413-2e03-4a16-9188-0f48dd6cfbfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b634a44-7a8d-4f50-b42a-bb788c9bd178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12edc1e1-8871-482d-bac7-6f02c30224a3",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ddf973-2574-42a3-9735-c9c6b38c60c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e798b786-c4ae-43ed-bf1a-cbd42d81e313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6559cc-93e5-4a8f-bbab-0454cd245cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b924d4db-8b18-4e52-a5dd-3f6a40dd03cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68cf66da-e37e-415c-80fe-569898814800",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d03172-266a-4bb3-aa2c-0d0af094e058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d335f20-be28-4375-bd16-e2adb03bf839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cf406aa-5d75-437f-bdfb-09da934ec644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6304ba01-cdf6-4840-9958-35cb9a421c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43dcb880-a2e2-454e-9897-54b7d8119c5a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517c8005-5f63-4e68-bba2-ff3c3c48ecdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1745622b-592e-4bf6-b0b5-bf43931010f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96470d47-daed-4f69-8424-720761761663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "287ac00c-7e14-49d3-b664-fe3541c06cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a44c66-915b-42d9-a8dc-14ca6c699e2f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3507c504-6fa9-46e6-ac5b-d4e3f9fb5d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb80f6e-2ff8-4f5c-a60f-febe973ab276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0998fca-abe3-4d04-85f6-732c6897de86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "062e40cd-09be-4a4d-a736-b50e68f6c8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aedc440-601a-4f18-ace6-e5581aa7bb2d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44193e75-f5eb-4f71-bba2-68d7f4ee6031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0193b73-65a5-47ab-aa94-8ba6c4e94dda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1e210a-959f-4897-845d-0cbbd02aaa93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "93292527-7fbd-473f-a0aa-cfe3bf94b38c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4d213d-2bc1-4f73-b6af-d9e76854aa84",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f835535c-972d-4b99-b8ea-e6f4a679f7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72726784-1e84-464f-8655-792059c8b89b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f28e54-7652-4855-b31a-e80443301b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca940c52-9e8e-4a6e-9e67-384aefd2b644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c752b174-244a-4e00-a13e-55a3390f5558",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "917233cc-e0fc-4bab-a173-7c363afaf93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7569b6ad-4755-4bfb-b140-827f0c292918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9741249-70be-4f3a-bd11-3561aff77f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f95dca4c-d270-4fd3-8868-26efd6d7b517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99dd2f68-3070-4ac0-86cd-b00b442b899e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667b1bc2-4407-48a8-9bf8-52d01a2aea6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64324bd8-28d6-4b74-916f-94650ca0d282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78639486-b3e5-4b12-9a39-7d2af88f7c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1e875d3-c156-4736-a749-fd3e504f71ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3df0956-fd8b-4a70-9c15-15f692ecd0a8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1914e29e-462d-4215-a8ed-7129cac60ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a129b822-ec81-4873-9cf2-adeeab0ac021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39613793-64b3-4122-aa6b-51cd2d2898d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b3ad310-4d82-46a7-8678-20f6ac2a4447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfd475f-53b9-44ef-8c7c-3c90f97fe7f9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548fe44d-871a-4c94-8d35-148ccc60951b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0fd58f5-213f-4f8d-bb58-a02b148e3e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0233e56-6a6b-437e-b3a0-860e2e968acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bcc32324-6ea4-4470-9ab4-07ad9a7245a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd37d16e-4cbb-42e8-85af-a5dea6ab0e2c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac8f170-5d06-4ca3-9fd7-5645d3de01e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a82565-ff4b-4b85-874c-cec6b0ddc069"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "defb1ed7-5f4d-403b-8841-5d29a98a1690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "66246eaa-ee25-43e8-ba9a-da611b5f8f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ad7517-c5b4-4436-ae55-59f116efb366",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f56989-2446-4295-b18d-9440647dca76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cdae724-fdfb-4b9b-84a3-243fb0964d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6811ff66-7a74-452f-a8a7-243430dc62ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1e8c32f-0b2a-4f55-85e4-556abee04933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36af4189-ea8e-42e8-8466-0f81042bce50",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6edb1c-561e-4997-897f-04d2fbf146ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a32898f9-d26a-4601-bf39-9add20fef61d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b237d44-c97f-4559-99d3-baf27a0946cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0eac862-53fe-419b-b337-76dcbd419b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0b9e0c-73ba-413d-91ab-40ef222ff487",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff3ada8-f486-4588-a900-e3888bdcca26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "468900c0-ac16-4fc9-851d-a59a3b7294c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65da8ea-0b22-4c87-b730-6f79a522ec0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea075ef3-3a53-494f-99ef-c52465337994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e167bc0c-b8f7-4d49-bcb5-09d9454c45b3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "104addee-378f-44a5-ac6b-0c542e0586f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52a1c6b2-2298-4cb3-b9cf-a88a60914dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e586c76-f53f-407e-b421-bddd937b0270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c21a6abc-ac2f-4c91-a7ab-c2a72a34eeef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170eea47-3590-45c7-8150-b213e4532784",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "412c56a6-62fa-462f-ad90-c378398f21c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0603ef05-c201-4ca0-9b01-b49275ef651f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afafb69-65b8-4c24-9d39-adfab9d6091c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b322a6f3-e40f-417e-a28a-c184115e0f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e1b63f-bdba-436a-bd50-d12d4e8bce03",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c747a3-ff2c-4de9-973d-df3ceb76d531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b6b7462-1c74-4ac2-947b-703746b05b24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50dd4f70-049c-41b5-a8dd-7ab418136356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e657bdca-48c6-4a8b-adfd-9c0289bf7423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f429469-e69c-4483-8318-278a60bd5bc8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45cdbc30-c0f9-4e64-884e-3d166b0ab879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9827518a-4d4a-4674-bfa5-309a5402cfa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30862679-67bd-4598-92e9-1476e13f5d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "003eb0c1-db46-49f1-a7cb-e61ae6324b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f59e3910-b663-4431-a48b-b2c9cdb035e3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd60035e-0cf8-466a-a1df-33b6a7fcd12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6523e027-4d5f-4dd8-8063-8b2099d72cfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bcd6039-a385-49f3-b40c-f771b3794663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2abce19-e350-4995-9dfb-0e6ecd6767a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f82709-aab3-42d4-8ffa-0a8111308e78",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df6ae901-2acc-4456-af66-964c206e3b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "499b4571-b1d6-4c04-afe6-9fd66d8aa265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667de1db-ddf1-4edc-b83f-629c0d0e41bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7512fa9-3cba-4ac0-8c83-3038c009d1ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d92808-6e8d-4f03-a525-dc2355b8876a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "287d5d6c-f4c6-4214-9aa2-1c445496da01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1d41c43-15de-4ad9-9cb9-4892e05b448b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51e7fc7-47b7-47d9-afb7-9efaacf3f361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da6797da-4767-41bd-8509-bcca9f55ce4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2114092b-ae43-4d89-a80c-0da0e9fbdafc",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "853fbe37-0b1d-40e7-9dc2-8af8f98d90fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a50c4db7-87e2-4cb2-ba68-e3319edce09d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c79940-7ea5-4327-b4f2-c8504b003a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f21aa939-f209-481f-9700-828156ee5fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5274f1b-e709-4ea2-87d7-f15de60aefa0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "759b3b54-e24f-4dfa-a400-85b154ace31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "431b96ed-c5d8-4f82-a03c-f8902dc8f492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153a04cd-668e-4f50-b4f7-06a3d91d49ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "25415ea2-9945-4119-97e2-514bcf61f5d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c2c163-0b9f-45f6-b874-ce4bb91f3b2b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6544a68e-ef2c-4fd4-b4d2-5ba71d0b5eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc56b655-e5ac-4640-b2cd-a82b4cc47ace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48783ba7-66ee-48ff-ab8b-3194c1c39c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "691c3a0a-3965-4b9b-aced-939f2d158b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ecd9dc-ff01-4e93-aff3-eeefb36c26d9",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa5b1a5-d9be-4a53-9de5-acb6c8c02eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e87bcdc-7c75-4949-a355-18c023953be0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4efaf8ce-c7bd-4582-b7ed-5b130c0bb98d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f87ff9f5-0135-4a60-93be-0df0f17105ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46bfdd54-2e2a-4d3c-b9ad-fc047b7375ee",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b677eab-227f-455c-9666-b4a2b5bd5c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6525e039-5c39-4991-8ac5-f2adb4d95ebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8162639-74da-4e1f-9bcd-46a88afee7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1e5f930-835f-4b82-b639-4da3f1cf0b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6596c04-e0fa-4a16-81f6-c184ea59b803",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "917ea745-bed7-41f9-92df-f52e7216ae8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f035e05-0bfc-49da-8b9a-ea16c85d692b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb1e1e1-c835-4688-9a61-0f3d31a5810a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e33095c-2936-427e-8d16-4f84d7cb0bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60bcea91-5be0-4639-a50d-b9126a5795f2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe56a1be-50ab-4de9-92f4-035441780ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "145f86e4-03d9-4cde-b840-bff925a7c8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471eb098-5294-4c88-812c-7fd056dc28aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a7daaf-c29c-40ce-81a0-ddda5f353790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1171aa17-41fe-40c8-8194-996877808273",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6943b8a-7bfc-4033-b1bf-199b25830e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "365ea695-d395-4c90-ae8f-6f8c83f7f09a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14dbc02-10cc-4cfb-843b-fd6ac5d36253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "de898957-07eb-4337-a8ed-9fea939a4e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a02f647-d118-48d8-a5b0-bf996da388be",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4720ba-b764-4801-9b24-e5613cf8a653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c5ff093-6ab8-44e2-9bb8-02fb71437280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e6fcf9-03a8-4585-90c1-6423d8048ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5524d65c-704b-4e78-9efd-f9e8b35681d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff4b06b-1ce7-4d0e-9a5d-5454de66d93e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d24c0d-b794-481e-9e1b-7051093a48ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea94fc4f-c243-4b06-a4c5-977c7cda4259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87385ae0-07ce-419f-a1cd-ce3f74a51727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23ed31df-4599-4097-bf5c-a8e2adcd2612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4eed707-b761-4873-a5e2-f5fc0fa17343",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1834294-3bc1-4946-9410-4c8dcbb8a473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d37cbd5e-5b0f-4a5a-b8b9-63f321fc8ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc47d2a-c07f-4abf-8be8-b9288498def6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0767309-af2b-4504-a3ca-eaf85448f347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e101c57-3915-47e9-b29d-ef0b6d4555e6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b609f5c-5359-4a6b-ae36-12052bba073d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd39cf5f-283f-4841-98f5-e6a6ce7fe550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7867d2d-f84a-4c0d-b499-7ebdf38535bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c477bab7-0cb2-4462-a544-a43ca8ec3660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af026dfe-d845-46fa-bebe-a6b043852c96",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f212a8b0-4bfc-4b41-940c-1dbfbeec0604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "174f5b80-a7fb-40ef-813a-9ae87005a467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba12d77-c0e6-400b-ac43-e5aab48c7056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cd07b84e-1d49-4fe9-82c3-bd966b435c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3cee60d-974f-4a24-9a10-109225146904",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2a9c2b-ad62-4144-a218-a28d0ca29a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55485992-2ab6-4deb-b186-05ca0e6182b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc96364b-4796-4191-a065-ddc1b9549543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b1f4efa-1b3d-4616-b782-8036235313cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e455a4-4504-4553-9ff1-1fc8d0982ac4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e07619a-86f2-419d-b7b9-3a92a01764df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2367c82c-dc7b-4b35-b3ae-1725e6df3da0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b7d7dd-af00-4007-bfb9-adebc30011d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "065c3902-5b62-47e8-b885-eb90f97b1c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34315510-3220-49d7-96de-fda45d8147a5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a6ff233-3471-4e2b-b6e9-df35bbbea244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab5382c-d7c6-4783-9d51-6f3772852976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65efae3-328f-4155-ae58-387ef754e4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bedb4f09-54a1-4ae6-8921-122c38181bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5142ad87-cff3-49ad-a36a-6fe5d8f790bc",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a04775e-4551-4b7a-915d-183eaf853ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db48a929-b3bc-4282-bd5d-c6954adbc109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0ca452-0749-4d8a-bad4-2b290f5c7e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e81ac61-cbe3-43ac-b4b1-f43a8e4449e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72f0e7f-dad9-42fc-970a-e8e55b93aafe",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e144a0-13ff-486d-9ca6-a5a047c54a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a14c98-d7c2-4f42-b086-6cde57aa063e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26a0f7d-f21c-42dc-bb10-75ce18c5783d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b01091d-35f1-4340-9627-79f8e63f4944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bf1635-3ada-48e5-b6db-afd7f17fae9e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f55da2-aea3-444f-808a-6f759987125f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5bb4207-334a-4f22-9941-cbb0df53622d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651604b4-7c65-451c-ae5f-42f5dd2ac3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2feca36-9841-429a-9e0e-2f5a4ac65e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23830e21-79fc-4da3-96bf-fbd09aa3a153",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4bb033d-16de-49d5-a216-9aa38e886ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c53947fe-9418-4faa-b18b-355c8be5a87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7646a8-aa72-4e92-93a2-3b6b395455be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "da107922-8ff3-4d7e-bec0-0edbcce3ab47"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "90c53d59-bebc-4c76-8c3a-e66a38339979",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4f5fdb4d-09ab-47f0-b014-6253931a6e96",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd52cdca-a938-4e2d-916d-49ca5f4d0c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "55080d10-1047-4f82-999c-366e9ce61d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82720f2f-2edd-4ddf-a89a-5f4d3207f150",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9bef6adb-bfe8-42a1-89ab-d7640ead5bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e23304-f48f-43e9-bb51-ea19076b00f4",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8efbce0-5bfa-4692-a5da-e8d48cbb1c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0c46a22-c3e8-4d57-aa1c-95b285d43be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168404ac-f9d5-4916-871d-0e3a8933b23d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c054218-15aa-4f4d-b462-c490709ece57"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c289a15-e8be-4b6f-adab-0e9a61c08b47",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fb2bf7f-4cd2-4462-9a51-ae95a64b1917"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5872e111-9bcb-4127-9d57-31601aefed5b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe5afc14-b37e-429c-a07a-50a5aa78d01b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b363afc8-c6fb-4062-a7cd-fdd801a64ae1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8a33d93b-97a5-46f6-ba5e-a2746850baf9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "46d52b5b-d254-4147-961a-7cc7c347fa23",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "61a86dc3-e19d-414a-9e7c-bd493a82c615"
                }
              }
            ]
          },
          {
            "id": "4ba66107-2bc1-4de9-a754-b4962be81417",
            "name": "Positive Testing",
            "item": [
              {
                "id": "42ce0ad7-c7e9-4dd0-be0d-201e7c6a16d2",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8dd1136f-16d3-496b-bc6a-0c87a09e680b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bfcd6995-1dac-4f29-9d50-f70ea9b5cd61"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d3dfe6c-1a8e-44e3-8715-625a1daed3bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "eef3dd41-6b13-4c2a-b0ca-42383b33732a"
                    }
                  }
                ]
              },
              {
                "id": "e8b31a70-3e2c-4f89-9076-1dac7d4993ef",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f702bff-f72d-40de-893c-e82b23534c47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "733758bf-eaec-47e9-a604-83941ee083b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4fb7931d-1d16-4637-9ff8-08583cf7a2ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1b7a8ae5-c676-4dac-b222-325bab8a29d8"
                    }
                  }
                ]
              },
              {
                "id": "3ec0300c-a20e-4cd2-80b1-4662b63fd5d8",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe389639-282e-4969-abab-9f71c87cf4b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "44924d59-deb1-425d-8c2c-ae259b39c51f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18cc3d2c-9a5a-4f89-8ced-7801c8cdef93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "448e1413-8045-4092-be31-c75f89bd7c37"
                    }
                  }
                ]
              },
              {
                "id": "1bb21e3b-8f6e-4041-ba46-f0ddd9b31f4d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1729a70-bb5e-4582-97e9-83152afd02cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d784311-3f67-42ee-b25f-fbfd34d18268"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58f5e375-c3c3-4239-ad51-2a24f78e8ada",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "70f4335b-6965-47b3-8666-a4c55dd52ef5"
                    }
                  }
                ]
              },
              {
                "id": "3eef5f43-8225-40e1-b30e-dc096567578b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7fd16a5-b3d9-4dbf-bba8-9b18671e3346",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b2386706-0069-4418-8b47-76490f45fec3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df0953c2-4789-4968-bfda-423f616c8f2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ea3defdc-702c-4fde-90e4-6f539cad3278"
                    }
                  }
                ]
              },
              {
                "id": "2386dc70-6db5-4b08-bab2-8c0ec40079e4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4b548c1-93db-4fda-a7d8-74f5a38f0080",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ae1dee1d-50a5-4a3f-a0ea-b90bc7159e05"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d84b31ec-711c-42b1-876f-4835b530f95e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "63aae202-40ca-45ad-ad15-3cc463d5f1fc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fe284417-6441-4f5a-a113-9651f88662b9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "66539a48-f8f0-4425-8dbe-0bc72ac92e5c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6dbb16a3-f458-46a2-915d-18ff4200498c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "da54c1c4-2020-4bd1-b472-8871527ff0c2"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2603f9c8-2a48-4674-8929-d9d096f332dd",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0413e326-5751-410a-bf1a-5f493b9fef57"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9ce5fb0-d043-4d4f-8548-5962da8e4364",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "63f40131-6333-46d7-bd10-c376baee5b9e"
            }
          }
        ]
      },
      {
        "id": "99704166-63bb-4109-ad29-53f6cb8e158a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5c16d599-9ea2-49d7-8366-0d59b6e781ce",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7d5e1138-5dde-4b1a-b77e-20a6013561ff",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e2aeefd0-0e02-440d-9eaf-c99d7b8af10b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0f87df-ea48-4c54-946f-52c30e9d061b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38868dbe-7228-4cb0-b2c0-0b3881438ca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fdf73e2-c7c2-43b0-abe3-8c6a72c7af7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "22b9db08-1110-49d0-9f15-42bfc92f1b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640ec79e-fa69-484a-985f-42a6408ad9d8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b756f02c-7ba1-4aff-bbea-bf4762cbed59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "544e6c53-772a-4ad6-9a38-b1b8a4233bf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d30bcef-3857-41ff-8e64-1a6973186dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0132caa5-9cdd-4ea8-85e0-41ce4fd3feae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9080fa3f-4db6-4a5a-837f-451bde5abacd",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f8c719-a245-4a74-9877-69868a7b3ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0cff499-249d-46e6-94cb-47cee58c0201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdeccb11-3fa5-4d43-ac28-b462f1fbcf00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c719277-7e3d-40fd-b63d-658efa15d761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd64bd43-a594-42bb-96de-1bfb57cef675",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e2b46d-e8eb-4f31-999b-32c0ed3a4398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ae15a30-c3d2-4d9d-8533-6d244362e52e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9d8b62-8767-4b90-b932-afd4b1045cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc36165f-e223-437c-a5f5-bf5c1443870c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b97574d3-19e2-4c4f-9735-728368f0ec78",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52dbfe5c-9331-4bf6-97ff-1a5cc5e5b3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31444e90-c195-4d20-87b1-2e96eebbea7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b8d807-f5c1-48b4-a51b-d8298c8f2ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fae3513-58c7-4e79-8aa0-0c9541ac2ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e47256fa-174f-4c25-87d6-ef7af0772b42",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87a36d5-3788-4256-b1cb-445f461fb4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c941f3d6-19e3-4ff4-9b00-b803f1fb12eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66dca406-9217-42fa-a535-e258a09f5d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "96de2550-cb1b-4645-b7be-8085caebe7db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2353ca-9a4e-48ee-a0a8-427bcda2e82e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c5e2fd-4c30-43f0-af4a-6c3a3f1e9448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c12914a2-66bf-444c-84ac-2cd8f6d5e4a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10789e7-ac49-41ea-b9df-aa0f4996f162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "226552ee-22d3-460a-a6f0-fa5dfd404ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01333ba-908e-43b2-8b1c-cbee586124ca",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b806ef-062d-4555-9dad-591543636a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36c88aec-751a-4586-b4fe-c4f2bcdbce92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981504a0-c53d-4207-8a79-5fc16a5a0f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4005fc46-c93e-4e55-9d67-83d3de8858fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc91d23-0ca5-4d45-985b-4832e5472fc6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91886d50-1826-4ce9-ba62-d13eaf8ec2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dbd7c6e-8b27-4209-a591-480da26ee6ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f232798-daaf-47a8-ae7d-be91cdd27267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5acfaa9-0d81-4888-8510-3e0932e999ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba9bb8d-513d-4fdf-9f4d-74221e1152ff",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819565e5-4294-45cc-b5a6-d10a3212b58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98fc6f72-aea7-42ca-a30a-dff862ff06cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12c2714-de96-43df-b78d-32a3cb022c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "316aa7b4-abe6-472d-8cd7-6b219224c801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c3a71c-406d-49d2-8987-aa425d518914",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e3feb1-c959-4176-97a9-8a5d361bf18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bac5919-8e5a-493b-8443-85f35af0eb12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe86870-49e8-4134-8d23-0f5870496d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3a709883-32f5-41d0-9c1e-afe89c575591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06633b3-00e2-40d3-9152-ed935948427b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b2d6bd-a5bb-469b-90de-928865b4281a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "372c5da0-a36f-47b5-9f90-0459559c69b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13bc560f-5a9f-4fde-b294-ca86638a2a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "74f08166-2089-4073-a2dc-f6645091081f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487161d0-3d19-4f3c-aebf-c3e28ab0417e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be83d57-a73e-46af-b02b-2fb9448a2018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b67189cc-dded-4ba1-adf6-36a045619465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06624d4-076a-4c28-adca-436926603a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "36b23ecb-e7cb-43fb-a9c1-79d0452222b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1757ed8-ecc4-4749-bd36-4ec0fef32072",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e33d594-3c1c-4c08-aea2-07144314ca8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca5f182-4eef-4599-a9d1-b89ef0a2e5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc63085b-cfec-4f38-a37b-4ab4eb197565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b2f80e-e583-4c53-8eed-9fbf73aa683d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f2d35a-a385-421b-8d39-1b4843579dbb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81ced6f-2b99-4745-88ca-fa30eed7ecb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08eb9e89-57ae-489e-8816-d83c9579417c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c9c357-aeb1-472c-ab11-8f99c28ffbae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c268392-fcf5-433b-ad22-b98f1eeda2ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dacca73-7491-4789-a2b7-575f2c2975f1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18804e39-38e9-4da5-bf60-645f038511f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59ecf0fd-62be-4a93-ae74-e97c53b8d932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113ffc73-7211-4a09-bf74-60f94b1bc3a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d577192f-9063-4f24-a2ca-87d5d5409ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e5bd78-16b2-46f1-97f9-e0bb1cc75dde",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a45fdc-361b-46eb-9221-f3764d9606c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "159d24f9-26a0-493a-8b7a-4ccdd898615e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa8d0484-2ed6-45f6-a820-b22d86c48d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d40af8a9-d023-43fb-8598-0dc8aed5c797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0d3022-0b86-44b1-8cea-4f67525e84aa",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7c2516-6786-45dc-a81d-b22820946861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b4430e1-a00d-4114-9669-bd75ba4a06ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54a70ba-30cf-4b33-be58-3fbfb04d8071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "46336a89-1194-4d85-86a4-81868d1beb9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a3d910-e556-4829-b6b3-9297893b5856",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eef005c-8f93-459a-b4ff-801c87fa5c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b37e60e-8f7d-445c-aa9e-8c20a3019361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "550e7e61-aa10-48c9-8ff8-a753618b7028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c9107a2-4b4e-4800-9f23-fc1f29324c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a0e49a0-4191-4e19-a61a-814346191a96",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb05841-8be0-4d51-acbe-402f22eae7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09e15523-f112-4be8-822b-636a10510da5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae14c66e-f9c9-40a5-8cf1-072ff5c3645d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "596d9b91-599d-4c63-bd47-b1e0e20b234f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b0f017-5c90-4269-bde3-09dde1640398",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ff0179-5869-4ddd-9d74-489d549ad9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77eee4ff-b0d9-47ea-97c1-afaa40e8ee50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e704ecd9-3fe3-4804-8ca4-4b0b24cda617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3feccb56-f0a1-431c-ae3e-0f57dbf04d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d359ab-b028-4563-9f57-2200a9a84cf7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "807ad54d-cb0d-4934-9f7b-1959182373c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a4e2c13-b8f6-44ad-8173-c82edb0a5b0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e718d0-48ee-4e4d-b694-668584cd794e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d710f212-a9fa-412c-8951-347dd1c3e9f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d64393-1df4-4921-969f-ada2ac5cae6b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0e0694d-0ac8-40a5-a2c2-571dc28ea1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85fe39e3-6ae1-4297-a61c-5f505ca09f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53cb9758-5a9c-4215-b554-3b2c0a86da41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b90d1325-d389-4a28-85dc-f4ce9c05627f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8219fa73-1192-4fda-aebc-b3a91de5bcfa",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3011b18-579e-4dc3-8a37-ada6d6b6b9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8960812d-6ee4-4944-93b1-999220f02b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57cef137-29bd-44c7-bacc-fcf431ce24c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3de4cf14-80ed-4280-982b-35ad3a517645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78bbfab6-1769-4128-a7d2-d0dd74dd8f06",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e4015a-f565-4301-9fec-dbd2fbd6e785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b386658d-b224-4b9e-8620-8515b233aae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015764f8-eefe-4f79-a252-7a7cc1e8dfce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "944edd53-2ed0-435c-8e91-4aef38df4df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc11ad5f-6a65-4fb6-973d-4912d30aaa16",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6d1793-4368-4a9e-b094-42d14d253e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea70e204-d077-453b-bbd5-7a7270723dd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf470fb-b6f0-4a9e-bd6c-2c1a11597176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e88950c6-d7da-4320-b20f-28141ce99ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837c76fa-c172-4cbb-9147-a0a4eaacc6bc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a92570b3-3dbb-4b2d-adb6-c534f2163823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9cf4c29-2d62-4443-a273-a3085bf46316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493cb57b-7b52-4a8f-bf7b-8074c8a728db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6533cae1-815d-407a-8271-ba8a3649f305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baef4e1e-b56c-45f7-bb34-b456759fc5cb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de81c076-ba2a-417b-8419-e70957f0069d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf79e4a-1361-40eb-b635-6d5e9b5be210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc316dfe-23ee-4b79-a47b-66ee5edd1433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5412841-ec37-4de5-9dff-3de66e81f603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94504440-5333-45b7-adee-7984c4be081d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc7a892-98c1-45b2-a1f8-9aebcf1b62d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18d12c70-125d-4d97-b2e1-a18bdf57b23a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b407d03-71ab-4fc7-841c-008e7040d6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5819cee0-f4f6-4398-8e46-aafa0d873bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1fe3c47-e0c2-4090-b414-4820cc421f55",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c8b565-ae00-4c25-83de-01cbbbcefbc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59be2a8a-8162-471e-9334-fec85e70f302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594bfbdc-c0cc-4b71-905f-55d848a97214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d787abee-147a-4fe5-9050-f4a7aee18870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd14496-ba07-4499-9e71-cc39fd8a44f8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ff88e3-fad9-4017-942d-fbc6e70b9503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f4216e2-36f6-47d5-bedf-d5bd0ec76b9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8afb03-09cd-4a99-a6d6-d932f3f000d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71a2c7cd-10c1-499e-a4e1-4ff52078f844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25165842-5f87-4b29-8373-3e53a73d2389",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cbdea61-9ca6-4d5e-8364-a5ca084ba4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c24e6bde-90db-40eb-be73-1d59a82f5017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee9cb6d-6dd4-4c62-8f55-4e9db2fa065b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e39c333-aa69-42e4-9bc4-623766927d10"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "58fb995b-cb66-48c6-aebb-97b9056fd461",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f6d0c0e3-7728-4e37-ae2b-c80ce111882d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a96d6a-1c13-4ee5-9674-061bece2c038",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "157fc67b-ae51-4262-b31d-5b96bced281a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c343c201-9510-42ae-a8d6-0039e51d8a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1699348b-6247-4d9c-b215-048443ab67bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb67adb-4e20-47b4-823d-6837f505e0f2",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122e502c-79fc-4e25-8625-a38160a7ed38",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1c1eaccc-58bc-4f16-a9ce-6663406436a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e7448e-63e4-4c07-a1b8-708b15427dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f2ce1eb-dfc0-4100-bd49-aeca1fe6566c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a14ff06-a034-40d7-ad7b-cae940d7d7e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77a54044-cfd3-4144-bc7f-5e64be9ac30c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f14009e-fac7-451c-b2b1-0e20b60c5690",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bbedc0e5-4dd2-46ed-a740-d287148255c2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5fb10a6-6bbf-4ebf-aa61-57fa31fbbd16",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "947917a4-dc83-49af-8a3e-395037a77085"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "476f5546-9269-44b0-b2ea-ec6165383bf1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "05e6c2f4-b203-47a8-ac77-98c9853f4d33"
            }
          }
        ]
      },
      {
        "id": "c306afba-6f38-47a3-8086-bd91fc7ca835",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "36930f8c-7d5e-4371-82ff-53c607ea7c4a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6c36ba11-d84d-49fc-8cd5-5623598f9f73",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4f3d968a-660c-416b-adee-66077c12817f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "513bd763-b532-418a-be57-30b4edc0de86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd107e8b-6b28-4f0f-bdee-d3af14317c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270de16d-b405-492c-ae61-a883da34dd00",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a22a565-a745-4293-b878-85ab9204d793",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38ff0435-0007-4aff-8641-2d556f5d3314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ecfbc3d-9a84-4b3d-a34c-68317ab0b82b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3e7648-b5a3-4b0d-8f6a-641ffe4205ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "054b0f15-bbc8-4f4c-aca5-c80a2bcb0f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e824445-d208-4c82-95c0-f7c6ab5cea77",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad5fae0-769d-4581-8cda-398f5e468f93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a150e3e-6829-4022-8d85-c76e1b26b498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91a4a01-9852-4b46-99b0-a87bcff370d6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4d8400-d911-4018-9466-70f259443a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba5d9c8a-d342-4a5e-9375-def85bb42c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb43b2bf-31c4-4dfb-9788-d1a5ef8db20a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38bdd9fe-7c76-4d34-bd2c-0d805fb246d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28454ebc-ccdf-41cc-87aa-3f002cba3cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0925a0-597d-4606-b300-2260ef0019ee",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b5ee31-3b56-4980-87be-948c7f53f5eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b39548e1-6ab8-4a43-a23c-193d0549f279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee360a91-cfdb-40eb-86ba-8d081c7e96fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afc9af45-3a0f-4ac4-ac66-d8ecdd5614bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c50c6ad-59c4-4475-98ec-49246c653eb8",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ccea186-9f84-4d4e-a85b-ed071194b1b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56005dc7-d53d-4e9a-8313-edb010291069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c48f2f-5777-490b-ba6e-6d5beccda99d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12a90055-50de-4a10-a307-a3371ebfd78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d0a9e9c-6ce3-433a-976a-fcc4002a3d8e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8301411-7648-491a-a2f8-53187956f1df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14b7977c-b82d-4578-9251-bee7dbe90420"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecf0856-c0b3-4d6b-8897-3b51237dd043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5806765f-f147-48d5-8276-88ed08038548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d6c765-6f98-453e-9df2-8d5a3dede596",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d0086c4-3fa7-41e7-be0c-4bfc85b40f14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8c0418f-9c53-4bbb-958a-cb196afa6c38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b39dad-f447-41ef-8f02-fea36ce72eb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "700a701c-b141-45a1-9f6a-95654acf31d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642f0973-deee-4584-beed-7d225c1a12f2",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa19ca7d-9ada-4841-b0e8-b8fc5a94e6ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aaa33b5-0498-4f02-b7e3-be225cb148e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa66cee-5ed0-47d1-b33c-5aaeed665a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1c0c4aa-c682-4bd6-8724-aad06511d1b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb88a94a-c605-4698-bbb2-2ff5589fba42",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09cb4641-ce5e-4881-85ba-4cf373f9a3a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c5fb933-0d66-4c19-9451-0f3be98db181"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ed02e2-017e-4910-a83b-785d0adde2f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2efc8dfe-1793-4b54-b580-bebfde26c641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e49c3a89-2bb3-4e1a-a18d-476f8df20cf7",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3bf86b-48dd-4ba5-96c7-09013a442533",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f870f380-9e73-4b96-b269-dcbeb692fac3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0257f90f-e002-4920-bbe3-9ce0a3c5d814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a7f0b17-5395-430b-b5ef-d1a1ab958f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d755be-6b23-4dc2-be9a-476a2e6e2924",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97fb9b41-caa8-47d7-9e49-10c06680e417",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d4ca417-a4f8-4b81-9457-861d07b65af1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8658bc38-7ef5-473a-bef5-79c892e2d0d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d407d2a-2bb0-47c0-8669-02dc88efc4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4582e0ee-4f2d-4865-8c0b-597e84308573",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739d5d6f-7a79-431f-8e1c-80a11a6ed687",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98668fd6-9fb3-4bb6-9e36-ba4c1ad13fda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0e82fa-3697-4203-9f4c-1d928da1b396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ed01b4-91a2-433c-9350-feed29c61e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f3c7f8-64d2-4feb-a0f4-5e209858f1ec",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5af013d-9f74-409f-8029-22738ed8e7f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c24493d-9053-4be2-950c-d55c9eda1381"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf2d55f-7442-41d8-8b9c-a5d2536f3553",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c579b732-eec3-4276-a31a-a67395842da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462ed73c-6c50-41ca-b904-256ea46a4344",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f719cae-7b8a-4d07-9806-16f98942faea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e77fac47-6d3f-4d0e-8651-fbb8c97983a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f793244-6c11-42c8-83ab-69ec098c0b03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed4f0f98-102b-47c8-8221-bd27f8ff3ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8927eb27-f2d7-4b12-a7d0-0d5c2716c61c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3e77a3-dc8b-43d0-9652-5cc12d191dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "603ac2f2-3306-4832-a1a9-04e363b7d05c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd44763c-d129-4314-9080-c47fa3cfe344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4382a93e-e5f1-498e-bbca-c11e5ac670aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f43d49-9294-4952-bcb2-be7746a34070",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d78e51-e6ed-47f6-a537-ca3c9c1d84f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf2e8ad9-9e6d-4673-a433-8002137b895b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "695c09d1-0abf-4abe-a2dd-da4719013c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "245c46dd-522e-4f22-94c4-2b5c2c25ba44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f7f769-5d6d-4992-a1e8-1b9798a9c8db",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a58ce24-5733-453f-a609-e5e491476f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee5e6a7b-0886-4af6-8782-883fa4933c6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a125c2-73f5-48fa-93d0-ee475332fce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fbf2970-2f03-4ce0-9808-4293c2852a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e5e721-1364-4c0b-b180-b197f407a827",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab701503-d102-4a70-9e24-002afa20d6d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74d888e3-bee3-4a61-b7a4-9eea87cfd95c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f27f6b3-5994-4597-bad4-323623431d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2bc7c8d-da82-479e-923b-4826855767a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af4f37a-b660-4f2e-9aa0-177a4c7df20d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d83e49-0355-4335-88a2-df3674ca2428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af4af1fe-2c6c-4125-b031-2abea9883045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "053435be-17f8-4f35-86a8-12ba29c61676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "566ff628-70b8-41a6-be22-e2f3c8e30eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf75c689-95ad-4d3a-b548-f0a86c2e20ae",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e15922a-89d7-4783-b9b8-8cd89b2644eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6681d544-a076-4dd3-86fc-189e28cc56e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f76690d-ff93-4094-bdd6-0746c7a5390f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f125b95-4f73-4436-93ad-0a409b01dc8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3318ab-f6f8-4be2-80ca-acd7aed422f8",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "860300ce-91fb-45d0-ab02-fdfbd12c3afa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7209746a-2178-4f21-a4a0-8c20b9a4c9fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0b90e4-9fa8-4de8-9b98-91cc3f19158f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6caafd1c-0efb-44d3-a3d4-0bdcdfee8bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c23b53a3-d735-4b7b-8839-33eac75a52dd",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c65b7a1-933d-4f3d-8c16-cbd7bb1e5f11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ce500ac-6f29-453b-8572-5625f48f2c08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f7455d-b531-4cc6-afc3-d4d5e4523758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56c48d9b-b235-4908-a693-556a3c630780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef16c22-0eec-41e6-a6e6-d8b88569120f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7c8fc7-6797-4bc7-bfb4-9d5680985a08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a652821-a185-4441-a707-c4f30b5fdcff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "372ccb2e-8781-47da-bb64-83e46ea7c826",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9ab9030-6878-4cb9-805e-179796bb5b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab451c1d-7995-4d0a-bac5-6030086df5d1",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ddf331-e71d-45d9-8486-c89140965cb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "379684b4-8d7b-42e4-b355-de08708ba2e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "297b1a6b-d4c4-439d-9ffd-473060bdffc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf0c721-dcd9-4e30-afcf-88494eac64c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939b4830-0845-43bd-97fe-51c84f184df8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4de17e8-3595-4081-a642-c8a5c884a017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9439a000-4040-465d-942d-4a1a259d072a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72809aea-e98e-4753-b0c9-32a343c212cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "528875f6-d85d-4386-9847-67406a737b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8795bccf-47af-4268-9266-c6ee2deb449b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b402ef9-0aa5-4913-ba2c-a919fec7c7ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ccbdf12-34cf-4f06-a4f4-c9894dfbe09d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3e3a2a-ef3e-4b0b-a5d8-2d6724c2c386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b16d7a4-015b-47f3-9495-d891f22690c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98015cb-7a67-4dd0-8d46-9ac059053d2e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b81873c-e0e3-4142-b281-ccb7f3685354",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ef5d1e2-51d5-4b30-9d24-e43b7732e6e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac00f5b8-f646-4877-955a-655403868f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5c8eb1b-9fae-4a95-97e4-bb57d39f0af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c7961f-6d30-419a-9542-17202c2450fb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb686a8c-1639-4ce9-874f-95ff46922bb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cd4c6ea-9413-4d84-abc7-d0ff6b5d68d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "915190a3-0be3-48f5-b7ea-97eb1baf19c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2801b950-b728-49d4-9d0d-1e7333b40bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3188c119-db1b-4667-bc56-0e5f00cf3074",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446bedd5-3530-4642-b8dc-0cd7f44748c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "361c44b8-e6d5-47e2-8510-1ab4ba0e130e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e632399-09ff-4460-a664-007b2efcad40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd866509-8656-465c-adb6-d3b68e8183db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd582edd-78dc-4004-8471-8a8b15a32167",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1678ba80-0621-49f5-90a0-823d168a3102",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ddde63f-c1b3-4dee-9d34-3e1de208963b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54066cec-8ea2-4a12-9a83-9286c281959c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb8560af-ab6a-4f09-9e06-50bfb41bf9ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fb3d51-fe86-4dd2-80c7-89b4b07d6007",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb87d70-a001-4566-af83-ee09e57e6c9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e53b267-082e-4c9f-a3bd-3bbe8a8d9c14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78515d2b-d942-43b5-a026-07bbf3db0245",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "054c6088-daf8-428b-9a2e-b5015b1ea696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37fd7da6-7288-4660-9251-e2ff63b5e285",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58efc1f1-8cbb-4b3b-ac4b-2863c72288d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0daf0421-9484-42f0-8a74-84eb0a5b7f9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1684f27-db51-49a5-a621-e2cdd67f8658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36e55c9e-cdd9-4bb2-bbcc-d5d52caa8af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea8d11b-e5f0-4090-87b3-15cf537183b6",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d383de89-98a3-4f52-9398-a3086c9d58f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3232dae8-548e-4dbe-90c3-63e10c773032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec5a936-45ed-415f-800c-984df793184e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11528e4c-9caf-4324-9c23-ec8a39620e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486adb7c-93fb-4de3-aa8c-69c0235569f6",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c709dc1a-aded-417a-bcc2-67a21f5900e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b97327-b4b6-4bc3-9407-61ea9e6c5e39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa2e274-7be7-4dd1-8390-2c4a34784d03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56c8d6f7-3bf8-4e2a-b3bb-2b1fbb96d03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e95c27-cb8e-4ff6-a54d-ac0c0e0a7d20",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed25ee4-2cd8-453e-a1c1-433ad85ae92c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d24affd-9a23-4af1-809f-7f1506f78829"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3315292f-c095-42e5-83ca-0c0af5a9b115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65cd87d7-5bde-4d70-975f-f877e62eb5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f274e8-490e-4fdb-a9ff-2c3fde38bec8",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc27f9d9-efa3-402c-b9e7-31822a936e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c249c8d-e15d-4010-a6fc-78f05256a445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9c7471-d312-4741-b8a4-5719abdfe486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "461adfe4-afe7-4187-8685-6ddc42db7f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3d57991-577d-4625-baa6-1e183c9a805f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620ade9e-d47f-4c6e-8ed1-8e8e5447bc54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f51f9a6-de13-440f-81d0-39673b259cc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b7efd2-1ec9-4036-9491-486f11f34059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fe54f32-c5bf-4246-b878-6a064e81266a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b98dae-bcbd-40aa-8d77-2782f5d1c932",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516a7ace-d5e4-4b73-a531-432d091ff9ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9013fcb-90d1-46b5-856c-d46eb42ac5a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46335aad-5f74-46e5-9518-3fc10c729c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c91c6057-e2f7-4544-a742-1a20f2a84a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeec82ac-1b10-48f7-858d-e85e2478761c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35fa282d-ac06-4a79-9d95-0b15f1f3a8c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e83cf63-be5a-4bc1-b7b7-5c509a602935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca41689e-c750-46a2-917d-b5cb50d32812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "716665f1-7c48-43b6-b0ac-e464d03962fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcdc799f-5257-4c15-81ab-3e72824deb21",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9293db5c-3957-4bf9-bfd3-1c83cf8e0b38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dc12801-1821-42bf-8dfa-042458c06117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab4281f-3cbd-46dd-a777-8f68b81dbb22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1612fcb7-32d0-44af-8cff-ba3a89f3eb36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89559f53-9443-41e3-b986-b4990939e737",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977abbab-1e48-4772-aa41-89720bc95050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23497771-34da-4a8f-986f-6461531663e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb813a0-d17e-488b-b808-b2915b3fc333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ea2f3b8-fd95-44de-b753-96cb9cede33d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1979aecc-6110-48a3-be85-dd9b6c913929",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774fa398-94ca-491c-925a-ea00647dd130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a92e80-b291-4ab7-b952-23402e5fad02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a67df8cd-7dce-45a4-b89e-9500305c554f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b1da65f-07e1-4719-967a-a258f7d5392d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5942c4-c4bc-4e1d-a423-71dd89a53709",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e6d984-1376-489f-b6fb-62e9adce73b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b3b8a5c-9d78-4461-866d-efe26fbfa07f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f25253-bce7-4934-914f-0c019cbeacd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d77173fe-40d1-494c-9938-968dae3e97ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487408d6-e14a-4c44-99ca-978c5bb35d12",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c004fc9-193d-478b-978b-04d0b7770a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ecf207-14d8-44ca-9396-717802e4708d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e11cf9-216c-466f-8de9-e33324ffbfeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0364141-e6bf-4ab5-8373-1d08fea28834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33a04d6-be24-4dec-9e51-3d790820200e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a9a868-aa61-4e48-abe1-80d239109430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd6daf7-f856-44a5-b100-97aa3ac2d640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd5f840-4742-4355-b159-724725b97c13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469f2fc3-100a-4e4d-9f2b-a015d42f6cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f0e5b5-88eb-4bc5-a18d-bcbd7edcdadd",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93571e8c-8415-4a9f-9ebc-8ff405e8f134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "505fce81-efc6-4373-8cf4-09edc90388f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7759f6d7-e1f1-41a0-b520-e215e5b507ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5098d55e-bd7a-4875-9d8b-616d36ab3b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b333e9b-3ee8-4f92-bd5d-416a394bfe3e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45061cd3-d5fd-40a6-ae13-9bc1a6f9be18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d8321fc-5f13-4b66-a0c0-a7ddfbb41046"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "604c5b9d-bfa9-4134-8b6e-46ec24eceedf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e50f0ea-c9fe-4ebe-9d3c-f31072c0c26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bf0abd8-e0fc-47a3-acb6-c6133d60c668",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d52b25-0789-47fb-bff1-3be851f74ced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06bd0907-4301-4c4f-a1e8-df86be40f9d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46570687-86a9-401e-9996-82eafceb1990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1669d969-3345-4559-b925-c8f122bb6576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d096db0-0e92-4aee-a568-fa2fbcf80f97",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eebc6ca-2b56-4666-8611-ffa4df05ffd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e68bbc9-dcfa-4bc9-a161-5b59c080224c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a6b3e4-20f1-49d8-9356-ab43e1c713d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9271d345-57bd-42dc-81d8-980e0e08e031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4c0eb2-7eeb-4439-8ee5-9c7c66d36f73",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f59a1bdd-9128-4dec-9016-c3148f91a464",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "396b3782-077d-4c01-8d4a-66482a621a44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "189d5ea7-5e25-4953-a72f-f08bfd125843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77f1528d-7e08-441b-b9e0-6a1df42afc37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad749769-1eb9-4f0d-8817-7a98d40bc192",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9108e85-5a2a-488b-9f6f-d4f993db21ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "915dbbb5-a64b-4bb6-b724-5985443f859e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db913ac6-b987-4484-ab76-d5713e0980f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f7dd750-5133-4e03-90aa-77afc21f0dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53578b2-ad86-492e-8acb-3c62667b61a2",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db840220-8d45-439b-9246-49d52a93d15c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa9ec4c8-cf3a-4aaa-8df3-98c3a55e8ca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52ca2d3-4bfc-4fb8-a1cf-ccc5c26218a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a09e57ee-6c3f-4c6f-a068-36b5befb7f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b439a0b-f653-43df-9c2a-6bd7849e3d4d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d512eda-2f47-44f5-878f-ef003f2cd308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cfc4999-4f8b-44c9-8c6a-fc42d7f739a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5a629c-8a91-49ce-bbfe-8dffe54ff028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a48124e-5ee3-4238-94bb-4ddff7b56b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7e4a46-107c-47eb-a580-67009dbc6060",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17eeb033-af8d-4b04-a750-7aabbd87a916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42156b5e-094a-488b-a5e6-1d6e5775f441"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0db808b-f84c-47d3-a97e-c273dc28e272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e277d583-80da-4473-a55e-db3ff708469f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f59ca4-713e-4b29-8c35-9b7aeb284cb7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36abf7a5-2dfc-4c60-b2d4-708902c2936e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0abfd30-a12d-46cf-bc9f-692041fb5a18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ab978b-a693-497b-b49d-960b10a8212f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea376bff-9bb5-4d48-aff7-0afb60c9bd5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08c70f7-bcee-4d13-afa9-d1b41ca86db3",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb45574-a430-4dd5-a24c-4ec541fa9cf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe27c34-34e7-4b03-a502-af9ca6a7f7a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b349c62a-6867-434a-a342-2932e008346b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d468537-cabe-4c24-93c4-3e1c7764195d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270a46aa-3db8-4c08-8ad8-e8083b8501b4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd7fde6-1dd8-47f8-926b-46bba2a7fe9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edee4952-1327-4311-a876-b99a82e8ba59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4171b47-1a32-4606-83b5-16e2e14f6027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e077961-dd6f-4af5-a575-2404b8b3aa03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8085e271-0568-46db-b9d7-ce4708052bc9",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c35736-eadf-4bfb-aac4-2e99f66a391e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c2a1197-0637-4fe1-9f48-ac695dc74f03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d984b1-fce0-4dc0-be9e-63cf6c8b9a5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0611d5e6-b1f7-4356-bfc1-dd80ec7060e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05ba9d5-8d0a-4eb9-92e6-926f784d740c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc61b88-0747-4466-925e-f9bfb0a3c95d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "607b5a69-ea52-4d65-8e8e-c9ce5ce91087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "826b7d07-2756-4c70-a734-c8afc9597c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37472e13-6460-445d-a987-4059fdceb1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b47049-4639-455c-a764-cf6a9bcd6e21",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce15b9fb-78d5-4edd-b7c4-129f22a663c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94669e03-1387-4445-9166-f8ddb74563f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c3dc12-59cd-43c2-9d8b-be8e24f67c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f7194f8-3996-4da5-bf77-4efda2d05c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de6aef3-44d5-41d2-abc9-077c456b1d4d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d6b4aa-a85c-4252-9d44-5311fa4ce53d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0e3fadb-99d2-4fe3-97d7-fd253785872f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c43dbc-af3a-43f4-9002-b733218d35ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7738c07c-73a3-4f7f-995f-da822cd4e187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb5e34b-b5a6-447f-8d51-2d7a261d39ed",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff4f057-02e1-4801-9b57-9b8c78010b58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4e498d5-a414-4d03-b097-bfb667e0596d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82d9758-c6a6-49d9-ae72-c4a405a27981",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f74414c7-ef6f-454a-af9f-3bb43b48a081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1c0b7e-87db-44f1-8c6f-67332fef9657",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9697e5d3-f1df-41ef-a967-1d526437b57a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87827435-bb83-42ff-9920-d8f5e951e6ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c34b1c-be70-452a-a0ea-08345553131b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a9ed4a-b16f-4b19-bb27-4f048cf80336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cab3fe7-cc80-4d74-8e32-e2c52b73c63d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e6728c-be5f-4cba-8266-18310b232775",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfcf1c1f-cef6-41fc-9a3d-92cd5b7ee4ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b34f9f-996c-4b32-800e-dc8c609486b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17351640-c9c7-4d6e-807d-7e6c084b68f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebd15f9-df9f-42a1-93f9-af9a1961ef54",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aeb6892-b2b3-461a-9b72-2fbe08bd0edb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a88a4400-f3ed-4df6-bb23-e01001244380"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e851c08-989f-4543-9362-4150c82cd4ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "083d3e3c-3ddb-4b76-9483-a01d5516c32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b815aa5e-b045-4810-954a-9c312d6315ef",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f999cd9-a396-4759-89df-03f2fe76fa7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "352694ae-332f-4b2a-a2f8-8fca33d43bc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed06f59-710b-4fe1-888c-a60d020ab411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40504ac9-e963-4ecb-b97d-da19d267e423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4fd301b-a41c-4ea6-b1e1-287d725f3f13",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e573a760-9d34-4762-8007-dd0fbcbe1727",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0887d963-c6c1-4997-a6e7-70275a330238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98611e6e-89d6-432b-aeab-b1364c897b40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "421c0745-754c-4a80-908c-45ef8c5b0138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756a40fc-18a7-4273-86a1-9e4e5418b3ae",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3669e8-eef4-413b-9ce3-ab56efece37d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdc04eae-cb99-4c6c-905a-2bc7b0fb5ec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c290d062-78e3-4d1e-8977-24f00252d9c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9b038b1-71ed-4baf-9f31-16209c3f7adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759db0a0-732f-4b5d-aba8-b07984a58f9f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10001a75-e3d0-4298-9736-0bf13e0dda79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d213e42d-ee21-42fa-a0cd-7c816d04512f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07f7c9f-7c37-4039-9322-3b2a69473e66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0738d871-4491-41af-b7aa-00bd2a18dd1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019b4af2-26a1-457f-be55-6cc6959e21d0",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb36947-e63c-4ef2-9eca-ac83dea1fc04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b65a1f86-7f0b-4793-bb3d-0abca3d43cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d872da71-b4aa-4704-ad70-69b8a4612eb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1bf2327-7861-4a4a-a621-a9faa8b96a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56be1690-3c4a-443c-8ab1-9cd0870daffe",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e57a0d2-b41d-4286-b9ae-7e536d1f695b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7329594c-5adb-4765-941f-f52a6bf7143f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b71d2a-bf5b-48cd-b5bf-1b862a1ca191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e053df6-020b-4163-8876-7bc6e3f234a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a34413-fa2c-46b5-86ab-739938c93e25",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b229426-3125-4277-a87a-b65e2ec85d15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7df7c8a9-5228-4f6a-94a4-dfd4a8104e29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b11688d2-28a0-4926-baf3-6f1df1cc01c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be86b8f-8c07-41f0-8829-5c2de8414366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c2b221-76e0-4b9c-9727-7699dd0f0fb2",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef10180-7e23-4ae0-82ab-81ccd9b77c64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e782de4a-9faf-4a9c-a95b-9630160c9337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e73defe-4d7c-40da-94d6-bf6ca840b42a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f05289cd-45ce-42ce-85ff-a51367f8b9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2870cbb7-037d-4e68-b4d5-241649748774",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d443bf8e-f4fc-4392-913c-fc4d0b4ef156",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cc676c7-a37a-4b58-a75b-7eb4fde32a5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "422c8d75-0204-4733-88fc-219d51648ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcdd40e2-5aa7-4c17-acbf-876477cd988b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da35d7d7-efd5-4eb7-ae61-9792efb696c5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2667c42e-5384-4b1d-aad3-6ba640dc8f00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b334042-a6d1-4edb-8ecc-f740d98c1442"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32cc6d8-fc8f-4663-bb3b-f4a905d94c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aacc406-6dff-4371-a49b-cc01c8a31550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94148883-0bb3-40c4-bcd1-042443e2b957",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4778c063-e4ad-44e9-ba81-2a2a9d819933",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "878099a8-01f7-485f-8ac5-599fd25dedca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "846637bc-4362-4669-b1ac-d8c0fabd99f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e56aa62-3ecd-4352-addb-cafa8758947d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510fadd4-829e-498c-bdf9-73ca0b5ca897",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef85ad9-9345-44c4-a4ce-56444f28cdfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "033d4991-cc5a-408d-b622-9e97f2b7fd75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4324f988-9f39-4988-a758-68cb6b7c59ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c559a09a-051e-43c4-9d22-9c584368722a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699a3563-789d-4fe3-8a58-31a9c8eaecfc",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c6a552c-cdbc-485f-9bda-7592f6b98fb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b0373ad-3739-4d2f-a9d4-5288dc45c6bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc78a81-6c2a-40f2-b948-b4d6317cdc02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62a18ab7-5dae-486a-80cc-621e2e5cfb4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b436335-86ec-47bc-b353-616af84c9add",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c7b328-26f7-4b18-a87a-832fb27e2038",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9ff7414-445e-4069-8fc3-4d6962393bff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e345da1b-6dc2-4e47-8436-3c04455e45c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1248c28-8675-4ec4-8ec7-7b33daaccc1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d093e9ce-f62c-47a8-8642-19f13e35a328",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5304639a-77bd-40d2-9046-f901ff116719",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bafe1a1c-91cd-471a-9422-843dc55b483e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d30508-9144-49c4-aec7-2e683bfaf191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb305cfe-7a98-4e0a-9a7a-c25bec021c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d40f93-d1c3-47ae-98c2-4420d3121e53",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd1b1bc-948c-4804-844d-413aa8a7d164",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d939647d-327d-4abc-b7e3-dfe1b6cc3f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaab3aec-8fce-4eac-91c6-7d3b988ae70b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c92e1d-f4c2-4963-8195-b63e9e3e68ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a33246-b874-4145-9f19-47aabc2b8cd9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e9c426b-0625-4dd4-aa68-4c60fbd16c67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "036afaaf-5183-49b1-9c9d-b6ff84a7a580"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "602fbb21-8f69-40d0-a5ca-7d6c728a6ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8980b6a-b815-4e7e-9b18-4af8d6963733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e071006-af48-41de-833a-9cbe965377a3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024c6f64-d677-4edb-a718-1a26570c4dd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02170797-4e4c-4274-9c23-4d26f2f0455e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "519bafc5-e2ae-4dd6-a7ca-23a5a5967b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7034d03c-9298-41c6-95b9-0c6f6cf06215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1989e98-0ca5-45b1-a419-8cd5c15fec2f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b1fe310-19c8-475d-aedf-b41265c4d1e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "509e07c8-fd7e-473e-8948-8ade90e5afd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9f3481-39ba-4164-81c3-248f5efb3783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef27748-1e1b-4e5b-8b59-3f20590162b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89070129-854f-4e63-9a0d-a8ad8d9a5500",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78470f66-2318-4177-aab1-244dd325254c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87e8b700-9e1d-4c63-914b-831a1b6390e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ce52c6-95f5-4c08-bfa3-229c67360339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7154222-8776-4fe0-8431-f6a5939b6444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a81043f-170c-4129-8ccf-a2e74df782b8",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4007939-ad59-4403-b623-66cda03b42ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d05c2100-abf1-4910-9936-f36678463e2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7095703c-f0e0-4b4e-8893-4d5b904af012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d5cf0a3-a5eb-4f8a-8882-cdf8aacca5d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439d521a-e7bc-43c6-9086-bdc17d213ff8",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c01497b-068e-4e23-a43d-51ea3373ac0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8811b955-7cc4-4841-868f-24df6a56b783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98979b9e-a30f-44ff-ac1e-6eecf190d2ad",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c6f4c01-b56b-4759-aabd-2e99a3993ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3678f2-3de3-4e3a-b1dd-f198744b80c6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335a7be0-0531-470f-9e87-10482bf40f0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d16e68b5-b475-49f2-bc6b-c986145c5b27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "762dbc47-8906-47e7-adaf-066459eecf80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "383dfc31-c263-4b5c-b72c-90430a8e0930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a3d83c-c0e6-4607-a379-e370a1fe697f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ad412a-0f33-4162-86f1-541155a7fa21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8711462e-3e07-490f-8398-a8a58f5508c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8471c3d7-8258-4237-b54f-02c5798a295c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1bcc762-dbd7-457c-9176-19d58f754812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc095b7-b384-4add-b2b1-a92697c3fa25",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c019aafe-a30b-470d-800c-100546e8b68d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29061b9e-c263-4582-9e63-dff7856361fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a0d6a9-3a31-44c4-85d5-fee14a338a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a758c569-f4a3-4cd6-bbab-d9301d83ddb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a388d03e-d45f-4582-8669-48329e1f7bbc",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb062d6-3963-4605-8007-6dd34d5e5f22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d8806a6-043d-4921-a352-22e03d0b3d0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ccd015f-cbce-4c5d-a4e2-74beec6e7c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e231165-d6dc-44dc-b09e-38744b9811ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39babf3-2353-4be6-ba21-bbb04b9b537a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5487066-23be-46f4-813e-01c869261348",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6d87177-3fee-4c66-84ff-39e031f91b23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93510578-2afd-410c-b828-38415f0f4838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c752b7c-4c06-4e19-8f9f-e074d7d0bf12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4df335f-945a-4c94-b042-0629762b0a3a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d371eff8-47be-46c0-9f52-1ded706b6d0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ceacfa4-c25b-48f9-a72b-d0603f74e948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "275cc73c-95f1-4500-a759-896b22134e20",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb4bdbbd-cc1b-426a-ba7c-05467823f33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51030c9-216c-4f1c-b2a1-1c557ff71e98",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b58f1297-0607-45dd-ba6a-96ca4f25ac1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c08d58e3-b503-40ca-8fa9-d6e412e2cb4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "448384a0-631f-4dd7-8dae-64370b096294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd3bfaa7-7974-49d3-a03a-8f748b195a7f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b520e91-6733-4ea0-aaf4-9f673dfbd5ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ec7458e-f59b-4dde-8d9e-6be45937f9ca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0cab252a-124d-4de5-a89c-857e5cdea284",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c1817996-a685-4f03-beb0-ce468b4ed1b1"
                    }
                  }
                ]
              },
              {
                "id": "45ebabcd-698c-4f68-adf9-ffe5029e8d61",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b24da33e-7340-4663-ba86-22462b598136",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e0722b-3d8d-450a-a913-cc69701dccb2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "bcfb32a6-7f75-4ef0-9f7c-b152087684e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ae04bc-21fb-4f10-ad7b-980a121ffdc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83a9af4d-2a40-488e-9f55-6c75a4954acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05b06a3-42a7-4b94-b67c-f10edea5f593",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604fea90-18fc-4541-86fa-657eb854a4c5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4c4567bf-0f1f-4fb7-ac68-ea006caf71b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bccecd5b-dda4-407a-ab49-3fc00360d6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58e46f5d-3a85-4e66-ad45-7597db18a324"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2273153c-1138-4d54-bb85-929a7f41a3ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65869e8d-14b6-4638-b4b1-d5520b19f653"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe2896a5-0e9e-4a59-b591-dfb35d011422",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77e0fba8-3000-418b-aa63-6dbfc3ecba71"
                    }
                  }
                ]
              },
              {
                "id": "83a9190e-88c3-40b6-ab39-ae14dbbef396",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "db785d48-878e-4863-a6ce-863db754535a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "355db26d-8dad-4081-a049-e7a4c634ba58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ca42623b-e89f-4e43-a7a0-ec1ddbd0e58e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f303cc5-6332-4a7a-8ccd-e3f126841ca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c0f9bd8-f176-4950-a674-8692d84ca802"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4d98762c-329c-454b-a21a-6b0e4305b359",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7fc9c0cb-fd95-41b9-b8af-491032bd15e0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c6553f7-b664-4dc7-a107-92c27f67f1c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a0054c61-5a80-453c-96f9-2accad3437c7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "313f8c7e-bfa0-4edc-9083-f8a078aa84f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04b98517-c12b-4e14-b975-4b9e8046b8a9"
                    }
                  }
                ]
              },
              {
                "id": "369fd535-7abc-4b89-8deb-0b15336217e9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6dbab37f-3c0d-431b-ba43-7eac234cd20b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9d4ddac8-c682-4774-82f9-d3f301b124e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7fa2b824-e59c-42bf-8581-5068804dde6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "062cc11b-e9e0-48a7-a821-ac0145af82f8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "edcb336b-0f49-4395-adfd-80899a9d5dc2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "cc086305-f90e-4f8b-a2e0-05b8a12925eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76565a78-a126-41d6-a5bf-176f4fb4e38a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b0a5757-a518-4890-8d92-a704699bbc70"
            }
          }
        ]
      },
      {
        "id": "7527e4e5-76a5-4106-b85b-ffa98cb33c37",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c4b534c5-3025-4fad-b6e0-c7a95b5cba27",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4b34ad8e-fd71-4710-abad-cfcf20bc66d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f9e9e4dc-e56e-4514-96f3-6669a30e1760",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c22c38-4579-4192-a7ba-a0ce5c34228c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5021afe2-393f-493d-aecf-4e87fd3a9951"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1692ca9d-6846-4748-9400-5a272ff4b5de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7c329ad-94b0-4770-a962-4de624f3fbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14bcd9b9-54ed-405a-afe1-263aa1983a90",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84ee691-1650-4e5a-9e36-c84a62ceaf34",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "44726bdf-12e2-4523-a5b8-9ad8ea311801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b0ca0f-08bb-4f66-ba10-aa3de7f0b9de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "334a23cb-9210-4fab-8f36-e41c7d0be440"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87dfcbe6-d41e-4f25-9d49-b26cd08cd5df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e264aec1-03bd-4fb0-bac5-b5fb286571cd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "90a6c9a2-7bf9-4706-88f3-1a8770959d05",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ba5ce11-c8b3-451e-9318-f94d1407d627"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b04c786a-9772-430b-aae1-26e425ef8d2a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "38eb2cc6-9dfb-4dd1-93cd-66ba2b5f5b99"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "10548754-c367-4fe0-b48a-56af70dedc46",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a8870db6-3f7d-418e-bed4-b05436d00101"
            }
          }
        ]
      },
      {
        "id": "963a9752-79c2-41b7-8192-7864e6c69902",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "58f4faaa-d3e1-465d-827f-e3ebe6238446",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fc105714-6ef2-4c98-9e81-85c3ecbad945",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ec9c321-b096-4b26-8278-f985805745fc",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b09011-a3b3-40eb-8ce5-d5e27d635f42",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca422c36-9b95-4d68-90cc-b7a28fd33c17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab10d87-21c8-4f59-918b-bf28f243317f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24cf8d69-8710-48c6-9c6e-5cd8ead50481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00cf7ea3-4540-42dd-875b-cd6d9a4e14cb",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d172e8c-9e8e-41e1-83e4-73e28e02e340",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e1a9032e-604c-44ae-b05d-510a37aa2f9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83bb7e1-45d5-49c8-a45c-bcce168c3599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1841370-a50d-41a3-95a1-b84a957cd7fe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e10814bd-fcdf-424a-b58f-167d083921ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31083f0c-a7af-44ed-8dd2-bc39a5bc4901"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce706c60-6577-4291-9399-4c1a2f679897",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "905e9ad7-1c8f-4aca-9933-e298f2aad91a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9bf655d8-c8ed-4067-9199-a44fdaf38863",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "09a4a79f-2c3b-4190-8f76-d1fb0b08d246"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c0aa3e30-61f9-4f5a-b338-d37b733fdf53",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "013b299a-dc92-40d1-8002-d1e37f576784"
            }
          }
        ]
      },
      {
        "id": "269c2fed-8836-49fd-82bd-fa27b09c8fb4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3651ba12-d3e4-43b9-9884-0da6d2043a86",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6060322f-3096-4020-bf07-43107aa9da91",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d0f11aef-5c19-4588-94c1-65ac5d139e1a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078a0fdf-4a6c-468e-a910-63660602ee34",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63b8a353-2aac-44f3-8fd0-01dfa872533a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9338ddc-8fa4-40bd-a8dd-544f30cfa4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a22c1ee1-cba7-44cb-bdc6-66f8d806f8df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975c975f-20cf-4ae1-9fe9-4f60d989369a",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ac01dd-2179-4182-833a-7e26d0600978",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "24ffa574-d879-4437-9942-610a3260c66b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "270c0201-1dac-49f2-8ae6-6bbfe6f4efc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e1b2a4d-7754-4c57-b144-c04856e57e66"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "902ffb9f-fe8b-49fc-b3dd-567f194bf5c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "588be0d2-ce06-4b85-9bb5-098f4ba1a6a4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e77f5f1f-7567-4d4a-8b5a-a25424e14875",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0cb7e44a-8e0b-454f-9c15-fd61db308743"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24a11aba-8725-4eed-87b4-4575a83e54ce",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "439199e4-cdc4-4a12-ab57-d0bd97b5a8dd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f0e60609-9221-4337-bd5a-726c31577617",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e07e2f1-cfb6-44e6-963d-822bfa77b071"
            }
          }
        ]
      },
      {
        "id": "a912000c-7e22-4d04-9b2e-51060236e6f1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f06e0b9-745a-42f7-afa8-1469c2b14835",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d721059-5197-4752-b15a-de95191eb059",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3c211046-64a4-4967-8b14-54834b704e79",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f2b91e63-f08d-4915-ad55-2a617f1c7d4e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "852c4393-ca33-4f10-9fec-07ab54c130a2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 300
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 67.9769230769231,
      "responseMin": 13,
      "responseMax": 1388,
      "responseSd": 88.45928793123865,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685320724039,
      "completed": 1685320753280
    },
    "executions": [
      {
        "id": "9cd46782-a15b-403c-9f87-2344bf688b00",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f9611914-ed57-4286-84e6-c36d21a9d394",
          "httpRequestId": "d964f700-29f9-474b-bbbb-66451785adae"
        },
        "item": {
          "id": "9cd46782-a15b-403c-9f87-2344bf688b00",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8f534f17-f207-4d17-b4aa-1b4bb4efea95",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 0
        }
      },
      {
        "id": "5fe495ce-5d27-4420-aa2b-b660a3f75dde",
        "cursor": {
          "ref": "b669a753-250e-48c6-b473-a2f154cd9786",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b9472f39-3267-41f1-987f-8a3cceae7224"
        },
        "item": {
          "id": "5fe495ce-5d27-4420-aa2b-b660a3f75dde",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f01d8c44-3168-4a26-9777-18f35a5c6d6c",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 0
        }
      },
      {
        "id": "2cf6e73d-7150-440b-9caf-f84377aee623",
        "cursor": {
          "ref": "18ce5a49-b040-4ffc-bb7b-ec9aa753cc69",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "47541d08-ae97-4d02-8694-72ca5459feba"
        },
        "item": {
          "id": "2cf6e73d-7150-440b-9caf-f84377aee623",
          "name": "did_json"
        },
        "response": {
          "id": "876f9dd4-e239-4a55-85d7-7927211a18c7",
          "status": "OK",
          "code": 200,
          "responseTime": 438,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23f4b944-5756-4e98-a923-92c53f65fffb",
        "cursor": {
          "ref": "36e5d980-4e7e-42a0-ab35-35b14daf0cd7",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4acd0eb1-d159-4dda-97d2-566b8b043252"
        },
        "item": {
          "id": "23f4b944-5756-4e98-a923-92c53f65fffb",
          "name": "did:invalid"
        },
        "response": {
          "id": "9e10aa38-1e96-4c7e-bd31-943b1532f5b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23f4b944-5756-4e98-a923-92c53f65fffb",
        "cursor": {
          "ref": "36e5d980-4e7e-42a0-ab35-35b14daf0cd7",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4acd0eb1-d159-4dda-97d2-566b8b043252"
        },
        "item": {
          "id": "23f4b944-5756-4e98-a923-92c53f65fffb",
          "name": "did:invalid"
        },
        "response": {
          "id": "9e10aa38-1e96-4c7e-bd31-943b1532f5b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2408565-957e-4dbb-aa3e-a5869bd58706",
        "cursor": {
          "ref": "7e19a060-1832-4cf4-82d9-9860097e1070",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a27c1ecc-632e-4941-a8a9-00c3399ba746"
        },
        "item": {
          "id": "a2408565-957e-4dbb-aa3e-a5869bd58706",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b7bb2ac0-1676-465c-9573-4d972f4c7da7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 103,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "e9f52f6f-1714-4ba9-939a-ebc0ee916378",
        "cursor": {
          "ref": "c3c60746-0c4f-44e6-b476-f7ab464485f8",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "86e2e445-93e5-4ac1-87d7-592803ac343e"
        },
        "item": {
          "id": "e9f52f6f-1714-4ba9-939a-ebc0ee916378",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b01397e4-793e-4687-a16a-fd81a346bfe3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 60,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "0561eaad-75ea-4011-b4f1-7b2ff115f823",
        "cursor": {
          "ref": "7da082f7-5252-49c6-bdbb-c1760be406de",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "597f6794-7cab-4673-8879-ccfefc9341fb"
        },
        "item": {
          "id": "0561eaad-75ea-4011-b4f1-7b2ff115f823",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b59475c3-a391-4d61-9258-389cc2b2cd68",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "cbd309ee-4c76-402f-bfc3-526de357622b",
        "cursor": {
          "ref": "b304df4b-9ee7-4d87-a7c1-545cd13e7074",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "75e4e159-36e1-41ec-845c-06e5b51aa350"
        },
        "item": {
          "id": "cbd309ee-4c76-402f-bfc3-526de357622b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1286d6c2-57fa-482e-b5db-de0173e721cd",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "cbd309ee-4c76-402f-bfc3-526de357622b",
        "cursor": {
          "ref": "b304df4b-9ee7-4d87-a7c1-545cd13e7074",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "75e4e159-36e1-41ec-845c-06e5b51aa350"
        },
        "item": {
          "id": "cbd309ee-4c76-402f-bfc3-526de357622b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1286d6c2-57fa-482e-b5db-de0173e721cd",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "77e916ed-48e9-4cbf-bd31-f2b0f47933cb",
        "cursor": {
          "ref": "7dd8a36b-59a7-4418-9e34-e583997541a2",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3450f0b0-124d-43aa-91df-4a54892eb52c"
        },
        "item": {
          "id": "77e916ed-48e9-4cbf-bd31-f2b0f47933cb",
          "name": "identifiers"
        },
        "response": {
          "id": "3fb5147d-0f24-4dec-bdcf-90ad0a7f7bb6",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "696b73ce-5288-49d6-9b23-6d27e7dd8444",
        "cursor": {
          "ref": "778f448f-004e-42bd-b201-487d0631e891",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d403e305-44ab-4cc0-85bb-c476541d5758"
        },
        "item": {
          "id": "696b73ce-5288-49d6-9b23-6d27e7dd8444",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9983271b-225b-4115-8c22-a5441c0ae620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "696b73ce-5288-49d6-9b23-6d27e7dd8444",
        "cursor": {
          "ref": "778f448f-004e-42bd-b201-487d0631e891",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d403e305-44ab-4cc0-85bb-c476541d5758"
        },
        "item": {
          "id": "696b73ce-5288-49d6-9b23-6d27e7dd8444",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9983271b-225b-4115-8c22-a5441c0ae620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "a1031371-67e6-4dab-b12d-9b789cc4d79f",
        "cursor": {
          "ref": "325ada2a-bb33-45ac-986a-f03a061786cb",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4235ea12-54a3-4f2b-a5aa-f1a2eac16684"
        },
        "item": {
          "id": "a1031371-67e6-4dab-b12d-9b789cc4d79f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b8dd243d-78a5-4a6e-ae72-b3cf54765990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "10ed3876-b700-4d8a-8b8f-390da306abbe",
        "cursor": {
          "ref": "a6dc71b6-da13-4a50-af64-2c8646209787",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "42d79fb7-fb65-4575-9db5-23734cc8c9e2"
        },
        "item": {
          "id": "10ed3876-b700-4d8a-8b8f-390da306abbe",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1e17ed17-ef6d-4e70-bfe7-dd3834096892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "1da73744-0e0f-4e5c-a30b-597db98b8bb5",
        "cursor": {
          "ref": "a7356855-b2e0-489a-a340-0d0e441523ed",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "df152635-10b2-497d-94ea-d898c39a6eba"
        },
        "item": {
          "id": "1da73744-0e0f-4e5c-a30b-597db98b8bb5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "42d27e37-ff3d-4b91-a61e-70a242e86788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "cd772353-2413-4019-b974-c6ba839596c0",
        "cursor": {
          "ref": "93541f03-cc31-4f9b-9b70-0bbf21e2dfd8",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f34eaf35-3c18-4bcf-bd75-8f0d0c8a7c94"
        },
        "item": {
          "id": "cd772353-2413-4019-b974-c6ba839596c0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "13cfbbfd-2872-49a0-a74f-7beeff6625e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "863eee5f-cb6b-46bd-89a3-66bfaec1c1e0",
        "cursor": {
          "ref": "c34ed5ab-94c3-459a-bf17-e1403989bea0",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "60c7fb95-3f9d-48b4-82c4-b6b024ad8dc8"
        },
        "item": {
          "id": "863eee5f-cb6b-46bd-89a3-66bfaec1c1e0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3ba8a04a-6a17-4241-bb29-fb4c10f9dd8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "81cb5b3f-0d07-4502-b9d0-04a45702ceab",
        "cursor": {
          "ref": "625d5a98-e792-4d88-b187-2dde219db9bd",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5d51c26f-a205-48a0-aaaa-5fbb292f34ed"
        },
        "item": {
          "id": "81cb5b3f-0d07-4502-b9d0-04a45702ceab",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6b318440-b6df-4508-9d6f-ebbbcaf5bc53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 215
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "6b50573c-cd4f-49ec-8bd9-017cd162b790",
        "cursor": {
          "ref": "1d4e5fde-d112-4db7-87c8-204ff401f0d9",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "14f465d0-f9b8-42da-9f9b-d3c26959d144"
        },
        "item": {
          "id": "6b50573c-cd4f-49ec-8bd9-017cd162b790",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "078d44e3-7616-4229-86cd-a2c778709904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "d93fdef0-303a-4670-b2a3-77391ba9405c",
        "cursor": {
          "ref": "f7f062be-d34c-4eca-bb7d-ea34d94f5777",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4b0fcfba-6b30-479d-885a-50adfb9c8f22"
        },
        "item": {
          "id": "d93fdef0-303a-4670-b2a3-77391ba9405c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "321a5145-a056-4cd6-978a-962833e9b795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "ff60ec67-5181-49da-90be-22d9e2ec353d",
        "cursor": {
          "ref": "f68185dd-dac3-46fc-a14f-7f7cc2001664",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8337e439-7f56-4c83-8f26-1461713d7db6"
        },
        "item": {
          "id": "ff60ec67-5181-49da-90be-22d9e2ec353d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8ecb000c-8d95-4e13-8405-927b6b297722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "df51b2c0-89ae-4e98-8a12-31de838f2dc2",
        "cursor": {
          "ref": "dd4cf028-f842-480f-8b2b-9691b5341d78",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9ffd48e5-a33a-47f8-ad57-3042fd14cfb7"
        },
        "item": {
          "id": "df51b2c0-89ae-4e98-8a12-31de838f2dc2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "69f7599c-e68f-4275-a0ba-fb9baab76904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "c563d2fd-2e72-48c7-9463-a162dcc67bc8",
        "cursor": {
          "ref": "13d11117-d508-4f47-8ee9-b46c0b664ba3",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3d44e2a1-7e65-40c4-b501-857c9d3eff10"
        },
        "item": {
          "id": "c563d2fd-2e72-48c7-9463-a162dcc67bc8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8ff48060-3575-4e13-bdd1-c09f907d188b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "9bf1588a-506b-47e5-a81d-d72c9cbdb83c",
        "cursor": {
          "ref": "d9ee7941-5093-464b-a487-d05bc29c1aba",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9136466f-1770-45c4-80ba-474c51a69735"
        },
        "item": {
          "id": "9bf1588a-506b-47e5-a81d-d72c9cbdb83c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8f824d04-6566-464c-84c5-d01c31c7a6f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "6d498458-4ae6-4819-a29a-b796b08da13f",
        "cursor": {
          "ref": "bf66dd8b-3e85-470e-86d7-bffde9e7e35e",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8c5840db-d61c-49ad-bc9d-6e8302f60898"
        },
        "item": {
          "id": "6d498458-4ae6-4819-a29a-b796b08da13f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "c78518d7-0b45-44a9-b5a2-65d9aea53504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5a554592-03fa-4b59-a000-f447a89a391d",
        "cursor": {
          "ref": "48b7776a-a18d-4b14-93ba-2fe408eb65f1",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "85f1211b-a649-4b59-aeac-0ecb3d10f9fc"
        },
        "item": {
          "id": "5a554592-03fa-4b59-a000-f447a89a391d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "50f1522b-27c0-43f8-b3e1-ae558b296972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "61514005-08d9-4d2a-98f9-449c34dd2a5c",
        "cursor": {
          "ref": "7c87b29e-e62b-43e3-ba9e-3fdc65b92d15",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e7ca289c-ce18-4cf5-8ba5-1639925ab218"
        },
        "item": {
          "id": "61514005-08d9-4d2a-98f9-449c34dd2a5c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "952d435c-7765-4296-a4c5-2b14ced06c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "cace1f1a-1976-4338-84cb-071ae3534dba",
        "cursor": {
          "ref": "d5833241-fa31-4756-b7c7-667dfbbae9a3",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c9510937-d53e-4a1c-8081-06a54a8d6d5b"
        },
        "item": {
          "id": "cace1f1a-1976-4338-84cb-071ae3534dba",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5694bf5c-f0a2-491d-823c-56a448c1ea32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "21e1e9b7-f349-4477-9dd7-51a2db6f1403",
        "cursor": {
          "ref": "68fe06db-8bd3-4c17-a154-6925bdb7d7dd",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "103f8fd5-9a63-4f6c-84d6-baee17e14c05"
        },
        "item": {
          "id": "21e1e9b7-f349-4477-9dd7-51a2db6f1403",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "22559c63-759a-4a85-bd25-123a0b74e42f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "45eefc36-4007-4ced-9a06-f4f70dc6fd1f",
        "cursor": {
          "ref": "ff6ef0cd-7394-431f-9910-0058ba0c22a9",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b21c0d65-6f28-4d5b-8835-8bbe9c27e066"
        },
        "item": {
          "id": "45eefc36-4007-4ced-9a06-f4f70dc6fd1f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a8a3be36-9c00-44e4-9021-fc9dc0348c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "2735dfc6-7ada-4123-b4f8-e78b790b1289",
        "cursor": {
          "ref": "9b706d60-9870-4034-8017-42245595e2dd",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9192ea0f-1b3d-4a90-8a88-05c8e9ecdee5"
        },
        "item": {
          "id": "2735dfc6-7ada-4123-b4f8-e78b790b1289",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c2d20035-7b51-46a3-a5fe-623a180647e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "4ebebafc-41c0-45b4-a7c0-93debc18e15e",
        "cursor": {
          "ref": "3c05e06b-32b1-438d-8500-29c1cdcd410d",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b0187557-9a29-4eff-b830-579f28bfed5a"
        },
        "item": {
          "id": "4ebebafc-41c0-45b4-a7c0-93debc18e15e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0e494bc2-144b-47b3-8770-d32a6e1e7b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "12d47245-21b9-41eb-ae17-396ed86a3b6e",
        "cursor": {
          "ref": "35ba3e3f-6ca0-4e7d-9a13-7a6399db4985",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7a47e6a3-1df6-430f-914e-ab8596a8187e"
        },
        "item": {
          "id": "12d47245-21b9-41eb-ae17-396ed86a3b6e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4cce7142-bb87-4124-bff4-95cab56a8bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "9be20a9b-ba69-4c97-b588-5d52fd6c858b",
        "cursor": {
          "ref": "d9268eda-f02d-4acd-9568-900a484d13d2",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4fecba38-dcb7-4425-8f0c-83080c6a2489"
        },
        "item": {
          "id": "9be20a9b-ba69-4c97-b588-5d52fd6c858b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "39582b45-b53f-4d97-9961-2266dd10a3a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "80c123e6-8d9e-4618-8c7d-97f2ae5e5fcf",
        "cursor": {
          "ref": "00042fec-a7a9-4b3d-bf08-76a5b8896304",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "911cad31-4280-4e2d-8fba-bd1229c3177c"
        },
        "item": {
          "id": "80c123e6-8d9e-4618-8c7d-97f2ae5e5fcf",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d2d44453-35d5-4e13-91ab-6ccc6af36dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "b9fe478f-5549-4ee4-bf74-56aca5afd931",
        "cursor": {
          "ref": "e516f6f5-64a9-4fa0-adc3-9d0d4a5dd1d9",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8adf8a04-bad5-4168-b99c-393f4acc9b74"
        },
        "item": {
          "id": "b9fe478f-5549-4ee4-bf74-56aca5afd931",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fc9705a0-7b03-4554-938b-dfef9929eb33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "c968d071-c77b-4d66-af30-8c5fe223e72a",
        "cursor": {
          "ref": "ba4695b8-8c5c-4b87-98cf-a43f12defde0",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "55213e9f-deca-4a87-ba49-4167e1d9bda5"
        },
        "item": {
          "id": "c968d071-c77b-4d66-af30-8c5fe223e72a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "da9b5b90-8c12-498d-bac4-4c2781e6933d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "9e027152-35f4-4eb9-8aa7-535cd38c07e1",
        "cursor": {
          "ref": "1db66864-cbe3-4f78-98d8-e508d8431dfc",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ac6cecd3-29eb-4a35-a6f3-9012518fb1ac"
        },
        "item": {
          "id": "9e027152-35f4-4eb9-8aa7-535cd38c07e1",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7d43fa2b-ef1f-48d0-b2dd-1e508cfade9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "4c66e14c-1f7f-496a-94ee-e2e6a74ba7ce",
        "cursor": {
          "ref": "679a1b38-5747-4967-8ba0-676c6e98cfac",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9977d330-3b2e-4d16-bb09-fab5ebdb392d"
        },
        "item": {
          "id": "4c66e14c-1f7f-496a-94ee-e2e6a74ba7ce",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "8de9903b-24ed-43b0-8dca-4d9b1291a5a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "396a99a4-cbca-44ee-b2e2-4367cc74b44a",
        "cursor": {
          "ref": "4e0a50e8-7865-463e-9f05-0143b07a9945",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1a1016c0-6d58-413c-9be6-b7cb46d72267"
        },
        "item": {
          "id": "396a99a4-cbca-44ee-b2e2-4367cc74b44a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4d202586-4b58-4002-897f-2a88e61de946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "00a49cdd-9457-472f-8766-328000e47a48",
        "cursor": {
          "ref": "601c340b-dd6b-433a-9d28-472d224ba5ff",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b264ca50-815c-40cd-9275-45d5629b0f3b"
        },
        "item": {
          "id": "00a49cdd-9457-472f-8766-328000e47a48",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1f37d400-8a69-42d0-bb1f-483b149590f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "1c23468a-735e-4f3d-bde2-691aaa23870b",
        "cursor": {
          "ref": "8c8fb7f8-013b-4e3e-b7f1-7b55e258dadc",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0d273f0c-cb45-460a-ac60-97a213c4d4f3"
        },
        "item": {
          "id": "1c23468a-735e-4f3d-bde2-691aaa23870b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "94298805-a2b1-4f72-bb0b-10b87571a101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1f7680ae-f46d-446b-a66e-a0e31fa409b0",
        "cursor": {
          "ref": "35590c64-6742-4345-8805-a15405e32d08",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e8391c08-de27-45da-8220-3c1c49154a2a"
        },
        "item": {
          "id": "1f7680ae-f46d-446b-a66e-a0e31fa409b0",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0868b2a0-2a34-4cc0-a7c6-936920fa06c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ef83aec2-122d-41e6-b839-92520fe4eb84",
        "cursor": {
          "ref": "ea3d81f2-5441-412d-8739-af33c0487bd9",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0a1ec7fd-a505-4b8c-a842-e1140cd39e93"
        },
        "item": {
          "id": "ef83aec2-122d-41e6-b839-92520fe4eb84",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9eec4469-7a3a-4c91-9776-008865febde5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "9bbc302b-a7de-43d3-891b-d4cc5bafdf3e",
        "cursor": {
          "ref": "f897fafa-5467-43a3-908d-7f1654e8aff6",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c4a277fe-d166-4653-b064-652ed60b5a13"
        },
        "item": {
          "id": "9bbc302b-a7de-43d3-891b-d4cc5bafdf3e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5a06b1d3-814a-4c2d-9e6b-989d365bc72a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2bc6bf42-42f4-4244-a112-fb205e47ecec",
        "cursor": {
          "ref": "3b1cf3e1-6dce-4f3e-a3b6-1cc7dc621d16",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2d70d4b7-e4de-4fae-9b37-234b4dcc407a"
        },
        "item": {
          "id": "2bc6bf42-42f4-4244-a112-fb205e47ecec",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "213537f4-dd56-4789-91f0-5d7f85cc945b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4b0d29eb-9ad1-4aef-be8c-b845b5f82cef",
        "cursor": {
          "ref": "32043bc2-3a93-47d4-b9ef-fedf5d16bcea",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3a39f5cc-6d8b-4ecd-9113-72d02d8c48a9"
        },
        "item": {
          "id": "4b0d29eb-9ad1-4aef-be8c-b845b5f82cef",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b719e8d8-097d-4760-8689-314f885ca7df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6c069b64-8ec3-4e24-91bc-7d91b601b93a",
        "cursor": {
          "ref": "50ddde00-a489-48a1-9811-bc6fc5a4bce2",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7c34b3e9-3d3f-41f3-a36b-5d69531581d8"
        },
        "item": {
          "id": "6c069b64-8ec3-4e24-91bc-7d91b601b93a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "737562bf-7c1e-43c3-8c2c-861dbf9ddeeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "abf31a7a-cc8b-423b-8cfa-640e6c98d042",
        "cursor": {
          "ref": "41cc5237-4722-437c-9748-c8b9cce54ad8",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "73e84212-5576-43fd-bab9-7f6c69c4ae78"
        },
        "item": {
          "id": "abf31a7a-cc8b-423b-8cfa-640e6c98d042",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d51372ff-695a-47c8-b941-7bd76bc229c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "e3fa43be-2101-47aa-9cff-6b0dd835eed5",
        "cursor": {
          "ref": "0d461908-3ad2-4ad2-8c59-b4b7bc6bbec1",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e798cd47-1db9-45c9-a6cc-90376a0b2ed8"
        },
        "item": {
          "id": "e3fa43be-2101-47aa-9cff-6b0dd835eed5",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8f087857-ff1a-406f-88d5-71cea8bd62d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b5ef0b32-d662-4e20-80f8-c431a717c4cf",
        "cursor": {
          "ref": "952bc30f-7433-4f8f-be19-3b1a8181c10f",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2c099fa5-212a-4b5b-a816-110f137dab10"
        },
        "item": {
          "id": "b5ef0b32-d662-4e20-80f8-c431a717c4cf",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "cfcba132-4abe-4d9e-82d4-6256e9df97fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e3b35fae-b0fd-42b7-9aec-2c978d8205cf",
        "cursor": {
          "ref": "b345a410-fd1c-4cd4-b894-c50320db1890",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b681b8c1-333c-4cee-9aae-4afbd0f0cf7a"
        },
        "item": {
          "id": "e3b35fae-b0fd-42b7-9aec-2c978d8205cf",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2d038fe4-bd05-4245-b2ba-ab9f9621f3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "70c58227-b917-44f8-a706-7632cd3cd6d6",
        "cursor": {
          "ref": "1ac6a04e-81bb-4dd2-a13d-653ae14a0f99",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "878edb2f-fdf5-4618-9657-9b19e4136c6b"
        },
        "item": {
          "id": "70c58227-b917-44f8-a706-7632cd3cd6d6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b3bde68d-fc03-4f21-8cc6-1f5871162bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e636f2eb-ba79-41e6-94fb-8b314af67c70",
        "cursor": {
          "ref": "5cb38767-2e74-476b-b054-b428885cc55d",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7432408e-4037-4370-8b1c-71a47b7f5c49"
        },
        "item": {
          "id": "e636f2eb-ba79-41e6-94fb-8b314af67c70",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "19570d6b-99fe-4a20-b735-a656671eca8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "a1475c62-4c03-4d15-96a9-42fc2cc9632a",
        "cursor": {
          "ref": "22f344c6-31dd-48ea-933e-0f1e9bc16f2a",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "56a43541-ca7c-4415-b68b-db16b57c99df"
        },
        "item": {
          "id": "a1475c62-4c03-4d15-96a9-42fc2cc9632a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0e292411-fa78-4f1c-acbc-8b4071c119fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "79e5b6b9-3a68-40fd-84b2-4f1167898eb7",
        "cursor": {
          "ref": "e21b0786-5fd9-4adc-9048-36fb7677a08e",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "65bd9022-6021-43b4-a58c-98d164609316"
        },
        "item": {
          "id": "79e5b6b9-3a68-40fd-84b2-4f1167898eb7",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "11173500-f4de-4971-a301-3080582f6b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "4bf4bda2-deb6-47c1-acc2-e7072d9d5243",
        "cursor": {
          "ref": "9ca9c05e-6d09-44d4-a6a9-7763e1ef8d86",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d0ffcbbe-2f04-49a4-ac07-0c1397540901"
        },
        "item": {
          "id": "4bf4bda2-deb6-47c1-acc2-e7072d9d5243",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "05719d6f-a7bb-4ca1-b0e9-bd3d5598a3f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "d8bab94b-4d88-47db-a099-13ebc5916a30",
        "cursor": {
          "ref": "398d30d4-7cbc-4685-af16-a4f19f371fba",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f982276f-5fc3-479e-ace1-4256d2b53342"
        },
        "item": {
          "id": "d8bab94b-4d88-47db-a099-13ebc5916a30",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "22295033-b5c8-43fb-94bf-8a05e9c8a3fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "0e1cb30e-5261-4062-98f5-21e374457110",
        "cursor": {
          "ref": "58e73cd0-c2e7-4685-952a-5bd8cc63c2c5",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4cb6114f-fc24-49d1-b45d-968fa2e9f523"
        },
        "item": {
          "id": "0e1cb30e-5261-4062-98f5-21e374457110",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "74c320d3-6086-41ce-9d26-e856f79c0806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "d07fc7b9-7266-477e-8c22-025e3a93d0cc",
        "cursor": {
          "ref": "0965aee7-42e9-4f5f-a86c-8e7c2afc93df",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "658d4592-fe08-40cb-acde-62bddbcb0f62"
        },
        "item": {
          "id": "d07fc7b9-7266-477e-8c22-025e3a93d0cc",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4689b0e0-30ef-4b84-8cea-2aabf7500ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "5e1d223f-cde6-4be8-b51d-29941128839a",
        "cursor": {
          "ref": "d19799ad-7596-46f3-acd6-3988d80ca2cf",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b196fb52-aa43-4869-a950-c883c78ec138"
        },
        "item": {
          "id": "5e1d223f-cde6-4be8-b51d-29941128839a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d48d43f9-7dec-4250-9219-a9ba1245a72e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "22290099-9a48-446d-bdbc-686823187d5c",
        "cursor": {
          "ref": "0fd16997-2f72-4a32-b545-e826266df14d",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "cf1eaaa5-6d7c-4b18-8da1-56230c043eaf"
        },
        "item": {
          "id": "22290099-9a48-446d-bdbc-686823187d5c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "086d9bc3-0eda-49f4-81ef-e3856489df86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "12edc1e1-8871-482d-bac7-6f02c30224a3",
        "cursor": {
          "ref": "ed4e91ca-22df-4ba2-b699-d347523cf9ad",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a3254745-8484-4fa1-b9d2-116d59770fea"
        },
        "item": {
          "id": "12edc1e1-8871-482d-bac7-6f02c30224a3",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "70526d09-9af6-4f65-af02-34c231f1d661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "68cf66da-e37e-415c-80fe-569898814800",
        "cursor": {
          "ref": "bee7389d-71f3-4885-8b93-c782332d90c0",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "59ba48d5-ba0a-42df-99f3-d801568a0d70"
        },
        "item": {
          "id": "68cf66da-e37e-415c-80fe-569898814800",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f5abac1c-94cd-4756-b5e2-6f561be2c015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "43dcb880-a2e2-454e-9897-54b7d8119c5a",
        "cursor": {
          "ref": "655f01ef-630d-4115-ae2d-dd3a4b3be4e5",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "49f92bb1-707a-431e-9eac-06a82ff7b826"
        },
        "item": {
          "id": "43dcb880-a2e2-454e-9897-54b7d8119c5a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "fa08bf28-bffd-458f-93a2-d69a800c30e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "67a44c66-915b-42d9-a8dc-14ca6c699e2f",
        "cursor": {
          "ref": "11db987b-deee-4b1b-845f-c5cf454896e9",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "33b5ef70-48ed-4f7c-8584-4a41ae1abf53"
        },
        "item": {
          "id": "67a44c66-915b-42d9-a8dc-14ca6c699e2f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "dee204ab-1d5a-4148-8ff7-38a19874fa5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "5aedc440-601a-4f18-ace6-e5581aa7bb2d",
        "cursor": {
          "ref": "b7de34e9-4fd5-4287-a579-db035ac597d9",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "625f8681-af69-40c0-8169-e8a54029ccab"
        },
        "item": {
          "id": "5aedc440-601a-4f18-ace6-e5581aa7bb2d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "364758f6-4f9c-4992-bed4-4986512da429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ec4d213d-2bc1-4f73-b6af-d9e76854aa84",
        "cursor": {
          "ref": "b47036de-0275-4aeb-8525-dba57aec07e1",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "06923635-f1b9-44c1-9d5a-3be9ffdc1084"
        },
        "item": {
          "id": "ec4d213d-2bc1-4f73-b6af-d9e76854aa84",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "3e8c5b2e-4403-4622-b8b0-195db274e876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c752b174-244a-4e00-a13e-55a3390f5558",
        "cursor": {
          "ref": "c05905de-147b-41ef-9430-b5639cacd830",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1f8ae113-191e-4df2-858c-38d75ded0d4b"
        },
        "item": {
          "id": "c752b174-244a-4e00-a13e-55a3390f5558",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "a916c6ec-af30-4ce6-907e-f98305693aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "99dd2f68-3070-4ac0-86cd-b00b442b899e",
        "cursor": {
          "ref": "95c58bbb-9220-44b7-be29-c03c3a4c040e",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "11bf2e7b-a08a-449e-86d7-50c9f2b27d37"
        },
        "item": {
          "id": "99dd2f68-3070-4ac0-86cd-b00b442b899e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4f30bf25-e334-4449-8939-30087e4bf337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b3df0956-fd8b-4a70-9c15-15f692ecd0a8",
        "cursor": {
          "ref": "c85aab66-8aff-4c2d-a681-69ad933113fc",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "01ae61b7-fa13-43ee-b292-53a1578a3a1b"
        },
        "item": {
          "id": "b3df0956-fd8b-4a70-9c15-15f692ecd0a8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "29b3f658-322c-4f94-bc58-31623fec3930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "6dfd475f-53b9-44ef-8c7c-3c90f97fe7f9",
        "cursor": {
          "ref": "36790781-0240-46df-a931-ef692f5bd7b9",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "99a3dfa4-1e0d-453c-9e5b-0b8a7ea0501d"
        },
        "item": {
          "id": "6dfd475f-53b9-44ef-8c7c-3c90f97fe7f9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d137f09d-3de1-4dce-8864-0bdb601c61b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "fd37d16e-4cbb-42e8-85af-a5dea6ab0e2c",
        "cursor": {
          "ref": "e8c4fa9b-332e-48cb-add3-a0f29795fc43",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "cf6822e7-5638-40b5-b240-3b15ba0c4a58"
        },
        "item": {
          "id": "fd37d16e-4cbb-42e8-85af-a5dea6ab0e2c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d0c4455d-be6c-4a29-9e87-9a51e6dfdac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "65ad7517-c5b4-4436-ae55-59f116efb366",
        "cursor": {
          "ref": "964aef7b-6860-45f1-86f2-5efd603115b4",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "67a41e40-6216-432a-b211-f4b945d81948"
        },
        "item": {
          "id": "65ad7517-c5b4-4436-ae55-59f116efb366",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "da2a450a-4919-4e89-b1b8-a8d52c0f792a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "36af4189-ea8e-42e8-8466-0f81042bce50",
        "cursor": {
          "ref": "051b48ff-6beb-4dc4-9b89-bcc8c1e4fc8e",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "02696496-56d5-4bf9-a164-e5ae5d5c1eac"
        },
        "item": {
          "id": "36af4189-ea8e-42e8-8466-0f81042bce50",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0080237f-a00e-47a9-a131-4617bfc99c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "be0b9e0c-73ba-413d-91ab-40ef222ff487",
        "cursor": {
          "ref": "058da9d2-d091-43fe-b145-758d3aac90c2",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0f340f24-b03c-48e5-b0b7-079be47e0458"
        },
        "item": {
          "id": "be0b9e0c-73ba-413d-91ab-40ef222ff487",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "84d2de39-8d32-446f-94c4-60b3986089dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "e167bc0c-b8f7-4d49-bcb5-09d9454c45b3",
        "cursor": {
          "ref": "aa633483-9caa-4426-9101-3c92e3f5a820",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "db308196-eb33-4c30-bbf9-7d22536a7180"
        },
        "item": {
          "id": "e167bc0c-b8f7-4d49-bcb5-09d9454c45b3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "903e50c7-0e7a-4ce1-b0fe-51afbca4c152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "170eea47-3590-45c7-8150-b213e4532784",
        "cursor": {
          "ref": "235cebf9-2a92-48b7-885f-394767ed84fb",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "492733a6-2036-4500-ba47-54a31012adbe"
        },
        "item": {
          "id": "170eea47-3590-45c7-8150-b213e4532784",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "aa86dfa1-0312-411c-8f92-971c9ac68d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "71e1b63f-bdba-436a-bd50-d12d4e8bce03",
        "cursor": {
          "ref": "f2542d23-8121-45e0-98b2-c2243381221e",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6173b1c3-e51d-4fa7-9ad2-956a63125bef"
        },
        "item": {
          "id": "71e1b63f-bdba-436a-bd50-d12d4e8bce03",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0889c2f3-8018-4630-ac5a-fde48ffa96ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "9f429469-e69c-4483-8318-278a60bd5bc8",
        "cursor": {
          "ref": "5ae41c63-7001-40d7-a388-cb5a688d1203",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ec15d4de-3672-4a1a-b549-cdd40b9e86cf"
        },
        "item": {
          "id": "9f429469-e69c-4483-8318-278a60bd5bc8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "122b2a0a-93e9-410b-a803-41eadad9f671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "f59e3910-b663-4431-a48b-b2c9cdb035e3",
        "cursor": {
          "ref": "9b74df7b-236c-4ec3-b9f4-78f1a5384a3f",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "518bee90-410a-4ecc-93a5-e214b4fd0fba"
        },
        "item": {
          "id": "f59e3910-b663-4431-a48b-b2c9cdb035e3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a935c530-5160-4f35-a73e-e6e2a7164923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "16f82709-aab3-42d4-8ffa-0a8111308e78",
        "cursor": {
          "ref": "8dd0f723-5464-4a5e-ae44-12caf4b74709",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9364df85-fb8f-4888-bb70-dc4c7ca19293"
        },
        "item": {
          "id": "16f82709-aab3-42d4-8ffa-0a8111308e78",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ab0ce1cb-9cf3-4aae-9bb2-fbeb73e90b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "57d92808-6e8d-4f03-a525-dc2355b8876a",
        "cursor": {
          "ref": "138c7616-0e1e-42ac-a204-d2871f65769b",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6f027f20-d9a7-454d-be9a-6254aa97d0dc"
        },
        "item": {
          "id": "57d92808-6e8d-4f03-a525-dc2355b8876a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e2423505-cd8a-49d9-886b-fbfbf1b8f55d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "2114092b-ae43-4d89-a80c-0da0e9fbdafc",
        "cursor": {
          "ref": "099f6ddd-cf12-4322-b53a-6fb3dd24aedc",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b1246bb6-ca9e-4365-b4c4-e41434fbe403"
        },
        "item": {
          "id": "2114092b-ae43-4d89-a80c-0da0e9fbdafc",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "71c21987-1490-465f-9953-359aff2cdb3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "e5274f1b-e709-4ea2-87d7-f15de60aefa0",
        "cursor": {
          "ref": "b9aec84f-c2d2-468c-a272-5052a9488291",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "782cc52d-249f-4b9e-8e27-47b7ac0aa68b"
        },
        "item": {
          "id": "e5274f1b-e709-4ea2-87d7-f15de60aefa0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4beacd9a-8510-4cc2-acad-53e5d60dbf80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "c7c2c163-0b9f-45f6-b874-ce4bb91f3b2b",
        "cursor": {
          "ref": "e661519e-befd-4862-ac5f-25e011222f93",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9b49ee17-59b2-472c-8d16-9e0039419b2a"
        },
        "item": {
          "id": "c7c2c163-0b9f-45f6-b874-ce4bb91f3b2b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4b0c3ad5-a0a4-43b6-bbc9-d7b33c71d054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "c5ecd9dc-ff01-4e93-aff3-eeefb36c26d9",
        "cursor": {
          "ref": "29881444-647b-49d1-ba05-82a9f294baaa",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "17671e3b-7fd2-4840-a05f-b5aeb6e3e0a7"
        },
        "item": {
          "id": "c5ecd9dc-ff01-4e93-aff3-eeefb36c26d9",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bfe9b330-f1b2-480b-8c25-c7205775dcf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "46bfdd54-2e2a-4d3c-b9ad-fc047b7375ee",
        "cursor": {
          "ref": "ddb290fd-9a9c-4862-b2f0-facde0480621",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "485f81f8-8ca5-4a42-a17b-657f9eee676a"
        },
        "item": {
          "id": "46bfdd54-2e2a-4d3c-b9ad-fc047b7375ee",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5169626d-13a3-4c6c-af8c-25b5f7e2d9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "d6596c04-e0fa-4a16-81f6-c184ea59b803",
        "cursor": {
          "ref": "505b7726-f521-4f9e-aec5-beb9bc4e44a8",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f83c0609-2586-4e35-9dff-4d29ce157ad0"
        },
        "item": {
          "id": "d6596c04-e0fa-4a16-81f6-c184ea59b803",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "12789e79-5d91-4bf9-ba0a-80778838b7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "60bcea91-5be0-4639-a50d-b9126a5795f2",
        "cursor": {
          "ref": "5e3f1c30-4768-425c-83ff-5db555512219",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "102d4efd-5818-4a93-88d6-f33e17213cfa"
        },
        "item": {
          "id": "60bcea91-5be0-4639-a50d-b9126a5795f2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "fc021b95-a8cd-4577-8b92-9714570415ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "1171aa17-41fe-40c8-8194-996877808273",
        "cursor": {
          "ref": "b7443303-b67c-4785-b07d-2a27d89823b4",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7a8f35f0-f7d3-4662-9ba5-397282851a06"
        },
        "item": {
          "id": "1171aa17-41fe-40c8-8194-996877808273",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f6a4cfdb-c9a2-4264-ae99-272da9e7e8b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "9a02f647-d118-48d8-a5b0-bf996da388be",
        "cursor": {
          "ref": "43195af0-5781-4c84-9f16-270e9a741102",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7c0b8614-f864-44aa-84a8-62cc016c4dee"
        },
        "item": {
          "id": "9a02f647-d118-48d8-a5b0-bf996da388be",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6b082b98-23d6-48d3-8f14-739b2437597e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "4ff4b06b-1ce7-4d0e-9a5d-5454de66d93e",
        "cursor": {
          "ref": "d291a587-664d-4dca-bb4a-795b18adb3bd",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b46c7261-ccc3-4ebf-a1ad-8eea853f0d9b"
        },
        "item": {
          "id": "4ff4b06b-1ce7-4d0e-9a5d-5454de66d93e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3a1898b4-d1a1-4cbc-95ae-03cf38cff56f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "b4eed707-b761-4873-a5e2-f5fc0fa17343",
        "cursor": {
          "ref": "3b0e66a2-beb7-42c9-a9f0-1ba244b7c80c",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0c3bb2d0-ebd2-4818-b0a6-fca213ddd91c"
        },
        "item": {
          "id": "b4eed707-b761-4873-a5e2-f5fc0fa17343",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7f01aa36-8c80-450d-91a7-e7d27ec9253c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "7e101c57-3915-47e9-b29d-ef0b6d4555e6",
        "cursor": {
          "ref": "d9d4fb5d-d888-4762-8048-8e1ff893ba4a",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "91a5bcc4-d703-43ee-92c4-112ac12ff8ad"
        },
        "item": {
          "id": "7e101c57-3915-47e9-b29d-ef0b6d4555e6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "774518b7-fb07-4152-ad1e-a1585abb9213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "af026dfe-d845-46fa-bebe-a6b043852c96",
        "cursor": {
          "ref": "ca2ba45d-96dd-40b5-b276-49da148cd408",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "477f3ae7-d49b-4cca-9332-5bf59072b486"
        },
        "item": {
          "id": "af026dfe-d845-46fa-bebe-a6b043852c96",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "83fe8896-f147-4147-b378-3428ed5e3132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "f3cee60d-974f-4a24-9a10-109225146904",
        "cursor": {
          "ref": "6d6c4828-6018-45af-ace3-06803697cc5e",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d6a24e14-aaa7-42dc-a786-3b6df6b1ff30"
        },
        "item": {
          "id": "f3cee60d-974f-4a24-9a10-109225146904",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2af23e54-35bb-4edf-87cf-4816361af12b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "96e455a4-4504-4553-9ff1-1fc8d0982ac4",
        "cursor": {
          "ref": "c84a105b-1307-4308-8367-e3436395f7b5",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6418654e-fdd3-4b61-b923-588b816b88af"
        },
        "item": {
          "id": "96e455a4-4504-4553-9ff1-1fc8d0982ac4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "94422804-6fd7-4139-ac6f-9fd41265bc7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "34315510-3220-49d7-96de-fda45d8147a5",
        "cursor": {
          "ref": "1cd559c9-43c0-44a2-ac44-483baa834f75",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8f108c88-6377-4120-94f3-464b859c5388"
        },
        "item": {
          "id": "34315510-3220-49d7-96de-fda45d8147a5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d3cd96f5-d77c-47e1-9a6f-80d74099b4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "5142ad87-cff3-49ad-a36a-6fe5d8f790bc",
        "cursor": {
          "ref": "e97a8bdc-11da-4100-af06-afdf178c832c",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "78ef4aa7-d032-4931-88fa-2aa1c4afb06c"
        },
        "item": {
          "id": "5142ad87-cff3-49ad-a36a-6fe5d8f790bc",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c5ea42a2-465c-4a95-ad93-c74f48ed6c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "a72f0e7f-dad9-42fc-970a-e8e55b93aafe",
        "cursor": {
          "ref": "c408c276-6a9a-40a2-a5af-fb25baa4a6ce",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "01e1806f-8392-4c31-b860-7ab521295e60"
        },
        "item": {
          "id": "a72f0e7f-dad9-42fc-970a-e8e55b93aafe",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "fe8a0164-ddd6-4013-8c0d-55894edb72e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "05bf1635-3ada-48e5-b6db-afd7f17fae9e",
        "cursor": {
          "ref": "f49ec71b-632f-4eb9-b384-0f18aed15743",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b77cf937-ac42-4c8d-ac67-67cdaccb266c"
        },
        "item": {
          "id": "05bf1635-3ada-48e5-b6db-afd7f17fae9e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "1bcfbd34-4bde-43bc-baa0-5a97efd0f4a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "23830e21-79fc-4da3-96bf-fbd09aa3a153",
        "cursor": {
          "ref": "e8c3e327-a256-47a9-a4f2-432e6c327bad",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8a745ea2-01d3-445a-86d9-a03f7e7b24af"
        },
        "item": {
          "id": "23830e21-79fc-4da3-96bf-fbd09aa3a153",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0360716c-0150-4b0b-a0b3-657c0f7f94c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "4f5fdb4d-09ab-47f0-b014-6253931a6e96",
        "cursor": {
          "ref": "e1baec2a-f955-4ceb-8117-044861a25628",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7a27f353-624c-45b2-b82a-7a95291701a4"
        },
        "item": {
          "id": "4f5fdb4d-09ab-47f0-b014-6253931a6e96",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7ad7d284-c86e-4c1c-b1c2-a7faa1821abb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "f7e23304-f48f-43e9-bb51-ea19076b00f4",
        "cursor": {
          "ref": "c4fedf58-b713-4a4e-a0b3-75a0b05b93a4",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8326afd8-82cb-4286-bc08-2445a6ead391"
        },
        "item": {
          "id": "f7e23304-f48f-43e9-bb51-ea19076b00f4",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "92fff621-a350-4804-8fcc-4ca338d79c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "42ce0ad7-c7e9-4dd0-be0d-201e7c6a16d2",
        "cursor": {
          "ref": "da1da30a-4bc3-461a-a24e-c1159a7da0f7",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3c841988-08a0-4f08-9980-f7a386140a8a"
        },
        "item": {
          "id": "42ce0ad7-c7e9-4dd0-be0d-201e7c6a16d2",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4c80e0d7-6aca-42ea-aa7d-ac8b7d8cfd0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:104)"
            }
          }
        ]
      },
      {
        "id": "e8b31a70-3e2c-4f89-9076-1dac7d4993ef",
        "cursor": {
          "ref": "4ffc6968-b1bc-4ed7-83b7-f265a889d400",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4075895f-81f9-469e-848c-30f2a93c1dcf"
        },
        "item": {
          "id": "e8b31a70-3e2c-4f89-9076-1dac7d4993ef",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "da824d34-363f-4b17-b56f-eb7e965ba4ed",
          "status": "Created",
          "code": 201,
          "responseTime": 1388,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should be object",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should be object\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "3ec0300c-a20e-4cd2-80b1-4662b63fd5d8",
        "cursor": {
          "ref": "26a5f888-01fe-4246-ba0e-6ed3410ba433",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0ba0e330-c97c-41e6-b623-dffaef953e7c"
        },
        "item": {
          "id": "3ec0300c-a20e-4cd2-80b1-4662b63fd5d8",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e72d97d4-e5a8-43f4-bed7-c7fa8485d9d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "1bb21e3b-8f6e-4041-ba46-f0ddd9b31f4d",
        "cursor": {
          "ref": "3752dbfc-9755-486d-988d-06aa0e27a0a5",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "770d87b1-37cd-4201-9d27-e42c6b49c545"
        },
        "item": {
          "id": "1bb21e3b-8f6e-4041-ba46-f0ddd9b31f4d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6bdbf5d4-8a06-4f93-9f8b-39500ebf4105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "3eef5f43-8225-40e1-b30e-dc096567578b",
        "cursor": {
          "ref": "01ec61cd-876b-492b-806e-eb675095d438",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c717083d-fcbe-42e2-b44a-caf390db25ff"
        },
        "item": {
          "id": "3eef5f43-8225-40e1-b30e-dc096567578b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4e8f964b-631a-457a-8095-62da3e9d8e58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "2386dc70-6db5-4b08-bab2-8c0ec40079e4",
        "cursor": {
          "ref": "5c2457f2-821e-45ee-a88e-ae2e834473c3",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4cb94497-a3f4-472f-a6dd-b6e11e2f1bb7"
        },
        "item": {
          "id": "2386dc70-6db5-4b08-bab2-8c0ec40079e4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7afcaf40-70ad-4289-a2dc-d0eed5b9ca65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "e2aeefd0-0e02-440d-9eaf-c99d7b8af10b",
        "cursor": {
          "ref": "2f19a0f6-60de-4b02-b408-14ca9e7dc800",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b121ef5c-bc81-4c30-9a84-0cf1ff4b15c8"
        },
        "item": {
          "id": "e2aeefd0-0e02-440d-9eaf-c99d7b8af10b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "78f89cdd-4343-4bb6-80e3-299aadad2ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "e2aeefd0-0e02-440d-9eaf-c99d7b8af10b",
        "cursor": {
          "ref": "2f19a0f6-60de-4b02-b408-14ca9e7dc800",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b121ef5c-bc81-4c30-9a84-0cf1ff4b15c8"
        },
        "item": {
          "id": "e2aeefd0-0e02-440d-9eaf-c99d7b8af10b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "78f89cdd-4343-4bb6-80e3-299aadad2ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "640ec79e-fa69-484a-985f-42a6408ad9d8",
        "cursor": {
          "ref": "249faa25-9347-49bb-ba2a-0429584de953",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5694edc3-1f5c-43c4-b1ad-15d7276ebb87"
        },
        "item": {
          "id": "640ec79e-fa69-484a-985f-42a6408ad9d8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f154b7ca-bca3-431b-9a8f-ca12578b6321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "9080fa3f-4db6-4a5a-837f-451bde5abacd",
        "cursor": {
          "ref": "7d52d7cb-34f3-4df3-85b0-7f7decc77b40",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1edf2d75-1d99-41d7-81ec-201f7e262189"
        },
        "item": {
          "id": "9080fa3f-4db6-4a5a-837f-451bde5abacd",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b9c0345d-866a-4090-90ce-0755a362c5e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "fd64bd43-a594-42bb-96de-1bfb57cef675",
        "cursor": {
          "ref": "08b2cb22-4385-479f-8087-8052a2c7c6af",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4099917d-5ca5-400c-b305-dba9805c9925"
        },
        "item": {
          "id": "fd64bd43-a594-42bb-96de-1bfb57cef675",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "970961c3-f08a-4a47-9329-ff89456cb4df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "b97574d3-19e2-4c4f-9735-728368f0ec78",
        "cursor": {
          "ref": "521abea3-1758-4daa-a8a6-0501ab4e9ecc",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8dd900e9-dc61-403f-9ecb-88db2a24a39e"
        },
        "item": {
          "id": "b97574d3-19e2-4c4f-9735-728368f0ec78",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "df48478b-44a6-43a7-b57a-35dab980338d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "e47256fa-174f-4c25-87d6-ef7af0772b42",
        "cursor": {
          "ref": "1867904b-3ff8-4b66-81be-eca14af17f6f",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "448b0ff1-9066-4586-a58f-7a2bd270aaf3"
        },
        "item": {
          "id": "e47256fa-174f-4c25-87d6-ef7af0772b42",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "28cc9156-864e-4fb4-b68a-753e8a69152b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "dc2353ca-9a4e-48ee-a0a8-427bcda2e82e",
        "cursor": {
          "ref": "17edd59e-ecb6-40eb-a5cf-0bbd4218fff0",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "eabf8489-7cab-4ca7-a45b-54c3515efb82"
        },
        "item": {
          "id": "dc2353ca-9a4e-48ee-a0a8-427bcda2e82e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "37b479a6-a441-43a0-ac20-7a934ca4a4c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "e01333ba-908e-43b2-8b1c-cbee586124ca",
        "cursor": {
          "ref": "9fbcf38c-105e-415b-b158-4a0d45364163",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "07dfbb01-4402-40a3-8a9e-b03669cd9e14"
        },
        "item": {
          "id": "e01333ba-908e-43b2-8b1c-cbee586124ca",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3f35db62-8efa-4710-be2d-bc17909ffb1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "3cc91d23-0ca5-4d45-985b-4832e5472fc6",
        "cursor": {
          "ref": "b8aca1f1-5007-4bb5-9740-375014374824",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d2ef1064-fc40-42aa-9c34-e0fdd8e4edca"
        },
        "item": {
          "id": "3cc91d23-0ca5-4d45-985b-4832e5472fc6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5a3a9414-a27c-4acd-9691-d93c68a3b7b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "cba9bb8d-513d-4fdf-9f4d-74221e1152ff",
        "cursor": {
          "ref": "8e6f75ad-bc26-4537-9455-4c9871a53bce",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2b54c344-3f88-409d-a2a5-f3760b79923d"
        },
        "item": {
          "id": "cba9bb8d-513d-4fdf-9f4d-74221e1152ff",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5af90e2e-edda-44fa-9d19-9d6ee32743d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "64c3a71c-406d-49d2-8987-aa425d518914",
        "cursor": {
          "ref": "9883c7b6-fe6c-4d5d-9b8d-95853d51baaf",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "47f7b50d-1f98-4872-afba-baaa36c54ede"
        },
        "item": {
          "id": "64c3a71c-406d-49d2-8987-aa425d518914",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c6b22d8d-7990-4495-9f1e-749b6677ca75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "c06633b3-00e2-40d3-9152-ed935948427b",
        "cursor": {
          "ref": "2048ee1d-7a52-4b1f-bc1b-4202189c1e36",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "819b59f6-b4af-4a31-82c7-d297395441be"
        },
        "item": {
          "id": "c06633b3-00e2-40d3-9152-ed935948427b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "36c595a3-7286-47ae-adfe-3f49f84223a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "487161d0-3d19-4f3c-aebf-c3e28ab0417e",
        "cursor": {
          "ref": "c37079cf-9d5f-47d1-bcbc-e3856d72d560",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "bffb0812-5f5a-4417-a84b-6113a1a3c64b"
        },
        "item": {
          "id": "487161d0-3d19-4f3c-aebf-c3e28ab0417e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e9393d4e-f04d-48bd-9ab8-c732ef2a3a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "e1757ed8-ecc4-4749-bd36-4ec0fef32072",
        "cursor": {
          "ref": "6baaa210-4c5e-4aaa-add1-97c3a1405478",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f2b11a1c-6ba4-498a-b214-511af191920f"
        },
        "item": {
          "id": "e1757ed8-ecc4-4749-bd36-4ec0fef32072",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b859de82-5a93-4e82-b86d-1959b74cf4a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "49f2d35a-a385-421b-8d39-1b4843579dbb",
        "cursor": {
          "ref": "87188d16-f3a7-4860-9e5c-b12eb0bdaeb5",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "292938c6-acdb-4a2d-b7a4-3f62c8b47f5b"
        },
        "item": {
          "id": "49f2d35a-a385-421b-8d39-1b4843579dbb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d9035bca-4ea1-4cb7-aa76-82d4503664ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "3dacca73-7491-4789-a2b7-575f2c2975f1",
        "cursor": {
          "ref": "b03b9f64-7e5c-4bff-8a4a-b17f865dfa93",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9e9d7df3-6098-4fb3-a83c-98f5a7eb3032"
        },
        "item": {
          "id": "3dacca73-7491-4789-a2b7-575f2c2975f1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fe66c8bc-1b6b-40a8-912b-f066eef1f69d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "64e5bd78-16b2-46f1-97f9-e0bb1cc75dde",
        "cursor": {
          "ref": "6fb84c29-528a-451b-88da-97de07bd11cd",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c319e386-3795-4a0e-bae6-fdb0adf2f348"
        },
        "item": {
          "id": "64e5bd78-16b2-46f1-97f9-e0bb1cc75dde",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1105561c-7be5-428d-a42a-28017d2043e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "bf0d3022-0b86-44b1-8cea-4f67525e84aa",
        "cursor": {
          "ref": "187ef20d-a77b-4edf-b451-77a23181618f",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5a094e68-50c2-4b86-83d5-b928a89ef5b5"
        },
        "item": {
          "id": "bf0d3022-0b86-44b1-8cea-4f67525e84aa",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "82baf781-cbc7-46ab-b841-4e6ab15b144d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "e0a3d910-e556-4829-b6b3-9297893b5856",
        "cursor": {
          "ref": "abf767a4-4dc9-452e-9c54-fd2fd7c0b7e7",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3c91ad75-16f1-4176-91b1-8f58bcad7ac6"
        },
        "item": {
          "id": "e0a3d910-e556-4829-b6b3-9297893b5856",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3d0ae9c9-3090-4859-a929-8ed25df769a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "0a0e49a0-4191-4e19-a61a-814346191a96",
        "cursor": {
          "ref": "894920a1-0c43-4d20-bd28-4d384c8a3ec7",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "882b36d5-2ad1-4028-b04d-77cd2c94600f"
        },
        "item": {
          "id": "0a0e49a0-4191-4e19-a61a-814346191a96",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9531bed9-27c5-4b81-8182-0f1319278cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "13b0f017-5c90-4269-bde3-09dde1640398",
        "cursor": {
          "ref": "7e57f8e6-0dbc-4f26-9e7d-6cc0a0911679",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "65dbfe34-c44b-427b-b504-7d501404fe35"
        },
        "item": {
          "id": "13b0f017-5c90-4269-bde3-09dde1640398",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ebeb6b17-c434-4f05-9512-e8aab4d6d5ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "47d359ab-b028-4563-9f57-2200a9a84cf7",
        "cursor": {
          "ref": "d84fca25-94e8-414d-b0af-055f65ad0076",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7d22ab40-87d5-47c1-bb86-02679805a0ae"
        },
        "item": {
          "id": "47d359ab-b028-4563-9f57-2200a9a84cf7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6391ddee-1f45-4025-80d9-8157e5384bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "91d64393-1df4-4921-969f-ada2ac5cae6b",
        "cursor": {
          "ref": "77949c42-faa6-48b0-a859-0f9852d3f5b5",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "1b075c71-8022-45dc-b8bd-9edadd636b1d"
        },
        "item": {
          "id": "91d64393-1df4-4921-969f-ada2ac5cae6b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7d346223-5888-43c4-84a3-8b1ddf6946a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "8219fa73-1192-4fda-aebc-b3a91de5bcfa",
        "cursor": {
          "ref": "252a1a1e-bc19-41d2-b91d-da864f87a17a",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "83873c7e-ae01-48e8-b01c-12cb25fa5cef"
        },
        "item": {
          "id": "8219fa73-1192-4fda-aebc-b3a91de5bcfa",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b9f83278-28ad-405b-a740-aea466278ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "78bbfab6-1769-4128-a7d2-d0dd74dd8f06",
        "cursor": {
          "ref": "7e8913eb-bce1-4a19-b17c-76c4543113bc",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b1e49ed0-e106-4235-a5cf-e8a6fc12d5d8"
        },
        "item": {
          "id": "78bbfab6-1769-4128-a7d2-d0dd74dd8f06",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "acf9cb98-1fe9-48cc-8854-9e8ecc6c9a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "bc11ad5f-6a65-4fb6-973d-4912d30aaa16",
        "cursor": {
          "ref": "154d439d-bd85-4cec-a77c-bd58199ed6b5",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "fe5798e9-c586-47ea-848f-af8d0b3625f6"
        },
        "item": {
          "id": "bc11ad5f-6a65-4fb6-973d-4912d30aaa16",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "549dd053-983e-4e17-80ae-5b845f37101e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "837c76fa-c172-4cbb-9147-a0a4eaacc6bc",
        "cursor": {
          "ref": "fda1d68b-e523-4b9c-8b36-6485f2e6e143",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "978a7b94-e9a2-4d65-a1cd-bc665fe4daa5"
        },
        "item": {
          "id": "837c76fa-c172-4cbb-9147-a0a4eaacc6bc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "03ebeec8-207a-4a71-a6a3-05ab8866413e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "baef4e1e-b56c-45f7-bb34-b456759fc5cb",
        "cursor": {
          "ref": "ebb6ebe4-1634-4d11-9aee-d87ffb2c3076",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "dd874e45-d997-49b5-84a4-6dd3e7f95027"
        },
        "item": {
          "id": "baef4e1e-b56c-45f7-bb34-b456759fc5cb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "970189b1-884a-4e03-9992-bc5d0f441beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "94504440-5333-45b7-adee-7984c4be081d",
        "cursor": {
          "ref": "f2778573-b174-4113-ac50-a606ffc72959",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "fdcea838-05db-491e-a91a-cfc90c80294f"
        },
        "item": {
          "id": "94504440-5333-45b7-adee-7984c4be081d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2c1987c5-f8af-4f46-b386-49509b7c9b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "a1fe3c47-e0c2-4090-b414-4820cc421f55",
        "cursor": {
          "ref": "836c34b4-43b2-4be4-a489-a82fee3dee1e",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "827437ab-b8b0-463e-bef0-b222e37c6e8b"
        },
        "item": {
          "id": "a1fe3c47-e0c2-4090-b414-4820cc421f55",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "390a3b70-2b3c-4461-9d00-ff9c7e4de412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "0dd14496-ba07-4499-9e71-cc39fd8a44f8",
        "cursor": {
          "ref": "800dcaf6-352d-43b7-84f3-f0dc381e6311",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "827295a4-a430-4796-a5e9-4bb5b55b445f"
        },
        "item": {
          "id": "0dd14496-ba07-4499-9e71-cc39fd8a44f8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "03823eda-e557-49b1-b15c-9ccd3cba1727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "25165842-5f87-4b29-8373-3e53a73d2389",
        "cursor": {
          "ref": "ade66b23-88c3-4a55-9d9a-3ab123ab31bd",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0977d0af-ded5-4498-b558-0211b190c449"
        },
        "item": {
          "id": "25165842-5f87-4b29-8373-3e53a73d2389",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "3b5d1ef1-706a-4355-856f-6291d168fcc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "f6d0c0e3-7728-4e37-ae2b-c80ce111882d",
        "cursor": {
          "ref": "3710b061-5f4a-4a06-82da-25f01a96fc75",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ab73d9be-2fff-49b7-bd15-29900e46cf41"
        },
        "item": {
          "id": "f6d0c0e3-7728-4e37-ae2b-c80ce111882d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3a087899-bd85-4927-9dc2-742221c8b0bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "1fb67adb-4e20-47b4-823d-6837f505e0f2",
        "cursor": {
          "ref": "0f9a5a0f-b744-431e-8237-b1a433a2e551",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "62490fea-bc03-45d1-98f2-ce67284b87c9"
        },
        "item": {
          "id": "1fb67adb-4e20-47b4-823d-6837f505e0f2",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f7b04c13-bd33-4488-bcc2-cbae0797c613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "4f3d968a-660c-416b-adee-66077c12817f",
        "cursor": {
          "ref": "ad0be06b-ddd3-488d-93b2-dc2d390e5128",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "39fd0b49-5af2-4ec5-823a-87ff0d53137e"
        },
        "item": {
          "id": "4f3d968a-660c-416b-adee-66077c12817f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a84b1953-a926-4c6f-a84b-521b141b2683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "4f3d968a-660c-416b-adee-66077c12817f",
        "cursor": {
          "ref": "ad0be06b-ddd3-488d-93b2-dc2d390e5128",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "39fd0b49-5af2-4ec5-823a-87ff0d53137e"
        },
        "item": {
          "id": "4f3d968a-660c-416b-adee-66077c12817f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a84b1953-a926-4c6f-a84b-521b141b2683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "270de16d-b405-492c-ae61-a883da34dd00",
        "cursor": {
          "ref": "6327ea92-aacb-490e-92c2-8b073366313c",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "738aaa6b-769f-457e-9fbb-cc8731f7382d"
        },
        "item": {
          "id": "270de16d-b405-492c-ae61-a883da34dd00",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b30a3789-ed95-4c64-b540-e45b3403df90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "5ecfbc3d-9a84-4b3d-a34c-68317ab0b82b",
        "cursor": {
          "ref": "3474c60d-d8d7-4b32-a531-74841a826f6a",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "bcd57f1c-3925-4476-9258-f254e04809d6"
        },
        "item": {
          "id": "5ecfbc3d-9a84-4b3d-a34c-68317ab0b82b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c3d61bab-065e-4267-a20f-01ace12475a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "1e824445-d208-4c82-95c0-f7c6ab5cea77",
        "cursor": {
          "ref": "f039eacc-cb4b-40bf-867c-56c5b4e4df79",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4c882260-3ee0-48b3-97b7-fbcfbfdfafd2"
        },
        "item": {
          "id": "1e824445-d208-4c82-95c0-f7c6ab5cea77",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2a822df3-bc55-4cfe-9b9a-2db77c2ea67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "e91a4a01-9852-4b46-99b0-a87bcff370d6",
        "cursor": {
          "ref": "c8913a2b-5f06-4d36-8cef-0e70dad99fed",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e1b34a58-0283-462e-bbf3-c42b7f565023"
        },
        "item": {
          "id": "e91a4a01-9852-4b46-99b0-a87bcff370d6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e24dfba7-c478-4b56-9a50-5cb17ef4b764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "bb43b2bf-31c4-4dfb-9788-d1a5ef8db20a",
        "cursor": {
          "ref": "f56b06c8-172d-4194-a8b7-5095b6e40f8d",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "67565524-489f-45cf-9c87-1241f1495c33"
        },
        "item": {
          "id": "bb43b2bf-31c4-4dfb-9788-d1a5ef8db20a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e1b15815-c12e-4ebe-af84-00d1b6f1e0fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "fc0925a0-597d-4606-b300-2260ef0019ee",
        "cursor": {
          "ref": "5b18f0a9-467c-4213-b1dc-6a965d96b26d",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6d331591-3217-481c-8bfb-35f6bc9e5e42"
        },
        "item": {
          "id": "fc0925a0-597d-4606-b300-2260ef0019ee",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "eb53fae8-110a-46af-82a6-d3d1cdc366a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "1c50c6ad-59c4-4475-98ec-49246c653eb8",
        "cursor": {
          "ref": "45d761f3-b5cc-41c5-9f00-0b7e1f25feb8",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "47e18927-b33c-4adc-9954-de78636b2a4c"
        },
        "item": {
          "id": "1c50c6ad-59c4-4475-98ec-49246c653eb8",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7c5f4592-e5f4-4a92-af78-79e3147f90a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "0d0a9e9c-6ce3-433a-976a-fcc4002a3d8e",
        "cursor": {
          "ref": "d6238b28-6157-49ad-a55f-223246e519d8",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1192fead-29db-4a0f-b2b3-27db0c07c9cc"
        },
        "item": {
          "id": "0d0a9e9c-6ce3-433a-976a-fcc4002a3d8e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2ae01dda-79e4-46b2-94d4-c4327a921976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "82d6c765-6f98-453e-9df2-8d5a3dede596",
        "cursor": {
          "ref": "f2fe863a-9762-45c6-ac58-a5482640765d",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "468cc96b-0926-4925-89e1-189f8d79a498"
        },
        "item": {
          "id": "82d6c765-6f98-453e-9df2-8d5a3dede596",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b59ac1b5-5afc-409b-b1e4-2304d4eacb09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "642f0973-deee-4584-beed-7d225c1a12f2",
        "cursor": {
          "ref": "42bac5a4-aea5-4292-be0d-1311b3f7ca4b",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c6d62477-db59-48a3-8183-a01ce06b3593"
        },
        "item": {
          "id": "642f0973-deee-4584-beed-7d225c1a12f2",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "905c54dc-9d03-404a-bee4-947318aa03dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "cb88a94a-c605-4698-bbb2-2ff5589fba42",
        "cursor": {
          "ref": "b95e16a1-02fe-453a-a9ac-c95e0416d226",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d180a169-75e7-4d9c-a955-35cf22288d88"
        },
        "item": {
          "id": "cb88a94a-c605-4698-bbb2-2ff5589fba42",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "de1e264e-7961-4ab4-8c1c-4a1039e0f150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "e49c3a89-2bb3-4e1a-a18d-476f8df20cf7",
        "cursor": {
          "ref": "b3de459b-0345-4e0c-b960-2e54343cce41",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5c4bb76b-9340-4bb6-ba76-0adb3b3c1143"
        },
        "item": {
          "id": "e49c3a89-2bb3-4e1a-a18d-476f8df20cf7",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "91662aea-27d4-4f98-b4de-0f861377b82d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "41d755be-6b23-4dc2-be9a-476a2e6e2924",
        "cursor": {
          "ref": "288cd5e1-4b18-454a-8728-7b21328234d9",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "da726881-25dd-468a-9f28-1127221b6bee"
        },
        "item": {
          "id": "41d755be-6b23-4dc2-be9a-476a2e6e2924",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "071a46a7-85ca-4474-bd84-a2a8d60172a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "4582e0ee-4f2d-4865-8c0b-597e84308573",
        "cursor": {
          "ref": "953f7d1a-2571-4553-bd06-8715e0bfa94b",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "57d76e58-58ff-4fc2-bc04-34fc05e20e70"
        },
        "item": {
          "id": "4582e0ee-4f2d-4865-8c0b-597e84308573",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fb441c49-59ab-49be-9434-5f8842eb75d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "f1f3c7f8-64d2-4feb-a0f4-5e209858f1ec",
        "cursor": {
          "ref": "7b2acb48-9bcd-415c-adfa-7aaa6e2aba4b",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d51e8f26-d975-483c-9ca3-2695ca5deca7"
        },
        "item": {
          "id": "f1f3c7f8-64d2-4feb-a0f4-5e209858f1ec",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "73a61fa3-51ab-4f5a-bc76-f5d4622a162f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "462ed73c-6c50-41ca-b904-256ea46a4344",
        "cursor": {
          "ref": "b3d9d2c7-4514-4dc3-861f-7bd4419b0007",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a4a950d9-4e16-416d-907c-2d78e5621f8f"
        },
        "item": {
          "id": "462ed73c-6c50-41ca-b904-256ea46a4344",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f3e1a90d-ae78-4f38-b079-622be676013d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "8927eb27-f2d7-4b12-a7d0-0d5c2716c61c",
        "cursor": {
          "ref": "071c1ee2-acf9-41ad-92b8-76b714add51c",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "90d2c9c4-4387-4b14-b9ea-55eb07b66297"
        },
        "item": {
          "id": "8927eb27-f2d7-4b12-a7d0-0d5c2716c61c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "37e65dd2-c479-4f8c-8251-8f99c2fc3542",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "84f43d49-9294-4952-bcb2-be7746a34070",
        "cursor": {
          "ref": "8ff021e5-6661-4b82-b4f0-d213d1ff51d6",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "727fe622-dc68-4376-91d5-1b7af65fb27a"
        },
        "item": {
          "id": "84f43d49-9294-4952-bcb2-be7746a34070",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8531bcf0-2edc-4086-967e-a6ff059e61f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "58f7f769-5d6d-4992-a1e8-1b9798a9c8db",
        "cursor": {
          "ref": "4c71da10-a031-4530-b017-0f02b306213c",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a2f44fe8-156e-4299-9cf0-de8fb6a43441"
        },
        "item": {
          "id": "58f7f769-5d6d-4992-a1e8-1b9798a9c8db",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8ee60bd8-4b1a-4f50-9d1a-a047668a84dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "10e5e721-1364-4c0b-b180-b197f407a827",
        "cursor": {
          "ref": "88c76236-a70e-4875-8eb7-a2b389528499",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "7edfea7b-7604-489f-8bc6-008e0b257da5"
        },
        "item": {
          "id": "10e5e721-1364-4c0b-b180-b197f407a827",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0ea2aaf9-e860-45ae-b0a4-d89cdbe8b991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 98
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "3af4f37a-b660-4f2e-9aa0-177a4c7df20d",
        "cursor": {
          "ref": "662eacfc-414c-4840-9e40-275fe757be31",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a0b3ff6a-89d7-4283-9300-3f85ba9b9172"
        },
        "item": {
          "id": "3af4f37a-b660-4f2e-9aa0-177a4c7df20d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "45f22bb8-5b79-4a1e-b5b9-50111c93a797",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "bf75c689-95ad-4d3a-b548-f0a86c2e20ae",
        "cursor": {
          "ref": "4a000b46-119c-41c3-85b4-64f1e0dad2c9",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b30b0321-56f6-4cc4-b74f-2d2f37690c3f"
        },
        "item": {
          "id": "bf75c689-95ad-4d3a-b548-f0a86c2e20ae",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8f30a07a-bb58-410d-b26f-165ba449468a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "ce3318ab-f6f8-4be2-80ca-acd7aed422f8",
        "cursor": {
          "ref": "bda8c1bc-ad36-4f61-a4d9-b80c28956880",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b7527a3b-0d5f-4aae-91e1-d1ef779308b6"
        },
        "item": {
          "id": "ce3318ab-f6f8-4be2-80ca-acd7aed422f8",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "57fdc295-c3d2-40de-8bef-0a89281c6bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "c23b53a3-d735-4b7b-8839-33eac75a52dd",
        "cursor": {
          "ref": "3589dcf9-2928-41ba-91ae-7d63d0d14bc3",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4ac4075b-db74-45df-9da7-3bd963980059"
        },
        "item": {
          "id": "c23b53a3-d735-4b7b-8839-33eac75a52dd",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9e054c6e-137e-4f84-b16d-bfbd8560db84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "0ef16c22-0eec-41e6-a6e6-d8b88569120f",
        "cursor": {
          "ref": "dabc7d30-641d-4b85-af8b-0f81a29c4804",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e346038c-81e5-49e3-ba0c-1698e9c7853e"
        },
        "item": {
          "id": "0ef16c22-0eec-41e6-a6e6-d8b88569120f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "cd2e32cf-4d01-4ec6-8b7a-4bbb663463ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "ab451c1d-7995-4d0a-bac5-6030086df5d1",
        "cursor": {
          "ref": "501664e7-ecd7-41c5-a362-b2ec012a932a",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f972c9c5-f5ed-410d-a643-2a120775ba2d"
        },
        "item": {
          "id": "ab451c1d-7995-4d0a-bac5-6030086df5d1",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "509b1022-934c-42ff-8811-686fd3ae675b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "939b4830-0845-43bd-97fe-51c84f184df8",
        "cursor": {
          "ref": "3879a55d-93f5-4d52-bd55-e4cc1b7e2e3d",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3bc61a82-d19c-4f8d-9220-a4ed1b2f0ec0"
        },
        "item": {
          "id": "939b4830-0845-43bd-97fe-51c84f184df8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "00382423-e701-41c2-a857-e9ad7e34ed15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "8795bccf-47af-4268-9266-c6ee2deb449b",
        "cursor": {
          "ref": "26807e37-562d-46cf-b629-341503d4cff5",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "48a04c32-2541-48a7-9136-54160b6c749a"
        },
        "item": {
          "id": "8795bccf-47af-4268-9266-c6ee2deb449b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "281c1c00-3b31-4aab-b7de-4e67bf9405fc",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "f98015cb-7a67-4dd0-8d46-9ac059053d2e",
        "cursor": {
          "ref": "0c773131-3388-412b-91ca-b8e63a7b4e35",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ed10ab4f-2f63-41fc-ba7b-49bb0b391819"
        },
        "item": {
          "id": "f98015cb-7a67-4dd0-8d46-9ac059053d2e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "33f44614-b2dd-4b60-b8ca-a12bb1cdc817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "c9c7961f-6d30-419a-9542-17202c2450fb",
        "cursor": {
          "ref": "4d3138cd-ea0f-4e06-b4f6-f9f93a02dc91",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b4852199-1000-46f0-816d-75a9d5513443"
        },
        "item": {
          "id": "c9c7961f-6d30-419a-9542-17202c2450fb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d601bba0-76d9-41db-a711-553a52bfa858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "3188c119-db1b-4667-bc56-0e5f00cf3074",
        "cursor": {
          "ref": "5779e476-cf3c-491f-a59c-cfe7427604e7",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "de7d5a92-287e-462e-b9f8-8bb70753ec55"
        },
        "item": {
          "id": "3188c119-db1b-4667-bc56-0e5f00cf3074",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c61793f0-74d3-4621-84ba-ba719b6528d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "fd582edd-78dc-4004-8471-8a8b15a32167",
        "cursor": {
          "ref": "eb4029ad-f088-4be2-b80b-1cac52aaf52d",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "deee4b85-f2c7-4750-b755-62081e6203e1"
        },
        "item": {
          "id": "fd582edd-78dc-4004-8471-8a8b15a32167",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e0f5bcd7-929e-42f3-9571-dcdd3ffde616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "42fb3d51-fe86-4dd2-80c7-89b4b07d6007",
        "cursor": {
          "ref": "6e95f2e7-f7e3-424a-9bd8-13ea9a5d5fb0",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e54a61d8-1ede-405a-8586-10013211772d"
        },
        "item": {
          "id": "42fb3d51-fe86-4dd2-80c7-89b4b07d6007",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5b3001ad-1411-423c-a536-b599bbe6a7dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "37fd7da6-7288-4660-9251-e2ff63b5e285",
        "cursor": {
          "ref": "056f01c3-3d64-4080-8857-19a0f10165c7",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "44ad18d4-3c18-4de9-a6d2-a1af2173129e"
        },
        "item": {
          "id": "37fd7da6-7288-4660-9251-e2ff63b5e285",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "38e09a14-4f14-4ef2-8f72-e774a00d5ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "fea8d11b-e5f0-4090-87b3-15cf537183b6",
        "cursor": {
          "ref": "8d7dca30-1f44-467d-96c6-dca46041cd1b",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b0442bc4-01a2-4fde-be42-d22bd5c3f410"
        },
        "item": {
          "id": "fea8d11b-e5f0-4090-87b3-15cf537183b6",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3d650b07-e539-4c15-a972-c962323fe447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "486adb7c-93fb-4de3-aa8c-69c0235569f6",
        "cursor": {
          "ref": "f9176ea0-c337-4d88-a80e-f8c6be6710a9",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "80fadb9b-3b43-4445-a80b-9c8c9b410719"
        },
        "item": {
          "id": "486adb7c-93fb-4de3-aa8c-69c0235569f6",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5664ff42-8d7d-481d-b971-d4476eaf22a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "10e95c27-cb8e-4ff6-a54d-ac0c0e0a7d20",
        "cursor": {
          "ref": "22eeb7e5-fba6-43a7-af40-c6e0cad48e9d",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "238a950b-0f45-46c8-9680-f7b2773f7279"
        },
        "item": {
          "id": "10e95c27-cb8e-4ff6-a54d-ac0c0e0a7d20",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4de13307-dfa1-4a32-8103-b521651fc363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "e0f274e8-490e-4fdb-a9ff-2c3fde38bec8",
        "cursor": {
          "ref": "bcb297da-e1a0-48fb-ae53-5148ba3c39c5",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ff04b2ef-e520-4332-bb56-65a1bf528db4"
        },
        "item": {
          "id": "e0f274e8-490e-4fdb-a9ff-2c3fde38bec8",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b9055a92-7a91-4409-a701-e70d9bfdb42c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "a3d57991-577d-4625-baa6-1e183c9a805f",
        "cursor": {
          "ref": "e22afc21-5dcd-4480-84e6-f6c4ddc3cfed",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e3a2aa00-78db-49f3-a26f-9615ece6d033"
        },
        "item": {
          "id": "a3d57991-577d-4625-baa6-1e183c9a805f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a64797c0-bb6e-40ab-ab20-2c6faf126ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "e6b98dae-bcbd-40aa-8d77-2782f5d1c932",
        "cursor": {
          "ref": "bc7968de-3479-409a-9661-7fce872e1e76",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2218dbb6-b48e-4c70-a493-110f3850aee3"
        },
        "item": {
          "id": "e6b98dae-bcbd-40aa-8d77-2782f5d1c932",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2d3bcd09-eba1-4419-abc8-24d210c17a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "eeec82ac-1b10-48f7-858d-e85e2478761c",
        "cursor": {
          "ref": "2e0303e4-847e-45cb-9265-de870f712259",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "15951c28-b175-4a5d-979c-f8ec440784c1"
        },
        "item": {
          "id": "eeec82ac-1b10-48f7-858d-e85e2478761c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "dd93bbdd-2313-4d1d-9f3f-0424cdfabe7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "fcdc799f-5257-4c15-81ab-3e72824deb21",
        "cursor": {
          "ref": "88aa8e5c-9c77-4e4a-9cd6-995a5db64faa",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3d7a8469-003a-4c47-947b-bdccfe2cd56f"
        },
        "item": {
          "id": "fcdc799f-5257-4c15-81ab-3e72824deb21",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "769be25d-bdbb-44e1-845c-b425901e4096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "89559f53-9443-41e3-b986-b4990939e737",
        "cursor": {
          "ref": "49f4b1ce-098d-4e15-91bf-5cda6973939a",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "108909a6-3194-4ed5-9895-04a09381d82c"
        },
        "item": {
          "id": "89559f53-9443-41e3-b986-b4990939e737",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "711c7f10-3be7-49bd-b56a-7ba14ed6ce9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "1979aecc-6110-48a3-be85-dd9b6c913929",
        "cursor": {
          "ref": "86e0a6fc-d54d-4403-9c80-70ba784b81f4",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e2b36c8a-4ae9-4345-adce-ba5de7162771"
        },
        "item": {
          "id": "1979aecc-6110-48a3-be85-dd9b6c913929",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "baef5500-79ab-4ff2-af2e-e72b4d3025b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "3c5942c4-c4bc-4e1d-a423-71dd89a53709",
        "cursor": {
          "ref": "6f9c94a3-0df8-4b88-bb50-e96a6e9fe799",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "565230eb-e075-4d83-b6b0-0941fedd32c9"
        },
        "item": {
          "id": "3c5942c4-c4bc-4e1d-a423-71dd89a53709",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1135fbd4-6fac-4754-863d-7d54b149f7ff",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "487408d6-e14a-4c44-99ca-978c5bb35d12",
        "cursor": {
          "ref": "0f3e3d81-6db8-4521-bdef-2941dfa4348e",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "158b1868-66d9-4922-ab4e-129c7712bba8"
        },
        "item": {
          "id": "487408d6-e14a-4c44-99ca-978c5bb35d12",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "15851dbf-0e7e-44db-b1bc-e7f57acd2cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "e33a04d6-be24-4dec-9e51-3d790820200e",
        "cursor": {
          "ref": "081e919c-1949-42cd-ad54-34ddcabd8aed",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "aad9eeaa-fd17-40ff-b7c1-f8fa33fea4ba"
        },
        "item": {
          "id": "e33a04d6-be24-4dec-9e51-3d790820200e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b5cdde03-15f3-4454-bfa3-fe009e72d31f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "a0f0e5b5-88eb-4bc5-a18d-bcbd7edcdadd",
        "cursor": {
          "ref": "daa9f781-2621-4ad0-bc84-1e7611fc6395",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "72c757da-78fe-4784-9ea6-cc1b5f835db1"
        },
        "item": {
          "id": "a0f0e5b5-88eb-4bc5-a18d-bcbd7edcdadd",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ffc396c5-dbe4-4b2b-936c-ed2c1fea2eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "2b333e9b-3ee8-4f92-bd5d-416a394bfe3e",
        "cursor": {
          "ref": "cf37fe1e-fb23-4aed-9fb0-7eea2f758d16",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "3a423b56-1cec-4503-b02e-400db34d3904"
        },
        "item": {
          "id": "2b333e9b-3ee8-4f92-bd5d-416a394bfe3e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ebb2c1a7-d338-4137-b571-e803a64b1d02",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "1bf0abd8-e0fc-47a3-acb6-c6133d60c668",
        "cursor": {
          "ref": "4ac3cd42-73e3-4b19-a1be-9c1304b437b3",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "84fb9e7f-cb11-4fbb-9855-bb0d425e9b74"
        },
        "item": {
          "id": "1bf0abd8-e0fc-47a3-acb6-c6133d60c668",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f4cfb3e1-1d86-4d4f-a6f7-518acf692b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "8d096db0-0e92-4aee-a568-fa2fbcf80f97",
        "cursor": {
          "ref": "c1ef3eef-0ad9-484d-af20-58bc1411fefb",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5f23d56b-444f-4da6-bd5e-6e84f47818bd"
        },
        "item": {
          "id": "8d096db0-0e92-4aee-a568-fa2fbcf80f97",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a22fbd01-49c0-4d57-a3a1-8cf1ad2542e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "ad4c0eb2-7eeb-4439-8ee5-9c7c66d36f73",
        "cursor": {
          "ref": "8e40562d-c385-4644-b054-7b6d7ce7d7e9",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b3b6518c-574a-4572-ab36-93e382ac8542"
        },
        "item": {
          "id": "ad4c0eb2-7eeb-4439-8ee5-9c7c66d36f73",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e5524744-022e-4b91-9550-b41b5efa0229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "ad749769-1eb9-4f0d-8817-7a98d40bc192",
        "cursor": {
          "ref": "7437c58a-c2de-469a-ba66-8c084363d88c",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "84c0513d-d84c-448c-b020-b2612332f523"
        },
        "item": {
          "id": "ad749769-1eb9-4f0d-8817-7a98d40bc192",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "149f50a0-d154-4830-8cc5-5403da7367fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "b53578b2-ad86-492e-8acb-3c62667b61a2",
        "cursor": {
          "ref": "f7d40216-e38c-4766-9b31-435340f7dd5d",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7c70c682-e298-484d-9897-3b8d19276b3c"
        },
        "item": {
          "id": "b53578b2-ad86-492e-8acb-3c62667b61a2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0aab1b14-6a0b-4308-9199-6793786a77c8",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 94
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "0b439a0b-f653-43df-9c2a-6bd7849e3d4d",
        "cursor": {
          "ref": "9d4be0cf-880a-4841-91e1-7ecd7ce8fd55",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6d1e298c-e4d4-417c-86ba-2d7cd7890689"
        },
        "item": {
          "id": "0b439a0b-f653-43df-9c2a-6bd7849e3d4d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1d256b4c-8923-422e-849e-4be9b23d0df8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "ff7e4a46-107c-47eb-a580-67009dbc6060",
        "cursor": {
          "ref": "cb359c84-91d3-4fe0-b3c9-9edad0ce85a3",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ac7d6fff-0cc1-4621-af6b-00fd1545ee3e"
        },
        "item": {
          "id": "ff7e4a46-107c-47eb-a580-67009dbc6060",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "fa948ac9-aac3-4603-b845-d480e674d268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "73f59ca4-713e-4b29-8c35-9b7aeb284cb7",
        "cursor": {
          "ref": "0e5d5c2f-1c4c-4208-8804-1c2f14dfdcf6",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5cedfb8a-c81c-461b-ba50-14e7d5c616b9"
        },
        "item": {
          "id": "73f59ca4-713e-4b29-8c35-9b7aeb284cb7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "477f7120-b409-44d6-8c3e-57b122f6aac0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "b08c70f7-bcee-4d13-afa9-d1b41ca86db3",
        "cursor": {
          "ref": "e938f6b8-b4ca-43b6-a81d-ba48d3f101a1",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8a3ab685-c342-40d9-b642-50e523dc5aa4"
        },
        "item": {
          "id": "b08c70f7-bcee-4d13-afa9-d1b41ca86db3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "358689af-3294-4dcd-9c7a-99473b885625",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "270a46aa-3db8-4c08-8ad8-e8083b8501b4",
        "cursor": {
          "ref": "883b3a08-9813-49e8-a030-b9ba4fadb864",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9e3cf6a8-a6dc-4632-a95e-6d0e777917e0"
        },
        "item": {
          "id": "270a46aa-3db8-4c08-8ad8-e8083b8501b4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "30b0dec8-ba12-4e7c-b147-8ba8d49bb2f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "8085e271-0568-46db-b9d7-ce4708052bc9",
        "cursor": {
          "ref": "9265f17f-bd8e-4cf0-891b-9fcdd29b100a",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b7a76865-18ac-47bf-9702-cc8324d1cf3e"
        },
        "item": {
          "id": "8085e271-0568-46db-b9d7-ce4708052bc9",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "570f8d2d-35a0-4e8b-b488-a038796f5d74",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "d05ba9d5-8d0a-4eb9-92e6-926f784d740c",
        "cursor": {
          "ref": "7467a557-f4fc-4e21-b5d6-a25c82c58483",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8ebf3960-6423-4123-84b4-057f201a85aa"
        },
        "item": {
          "id": "d05ba9d5-8d0a-4eb9-92e6-926f784d740c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "06a337de-e663-43e3-a9b6-056243149368",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "a0b47049-4639-455c-a764-cf6a9bcd6e21",
        "cursor": {
          "ref": "993f56ea-92cb-43fd-a008-7282754d02f2",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e0964aed-ca7d-4d64-b3fe-edcc76d057fa"
        },
        "item": {
          "id": "a0b47049-4639-455c-a764-cf6a9bcd6e21",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9e8f8c9c-143b-4a71-8871-c80e1f17a5fe",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "3de6aef3-44d5-41d2-abc9-077c456b1d4d",
        "cursor": {
          "ref": "6a843963-237f-4984-8fb4-cb89fdc554a8",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2a0860c0-ee0c-415a-9c67-023c550079e9"
        },
        "item": {
          "id": "3de6aef3-44d5-41d2-abc9-077c456b1d4d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "37ccfbcc-6954-4ce9-8bea-35de7ed7b932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "ffb5e34b-b5a6-447f-8d51-2d7a261d39ed",
        "cursor": {
          "ref": "255dfddf-1e16-40f8-b172-ae73c2515f41",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "21761677-3fce-487e-b515-6f84e1baa1c6"
        },
        "item": {
          "id": "ffb5e34b-b5a6-447f-8d51-2d7a261d39ed",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "deb3a18f-4a03-42a1-8294-967f1cc5ed60",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "6b1c0b7e-87db-44f1-8c6f-67332fef9657",
        "cursor": {
          "ref": "4a67cee1-5807-437c-aac7-9724812d76ba",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "c46c203c-58ae-4e4e-af8d-4c60628c438a"
        },
        "item": {
          "id": "6b1c0b7e-87db-44f1-8c6f-67332fef9657",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "277dd241-429e-4b51-bc16-f41d11427ba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "8cab3fe7-cc80-4d74-8e32-e2c52b73c63d",
        "cursor": {
          "ref": "df6cb298-2592-4e6f-9d7c-b4fac04ba938",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6da599ef-6eb0-425f-a4ca-6284cc2af5ec"
        },
        "item": {
          "id": "8cab3fe7-cc80-4d74-8e32-e2c52b73c63d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "23a9068e-86fe-443f-a4ac-5dc2fc2a69a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "bebd15f9-df9f-42a1-93f9-af9a1961ef54",
        "cursor": {
          "ref": "14023339-9d8c-4ca0-a966-bf24d84d9770",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "007786c1-6943-4831-a144-5a85b8aa7497"
        },
        "item": {
          "id": "bebd15f9-df9f-42a1-93f9-af9a1961ef54",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "073a59fe-d29f-4fbd-acd1-118115776476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "b815aa5e-b045-4810-954a-9c312d6315ef",
        "cursor": {
          "ref": "f1954e4e-6d0a-4583-a370-f142b4ccb465",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "40bf1f01-ca26-44c9-a178-62c4e7647de0"
        },
        "item": {
          "id": "b815aa5e-b045-4810-954a-9c312d6315ef",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a6c76697-27b8-4da3-a651-52ee168b34bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "f4fd301b-a41c-4ea6-b1e1-287d725f3f13",
        "cursor": {
          "ref": "33a78308-9936-44f0-a690-e2e1d75379ba",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "50507a06-980a-42f3-b3fb-4973d13717d3"
        },
        "item": {
          "id": "f4fd301b-a41c-4ea6-b1e1-287d725f3f13",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d691db41-f2ec-4ab0-b17d-2bd368214cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "756a40fc-18a7-4273-86a1-9e4e5418b3ae",
        "cursor": {
          "ref": "19868a58-5d1a-4d33-87ff-78fa1a0d30bc",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "25d8f237-383c-41df-ab8d-77d419dd8311"
        },
        "item": {
          "id": "756a40fc-18a7-4273-86a1-9e4e5418b3ae",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c3b282a9-8e8b-4396-99e7-33bf03aaf816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "759db0a0-732f-4b5d-aba8-b07984a58f9f",
        "cursor": {
          "ref": "05320585-67e8-4ebc-8b04-ba71f9b00e88",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "6325d784-7da4-440e-850e-580b836586a8"
        },
        "item": {
          "id": "759db0a0-732f-4b5d-aba8-b07984a58f9f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "11f548f2-6d62-4d84-a6b2-01e5dccc2f2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "019b4af2-26a1-457f-be55-6cc6959e21d0",
        "cursor": {
          "ref": "da6c41d8-5e7d-4fc9-9e0b-e96ae10cfa81",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ee08fde7-33ae-4879-a11a-a929353b4441"
        },
        "item": {
          "id": "019b4af2-26a1-457f-be55-6cc6959e21d0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "dbb3c676-ccd9-44c1-b2e0-acf546d0cca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "56be1690-3c4a-443c-8ab1-9cd0870daffe",
        "cursor": {
          "ref": "dfb591f4-2a98-4470-a04f-1642165dcbfa",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d6cc5df0-8087-449a-b23e-2a660a5a2bb4"
        },
        "item": {
          "id": "56be1690-3c4a-443c-8ab1-9cd0870daffe",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6fbdb520-5ad9-4033-b099-48492d1fe5fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "d1a34413-fa2c-46b5-86ab-739938c93e25",
        "cursor": {
          "ref": "6147b4af-72b1-4df3-97fb-d75d8ca775e4",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f78057b7-c089-42a0-a34d-da4fa08f2751"
        },
        "item": {
          "id": "d1a34413-fa2c-46b5-86ab-739938c93e25",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "69109a3c-ba9f-4a5f-a6e3-53dbae37999b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "f0c2b221-76e0-4b9c-9727-7699dd0f0fb2",
        "cursor": {
          "ref": "1896fab7-45d5-4987-8641-d65528186d06",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9a8d8436-ac71-45a5-a979-da37fdc66ebc"
        },
        "item": {
          "id": "f0c2b221-76e0-4b9c-9727-7699dd0f0fb2",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b3e1cfb1-8338-4a6f-850d-92eba308b730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "2870cbb7-037d-4e68-b4d5-241649748774",
        "cursor": {
          "ref": "439fa591-8aaa-43c7-ae5a-94dd68c2e67e",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9bed1543-a10d-488a-bf58-effafb07fc04"
        },
        "item": {
          "id": "2870cbb7-037d-4e68-b4d5-241649748774",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fa829220-f1c5-48e9-bd71-1460c5ab6664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "da35d7d7-efd5-4eb7-ae61-9792efb696c5",
        "cursor": {
          "ref": "aefa3f3c-3fef-48d6-a8b0-267ed1deca35",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "09472e9d-aa6f-4421-8fc1-9e96ef9977ff"
        },
        "item": {
          "id": "da35d7d7-efd5-4eb7-ae61-9792efb696c5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3d7d2eda-4ea3-44c3-b380-e33f6f620b0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "94148883-0bb3-40c4-bcd1-042443e2b957",
        "cursor": {
          "ref": "19063c5d-69e9-459f-9178-a28143fc3676",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f4dfef7e-dcb7-45ef-a8c6-c088c444e002"
        },
        "item": {
          "id": "94148883-0bb3-40c4-bcd1-042443e2b957",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3d4ceb9e-5cd8-4f92-a01d-b0c71f370615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "510fadd4-829e-498c-bdf9-73ca0b5ca897",
        "cursor": {
          "ref": "c42cb308-42d6-4080-87b4-08450c352146",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "edaf7233-3085-422a-9f5e-0ea63b6f760f"
        },
        "item": {
          "id": "510fadd4-829e-498c-bdf9-73ca0b5ca897",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "de6c2e0a-c7fa-4180-9dab-fb1e6c64cee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "699a3563-789d-4fe3-8a58-31a9c8eaecfc",
        "cursor": {
          "ref": "8a9869d5-05d2-4c15-9c29-a892658b3c62",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "101b08e2-f504-4336-b98c-5e16009e882c"
        },
        "item": {
          "id": "699a3563-789d-4fe3-8a58-31a9c8eaecfc",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3b664073-2b66-4d99-9f77-78f156fb478f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "0b436335-86ec-47bc-b353-616af84c9add",
        "cursor": {
          "ref": "c8bcde8c-7212-4ab9-b7a7-03a15a8f68b3",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "cce17d5f-64cd-4371-9b22-5c257a6329ff"
        },
        "item": {
          "id": "0b436335-86ec-47bc-b353-616af84c9add",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0467bf55-01a2-4e97-a5dc-93c9ca2598a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "d093e9ce-f62c-47a8-8642-19f13e35a328",
        "cursor": {
          "ref": "2ae3029b-4061-418e-934b-3468eec26147",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5b9f72a5-b822-4fe4-b9a3-34d1ebca36d7"
        },
        "item": {
          "id": "d093e9ce-f62c-47a8-8642-19f13e35a328",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0bad692e-fa81-4e13-9ae8-51ef84d85286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "37d40f93-d1c3-47ae-98c2-4420d3121e53",
        "cursor": {
          "ref": "f3c94d1a-db94-41e9-91cc-260860ce75c7",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "74de9bb9-90b9-4489-8383-4e9fd3da88bc"
        },
        "item": {
          "id": "37d40f93-d1c3-47ae-98c2-4420d3121e53",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3aaba708-83cd-43b3-88e0-0784138bc469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "c2a33246-b874-4145-9f19-47aabc2b8cd9",
        "cursor": {
          "ref": "886dc513-2e9d-49dd-bea9-9fdc9ccb349d",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "5337b195-92e0-42b7-a84e-d844f65cc453"
        },
        "item": {
          "id": "c2a33246-b874-4145-9f19-47aabc2b8cd9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "99af8df1-f54d-4073-a892-a0cb7e5a2e39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "4e071006-af48-41de-833a-9cbe965377a3",
        "cursor": {
          "ref": "d5646f21-7c29-4b9b-87d2-6db3587e456c",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f6cf365e-db0d-419a-8924-5baa8174e6f3"
        },
        "item": {
          "id": "4e071006-af48-41de-833a-9cbe965377a3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "44d7caaf-dec0-4fb9-9254-087d757621e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "e1989e98-0ca5-45b1-a419-8cd5c15fec2f",
        "cursor": {
          "ref": "83562f81-d54d-4ba7-bd1d-30aaa1329a1b",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3743384c-ed20-491e-92f3-7dbf0a597f82"
        },
        "item": {
          "id": "e1989e98-0ca5-45b1-a419-8cd5c15fec2f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f2e44cf7-23c9-4c7f-8a18-00f9da02246d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "89070129-854f-4e63-9a0d-a8ad8d9a5500",
        "cursor": {
          "ref": "e71dbc8c-5f61-4003-b3c4-b117c9a78be4",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a0f06daa-8c58-45bc-b314-e9323691c719"
        },
        "item": {
          "id": "89070129-854f-4e63-9a0d-a8ad8d9a5500",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "151c8b38-9e98-4309-b60a-9de20159500d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "4a81043f-170c-4129-8ccf-a2e74df782b8",
        "cursor": {
          "ref": "f6b558ff-5b03-4dd9-ae13-21f6dfcd0c14",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5eba76e2-ddbd-4050-8507-2e425545b295"
        },
        "item": {
          "id": "4a81043f-170c-4129-8ccf-a2e74df782b8",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1cdcde0c-6fe0-410f-9a36-eed8aafaf166",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "439d521a-e7bc-43c6-9086-bdc17d213ff8",
        "cursor": {
          "ref": "34da80ba-3c21-44eb-9741-ae33cf07fe81",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "78b4c46c-99b6-46c1-aeff-a35430c9dad3"
        },
        "item": {
          "id": "439d521a-e7bc-43c6-9086-bdc17d213ff8",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e5f827eb-bf52-465a-976c-dc0df3d6d110",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "4c3678f2-3de3-4e3a-b1dd-f198744b80c6",
        "cursor": {
          "ref": "f6bc5abe-6350-41a0-bed3-7e15b1a96e50",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "13e9743a-40c8-4466-b992-776b753ddc3f"
        },
        "item": {
          "id": "4c3678f2-3de3-4e3a-b1dd-f198744b80c6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "483f286e-ab7b-448e-8f4b-7d6fa2a6663c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "23a3d83c-c0e6-4607-a379-e370a1fe697f",
        "cursor": {
          "ref": "98653846-86d6-43a4-ad40-1390f3f72438",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6d1c4eab-5ded-431a-b548-ea238f51955c"
        },
        "item": {
          "id": "23a3d83c-c0e6-4607-a379-e370a1fe697f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ffbe14ba-a28a-4e99-ab77-4cdaf9e25afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "4fc095b7-b384-4add-b2b1-a92697c3fa25",
        "cursor": {
          "ref": "026b847b-a468-4f94-8ede-da4c4cb6ba9f",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d611540e-b5f9-4c73-8d2c-f0dd80144619"
        },
        "item": {
          "id": "4fc095b7-b384-4add-b2b1-a92697c3fa25",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4be747d9-ae0c-4970-bc86-37995e4dd722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "a388d03e-d45f-4582-8669-48329e1f7bbc",
        "cursor": {
          "ref": "762362e7-0ddd-47be-b099-dc9398caa975",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2c6c803c-8b23-4cf8-8f48-11f1ed7c50d3"
        },
        "item": {
          "id": "a388d03e-d45f-4582-8669-48329e1f7bbc",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "42d27f8f-8a65-4dda-ba65-c67601658ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "b39babf3-2353-4be6-ba21-bbb04b9b537a",
        "cursor": {
          "ref": "b8ca09bb-6ca1-4671-a590-33b1d4f91301",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "55952946-0f2a-497a-833e-1a17a742f9e3"
        },
        "item": {
          "id": "b39babf3-2353-4be6-ba21-bbb04b9b537a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1002c440-b036-4323-8161-a490073a6f9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c4df335f-945a-4c94-b042-0629762b0a3a",
        "cursor": {
          "ref": "33fa568f-bb0c-40e0-875c-69dc3402c1b5",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "39ca7476-a5a9-4935-9327-5a17826f8082"
        },
        "item": {
          "id": "c4df335f-945a-4c94-b042-0629762b0a3a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "88a51420-d289-46fb-bc7b-c3b9ef2443c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "e51030c9-216c-4f1c-b2a1-1c557ff71e98",
        "cursor": {
          "ref": "3e6f8862-f171-485e-9098-aa8b6c8f9e66",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2d118ef0-1ed3-4747-9165-6f38be3e3ad1"
        },
        "item": {
          "id": "e51030c9-216c-4f1c-b2a1-1c557ff71e98",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "15b1a553-875a-4bf7-b2b2-a04e90546f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "b24da33e-7340-4663-ba86-22462b598136",
        "cursor": {
          "ref": "f3bed165-d2a7-419f-9c59-d660c2570bd7",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "527eaa31-fca3-4eae-969c-86b48e1e5cb4"
        },
        "item": {
          "id": "b24da33e-7340-4663-ba86-22462b598136",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "924721a6-ff19-49e5-82c7-0423c79d29e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "b05b06a3-42a7-4b94-b67c-f10edea5f593",
        "cursor": {
          "ref": "264bda31-e06a-452e-a915-70bfa4ef6311",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "582c5fb8-3a40-4ee7-94f2-8faa4bb3ed84"
        },
        "item": {
          "id": "b05b06a3-42a7-4b94-b67c-f10edea5f593",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "182360a3-b52e-4926-a765-7af67c4336ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "db785d48-878e-4863-a6ce-863db754535a",
        "cursor": {
          "ref": "5148d1ce-be44-4d7d-976c-ca467d5b1f3a",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "faee24ef-b288-46f5-8fc9-e6c7c45672fe"
        },
        "item": {
          "id": "db785d48-878e-4863-a6ce-863db754535a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a24cd72b-f4bf-4490-8214-1f21ec847b2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "7fc9c0cb-fd95-41b9-b8af-491032bd15e0",
        "cursor": {
          "ref": "3b5de9a5-80e2-4c63-8abe-6b55dd845c55",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4cec8fd1-6af2-4894-b9a3-827fd8734d42"
        },
        "item": {
          "id": "7fc9c0cb-fd95-41b9-b8af-491032bd15e0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "54922ec6-ef6e-4d87-80d7-953b10590b0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "369fd535-7abc-4b89-8deb-0b15336217e9",
        "cursor": {
          "ref": "e988c28e-bcc8-4640-8947-2c03bcaf95ea",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "94a8a7c2-7189-4fc6-a232-c9d51d02afe5"
        },
        "item": {
          "id": "369fd535-7abc-4b89-8deb-0b15336217e9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a74ae652-351d-494e-b9ea-c82b833094f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "f9e9e4dc-e56e-4514-96f3-6669a30e1760",
        "cursor": {
          "ref": "ecb1ded0-07d7-4de4-bb8a-40dbed6a0540",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "59df5a5d-198a-4373-ae3d-ca315db92f97"
        },
        "item": {
          "id": "f9e9e4dc-e56e-4514-96f3-6669a30e1760",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "18877550-45cf-4b72-b563-055ced4526dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "f9e9e4dc-e56e-4514-96f3-6669a30e1760",
        "cursor": {
          "ref": "ecb1ded0-07d7-4de4-bb8a-40dbed6a0540",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "59df5a5d-198a-4373-ae3d-ca315db92f97"
        },
        "item": {
          "id": "f9e9e4dc-e56e-4514-96f3-6669a30e1760",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "18877550-45cf-4b72-b563-055ced4526dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "f9e9e4dc-e56e-4514-96f3-6669a30e1760",
        "cursor": {
          "ref": "ecb1ded0-07d7-4de4-bb8a-40dbed6a0540",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "59df5a5d-198a-4373-ae3d-ca315db92f97"
        },
        "item": {
          "id": "f9e9e4dc-e56e-4514-96f3-6669a30e1760",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "18877550-45cf-4b72-b563-055ced4526dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "14bcd9b9-54ed-405a-afe1-263aa1983a90",
        "cursor": {
          "ref": "21c32ab5-d450-4398-9e59-78a6ece27a58",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ac74e4d5-1d3b-4d88-ba64-62b4fbe6d43b"
        },
        "item": {
          "id": "14bcd9b9-54ed-405a-afe1-263aa1983a90",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "ac90d880-7e26-4b69-8fb2-599eb0360e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 318
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "6ec9c321-b096-4b26-8278-f985805745fc",
        "cursor": {
          "ref": "ca0f7cfa-3350-44e8-baaf-e32ab0b3a1b7",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b6f92fe2-8afd-476c-8551-6213a473e77d"
        },
        "item": {
          "id": "6ec9c321-b096-4b26-8278-f985805745fc",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3651af08-6dc2-4008-94a6-8af310a4dd97",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "6ec9c321-b096-4b26-8278-f985805745fc",
        "cursor": {
          "ref": "ca0f7cfa-3350-44e8-baaf-e32ab0b3a1b7",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b6f92fe2-8afd-476c-8551-6213a473e77d"
        },
        "item": {
          "id": "6ec9c321-b096-4b26-8278-f985805745fc",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3651af08-6dc2-4008-94a6-8af310a4dd97",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "00cf7ea3-4540-42dd-875b-cd6d9a4e14cb",
        "cursor": {
          "ref": "3a1a8d57-1403-41d5-9ade-d67201151e7f",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "31701865-15dd-4ca6-bee7-1f3bf5424e21"
        },
        "item": {
          "id": "00cf7ea3-4540-42dd-875b-cd6d9a4e14cb",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "9a212a49-d29d-437e-b51a-cc47459196dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 87
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "d0f11aef-5c19-4588-94c1-65ac5d139e1a",
        "cursor": {
          "ref": "b807379a-24a7-45e3-a823-d7592e4818de",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ffd38655-5102-4f64-9905-d43564fe224a"
        },
        "item": {
          "id": "d0f11aef-5c19-4588-94c1-65ac5d139e1a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "647c2f4e-11d9-4f87-ad30-d06d783bfff0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "d0f11aef-5c19-4588-94c1-65ac5d139e1a",
        "cursor": {
          "ref": "b807379a-24a7-45e3-a823-d7592e4818de",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ffd38655-5102-4f64-9905-d43564fe224a"
        },
        "item": {
          "id": "d0f11aef-5c19-4588-94c1-65ac5d139e1a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "647c2f4e-11d9-4f87-ad30-d06d783bfff0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "975c975f-20cf-4ae1-9fe9-4f60d989369a",
        "cursor": {
          "ref": "f8d8f92a-d42c-450b-bec8-b31a3887f197",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ba4b0cbe-49f5-4020-90a6-5e9547ebff8d"
        },
        "item": {
          "id": "975c975f-20cf-4ae1-9fe9-4f60d989369a",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "050f1fcc-de3d-471b-b8b8-4f741d1b962a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 97
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}