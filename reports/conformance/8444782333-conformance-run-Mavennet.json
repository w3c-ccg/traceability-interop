{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "567af152-c33a-45a6-9633-b8a64035d67a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "79c65d61-3438-4a91-a832-1e12e466803c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "88292a78-2cc6-46e1-8eed-5b77536e21dc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e1121232-081b-473c-8650-5bdb054d9233"
                }
              }
            ]
          },
          {
            "id": "46f3fb08-91a1-4f4b-b5a5-6995f5cd8632",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "84d59946-8d7a-4e17-a1a1-243e76ddb580",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e9eca1da-b47e-47b6-85f0-87c82a38a9b1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "456d26d2-51d8-4f98-84da-d63fc33ebfc2",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c6b57c8c-da81-452a-840b-155016c3082d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e1095495-2995-48b1-8991-9d0ac6a3a3fa",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee26b4ee-d568-4b4b-8fe4-1fba6511838a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f816000e-023c-476e-ab0a-0f38c2b3d195"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c45d3dea-455b-46f6-baf7-0a6feff91f5d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5a67b4a2-6e86-4776-ba13-5868c73173cf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1435fd42-20e1-46f8-b6e6-e0a18b0f9ba1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "217c5cdb-9efc-4003-a21d-33a8ff11b293"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b37c5e8e-6a08-4f8f-98b8-7970405ea444",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8eeb5910-98e4-4370-8a16-8c83a2fabb44"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31b19b64-d674-411a-86d5-9c034cf3cc29",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "47e06996-4845-436f-b386-aa071b9a266b"
            }
          }
        ]
      },
      {
        "id": "23a2e5d0-0573-4b1b-925a-d83e50ce724b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e35cfff3-cd5a-42c3-9ed1-a1655f7f1e55",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ccec8ed6-0b9b-4300-99c1-a6257aa65a05",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ca8e61ae-b482-4235-b698-eee4a2bd07c1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16f87ff5-4718-4f21-a977-c7ceefe404eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "277b03c4-6524-4368-b684-ffca3855d2a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6473f03-90b4-4c62-bb2c-230adf2deaff",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805ee163-2505-409a-b56d-1f04c8640fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9593c6c8-079c-4227-953f-31ac914c4bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6552611d-72d8-465d-b1d8-4e176903c061",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24044c1-6997-4436-a399-166fd0765e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c85b236-19b6-4854-a949-ce9171789ab0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7623b63e-f11c-48bb-bab2-596fa30c1c8f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2dee888a-a75f-444b-a05d-4f2b8b115361",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e25915-0cfa-48e6-84df-a68af2c7326a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39223af9-5170-43de-ac67-14c98350bd08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1768cead-6f86-4a56-a0a2-cf940f6c1c5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60f7c089-680b-428f-91c9-c868ac68c2c9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5dded5b6-6616-4bc5-a0e1-960ca14197cb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d743aa18-a1ef-4b73-b207-be5345c0a4ef",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a92ccc7-225d-40d3-be42-7f53f53c236c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a340d33a-2d13-47cc-b666-72997b99ca24"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9180c769-319f-4ceb-b7d5-ffb263506d64",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "0ed0ac66-0eb0-43f0-b813-d29c70f760a5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f84cf62a-2838-4ff8-94d5-074a4b8241c3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5998cac5-3b48-4227-b1c5-7882a19b0ba6"
            }
          }
        ]
      },
      {
        "id": "0faa7bc9-7bf2-4b46-8d93-c0881f2ce7a0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4afec32a-e01d-48e4-ac8a-5552567c7814",
            "name": "Negative Testing",
            "item": [
              {
                "id": "48a9eaed-16ae-4db4-8262-ac304f483c17",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a5488f8e-de33-4ae3-afed-5cdc050c6d55",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b4ac76-130a-408f-806f-e80651601957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "987bcdd8-cab7-4e42-81af-b4b15722d108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e7cd8d-9892-4fed-9bf5-99788b9f2962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfd2cf5b-d98d-4eb3-854e-3e156fedf53e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45adea8-b81c-4191-8016-e4cf751b70af",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97bd2ffd-1d90-45d4-9711-4b1eb88ff7cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "140b3ff1-8989-4d6a-9567-4605dd3bf2ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6502db-c557-4e61-9466-b1cf837a5a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33d411ea-4a8a-4588-8d92-bfe4a12f9929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61db0be4-e6f3-49af-a002-c6b9de9c4b3e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c42d697f-e840-4ca5-b8e0-bd18659300bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3cb09d1-fbbf-4f75-9625-0d725ccd0cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb1750f-cfaa-4d63-9269-4c9f1b1b1c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75aecc8b-85c6-4f7d-b899-4fa6b50c9d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f2be4a-7b34-4f3e-803d-1e4111754ad6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33955357-6db5-49a6-aa6e-b2f12f529437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6584d7b-8c34-46e2-8c43-272c236ca747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806fc544-f974-4311-a1dc-04a13cf433c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ada7ba6-dac4-4e07-af73-7045c3f3bf93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66fb63b1-4504-433d-98f5-f028f3ecc8a6",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f61631ae-7e2c-469d-9545-8312becd0d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad162c67-dc7e-45d8-98e7-90a985ff90c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690c5fd7-7713-4960-8fb0-8d3a760f5a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea9951ce-6a11-4bff-b940-bb523b8df6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60dfc7b2-da9e-4f6b-a5bf-0e2183880742",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8382b677-4ad5-43da-933f-65c721ec74e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55b67e38-a102-4e04-bd63-c1b4776ca3a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858fe0bf-ec19-452b-92f7-76cdc09a34fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9a00c72-a5e3-46c7-ac8d-0401f00b4bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef25208-681e-404c-8094-6c0da93b941a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "063d318a-7555-4ad0-83c0-95d8504efb1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32d91dca-fb37-4c3b-af50-f0d30eedd031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a073e340-497a-436a-a7ae-9406b47b0c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8702053-d4e6-42ff-83c0-0a02f2bbf148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c27358-0cac-41ec-a818-15ecbffb7bc5",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "267cc7d3-4390-4286-a5f9-da9a46186f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f65ea0c2-acd4-4ba4-95e6-baf9dc4d96d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043dc12a-623b-4541-bc28-7e54d87aa821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d23ff8d8-78f1-4ac3-ab16-f0552852422c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e28464-8581-467d-aed7-c5baac782e6f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ec2c07-9990-47d3-ace3-59f67f1163e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb963335-2c32-4e23-95e6-f275e16d3e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66929a62-ad4f-4a7a-acb5-d33ac6940179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b5f148f-9bbe-4b0b-90c4-687c708a02ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50be0e34-ffab-4832-bc51-d01cbbedbb3b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ab8d10-070d-4c28-b429-936c51883630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a49017d8-51fc-4c24-b87e-62cdc6cb4fb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a981e9b-0efc-4b3f-b000-0674ecc1281e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8121f79-1619-4916-8b77-bf353c879c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabd5fce-b476-48c4-9045-4d11e5b22d59",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "151eb3ab-42db-436f-b2d3-93bb37e54bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff56d20-1d50-4a54-bb97-96bc04623cb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6b7301-2777-4bc5-8863-22f90d8c4b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b6a24ce-9808-445a-a232-4205113b4ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72a6620-a5a4-4308-af7b-28684ac8be45",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e9e7d8-6d33-477f-aa8c-27a779c515fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f21bec42-5db4-41f7-ad8b-b027aa9b85f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89845622-7aec-4a07-8caf-7b9ab1faa511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a15a5a12-1e21-4385-adbc-3f0f884967cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029b6132-842f-46e8-a6c6-fb984c4d4594",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f65a4a-5a77-4998-99ab-3b5813d006ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3afaae95-2c4f-48e9-965b-b9f245d69f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d68f273b-26a9-47af-b5ef-b001ba0fed19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63d69bcd-0530-4ffe-99b9-6ef3d4484d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbaeb967-fd1c-4513-aa37-fdfe720f775f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8e8f7a-a999-4bc6-a2e9-5923ea866924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d28522-64b0-48b1-b7b1-2f0414176c3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dba7045-2d41-454d-b7d5-021db654ba1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a7bef34-108d-46ff-86dc-0a3e190f2d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ead5cf1-c617-4f4d-8e31-276260c2670d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edfb678d-830e-4dab-baa0-46ef2e50fb8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25335dd1-49a0-4ad3-bdb0-11da7936095f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2daebdb9-1d16-4a85-855f-99f37a7f77cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a7c8113-9790-4ef4-aa4c-9dfd9606585d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a833f8b-fa42-4c6c-9868-dc2855db965e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3328ffdb-c29b-4657-8db9-b57d5f433f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "186e8ff7-2935-4871-874c-f8493fc99be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e59635-e264-4116-a994-c0e3418ae290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fcbb842-e823-4ab6-982c-4e69e6666bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9fe9f37-912c-444d-9267-6bae8b5d0e04",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "273c35ab-b80b-4e22-b774-784d434f8831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c23dbb7-0e46-4b73-b087-2e4cc3ce5610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c4d55f-b1f0-44f3-ac20-197ed2f777ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "990f369a-ae9d-4559-9e97-75ece97004e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80d6960-c128-4da4-af9b-398a351fc7fc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6b4c11-e059-4d9a-baac-5b9a34ce687c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59c47929-f971-44fd-bb48-bb394bc7cc78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d317479c-cf27-4b37-b4c8-043a9c4629c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b87c333-c1bd-453f-b3e1-3d78037df465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8d61f1-db96-4af4-927d-4113b49097d1",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab05ea9f-e667-4447-9bee-20c26f07662b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "376f1205-b628-4ada-b91d-3acdae3c9ccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4342bfa6-0229-4e2a-9f1c-0c2c63dce7bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "16f76c19-b0b8-472a-8c7f-67bdaa8644bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c989b5f8-b3e7-4c93-b8a2-8e9214d02ab4",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9837454-0396-4834-aea6-f6844bf10e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86f48dd-4a82-432b-a97a-517985e16732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173a6028-ee1b-471c-8d76-40d01bb6a8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "769802af-46c0-4d7c-b393-6db1f81b9012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518eff72-6261-41f1-922c-15e4328d2eb1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "618d7249-2654-47bf-9ad0-4856c3036cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff853a0b-f4ac-44d9-b5a5-a10c1567cfe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "200a1780-e87c-42b4-a7b7-129c038cd1c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95e603a2-0d3c-41b4-a07c-543f423cc356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9cca6a-2912-488a-85bc-4352d88e0329",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "103c4796-5c9d-4080-a7eb-57e3fd0705ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bad99f7-1a84-4174-8611-b1b21c5eefb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c0b031a-5e08-41f6-95a3-1bca4d9265a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e86f1e0-3eb5-4403-b1fc-990ae74c3994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e447c8-1166-4d51-9a5f-a8d39333ef57",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb07a90-9037-486f-9d2e-13f15568a838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d4e7915-c61e-4aef-92c8-7da249436c07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43401ba-ab86-49a9-aacc-6355d1746868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9a8556bf-9f7f-48f8-aa40-676ff3ed3464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b4d77b-f5fe-433f-8841-58f01b8a5989",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c219202-9dac-4aa3-b253-a951828d2904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4729727e-6529-4754-aea0-aaa984638e31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1807da0f-d680-4c6d-84a8-059cab739a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f2963e7-d39e-4d3c-ad40-99bb7ec816d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfaceab1-e526-4769-8fbc-2878f1e30891",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c414455-221f-4d18-aa0d-dbd9640f5e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "414924d8-f113-4a1d-ba44-978b5d5e5dd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf50f18a-b4fa-4e3c-ad0c-8ec07552361c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "df03a23a-3042-4fd7-9db7-847914f97def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84dfa877-d279-4ee5-89fe-59206f60f06d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa9d7ab-3cb3-4060-bbc2-0a7ac68d0ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b741c54-4dfe-40e7-b489-8e855b6f6090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef99f29-b051-4010-90a5-0eb091811f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "26afa176-62d3-45a3-8eb1-94cf7de04e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760515fa-8068-48c9-b8bd-0faa86733481",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5f80ba-a80d-4879-8bf7-33308c3b05c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b589f00e-ee2b-4e9e-968c-9b119557d973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041ba46a-7d6b-4298-bbdd-3dcfd9dea017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd0481ba-ed46-4930-9792-333b3c2d5e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a4e34b-c6b5-4304-8ef6-5a95353ab638",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe28d55d-366a-4f2b-a717-1e8c7ebf79c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2d8e125-4ca5-49f7-b826-0bdf29ebd7b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3d44ca-da65-46b6-b6a2-bae2ce1bb1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "99959ba1-be6a-4792-b2de-ba9dc7ca877a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94966c72-12c9-44bc-abe8-3f5e7336e29c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9021857c-0b80-45c5-9c3c-3bc78cf7c12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e32e3a6-5d4a-4b78-952f-e3008fa31b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c36ec7-2626-4f84-af50-2e765d88d7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "34126024-8bb5-40ed-8a4c-170a6b9f253b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "223abcff-f453-4cc4-96bd-014072b9db65",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1de9e8a-2a83-4e29-b003-ab46ab068225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a53ef8c-0d92-4c98-aaa8-40aff58ec5de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79120e8a-2e39-4a7b-ae31-fce6d17c4df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c00b48d6-ee60-4194-81dd-e9439643c5e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d81366-4cf0-4afb-90c6-d23f72da3dcc",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc177a7-2973-4ece-9016-f288dc9bf199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e4b6468-6a68-4d5a-a0c7-13bb2fe91b1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cdd13e4-e594-48c7-baf4-580c1adec712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c04a2473-52b8-4d8e-bbdf-73246c147416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd4b4f7-5956-4f0d-b953-a6a70fd56676",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5120ca6f-6595-4894-8d6b-784defe38ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba54b7f3-eee4-4824-a070-bebe0e2298a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7503aefb-4965-4ca9-836e-7b8ed8f7b9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1778eb59-72ac-455f-b058-ff71640cacf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd95f6a-6b5b-473f-8030-83045f779a95",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b9d74b1-50da-4715-bf2b-98beb6f17c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64cfb77b-e8b3-4603-bb38-723009b3a1c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e971ae-5271-425f-8337-cec821e7c4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed9f0953-6742-417e-ac17-d76dc68a2d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ddf0c95-58d3-421d-bbad-139c851163f3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b7774a-d033-45c1-b306-50bad6e77cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ed9d8f-568c-4379-8249-933c04ea7c07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821d95ed-7245-4789-b355-eb533dd1af4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2dd119be-8507-4a04-84a7-59018862c9ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da1a928-366a-44cf-a6b7-0567752b16bc",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3bfdff-a284-4fc8-be83-8b56653dfd2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4746c603-529d-4dc3-bd87-c494e4880ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3512a5e4-b087-4be7-a2e3-a3d85faff3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3bca0b6a-9898-48a3-972a-5638847af385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c38821-895b-40f9-a451-32fa9a5fa183",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5cad7cc-e703-4d37-89f6-24719af3721e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09ab2109-2a69-4021-8176-4063b4da856c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb40e89e-cc29-44df-ae31-a7f73065ab78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fab9d114-96f1-48d2-b55d-f03b16b990d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6690c03-e6a7-432e-b8c7-8503ce7a7808",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2e2a32-42b1-4eeb-bad6-f74164f1d840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6af6dec5-002f-4271-83ab-6ba3c77d919c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a92547-cde8-432c-9b1f-481455f6c9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "415f677d-c1e7-4d93-a725-eeb44f26ea75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200fda56-7559-4ebc-874f-49874942a646",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb6e85ef-0c5e-4937-831c-8b6994872e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a19789b1-b35d-4403-afd8-dd1c37e95c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5477575-d388-466f-bfb6-f8ac0d41b15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f95b568c-86e1-41b7-817e-00241149fca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191cbb49-62e4-4cd7-b236-97747b6cac63",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a1b432-7b1f-4d32-a505-1c6f785d6567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf96b3de-c961-480d-ae49-837fdfa3eabd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47c3718-c2c3-4d87-953b-3752867a0376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b057bd-1ff1-4c2e-ab79-8fb467bae30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c64d4b89-644a-41bd-afc0-16b72acdeef9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "802a1850-8d52-4f82-82a7-b14c6067497c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a26c4e6-ecf8-4aff-9a9f-90d586255933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beaec3a7-0f4a-4965-af69-6b3465aadddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae72dcd6-8542-4f3a-9243-4477bb746349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2489f6a2-7d5d-44ac-84de-788288cb3a9f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dafdc0f2-8aee-40fc-9955-097e39440127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b87a04f-40ea-4362-b30e-0d763bef8919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d66ab2-7c40-4948-b50e-ec1d8e9fbaa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "607629f9-de06-4f99-8ef6-e1ac3a5e11ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec1e755-2348-4258-9a11-5b7f4321a3c1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "884cdce9-3e57-4aba-a20b-8309fe6219a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f4c9f8-ea70-4fb7-b091-3761a5689687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fced59ef-0552-4b01-a775-7528159f85d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c00cc34a-5d32-480b-9555-c162fdac69c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b4deaa-3911-4788-a201-7dd5a2899a16",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ddee82-a3e5-4c0d-91ad-f097793a3f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "874fdfe3-a20c-4902-baed-1d0467ade823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74178b02-6724-448a-9659-cb1898e0116a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "71cc496f-4129-4626-8e86-95aa92831f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc28c1f7-aa32-43ca-924b-696f5c5b1c00",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c015a629-9ed7-4633-a375-f714f04efe98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caf69349-4498-4a46-a11c-b77419ecf483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fcbd324-e028-4a6c-a4c0-54a11910b394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c780dd3-c59b-484f-869a-e5193e871c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b71051-9de4-4f1e-a7ff-ec38eb2c385b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e9f771a-645a-4d5f-8ee7-478865fac37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32759731-0b82-4c3f-82c5-44e40353b719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb287ef-1c8e-4ce4-9f5e-0ea310f4710e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "591db040-0817-415f-be1e-39d962b7a83c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222712e2-9659-4f71-b89b-72b3e5a22f0f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a261093-c42a-4219-ba6a-9d24adb2149c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dd55704-c339-45dd-a134-60e3d89706ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb142aa-7304-47db-8b22-333d478cc351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "283c1a40-3e7c-4b01-a722-11ad24be4bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b1dc75-1383-4113-94aa-ed47ccf2fff1",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dba4000-dfcc-4989-a68a-a51a556492c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cbb061e-5e4a-4543-a71b-948c73b5c348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3993c3fc-0ede-42d4-8be9-4d786d8d71c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9a45b4b-d186-4fed-8fdf-9c73f23bc41f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a7c264-71a0-4ccc-a7ba-f57cc15d4c72",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd343bbe-69b4-4b32-b46a-8cf88f9dd08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e6ab09-0090-47a1-b94e-b81a418a563e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f740441-758d-4e52-b912-f73fad4c706e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9962a95-c554-4253-9d24-2c6de793364e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38cf088-4ba4-40cd-b63c-9c34072416df",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7696b768-4e6c-4d91-b70f-99aa15240705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38804c66-7b24-427e-ad1b-761ffe80d4c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8d14ba-32e9-4ec5-9fc1-3cbd9e71c537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5bcbc224-e114-4b20-b9db-88bc0709de91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d156eb-1ed6-4615-b609-82eaa9fc5135",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52c9340-6bdc-4b6b-9aec-f9f20be85c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2711132-a0e0-46dd-85c2-746614fa8649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8ca61a-c8be-4a09-af06-ac1a1374615b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8bac891e-24c0-45cb-9256-bb9724672e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f32f1c9-5622-47a4-910c-0550f25cf26a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c5ba23-4c0e-4ae3-b988-223ee80d3571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c75825-efaa-4afc-8c37-31bd792175a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a83604-22ab-48b2-8ac3-e92a9f014444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d997f75-738b-4c15-a9d1-996a54838022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14a69e3c-077c-4a32-90f5-f3dc3f7a56fa",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86897f49-dfa6-40ff-a943-b810a5e17066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d79b297f-f76a-4136-91a6-ad62bd95535e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed91a22e-5bd7-4199-9988-577bdda0e82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "78399a96-e3a3-4fef-ae2e-16eb31420811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9def45c9-b985-4bfd-9a3e-a6f13ad3d3cb",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b22277-7089-4aa8-8e50-3c913aac2955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5478380-ad71-47d5-9846-b1c6a2dac457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6af513a-a828-4705-9901-d8464ac660f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "47547d74-3b87-44c4-b656-a2959a094ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5f846e-2c44-4edc-b25b-7001cc3ed739",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac56a2d-5725-40ab-9313-ba0ee54e1f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8124f281-97ae-42fd-bb5c-721a19a14566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e9f94ff-b06d-4f53-a068-b02a036f3c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "297b59a6-9e43-4c55-b512-0e1c4c2712b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6de62e-4251-445b-8c50-18d54abaf785",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0e9ed5-7b2e-4b5d-addd-2c062f5d3ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05344737-3420-4d26-97c5-7f338d9283f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd1a852-7bee-4581-809b-fff8f1d9c3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "133d3e03-ec7b-4d48-9a4d-8b2877f38638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2bb0d1c-cdf5-4b04-a1a3-4250e0ba36a6",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4acf8528-c4a8-48ac-97cf-24f1e94fa918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d49b53f0-5fd8-4f2c-be29-643cc69dbf73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f13ef60-5392-470a-8960-9922c4860ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "25971a38-c477-49a2-9d10-58586165ca31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691e707b-89d2-4702-869c-f3649f4c91e1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e62656-e96d-4df7-9121-f40d6c91adff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45499f36-910d-4178-9f57-6e0cf8d5c636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befe0eee-517e-44bb-b36c-cfd1c685c34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "469d8671-3a81-4b0c-8019-7fd3aa3dd967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c722c66-d7bb-45cf-ae89-f9a67f2d1632",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e5b614-5450-402c-a14b-f2c4b1594ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f4ef935-728c-400b-a926-d3982e7940c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794a5e49-f0cd-4648-b2a0-cab12231a9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b927cea2-618b-49af-a08d-0c7ced3677af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce26277-7e97-4068-bc2f-ee4208ca9a44",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "349ccc6f-3edd-4467-8e07-b7b1d1e1c66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42284893-e513-467f-b42e-a206f44ec04e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d13fbb-9f6e-4a80-babd-38c6ee880c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7af261d-d4ed-4cc1-b43a-132fe639be34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9a569a-291e-4622-ae65-36ef7110c68a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e771fb-b91a-4023-942b-32aa33400c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bc87a8b-a20a-478f-accb-dc7bc74ae84a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4641b2-751c-415f-91cf-dbca59f41a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "faf6770e-d727-4bb8-8300-854d46c9253d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e41569-b81b-410f-a953-1bf2dd32c233",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd0818a-0b4a-48e4-a49a-2ad67f126bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16a8471c-5591-42fe-a019-00d11406c4ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae571bc-4e69-4327-b2cc-8b71c1ddcc1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "437396a7-f34c-46d5-a59a-6100807397b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b16ca6-8427-405c-be6c-46ae1f3ffa66",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5522c45-4116-45ed-9137-357d8870298f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59881d89-5867-482b-b4ac-56bcedebdbb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb14adf-082d-422d-a1ef-06aa54104d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce400e62-c1f1-46f2-aa93-8f38bb59f022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3ebc5c-9f24-408b-8729-c39c68d18bee",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "741b2b27-e655-4d46-a912-404a40aff42d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c27d5a-1438-4369-9e56-ab78816f5eb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb254f53-5923-41c1-a2e7-90862f164be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "58c99e36-1f46-49d8-8d24-61c8b7eda62a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c6fcbe-6f1f-40ba-931b-01d76301434f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a098ba0-292f-4d16-b095-c040a378ae38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f0a83dd-9225-4bb8-b40a-851f479949e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e1ace9c-759c-4469-9c1f-975afef2b67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed977a70-b5d2-4425-aec7-e449f32c9d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb6c6e8-deb2-4159-9f11-d283d7e2bd14",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "983338ce-20f0-4f3e-a173-98c451671920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddef2ff4-8910-4f82-8cb7-9c46abf69f61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf0a81b-4f0f-441b-bb99-4571fa725108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "04249c0c-0fe7-4abb-bbd7-7d6babaf1e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece15fc6-2ca2-4780-ae4a-7fa615a69c5c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef623f7e-8fd8-4eb2-a9df-7f478606b637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2103e0d3-8e1c-4e05-83da-7fb7dda74fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dfbb958-cf28-44a4-ae97-ab0d5da842f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d466830-d2e7-4850-a85d-40d404deae2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9192e21-d45c-4679-9abc-5748c2b55730",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e6d073-341c-40d1-a065-eb3bccd65346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d8bbb0b-05bf-4494-8128-e6e0fd33a41e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc0a96fe-b280-4156-8a0f-001a81a4fd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8a109c38-bc73-4c62-89b0-b8ada23662f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff520a84-69d6-4dc0-b905-c081b7c4494b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "990867e4-4017-4b11-a3dc-545aa378cdbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "872d1683-1bb2-440c-8399-c165ce0d47ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11a672d-337b-464c-9d88-846188522a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b6ab216-562f-43de-b110-99e1ca066712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4790adb-7154-4a82-abc4-a64f9800f889",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49840bdc-6cee-4040-ae85-7e9f88ae2a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b83d4793-b401-4332-8ed9-9e2151abda2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72190439-f980-4aad-8326-d9e507fc80e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6452246c-d683-462a-ad5f-a7dcc1cae86c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b830857a-6bb1-43b5-96ee-df547f11601a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d2f0b2-9644-420c-a95c-5acaa730ec8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a03ae1cb-31c3-497e-9127-9352fda695d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb495f3-16a8-4a89-83ca-706951421f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5d3e32c-86bd-438d-845a-957ea6a43a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57da4fc1-5e99-4468-8329-cf80e1c5553b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "329921eb-41f7-4b78-b1c9-7a6230e939ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a50dbf75-b6d5-475e-8bb3-9500929da0ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3beb9b-0ba1-4453-ac8b-29bb54c8f445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18dfb013-24a9-4f2a-ade5-3cd635629c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343cf434-df40-4f61-a2ff-3c40bba4abd5",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b9062a-dc55-4039-ba6e-767f2c112620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "148dcae2-0884-44a8-94d6-82d942cbc5a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55483168-d846-4101-9f10-f19e8c56beba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed4887b7-f38e-46e6-93e0-a8482f1dc6dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e771d6-faf7-4f43-a01f-5c9665256d3c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df2482d-3dd4-4d7e-9720-ab89814f3ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27b04bb0-8210-4a04-b312-00affde7273f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93be337-a21c-4017-9260-9cc5927cb4b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5de138b1-1f6c-4a70-a4b7-9e8d5814bc70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3276b2-310c-4dd2-9ac5-55b08c2a35f3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "958993bb-7e0f-4ffd-8b45-843b634d322b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "711b7c2f-f686-49a9-b5cc-38c513048fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2742fe-188f-4892-abb4-ca87f13e8b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f785c1ae-6aa4-476a-8a08-da935286d8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac9a087-7e3e-43cb-8b0d-1d6d754c1f7e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d728a347-485d-4be0-842d-2420c246612f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6268d057-0646-44e7-9273-00552b2b049c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887f526c-8a9f-4be4-9b0d-6fbb87a7dcbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "56b20e46-a96a-4d61-bd9d-0aefc1e70df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c43e1c-0db5-49d2-8647-3df4e6946d85",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50cc9e26-48fe-4cea-a374-1d420775d1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41a9aa0d-1dc5-4edd-81b3-4b6a35fa6521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7096c0b3-7f36-4dfe-a158-88a6889c89c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61b8ecfb-9584-4ac5-b0aa-3b41397b2cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c726a64a-fdea-4b29-9ea2-039740e03348",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5234b548-7839-4a4e-a907-a60299467daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbf93939-69b6-4b05-8095-c9815d71536d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44928ffb-cee8-4b86-a541-aaa19fbe2ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec1362af-3599-40a2-80f5-b52ec9fc9a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45189db-e687-4ab1-9b20-f0845ed9981e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39e4286-661a-4e9e-a185-97e9524b8ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4077b292-0105-4c57-b3ff-2f00d83e8bc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975a5b25-99d0-4b2b-9888-d7996d2f562d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ce66bdf-a99e-4382-8504-e75b0a591f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31aa4c37-10d7-44ec-ac2e-86c4504b1d61",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac01392b-4781-4220-9023-5631b8313de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27d2a950-4048-4165-a867-5499db8e9fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ba4d13-04db-483f-bab9-145577c54a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a9d1740-829e-44a9-86e6-3af1140541f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b1aef7-7ecc-4bc7-9c42-f35fdca335d3",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2514b68-b857-408b-88fa-247e732f8d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aca6eee9-00d7-463a-a515-d638005be442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014fa43d-090e-4e56-87ac-a5ba354a817a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2599e75d-413d-49ea-bdb9-b83540391916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bdf2f9a-0c1e-437f-aa14-b043f23aea0b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c5cfbe-48b8-44b0-a0dd-741e1d5ff6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "281e633c-07bf-4dd8-8dc8-8f1c67f0240e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b296c7-a07f-4fd8-9cce-460beb49c35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "188be80c-30b7-4cc6-b689-5dfe8de197db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ae7d23-2921-4927-9ca8-8984f3dd2423",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13985301-56ba-403d-af05-e2bdd194adc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eedc6c71-3d58-491c-b029-990c8adbbddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c951a183-293d-4d25-b6eb-5c296c5bb7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c00a6dc1-a3df-46ec-a6f1-f1ed06af4c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a517824-959b-4ff6-a3fd-1620acbf2c42",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "803697f5-c469-48aa-b351-712a33a4b18c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d6f802-61dc-43b7-bda9-625de3a43606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35dc18c-cbab-4c47-a2ef-76b80397aa9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53c65f0d-4ec4-4ec8-a956-11f5e612c3fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe9ba876-a5f7-47db-a4d8-f001d5a6183b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef57d2f-4707-4bf9-9cc4-175e71ed452a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec52ed94-e6f3-4205-87d5-6e48e1129aa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d885fb67-1906-4e8c-bb6f-ead706141a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa81ffb0-9b8c-437f-8d42-23be0825743b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e8f5b6-80c4-4052-9dca-aadc109a702b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "650d4c4d-def1-42f7-906e-ae40f1f69214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "779cb5f6-ea1f-484a-b255-5f24935af65d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457ae95d-9e0c-422a-b189-4fda659957c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e05be675-0ed8-45d3-bc8e-2cee99ddc5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af814841-0c43-46fc-b850-7be97c38c3ea",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b82211-89ee-4fcc-b08e-1cc94a9d7801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00f27eed-b7a4-42d4-8a83-b5181b37c525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833b157e-4654-4f4e-a96e-d31908ffdbce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb315d69-f9fd-48a0-9e77-ebba5d2fad5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e459df99-1f51-401a-b95b-3300f038d814",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13aaf822-750f-4572-bbc0-1b822a7bb322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "682e6e50-ed41-4834-9db8-a37c3f25c68b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8be27a-524b-4b94-a60e-e480c0f686a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b03c4186-f36e-4a18-a477-382d385ba614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff16390c-7cc8-455e-8c65-f59b8a5b4a9a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "229caa87-78b7-414a-ade3-b2a55786d9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc88550f-82ba-46de-bb04-92d9b1588dba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fbdcf47-a04e-4741-990a-40e17b976854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0435a55-6b31-419c-88d4-8872ee3bc857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e05dd7d-dfe6-45cc-bd0a-c84325b5002d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a431b8-eccf-4462-9d4b-3c59c4cc66fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8080f5cb-f662-4789-a24d-f8abb361c49e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59aa0c19-3062-488d-9599-437e5c0f62d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc34104a-c7e7-4d1b-a91f-107ad0adaa98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "787b325c-a568-4481-a2f6-90e14e2f2553",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1553cfff-657e-4c1c-a3dc-8361b1b6108f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bac101d-1735-460e-9d7f-ab395ca6117e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4809148e-6300-4781-ac01-a0a51dd0b0c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2386a3d2-2d57-4a12-b9b2-c87f86a3406f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8cec62-36d0-4e94-9d06-e54f2e3e91ec",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0df0cd5-debc-45e8-a8cc-ccd6d025026b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76299e2b-134a-457f-a61e-a7a2fae57cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25bd9a09-d2c6-4223-a361-5f43316e82e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd34262f-3cc7-4cb4-bdd1-9379eb530926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb79812e-6515-4df4-bb2e-665674357303",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb681bde-d341-4ecd-b12b-4f2236c06fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ec3ba3d7-9754-4465-a52e-57eb43ae3d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ba0389-6e23-4231-b83a-2d5072d3b0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "23dfca01-271d-46cf-834d-6d88dbe1d9c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "544290d8-0db1-45d3-b746-65079145f50f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74f83c19-f110-4e8e-8d19-edb4684227a2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9eac4b4-ff1d-4b1f-8ae8-ab021f3276b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "268923c0-09f6-4e4b-9ad9-13065dde7183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6502601d-77a2-4397-90c0-5f7c4f74f0f5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9de86f7-733c-4ab2-9c3d-27084869940e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69531f6b-b802-42ff-89f2-ffe4ce217f17",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9cad664-4030-4186-8cce-3dd69de7ef2f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4262ee7-91cf-466f-8de4-787e2cd2ad44",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7e83315-0260-41e2-9390-6b630a75d6e7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "42258b64-5797-41f0-aa05-72acb5fe2a61",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "731a8e71-f0ba-45a8-8db6-727dfb3f5c95"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "50f3f549-7a6a-41af-9b39-93d8e6623dac",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "117ae4c5-7a21-49af-a5d0-b21ae310a3c7"
                }
              }
            ]
          },
          {
            "id": "2687f2aa-b0b9-44a6-952c-de1ea954c6df",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c8f9336d-b946-4f5b-a96c-63e6e37179ab",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "f540807c-840d-4e09-af9e-b6b188b5a8d5",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ba33ec-05bc-4e10-920d-458682ad5a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3a92e8bb-2d22-47ad-a3c6-be218812e3b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c74043-e956-4ace-96a3-6803f068d265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb2cf37e-7608-42f1-af59-daca09bf4743"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "88a9c2a1-6a68-4c0e-b72a-b877111b0b52",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c105d95-83eb-4181-ac13-788cad349ca4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bacdec91-e039-462c-bad5-bdd70452acc4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8197a80-4fa9-4232-8f7c-470e48502d1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cdff95be-dfeb-482e-9abd-130a91b922e2"
                    }
                  }
                ]
              },
              {
                "id": "d627424a-200b-452e-a11d-dff23bdd6853",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fa7bc46-ebe6-4a76-b608-c3235d3e8cd1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f86518f2-f623-409d-9d57-6616166c1762"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2046a660-db07-4b1c-ace6-779b19f851fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d7b60d24-80c8-484f-9990-cd35a046b94e"
                    }
                  }
                ]
              },
              {
                "id": "4ece1f61-d1f6-4483-8555-9d36a3618151",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d13b5469-65c3-430c-a21a-849150b9dfc2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "379e5498-9d1d-4bd3-8da1-b576c3a410ea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd1b3b54-65f8-463b-80fd-08149aca03b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "49ffc9ae-46c3-44de-8fc7-166fe9a62e52"
                    }
                  }
                ]
              },
              {
                "id": "efdb03f7-ffdb-4372-aee4-fd209d1bd0d4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2917392e-4053-4df0-9dac-d85d785216a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb30883d-7ab0-4d86-b4ba-bcf55d9557cd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "811de319-c75e-478a-a2b4-fba9db9fa12e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c54e583f-7e44-42ec-881c-b1bd3c3f80bd"
                    }
                  }
                ]
              },
              {
                "id": "19bcbbc1-ed39-4623-9aaa-c099a187c815",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27781a75-3410-4b6b-9750-8348c79a3845",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d97b8f6-a240-467e-a58f-dd06cd98f42f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c508530b-8715-4fed-8c40-840f3fa1ae0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "cb2e4f82-3176-4dff-ae9b-6dcf62f0f24f"
                    }
                  }
                ]
              },
              {
                "id": "89bb5d52-df83-4ab5-8137-731097d61857",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c448da3d-d277-456a-889b-3b21e462349c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b8e27c5-9b39-4ecc-8343-6c3cd67c9108"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b132d292-1b07-41cf-adff-0a0bee4b0da6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "91086742-e706-4e19-b840-560f9acb8cb7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3b7795aa-b580-4d9a-ad3c-c8dfce6ceb2d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9efd4044-4646-4fad-b6eb-a5f30d38b7eb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "229ddceb-d499-44f5-aaf8-d89d9ee6f869",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c907f224-a1ee-4c72-bca0-012745490405"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "29814cad-6309-4df5-97a0-fcb04218d868",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d6423c8f-fc0d-4956-bd36-2d28cceaad48"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6cd240d0-6508-45fc-bd41-81973a6cafa5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5221127f-2230-4e43-9694-55a38d6ea2e9"
            }
          }
        ]
      },
      {
        "id": "2a4f0435-9b2e-4986-a92d-a63e5a1d5dba",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3e220293-72a8-45e7-8d47-6c33d1a64040",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8ee2921f-1086-4c9f-b6b1-353a628a9dac",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7006ddfe-0caf-4eb1-85ad-91009cb200fb",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73939692-e6a5-4fe3-b574-214130e22216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb2aa73e-039a-4f83-ae02-b5cfd45d341a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8956c5-d406-465d-b2ef-f6ca31bcf7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "76efb1da-5e6d-4efc-a43b-72b72b78421f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1074aa62-dba2-439a-bc3e-d4dd615a372f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e63bc01-321a-4492-a9c2-44f1f63fb4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "988634d3-cfdd-4297-83c0-f84644978c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fc43a3-4f93-4f38-a598-d376e4d9500b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c660c41a-b0e7-4758-991d-ae4fb706d844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6dbb611-a0d2-4707-8d0e-9242e920b087",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f18fac-b686-4a26-8af0-023365f007b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef7198b5-abaf-4fdd-a072-b94fe6f46af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16bc0c86-0a2c-4cff-90d7-031f01ff5560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eef71811-db70-43ad-a3a1-15eb389f3307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5940d6-e7c2-4793-9f20-8fb62bf1f3ca",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b7f172-41b1-4c25-b31c-47aa7786f3eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a5aa7e8-378b-44eb-b2dd-e2e26a3580f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa22a600-6ce9-464a-881e-a9c2326807bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b488a74f-dda8-42f1-a064-3f0a2d1382c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d02fa2e-f997-4c51-ac9f-69de817fc1d4",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9135eaf-b00c-4c0b-a6f8-dca55d75be40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "131e5b0d-5d09-4588-aa1a-30541909c7ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c9c0d6-7f7c-4e38-8738-bb7ea5fcd923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c271bd10-7b29-4f76-944a-1a9e08a0e773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79ea26e-2f22-4914-a03c-a95021487c17",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68257a6-5226-45d1-b5a6-eb83430c1dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2820853f-1bf3-4ab6-bfc5-b083f63f67ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a0b67e-c0fc-4cdd-afe0-09b4043f8659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea8d40ca-60d0-40d0-8f5f-83f2ee095722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b6995e-9137-4629-81dc-fb214782b351",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7245ce2a-a9d8-4e39-9cf6-24e48bb5fa9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a29e6754-7864-4796-be84-78ccb5df0a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1471ea-ef0c-4cc9-a215-255ce9bc0c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "07a9db89-2681-4058-aeae-73d9c4c95d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d93cb29-4765-4c07-8d34-64b61359dab8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e71785c-0783-4cce-bc37-21fa24eda6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0f3ef51-175f-41c3-ae02-b4d75baa9ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f271849-fa32-4a72-8bda-9c17c9f65348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bc2c4a4-eb67-4db7-9efb-a9005f1c1bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27073cc0-cfa5-49a6-b8dd-7daf585578ea",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e3ba4d-3b0c-4353-ab9a-ca974d9a208b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c05736-e0ab-456c-bcbc-8035d5688af1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4d8373-1652-4c70-8434-e3a9b4590b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b546d258-4635-471a-b854-44e1ac4a32c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2a922b-8e82-4e2b-9aa6-1fed37855f43",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ff2019-10b0-4a49-bf16-1487f679ae87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78bdf921-1bf9-4ff2-970f-e95bc989d855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4965780-2fdd-465b-907c-9aa65985fecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "99f66c9a-21b0-4c50-bc61-dd136e600847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90106280-a946-42a9-baf1-376c4bffa7be",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba52ea86-9a52-4c17-b3c7-1dce036b4686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d9ed59d-b68f-44d5-9dc5-fb9fd1f1a75e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971ad25f-74c6-4c1b-abc7-0ed2e789436c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d67d42c3-1dcc-4641-9251-d708d3f8404e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c44345e-c266-4214-a04b-131603064a6a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3dc92a1-4606-4967-8ee9-69cb76be9aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5888763-07b6-4611-a0a0-1c5651a89cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8e1822-fa44-4bf5-911b-d55f059f9762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "73d3ab2d-dbd7-45e0-bc67-5f837445d5de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e46cfc9-f2cf-46f2-a8d0-dea252c3657c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71b044d-2441-4979-8373-a8fd7b8e62a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90da8a1a-1e4f-43c9-89eb-0db74549f303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f63a67b-092f-4e33-b0b5-2bf30414a1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8226ae87-9674-4d59-8831-06e8a4c7d912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf7d04a-74e1-48ab-bebc-c0a70f0dc489",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df96efe-036e-4da2-8825-ed18265669a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04414464-aa16-4ef2-aad5-fb7f229fe769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1d783c-7ef5-4af8-bb7d-0d169a4c9570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "75d040ce-af33-4b20-ac48-8ad757b98373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086e5bff-71e1-4ee9-887e-1bb8420649d9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede5d3fa-30fa-47b0-8752-df6e8c789d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6699a1cd-0897-46a4-a979-50755483c604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063d6f1b-c34d-484d-85d7-f2d84a32e439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0156cacf-4a13-4159-b511-5f0e0a083726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362d3660-3dce-49aa-aa37-6a201808ec9c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddcd1188-193e-4237-924c-e4062175e573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2439479f-2a7f-45ee-852e-02b9d3d029e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff6185bf-c7bf-4056-a142-7aecf45bb094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "77419f08-1e88-4412-808b-48bbc3e44dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e058c5b-ad14-4c0d-8b99-cc99ea04554f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f448fa5-aebb-47e7-a6df-325db85f8d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe55ab3-71c1-4a72-8c20-665e8c6ee337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1c5b8d-4fb0-4f05-86a3-a9a5dd5fe822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c34f542e-aba3-4e34-b254-2b3caf0defab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b02123-750d-412f-9715-fbbeda4ecc5a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d890ecfc-dcd2-4c57-b247-4fbd86a94004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e02b448-5237-46e4-88eb-a4272189bad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9909bab9-e3f9-4bf0-91d6-68df0a86fdff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d6aefeb-1e86-401c-b5e4-9b646a31d7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12cac194-3f58-400b-a468-fabf3f3ddec3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b16d79-e099-4c43-9f3a-c2ba89b12fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4c8d02e-46f9-4f62-ad54-80ce24acba2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f254632-6660-4883-a2c6-e62fb1f082ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d069aaeb-eb0a-46b2-ac52-a1ca82d988d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc720ba4-4868-48e0-b208-0c3335d4bf1e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa20fae-12bc-4afe-aa62-aa1adbc9362d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07487e32-1d5f-4ac4-8a6c-7e8b13bbd548"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188673bf-8ade-4cf2-b192-d28f65f2c84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d230cc95-db51-4149-82b3-6034c9c8bb89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69585df0-3417-4f5f-aea6-113950902df8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7e6fc1-25de-49e0-9fed-4b2d8a80d818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "911dea75-e2e8-40d2-8523-9708d050fc12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b4054a-ad1c-45d8-8e04-e12a47805f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91c05f34-7317-499b-9e32-d0ef03abb05f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af126663-d94f-43bf-bdce-20d92f9f53c9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69bf5cd3-05a5-4e0a-bb38-36d9a04b6157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f3b0c2-d5aa-4983-a77a-167f4fef46fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e29212c-4dde-46db-b590-612bc5da0812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ddb1dc0-7003-4875-8eb7-54f4aeade695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fccc49-ebff-4b78-b5b4-0f34cec406f2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97d00b8-048d-4fc2-952b-8cd533e95d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3c2c441-648e-4bae-8d38-8d36fdbe4347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd74a66-c6b7-46dd-82f9-0535ba316d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54d6aa33-e580-4d1e-83f5-b21cff611402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de8ca15-a61b-40a6-9dd6-ccb6ce788c94",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbabbf2f-bc61-494e-98a9-ee19a55cdff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea47fd25-aa05-4114-8b88-4c4763904ff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c35396-1c6e-41f8-8565-d2e184a046ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52219890-af72-4266-aca6-9a5a518b1af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e6e1d6-698e-407d-ba0d-4a959f8c280b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9459aec9-606d-41f7-bcb8-0f45021203bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03951dc5-0dd9-4207-a150-d2f8c0d866c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96837e1-6f94-418b-b266-1c6bf086e7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40f9081f-1159-4729-ad63-520954e0f912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55197684-27e6-4a5c-9fba-f61e5f7838a7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e704bc0d-8b05-43e4-b699-07bad1b085ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c29d514-8df4-458c-8398-6258a0c43b28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2728be-5c3b-4903-bac3-924a61666e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "773ebfec-120e-4372-ad8a-5ff3406e4609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04107693-50b2-49d3-878d-ce00b4ded6af",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9e9498-415c-4747-b3fb-8dc49a4b8b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf677e8-2257-4132-be0b-4f69047545bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e26b410-692f-46ba-9189-54b2df55496f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a03cdf9-715b-4a3f-b4cb-47c47cdeabcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3171f63-4dc4-48b5-801b-1121458e7b3c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af2be33-b750-4c19-8232-005db5850314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7777c8f-d663-4670-93b3-8eb4a0e5adb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4a60ca-8392-42d6-b98d-ef8b5d37bc5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32cba9e6-743e-4b98-b58e-daa9171b76d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac94d65-a464-461c-bd66-f4e11bc33ba9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c40764-b705-4aec-9127-b6e23f1607e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfbd39e5-7b14-45ed-992b-87ad10acc50c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed29e39-e736-4211-8804-8c431c26e5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4e43fb1-b954-4444-96ca-ac4e334e2f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9f1071-d695-40d2-977c-28054472a5c8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ac570f-0c06-4b31-ad6e-050ded89fb14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c82d4a8e-5eac-45c8-9949-490799920da5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79523a8-bc7c-4058-8411-90d67987240f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ca72e7e-7661-444f-8373-0918b7fe50c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45f67f7-4d17-461f-bef7-fb5759e4de74",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "207541dc-2848-4c90-a9b9-1ee23ebd7b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60912821-e0a8-43a1-934d-3cbc8c0812ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ee26d6-fc16-45f0-877a-a12717c1fcdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a80d18d-c647-45ec-830b-cfef54e9d2c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0f103c-41cc-43ef-9ec7-e672eb55be96",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a9c93fa-fc82-42ea-b8d6-d310b4688b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c4537b-622c-4ac0-b0f9-71aed1e69322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de16f77-8382-41e1-b3ea-30cf70be9409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3fbe2cf-3739-479c-b150-81b407a7c8ea"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "28758ec6-3321-48bd-a582-06551711e99d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d5f194a-132b-464b-8e16-c885cc1d4474",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e7ba2a-4138-4984-af76-bee7772aa66c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3d00e917-cf75-497a-b2a1-7a98f24f2543"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "806f5ff9-94b3-4733-85a9-16c31b9aeceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7d4df2d-00cf-44af-8f3c-0623ae96dbf8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bdc1b96b-e095-4be8-8ebb-8833382b6391",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7a3d8f4-541e-4d58-af5f-5ef64146fb22"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdc0f3a4-b646-4090-a32f-e465362eda97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65a84324-6c05-466b-b3b5-50a1a491e125"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79ef37d3-3a12-490b-9cfb-ec10e09fd6f8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b71b1fd9-513a-4d17-b705-396a0c4f0b65"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d243ceb-4774-41a2-86f1-97405e50bb24",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "71ca0959-85f7-4743-a3f0-ed2e3fb94b2a"
            }
          }
        ]
      },
      {
        "id": "bcb5ee1b-b702-4fe1-8129-a420303ad18b",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "4ae1c8ba-d2d0-4bf7-8620-d5ad09dc234d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "02ee5bb4-9a6d-48e9-9d78-c247e363c7d4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e6311ac9-57c0-4323-b95e-3af5d8ae1443",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5590a5e9-8d70-4740-943f-2148aac195ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5619427e-f822-42a5-989e-93c5b8d6473a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d6dd49-307a-4c80-b847-ec075efad858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6cd6a17-85fa-4eba-873f-e811ca1c5613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cca1e4-d63f-4396-a4a1-1ec97f0c6508",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36db57ef-be4d-4037-9661-bb96e0ca07c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9edc266-1810-46c1-8364-60cde8d994ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "371d3606-9fd0-4e5d-9a3c-9fd223532bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "07f52d2f-504d-44fd-a338-eac4d90c71cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25fdba07-6a7b-4787-8f21-21a9a31f059b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71a482f-9ad1-430a-85c0-b879c6cbe5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2b705ae-0c3e-43d8-b913-25efc27dff8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2141cc00-dac7-4530-80e4-9b924be3fe6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d7c356d-d0b1-4e40-9e7c-d38b429e79f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4607bd50-1866-4636-a2f7-dafc0ca0fe92",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47749bf-e67e-4ec7-8ac8-cdf29443192e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77535b7e-6b5d-4859-b973-c2e72a946574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950df3a2-686e-48f3-b371-0d6d3c12ab88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb3709eb-3d6d-4a48-bb0d-725a4dfb7a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5973d7c9-4ca2-4a32-a563-b39a0fc28a96",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e49d9f0-8cbd-44fa-8017-1329f12757d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f14974b9-4326-4038-9c50-61f7e1cd5d37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59693bf6-cbe5-4928-a1a2-06fc52ebaf54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e89b487-6529-4e4e-ae73-a02e15712257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c33c3998-f5ea-40e9-a907-03de53dfe1a1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a247b699-025e-4fbc-8d87-1abde676fbca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41393f95-7bfd-453c-9dd2-ccb4746ab846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f9e4f4-c7a4-4c19-9778-58dd9d65e424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5077cd5-c722-468d-a032-554eb9178b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00c4c68-0036-4118-be88-c99ccf689bcb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4e5cae-8065-41f3-8b43-27b238de3c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c344c85-bc40-48ca-ad08-8c1e7614085b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca20119-7557-42bf-a41c-3abd197e494a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdfd0e2f-414f-42f1-a79b-a2d63c32dbac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f25fda-1304-4020-b352-d77744ad8fee",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2923e41-9824-48bf-bc0b-61b716fe64fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a339d122-716c-485a-8119-7384851c3aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf1f7f6-557b-4ea8-8f57-31c08ac8bb4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce016af2-2c59-4c63-b0bf-59c24a6c8173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6a0865-93f1-45a9-bd0b-5fc75064b69a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "420169e7-e71a-4ea3-bb93-40706e7ae115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e11d9664-c91c-4530-91f2-28949c839033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d3eec0-8a57-45cc-b2d1-accd145bfb2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c935ae0d-5171-4c63-82c9-fab244eafa84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2fb1b0-547f-465d-80b2-d68ebe3ec8b7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d67544b-0ba4-4cd4-a995-84a95244bebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e21dd2b-7673-44dc-97b6-1d6980245a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9cf3dd4-33fa-4aad-8c60-6057fb0db6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df040957-b085-49ff-a848-f8204e1d1fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61be3f09-bfad-489d-a196-7afe4ebb05ce",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93cf8fb6-5690-4f09-9921-2b13c0f2fb21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3f235f4-af3d-476f-81d5-301916a942a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "089f59f3-d03a-429f-9af1-a605bb86e86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fa7c300b-d963-4fc3-9f70-e657bb129a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe0bc3a-98c8-4523-a068-88b1f0360f1d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2912246e-9953-4b14-8372-4fd84ffcb8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29d00a5f-dc1e-452b-9b00-354fb5537a0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad74883-3182-4732-811e-72d82093425c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4a31a0e9-3832-426f-a44c-a129d10bd5ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171284a8-3e7c-4ba8-8de2-c99b08e951f6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "129cd634-8a6c-4168-8335-93a504ab585f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02f44122-0b4a-480e-b933-a99e471363d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f95da0-c189-4db9-95f6-de1a349e9a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "61759590-eeff-4e95-bf58-97092e95a536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2926db77-a520-4da2-a65f-fbe750b937d1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c941b83c-f6a3-49d9-abcd-2d70f7f1b781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da4122a2-a9d4-4adc-9d7c-3015f07ef679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc23d45e-f250-40b4-b92d-ea1e810ae70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfd42d69-ea31-4d1c-b27b-23704e92c5d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c066ad-fbf3-4908-9fed-48ff5e4d05b4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5de1fe-bfc7-42eb-be0b-17ea96d58559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f86bd62-580d-4737-9454-7f27310ea588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce9e36b-18c6-4d1c-b836-a535a7c1d7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce7803eb-4edd-4bbe-9e99-23fce4046516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321fed82-497c-4494-8351-06b259765d42",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbf4263-c2b6-4812-abee-37d99ad9c415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ba5fe6-8d2f-4d68-bb41-e607dcbfafbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca12336-fa93-41df-bd95-6d6742a3c789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "db323340-079b-4cde-af2a-874f660ab9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b561e392-c780-4e61-9b7c-dee86825bbdf",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4deaec64-1891-4554-be35-171587edd8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dc87110-cb3d-450a-9651-81f838247d81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20d86da-4fa9-4d5e-84dc-1327b5fab314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c78971ec-4d15-4c27-badc-86ff829796dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9341f074-13ce-4f0c-8f6b-f2d096caf7af",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "840d132f-4819-4bf8-9715-9a270379f9d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f33c7e5-29dc-48bb-a651-6d63e06467ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc8c538-7168-43a2-80af-ddd8cb9ae75b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a314c27c-1567-48f1-9d10-52daaf036d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dea91d7-7b6f-4d13-8e25-e792df8744e7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b60c45-c447-464d-9cc9-641a7bf4546f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2139da9-9a2a-492c-9036-b07673bddd0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf5a361-434a-466b-93e3-6160d72b6ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa4be100-fb88-4856-85cd-a0632301c143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f25d2a4-229a-46c6-b1f9-0beff50dc94c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8f5641-6149-44e4-b50d-9b2e873319d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5df2bade-73cc-43e5-9576-d70b11f72510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ad6452-018c-41c8-8bff-83240a35fb17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58c1c03c-5510-470f-9947-dc4d3029d11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf70840-3272-41dc-a8c9-13a295504eaf",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8919243a-dd09-49b0-bb00-305b2e353571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab278058-56c3-42d2-ac4a-b584c90494b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea75d77-699b-4187-8c72-3d25abf4d180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50273546-9641-45b6-8f0d-97950026bc53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31169576-fe4a-4222-b73f-b2fd27e50c08",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a8c5ab-ff11-4e97-8867-79da67383916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46726588-53ab-4df2-97b8-9cd849475b5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73667fad-2ff4-4044-8cad-bf3c3610dca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18c7985d-fdca-434a-b8f7-7f0301724c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74577435-acc1-40f0-8aa7-46cc804a0654",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d03e9f-ecf7-4b0e-be33-22230e9ff4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa7bc238-3ea4-4147-9109-f20ecd35bacb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9129e353-b4c9-456e-971c-79c4d271e582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e92c6a8-744e-4fff-bc67-39702779e98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55c8f74-e596-4987-b5b9-07e3c03bdec9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d660900-b24b-4aef-be01-728842b74a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d641892-709e-4d08-a838-8e925a5718f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52390513-c88f-4700-97f5-6f1aec1df75b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c026968-2ee5-4532-9af2-a4123a61cd5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87876fa8-2db4-430a-87d1-716eaa5b2417",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa51c53e-daf5-4886-8c58-28797d893456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48da18d1-bca6-42d4-85cc-24896262f9da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6470ddf4-384e-40f3-93b1-ef972b5dbe68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e964671-32c4-413b-9de4-3847393c234e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab03e7b3-ecae-45b3-874e-986af723bf4c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "634ff13d-323a-44cd-a706-bee7ec72fb7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb5738d4-46f4-434d-8b19-69a4335cb298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ff58b0-b9ef-4372-951e-9329a1a3e906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b409c094-793a-43ac-b5d1-c96054681942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e95b23-28aa-4e02-b248-fd0e204e469f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b41e641-2939-45d2-8e7e-db696122e79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0300eda8-fa2e-45af-99bf-058b663c65d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc8e153-bf7e-4b9a-ad35-fd89a07b89a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbce7f1d-e231-429e-a3d4-238d64f748f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988ae0bc-5d10-402b-a873-1d2e82c7d363",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9353d245-1d5d-412c-bdbf-f538b8a311a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d24bfc7-294a-4148-8e6f-ff1cc12aa4c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e73d12b-047d-4f54-9344-77301cd671fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "243a1f8a-27b3-4616-a8de-198475b25ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc617211-3165-45f7-bf0c-370763ab2668",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c56d4c8-410e-442c-a9b3-f85a6b19a915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0156cfcd-e171-4364-816e-68250de82df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "951752f0-d6ba-470e-8088-d94e7c76fc0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8890cbbf-4a6f-4fec-9278-b934df691512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6552918-1902-44da-a32f-960b5903dbf1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb161a68-0c1a-4a20-8909-656a72f70d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3d22d00-bc04-4f7b-9489-506a878a54dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b50d3e9-77b2-4f2c-81ed-c74a6cb26d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "648c79e7-26ef-4ecb-89dd-62094ec4e700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46eee4db-055d-4fa0-b731-48b747b99647",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee05303-061f-43f2-a327-30a02ba6d892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68862825-e107-4c75-b06b-d2c34e45f199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4382ba2-1f9d-47df-a7dd-04a97bbc6961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "116bf539-0989-48ed-ab81-45283c1aca46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8b6287-71bc-40fb-bf71-6e7667df9607",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf3d8b0-b355-4892-b3d5-4375e89900dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5154b0c7-ec29-42fe-bf5f-4de89283759b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af16819-8b93-498b-b311-cc02d13a13e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfa0fca0-09e4-44c8-8c81-7639116ece2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab043c97-675e-4347-9f91-ad90ce2bf8c3",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28af2f0b-be27-4c6a-a451-4558fbb0e6b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c921298-523f-4696-9c9c-d01f41fdd57f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653c8ee6-36f7-4a5d-9803-2178d90b5851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1496813-a160-4d5c-a974-60e975a5ec3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6119d1aa-66af-472f-a27a-7ec365a9dc55",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf69b071-aded-4d01-8e80-7000f104f407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c4d5e9-244d-4a9b-bc44-3ee823003a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb480c7-5473-4dcc-881e-d1c95b05fe74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "afb0eb5e-4213-4b8c-a4fd-bef74632cbf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada89b29-adb8-4e42-afa6-5586843f6ed5",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e540750-96a5-4dd5-bd8f-53d03d6e53ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "336013f1-3fff-41fb-ab44-202f46e549fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425c13fb-80bd-4792-8c3b-cf0c10a5a85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecb53b5a-691d-4319-9de4-98a6feaeb038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31692566-b027-4db4-bf2e-b5366e79d419",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a38cb93-28b8-4cd8-808d-e2402b33b425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "101ce0bf-63d9-4b49-ac92-b8db70529b01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9602d7-d6b1-4736-8a98-be28408c198b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d2fc7e8-2c3e-416b-9b86-14f22f880156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90fe969a-9d41-4b98-93c5-b50c0a079695",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa6ae83-90d2-4061-a58d-ae19eb71aa97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86fad036-6c0c-4ed3-9981-540b4e0ffb51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d160bb9-8b79-4b46-a508-d84cfd83d83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5314cee7-2bfc-4bec-b852-efbcbbaeff07"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b697bf9d-66b3-4ebe-83f2-d728a8296b44",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9e8d96e8-8de6-4a53-98f3-282f41ff196e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8cb3aa-bf0c-4dba-8cd8-8f0a0fd943be",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9e00632e-effc-4409-b14d-ed4de9f3e5cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb04d05d-614c-4e57-8880-1c8c928abb3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20d142d7-ff12-4b12-a76b-4797769c3fc3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bdc16ec4-7e3a-4514-9c27-abfc2afc9ea9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4161a3de-dc33-4976-87f7-fa0ba90ea7dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d55ffe8f-f530-482e-9364-ac68637c7b0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d528657-aee8-433e-b9f4-a1246946311e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "492a38b7-4aab-422a-a204-b1b079d879ae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "42f6271a-2bde-41e5-b661-3a0fdef937fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b088809-d444-41ee-8cb9-0be5f9500dde",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ad9d778-e5c3-422b-80fd-660bb812e5f9"
            }
          }
        ]
      },
      {
        "id": "fc4f8003-0ac2-4675-94ed-06b9761cac01",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "32fc9683-2d2f-414f-be05-7747b15e8ab1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6b333952-c207-4193-8764-914e04105c31",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "28f2331a-743e-492a-a871-04e8da6e7977",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b999c7-e607-465d-84bf-715a1e8440ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3655cd6-4d92-48a3-8511-1211acd71053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7645be-6665-4d9f-8c38-6d72904e9106",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f4c5f0-d042-41bb-ab35-77525624915a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57decd49-062a-423d-9048-15b17e7a53bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7bd4c6-09b7-40da-a96b-0441679a2257",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6e7ffd-f139-4ffa-8750-93d93929b32c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e13e4de-99c7-4a95-80fc-09c127e178eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee17183-6f95-4cb2-a869-58a7bad3bf12",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f1900a-ba01-4380-baec-a849eba329a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6912473f-5771-41da-8136-e5422c8f8647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af840c98-df88-48dc-b3a4-0bf5aef69eae",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f67c44f8-5215-4012-a2b4-0182fed21f9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "399b863d-1ba4-4c76-b2e3-c8519f5ec542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d22e66b-d1a5-47db-a8d8-e5161c984d1e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1571344f-c039-4d35-90ab-875cabf3b984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edfbba84-8c99-403b-aac4-a9ee33aece03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2ea024-8bc0-47aa-ab55-b7f8283f4eab",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf559958-39fa-476f-b0ac-da6dfd434b15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8aaf6a8-651b-47cf-9393-3fd3646810b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeda8ede-fb28-44b2-8cb6-f13399d67245",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b0cba97-81c2-4b31-9976-b4ce58157d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9581a77-d5c9-45c8-bd8f-989da915adc8",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a06810-64d6-44a9-b81f-a663a98aa979",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6d2447d-237e-4e55-ab8c-4e581952025c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "715604cc-a228-4cae-adcc-472f60f92c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19326c4e-72bf-4f47-a657-a1ea37f44344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72a5083-4061-41f7-ae5e-96a1d8bc3a0c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19aad38-6353-4074-b5c1-0f76437df027",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3680bcb9-6fc4-4ae6-8867-652f64cd0f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c904b55-4cd0-4b70-8719-765e563967fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06744b08-00ea-45b9-bfc5-80f888fd5fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9838f2e1-b764-4fa2-bea3-43963d0a95c0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634b7ccc-9581-40cf-90d6-5c732f56e412",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff66fc3f-cf84-4270-8829-af7bd2617849"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50957034-8516-4689-985f-2267af9debef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66788444-bab1-4b98-abbc-f70d2fdd1910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74006863-2612-4f3e-b451-448bc27f3f3b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197dcc09-9486-4f9c-8a9d-bb48b7309166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f82e72f-55d5-4de7-88f6-30e03cbe6816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36379ca4-69d2-49f1-a4d8-a2e625596154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52104efe-c30e-4e1c-81fe-5f5a8f905f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c6cd91-ac5f-4e67-a4ee-00fdba9e5a39",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a899f91-aceb-4a8c-ad80-206a059e51e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "794e18a2-38b6-470e-9d0e-bd7d596d6275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c775571-0528-4bc1-8a21-2745d84b506a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c7a922-68d3-4a6f-aa6d-f3ee26697ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57cab51e-3f1f-48ce-b378-bb8675cf66b9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce28a1d-8834-4346-a5f8-03e2539a1c90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6564331c-75be-4090-8d53-39309a88df47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae724f3d-9418-491b-af74-d0f9fe186d8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5667b52e-339b-4cc1-84db-701c77889a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e0bb67-773b-4497-b24e-441145be1fcb",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99187b4f-b3d5-4f11-938b-775a50316a47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f731ea4-1819-4647-91f0-ef69abb8c544"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8cacbe7-8338-4dc7-99bc-20bdf06de3c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2304b24b-20fc-47fb-b293-2117bac78607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae3d870-ed48-4605-a5ea-790740dd87b8",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a318906-e77c-4a40-a8e2-3bf37fdb0fa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ced1e88-fafe-4023-95a6-bbcf5738ed52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9cb73a8-918e-4cca-926a-5b10b99ff7ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eeda699-aa84-420e-8ee8-d8af639a7eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e9c43a3-e480-4d3e-b34c-0c07d9a0d6a4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f23ee75-791b-452e-aa72-af1e69f83bb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e44c8a5c-e91c-49b6-97b1-1fd990cd7e07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a1f9d6-708c-4e7d-9514-7e4ab3dfbb50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a37a7429-d899-40ab-b2c3-ee31f5e3eb49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa815de-6596-4b73-852c-61bcf340cb12",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521e789d-283a-486d-8fc5-40bc7b597438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4231fc2b-2fe8-4c3a-9edd-7253b6884769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "733fc410-98db-44ce-ad25-dbdbbf84bf40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6457f930-3143-4894-b457-8b7572eeb939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e754fb2-89a9-414d-8215-d5c077aafeb9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8409c145-ad91-40d7-afd3-17e614bbfe31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98da4197-d32d-47b7-bdcb-403427a939ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9e0a61-1f28-4bbc-ba19-613192ca1265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb2ba08-33af-4486-973a-c7bdb2eca959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1743ecb2-13b1-42af-a67b-90c79fee0700",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf10935b-40d4-49a3-a20d-6ec1baccb6d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfc8a7d6-5e37-4ddf-894c-a27e2f40a28d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7744d59c-6f15-4429-a338-a3d0cfb2a39d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ce5dbc-3543-49fc-9eeb-454b640a5c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d428a8ad-7129-4f41-ab73-f002cf96d83c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4422a79-c7dc-4f37-ae08-c39909884af6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79287c20-4bb0-471c-8d72-cd93dc20d75a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f78027e-7646-4f55-b276-8f2ad9c403da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57934825-14c1-4d78-8314-d05fe6632f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b05569a-c6b0-4050-b442-7a08c7f3b8b6",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797b54a7-aa56-4d65-8e80-1b9f7854f548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ab43f33-532e-4ce8-9a17-021053eef50c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb44cc12-f32b-456e-99ba-7d4bd83433e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5840750e-4da5-4f48-b800-0e1948323a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba9efbd-6ca6-4302-9397-3748c5062804",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fcb84fd-a4fe-446f-879a-11fd129afb8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b7ec758-a637-46a8-9d25-d671d22e7c18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68eac3a-6895-44bb-96e3-a4f06f542a93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78d157bc-92b5-4b8f-abee-64fa8d4cace8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df41bb0e-027c-4170-b5eb-aa7a439bfc3a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2a5f7d-545a-4e16-aa5b-7e14723a48dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26df68c9-c036-44f7-a7c2-179ab9b4a87c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3bc725-1505-4f21-886e-376c35f60264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd2a1f4d-29e6-4b26-a8a9-feae842a6605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0386e2ea-7a64-4957-84f1-ac18b8b7c432",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab0cf26-5b72-4b5f-bebd-3a87fd2dff37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e85d67c-0903-4b19-a97a-1c6b29a23bbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caef65ba-4c7a-4c9d-9c63-b9fd20c3b4df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1df579a-9bbe-49ea-ae71-114a5c4975e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50f0cfe-3133-4b12-8e72-ee5777d8a736",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff63f2e4-e860-4024-9758-7c319df15fd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b8a0396-1ae8-40e2-a4e4-91eca1964159"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7958b454-ebc8-4598-b097-23cf8ffe3c57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3635d63e-9d2c-4cdf-b45c-e66f09af7063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ceaee0-2e18-4744-874b-fdacc3c3d346",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5202a1ca-c09f-4030-9ffa-c49c9feaf731",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6a47454-1bf8-4d81-9fad-f1f15d6efdda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f5d7b2-8bca-4c8e-a582-fabcd5a1a8ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ea8fd39-652a-4136-ac36-257a7cb5053f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60c468f-bbc2-47e1-9dbf-da7854be01ec",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90afa374-212b-4e5f-a2f2-0f417bef9a54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "404f74bf-6852-4225-82d3-96f9a9616ebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ad39eb-2d90-4763-a73a-05fba718bede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933206f8-d520-4667-8f78-23c2ea24a896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a174c42-d09f-4cfd-b9a6-aa118d73e528",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c68652a-56b2-47e2-8f95-6dc1ffe62d9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "038d9013-b520-4b9f-9456-7f799af6410d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4887b9ef-1c2d-4bec-8c93-73938d252a6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a55bfca-9707-4757-8126-f37b6b385bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e42be5-7814-447a-bfb2-b14686dd2dd5",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3d854e-7bc5-4d29-8c5d-f377d4f108be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a158ef1d-c9a0-433f-ab81-2e0e4508073b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8abb3914-a7f7-4c9c-8298-cbf7e86ae546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efea2b1b-025f-452f-ad6e-8357a3bc3eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4b1947-3b7d-4ba1-89d9-1a0db2f727ef",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50341c8b-3788-47b0-bb08-c1d8794dacde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad8337e0-ee37-48b1-88a0-e9edb23a2c22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "890ffdf8-e7ed-41e6-a432-a493eb1b74ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8981bc2f-fb70-4a2c-a099-638b597ce289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa38a2c-bfac-4ced-b6c7-386dc4411dc0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eedc8271-5606-4935-859d-66863f0d0877",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed818b73-de97-4f7d-b002-020986fe31d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc424a13-22fa-4ff9-8863-559a28817d79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e528f2d8-3e49-47eb-89ea-4563a44dcb0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca34b17f-98de-4f00-9cf9-bee75dfe1a49",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f3c956-339d-4aee-8709-2523da326960",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8502570-79c3-482c-9ef5-b7b7f96d895b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d80b49a-5f94-4e73-9dcc-28b72a6c634f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95771f08-a0f3-4a74-a321-88c819d3eb8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f4fb92-c5b1-4c06-95b5-a0b71d8ce4bf",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b0466f9-42fd-447b-8303-d5d7a12aa865",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba2b302d-1367-4fc3-ad0d-13533448dc16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dda27c9-62ba-4eb6-9a75-926125c541f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "228a3a7c-5ef5-4d87-83a0-395a7678c8ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0824cff-862f-4553-afa0-c304d3929868",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8dee18-0433-4afc-9a58-0df51e825592",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04a013af-a1e8-4ebf-b4c2-64e4b88ec697"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdf1eafa-88b9-4db1-a704-2c9b3c5fe8d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e9e9646-3a95-4da6-bf87-81fa3035830f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5b4298-72cf-4e46-83c6-18c655984983",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c3b6ee-02da-464d-a752-ae4345662505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cea4e6df-8a27-45be-8fb4-8a599fe301d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98990cb4-963a-45d9-996b-6dd6330e3315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a5f49aa-e3a5-4fe3-9e4b-6e39fea19943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282e92b7-5396-4e89-b636-a582b8890811",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811211b8-4169-4f9c-9a15-26cf0c123e9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "572bf464-fbe9-4b3d-807f-06df177283cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7b2fbc-9d60-4942-a5c2-447b1a42f610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10fa7c84-2c57-487a-9b69-681bf1597dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf581774-4abc-4cde-887f-c2e6d67544a6",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8af37e-4d49-45ad-9802-42fcdb0a98fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59a96662-183c-44cc-9f41-26d69587878a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b1154e-a810-45b8-9d44-9140c0431d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7d5897-c710-4c10-a700-66cfbb97287d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82691f31-c290-4267-a53c-fc27cbed8bcf",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21bc3e67-3efa-4c18-8172-49e9c5ec9a92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc4134e-6f74-49db-98ef-7bbc81b1ac4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe0fcfe0-f1a2-45d6-aef4-c8267eae5ea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c41de8-73f3-4d9d-9cd5-7acf17b9cbe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00103be9-ed6a-4fe8-a1ed-ec74ec3b17e7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68596eb0-e752-44e9-bef7-1c9dd0ad7fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06571f1e-8fc3-43c5-aa88-4cf1495f5536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "351c15f2-671b-44d9-9e8c-8b1e91590661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cbad8d9-06d1-47b6-9063-a53be063277f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf028f4-d6a1-471d-a982-d8c8fe282d83",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345f0d3c-55f2-4e82-a5c4-fd5d9eb5b0af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a50af691-f192-4084-a364-d79db8caedb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4560f9bd-290f-487b-9129-c9afc0625167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1755cbb7-41c6-4c70-b16d-6d67e5483e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1663cc3-04bd-4a06-b90f-44caf1a4fd73",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d580f31-5b96-4da4-9f26-050c5654744c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ff6d8d-bd9b-43e7-894a-4e74add95e4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2cbd8df-7910-4cca-ae88-101905264af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52143a03-ec07-4b0f-93a4-b187a8577bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df6bc24-9fbe-45c2-87a4-e11867b1eb0e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e186e8e0-aa9d-453c-9e7f-521428c51739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f2c29b6-319e-44a8-a0ac-448f70c82886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aeb31b2-3eda-4b50-af82-e084c383e9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca5f372d-9304-4057-b395-eb48dff1c348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95b222a-0bd2-4ce1-851a-938361eb5532",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45c4041-7766-49fa-a6e1-94a3a936c562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d993a6a1-dce8-48c5-bd3d-f218d567652b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea430539-6b44-4dbb-933d-5da7904f257d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a0be6b6-7147-462d-9b1d-b1c3f105a4d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d264b4e-0084-447d-9dab-359b3f4a9f1d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56fcf0f-c97f-4806-a17a-3e7faee46716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25d3ae8e-c83c-4994-b265-6476060fb6fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf64b7f2-0eab-47b8-8dbb-91e8a25e6a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1413e321-ada3-47a2-a291-e097636438fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41bb8f80-9f21-4bbe-98e5-4ca97c34ac0a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f501bc8f-9180-410d-8916-fe591f7676c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d10a8073-3985-4a87-962b-637f9b1eafef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "645ae519-e62d-4021-9b0e-d70dff9363a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a348c4e-771b-42d2-9f30-09e32c08198c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac264e9-675a-4106-9864-ee08d5f0a386",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1c5e39-22bb-44fd-a53a-d02865db2834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99afc6da-5f94-450d-aab6-275871c55814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc109e90-ac14-4310-a7dd-05dd46423ab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f9075a7-c855-4195-96ed-7c5c8e787e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7d9822-8123-44c7-b58d-aac3072f0726",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96014a71-9129-48d1-a39f-01e0c8bf3c57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f793e5bb-54f2-4d97-bd13-23981816aca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a81bfe-94e9-4e0f-9a5b-6257a34233d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b48a55-152c-4192-9af6-bdc7466822f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3439c34a-72c7-4567-b5d0-fb8d008f2748",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e10600-175c-44ae-b727-850327430b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42eba557-21ac-4345-abf4-13834525ea3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc634f7-54bc-4cc3-b70b-72b43f0503d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c490cc5-a1cd-4021-b327-1ce5d3e594ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e98e295-cc64-4ad2-a474-3176d725df18",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ee8d3f-16c1-4789-9d1d-b3ca27271a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b9b4e31-ec9b-4f5a-9b15-c2c3becb4e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de354f07-cc9a-4d7b-b344-48c5aa89f325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d1956c9-e074-4266-a0aa-7b72806a1175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a224239-983a-48cc-9c96-82d0014ba7ab",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480ec357-95b2-4e4a-bf33-d66b69dc0088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a531ed04-9daa-4f8b-9e96-206986369a3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "799d5e56-945b-48bf-9989-5758d439f6d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01a134aa-a8d4-4683-9e67-e388b7c1e225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273c7bb8-a8b6-4234-9f47-b85c27be26d4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e463b6-f8cc-4427-bea0-4ae71bd8a066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "353779ef-97d0-4d2d-8d03-f32fe5b4c609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d1f947-1306-4ff4-bac9-6cf0a8c9de5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38b44910-1c14-4861-bfd7-c886253175a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9f63ce-ca55-477d-a787-30c6106c2ba7",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9dc7edc-4814-47fe-94bd-75c76ddc907d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffe54f9c-19d3-42df-bce4-0f157ede4012"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d8ee59-2ba3-4ae1-b8ca-9c1a059dac4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e991d26a-6fe9-4c60-a0ca-99dc92b37c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c8df81-1548-4fd9-abe2-be2cca5eee82",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d814f7b-041d-435a-9e8d-084baaf2662c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf84b01-c6dd-489e-8efd-718191beea03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad35b7c7-679f-42f5-b36e-4564982c4e0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8ccecf3-2c48-4fce-ab4b-f0255a4873d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f1f9e9-886b-45c9-b28b-b98917dfb9a1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81da324b-35a9-4523-aa07-9f9868b7ee1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c816e72c-35e5-4ab2-b1f1-7d76256bc795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28f0a2f-8659-4ac8-8783-69a256cf2f7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4782a806-923d-4efb-aaf6-f84bd6eebc5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23106af-a044-4d8f-b56b-c7ef8b72e8bd",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873f61ba-6cde-4184-8e9a-4e2aa11f4eac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0105d655-5006-415f-8c54-690502f82dd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b20cfe-f9c9-429d-be96-d6838a586513",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f6866e-8f0c-4a6a-809d-922592f52b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6acbc8-bfd3-4946-85ca-b5e2ef23ee6e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c4e67d-e579-4c3b-8194-aa3e6677a16a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9009716-591c-4b85-9e3b-1bc332385c83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a6c7da3-8e0e-4412-9b09-bfb8800f5b94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad3e144-4195-412a-ae92-0d209ae1bd03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263e7025-3382-487b-97c6-ca7d135633a1",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38da428-7480-48f7-9592-1b4e48677895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab4368d9-e753-4abc-a676-172cce0dcf10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0855d10a-8947-4c39-95e2-6b625d640740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8936b5b-367e-43be-bd81-677d242dd6f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6742ef77-a737-4028-a2b5-15e566cad4d3",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d7add8-5ea3-4ffa-af8c-e31608a97208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "707b5cfe-0960-4de9-a1d9-43b4cbd97da0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a902bd45-155e-4c4c-b46f-204e5b9f8173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff07e9b0-db1b-408f-ad80-ed2982f421ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13560f9-00ae-4787-8e8c-388afa613fc4",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a90c9cd-9ae4-414d-9d45-efb700d21452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af218103-8075-4d46-8ecc-fec86a5654b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c457d2-8fd0-4be0-8dd9-ebe1ecb83409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72dccc39-211f-47f7-aad5-701c53cc9c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0a2ba5-3cd4-4886-9c52-20cb7b1be2ba",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b65fbf-cb6f-412a-884b-137719830021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bae017e-c140-4b9d-b34e-aee2b1c4b231"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b027a08-1d53-4c8b-a0c6-9963accbf59a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4af4bbd8-3c13-4d7b-8fec-c5ab8debdb40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d919c24e-eec5-45f4-b405-ddc6fb1ae7cd",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d24635-d541-4346-b25c-5255bff940ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5363e7f7-96c0-409d-9afa-431d1901c10c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dedb2a35-d2be-4484-9382-89752611d4ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d4c801f-d6db-4525-a6b9-9aa49619ceac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f86c6b-4d3e-4d5a-b037-98c908512ab6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01dc7e03-d83f-4285-9d34-db9b906069ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fae3fb3f-732f-4502-941a-ac127b3c586d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6967ea55-7fd8-407f-8a11-3f86fe8b1d13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eaa7f18-12a9-4085-a150-74ccd5f20de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb29916-066f-48a4-a36f-6d8d0981a955",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740944a3-d996-4e7c-b059-57f828cd2831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b269c2ae-6cbc-4632-b706-e8ba18a75c36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d158b1cc-0071-4372-9d27-2c8458efd17d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e83825f3-7b8e-4958-918b-2480fac1f2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f660338-07e4-4148-86a0-6e40d226ade6",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd1df43-606b-4c31-807f-d870f9ea7090",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9d884b2-e6ef-4075-9fc4-64b2331286c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b57266-50c9-4f50-94be-d7ab37d77a15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8cec2ef-bc6f-4775-8ccc-201a66146fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ec06d0-cfd3-48fe-97fa-e6e89c9c8bfb",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d55628-6079-47b9-895f-fa8b35da86c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41f9d618-af23-4f21-abe8-5f84a2b9034f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02effb10-ec29-4db0-9737-aa79c259e8fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c46127-15f7-4ad4-9cef-9d927999ad97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db054346-e4e6-44c9-a9a3-0b4f99b55152",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7206225c-43cb-4dd1-bd62-8f20b7d6247b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72b00249-b92a-4952-8791-7eecd782a2f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ee94ee-64b6-4525-a1f6-a03c62cd4239",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f7d542-3013-4f18-9f46-aacd93085d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96673a8-0534-4185-a55e-48c261919b94",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a450968-1fd7-4dec-8a21-a45209e565e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3873193b-f51b-49f0-b8b4-75de84781291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6b6f0a-9d77-4385-97ac-fcd50f418933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1349b7df-27be-49bc-be7f-69eb9734d379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e908c2a-0ce8-4cdd-8cb1-28f75fceb4ea",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f153dd7-c2ab-4512-b1bb-423f86dc661d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81f841ee-5ee5-41a9-ae60-3539b0675047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3604b56d-c77f-42b6-aa90-6cb6ae3ef2fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f81370d-bfea-4c5f-8dce-151a6aac8aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f7c774-1eaf-40a6-85d0-711da5938335",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9aa65dc-6d3c-4220-b809-a7f54d45f97a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36ffe34e-6b6f-4b82-b41d-0171b516c516"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd41d9eb-cd54-429c-bbba-8c2c863204bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "095c423e-b506-4d6a-b3fc-03abf7070ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258dfaa4-2bdb-48bd-a908-b0e8596e0568",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ba10aa-0de1-4385-9be8-491df27354d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "414b93f5-ffc6-4a84-9e7e-81416748be88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c8c53a-b439-4b63-be82-ad9fd703a991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f9e77e-1fdb-4d2c-a7bf-ffac00776c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05a8ebb-ae4b-4d90-84bc-605cff6a3454",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d7f72c-1387-4cb9-8a3a-6f706cdd2c4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96405e56-e4b8-4f47-abb9-e34d6df14391"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e50c56d-227b-42e7-9829-a8f54c94fd4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e1bba2-4d2c-4eee-b77f-2635e16df397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46660c67-6bc8-46fa-98b7-123301924056",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "770f8d93-8054-41e1-b2bf-a36c75405568",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce590377-8a1b-4f1a-a91a-9412e07df02a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77324536-eb64-4aba-a8d0-c1ca114c7cf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9258c479-6de6-485c-b058-f43ec3208933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5bc9bae-0c92-42d6-97d6-a06f785e72e1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ffcaa6-05c5-4ed6-8da9-fb5d0692c5fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7736ad77-9596-421d-a216-54c10136c3d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "988694dc-ce88-4363-a5ae-82b032947fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7beb2c2-4e95-4d72-be99-af5ff2e2f129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5801bd-6d07-4af7-ace9-d174776e84b5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0ebcda-f279-49e5-b175-4a089ad6591b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bfc75c8-91b8-41b7-b05d-b0e8b2839799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "508134f6-0ef4-4d37-86aa-e582d1ad0b63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b76d321-f406-4bff-b999-ac93a1549a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b4d7d2-b713-4909-832b-9857b1d935d3",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc835d59-614f-4ec7-a119-d6b0295d3036",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f70ce22d-ae3c-4e01-bb68-09a7004aee09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "643e5b47-aeed-462e-8136-354cc00c22db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370abd37-7861-4904-a76f-985f66d4b519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2781671c-314f-40f4-969c-8c5180a61093",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb34f627-63ea-4779-8d03-e273675a8d88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0a37c07-fb4d-4b99-ac17-641f723b791f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "151943c6-e88e-4dc6-87d0-0423b868a98c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e71cf3-2f27-4549-850b-94bab1d90d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6987be0-4a67-4e52-b5c3-62e30cfad342",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62aa8481-70ca-4b3f-acbb-14c4be10b740",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c3b1c99-2b38-45de-b3c0-c44ccc3bfe4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2f26ca-2fb5-4286-8881-f3da7e48309d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d25b024f-dfe5-47f5-8dba-b40a55ea32f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f09e07-ff86-442c-9ffe-da694c32e52a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e3478a-b065-4628-b986-22d80f704367",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a4b7e3f-1254-4eef-bef0-29092ae8ab9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "233202a0-874d-4644-8ec4-5c0ce88e7c05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a62b505-9ddc-43d1-9829-9bd3cde1f0c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7302852-d3d4-4525-a333-0638cc07dfab",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ab8ae2-0790-4a62-a225-37c2ca146360",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41ac4194-befd-403b-9beb-49d8eabad821"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6e2060-1b2d-4cef-9bb0-d119fefae113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40aa2c90-e1c0-445b-9c5e-9b511c345470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1746a7c1-81aa-4c5a-89e6-3b5025024c78",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0513b2e9-c414-41c8-81dc-04b4e1ab3097",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43018fed-7d39-4dff-a2d7-64b9e57f42d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac75a8c4-3338-4e16-89c0-b1301a9c4e4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b825a7d-3956-43ce-93fd-747d5fb82586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef996cc5-b26d-44aa-9f9d-48a9ae5c7d69",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "863a770c-d33f-4902-b79e-bd38407b4849",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ea60fd0-f66d-412c-a556-6a65d15281de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f63355-8fcc-4106-b07a-950971352c9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8074645-972a-4d33-aa03-89803e86d648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccc6b87-43b7-4a9c-8a40-6b7362e3ca19",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce0d347-36b7-4add-8099-70f24f9f1c16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcdff1c9-aab2-455a-9d5b-e2799367ef04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdc212f-35f8-4d9b-b21f-913c87388c35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d21caa-b599-4f0b-8925-0b9a61881d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95da48d-3879-4fd4-9969-ee2fc37a5b7b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2099958-99f7-4c03-9b77-9a21ca642c30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88f1f8c1-862d-468c-a85d-a130fc516d07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7316be5-ed4a-4dca-a962-8fa3fe198bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76dc20af-1850-430e-b0c2-d953dfecb961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06b072f-3110-4f29-b309-a41b53eaa704",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f627a8-fb38-4cb9-a223-88ed6dd84aa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91fafe4a-4bfd-41c6-9602-a3c20ea9112f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f380540-e111-48f6-81ce-2ed36bea7c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80dde927-d38b-411d-95d5-a9d08d7f4af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad901eb0-fea6-43e1-aacc-666ed1b7dbe4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4bbb3f-bcca-41f6-85e5-9e5a730d7311",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b23e9846-2ba7-4be5-bc3e-57f0235265ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76fa413c-b15a-4290-8c0a-4417fe25d9b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9969e0d-58e0-47c6-b0d1-11f4935fd662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8955b1e7-baa5-4d6b-9da8-885d58c35cb0",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22265109-1dd9-494c-a85a-bbb4781c41df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38ecbe4b-c5a1-4508-93d0-f02ced2fe74d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2a0459-1d34-4cf1-a5f1-931b10fa2f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a550f30-110b-4e40-9d91-0b2617de4e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37418110-f5cf-418d-a8ba-7e6309c0d702",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b40a38-d3b6-47fb-ac2a-5d81e26fdb3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91040aa2-9491-4669-9f90-6f574be4a71f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c251f23-bc49-49ca-8f96-ec9dba34b1e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42a5959a-ca11-4852-a157-838d8fda1d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4669dfc-dc72-4c72-a948-f2b0e257c21b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c48c7b17-fb66-4f8a-90f1-84aac58ca98d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99ad42ef-9256-40a4-867d-14ffd0f74252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4588cdb5-60f9-4d00-ada3-60d7227560f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e67c8e-8c6b-4348-b976-491b9ba2b458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5712aded-5305-43e2-9ae3-78898140e724",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43628bfe-afd2-4c0c-8af4-d928fa47e957",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe2afa36-a7ad-4fa1-b9ab-85c7a0d581f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c359858d-9e72-4d24-bbe7-9bfd32e5ca32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "750d939f-9490-410e-ae7c-ad63d22aa5d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945168f0-058b-4d0f-8e3c-978bb5b4f0e9",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f19586c-cf2f-4d25-9e00-98160059ee39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f593a30-a0f0-4dcb-a96c-343631e17198"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7c7af6-cc56-4519-aa8f-6a3aecfe3818",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eacee301-467c-4eb1-9cb2-d17de66b3eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7037beb6-06d4-40dd-96a6-2ffa8ad304dd",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17aff74-1fd2-45aa-893e-3254cd8a8f69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef28c36e-f2ce-4cb9-9c79-cf801cc5dddc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a142c5af-7453-4f3e-9d86-ca2a3d40f870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7faa2534-0244-4cfd-a05d-ac2b3bfda4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a1c6fe-32e6-437a-ba21-bfe419ffbd2c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0c3797-198d-4e7b-aaea-92cc741bbff5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebec5ba1-8e3d-4705-b468-ff534f409e84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2799b25d-6053-41a8-b010-e680dad582f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "836db0a7-5368-481c-87a4-4fbf88bc70c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f04224-1abd-4978-ba17-5537061b1657",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d24b40-fd96-4453-a773-b88c400abe6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b374133f-5b07-4d12-a4d8-a947a0a881e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f36fa61-503f-48d5-9a43-eeb4c2e3c8e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c97b26-547e-46ce-82ed-13c7d0096548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437fac88-65a7-4e2b-8106-9721224002b9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085fe2cd-2032-46b7-b390-17580cc455d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb30d59f-e639-4257-b2c3-02ebffb637ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c72323-999c-42af-b1dd-3e8537a9391d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "083f4256-3fd6-46cc-829b-aa49e6fd7b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f809b7-9424-438a-9a22-1adb55a998ef",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c787ea-7c40-4ecd-9b88-202ee422a16d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c46d7dfe-3708-430b-ab5e-5b1ed4f9e995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "846f728d-3163-4ffa-961b-838cb5db348c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4af89632-2c87-457f-bd67-5c754de00c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "711881c7-58f6-4835-a55f-db943677016b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e76336a-c058-4593-a06c-cc0d420c40cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "392dd140-6016-4c23-aedd-02574e956553"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddec7028-0299-470b-9854-e0bd34700970",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4bbb2e1-35ca-41c0-94c4-590abcd41d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9959075a-34c7-45f6-a8c7-ee0560cc51d5",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b90192-951c-49f7-b3c5-01e63b220388",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df1dc3de-2e9b-42f7-82c2-6ff0b0a529e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "054cf47f-0042-4969-bf87-eb0af5065959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "970f29ae-1c2e-48dc-a717-deb57ca22221"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a4c51b2-481f-4198-aef4-e7a9a6aebff1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca61161f-6063-42cc-93c4-54d5fa49f3a7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7abeb352-dc2e-4969-9087-72895b1160d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9e90486e-ff00-4bed-893a-947cdc2b591b"
                    }
                  }
                ]
              },
              {
                "id": "29b13584-7d35-4e9d-b641-11a8299958d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e86d9ace-044a-4cf0-9347-092dfe8f37b4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0664b4-72fd-4b17-a9f4-c27384d6331d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "dd20db53-5d16-4497-b9d0-eeda36418ba5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cc5ea2-cc56-49ea-a52d-a81631062bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f23bd48e-1b98-4d51-a79b-cdd683181ee8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "980d83ac-a488-4997-a31c-95c417b4bb07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa47b755-58b8-4c3e-adc7-c1a1d9c783fe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d47042a-46f8-40f7-aa99-c3dd5fedb2df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c54e08d-de4a-48aa-bdbd-067209af9fed"
                    }
                  }
                ]
              },
              {
                "id": "ff91bec4-2e62-4b59-b81d-10e62e3d4aed",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "08761fc3-55e2-4255-9394-f10d4cd61e22",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed813e0-dfab-4853-9385-95373f50dff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "92a7e071-1b5d-4eb7-9800-656fb8c9421e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "225b65e4-36ee-4bce-b9fe-69ea95ffb2b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e084e7c4-3e65-4524-a45a-ace898f50841"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5520bd18-fded-4eef-a5a7-77819b475480",
            "name": "Positive Testing",
            "item": [
              {
                "id": "23dd3460-7c29-46da-8736-36723956a4a9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c6e72e5-064a-41a0-971c-8da911fa7a85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e979cdd8-2f0b-41e4-bdd3-422632150ea3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c7387d6-624e-4168-a04d-6c87e6d19f27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52ea4770-f72f-463b-b434-461827780dbf"
                    }
                  }
                ]
              },
              {
                "id": "65db980b-8ec9-467c-9e09-d14aaf5152dd",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41ea5985-50d7-4edb-8161-073d4934af6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "88ba875d-a0d3-4844-a66d-6282a2998eff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85c5c978-02b3-4c6e-b1e9-05719e4148d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbb5b556-84d2-402c-bb53-49b0a9211f1f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0a0e527-e7fd-4985-ab92-9447b1060a87",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6e111202-86a6-4d2d-aa7e-20f84b991003"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b72a1b49-966e-47df-b006-61588a371396",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "137bd9d0-1fb7-4478-a57f-1564b7a038a1"
            }
          }
        ]
      },
      {
        "id": "98b5a8f7-9c14-46d4-a51d-78dd6f437a63",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c33cbb6f-8cd7-4250-8165-5f27d864e350",
            "name": "Negative Testing",
            "item": [
              {
                "id": "744183d8-eed8-48b5-911d-e0093b8a5ed2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3f3ae94a-80c5-4491-88eb-c28b3c971194",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae800974-fbf2-4634-9f37-25dba82be163",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "38e6bbb2-cb10-47d6-b31a-858d3b99be5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd81e4b-ea1e-4104-a614-10e3e12a8c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4297b4d8-5597-4abf-9695-276410349455"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3dbe11c-b22b-4cde-be81-278bb1310a01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "536f2805-ae05-4e0a-9210-97006aca039c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8dd3da1-1bcb-448b-8394-181f546a007e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33c1ec42-d47d-45b0-a09a-9774e35d3cdc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8544b62c-74fd-4c1c-b3a5-82fee58614a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e3ab5b6d-27da-4ccd-9d2b-5b1bf381a651"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd47ddaf-7f09-46b6-b997-a6266b4e90da",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f8ca45ef-abff-4c03-92e4-3f99e8426979"
            }
          }
        ]
      },
      {
        "id": "a14dd7f1-92c9-4287-9222-f95ca904a744",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7cdaabe6-abc8-4d87-9ebc-8dd4ddb973de",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7d7e13e7-e3eb-404d-8894-7396086a758f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dc4eb68f-4fe5-4e3e-a8ed-65324b65113e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acfad0d5-66a9-4547-80e8-0bc749740495",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "081289dd-0847-40cc-bb62-4092da2ca05f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "629de609-202f-4da6-b577-c9a658c585b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aacd465c-ecc8-42a5-9034-59c3b13ab79c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ccff74c0-4c0d-4a40-9a31-24ecbc700450",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7a1fc0d-19af-4c2d-a49f-fd29a7826cda"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a5a3719-8922-4d1f-831a-ded2b4213d96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6df92625-8504-4da0-94bd-c6be24d9527b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90610ced-c693-4cb6-b6ba-a256234c36f2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d6b0df7e-180b-4282-8b9f-637cef1f1836"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6cfa5e64-fcb2-44d2-a8ab-ef2e60a55dc4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e5e1f7c-0088-4a0f-ba44-aa2f3114ca15"
            }
          }
        ]
      },
      {
        "id": "cc131889-eb8c-4b0e-b827-21a5b758ac0c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "eb96aa82-09c3-42df-91dc-10a7e7becbad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14c6726e-f11a-4c29-91d9-2d7992ad028c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4317792c-9a31-4d23-a65c-d3a24c8bd880",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d6de37-13dc-446f-b280-0413ee90ec47",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b45d12b7-1fc2-43c5-ae28-33b58f5b1a5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0acd0919-2bcc-4edc-9ea9-1e2d52dba835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0821e578-c433-49d2-ba1d-bb0ed744531e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9f0270b-173e-4b49-a280-61930e46cdb2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5803a3e5-04ee-4fad-91d0-3f6d1b062591"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "21436f7e-cc0c-4dd1-9671-0b850d548a92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6614eb80-8248-4c74-b1c2-7085115decf0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e6aec0e-e48d-4d55-b980-afbe2ddfb64e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bcc027b6-6a7e-4a5f-a479-8b324a1231cf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8319ae08-afd9-437b-afc5-a5fffd98fa41",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "338bcd51-a4d0-4c40-ad10-0b3e93dda1c7"
            }
          }
        ]
      },
      {
        "id": "dd91ac43-4595-46fb-82c9-583595e7ca0d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6c6a6f6-6d6b-404c-ba91-1df493a2155c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5edf8f3-003f-4450-8caf-9ebe0ef06754",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9e5dec95-9701-444b-9cd7-0ac41c2245e5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "668ffd15-583d-4832-ac47-b5a970019b06",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8265fb16-7338-423c-b36a-fd35acc743d0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 48.94385964912283,
      "responseMin": 5,
      "responseMax": 647,
      "responseSd": 67.66577050018596,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1711499648309,
      "completed": 1711499671737
    },
    "executions": [
      {
        "id": "79c65d61-3438-4a91-a832-1e12e466803c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a4230b36-4773-4710-bb87-5f9c9efc7dee",
          "httpRequestId": "5c6a46be-6a31-4d2a-9b4a-1279d813104a"
        },
        "item": {
          "id": "79c65d61-3438-4a91-a832-1e12e466803c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "14e44a30-e86e-4097-ae13-b35708a27bbf",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "46f3fb08-91a1-4f4b-b5a5-6995f5cd8632",
        "cursor": {
          "ref": "aa80530f-8a1e-48ed-b444-2ca7c7bb2104",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1419ccf1-d60a-48f3-bf3d-915304a39708"
        },
        "item": {
          "id": "46f3fb08-91a1-4f4b-b5a5-6995f5cd8632",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b53e982d-61d1-471b-876e-3242e33c72f0",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "e1095495-2995-48b1-8991-9d0ac6a3a3fa",
        "cursor": {
          "ref": "a7677686-649d-4106-9928-c91dcd93254b",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1e3419ab-bd14-4175-9e34-9c2401d862ed"
        },
        "item": {
          "id": "e1095495-2995-48b1-8991-9d0ac6a3a3fa",
          "name": "did_json"
        },
        "response": {
          "id": "a4f8448f-9016-4db5-a5a3-f4724d866509",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8e61ae-b482-4235-b698-eee4a2bd07c1",
        "cursor": {
          "ref": "d30ac16a-cd55-4f0f-9af0-a052551e6d53",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "522a89dd-c320-455f-9eac-35dfbbcf449e"
        },
        "item": {
          "id": "ca8e61ae-b482-4235-b698-eee4a2bd07c1",
          "name": "did:invalid"
        },
        "response": {
          "id": "e77c7ae4-65cf-4dea-9f97-c24e978d79eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8e61ae-b482-4235-b698-eee4a2bd07c1",
        "cursor": {
          "ref": "d30ac16a-cd55-4f0f-9af0-a052551e6d53",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "522a89dd-c320-455f-9eac-35dfbbcf449e"
        },
        "item": {
          "id": "ca8e61ae-b482-4235-b698-eee4a2bd07c1",
          "name": "did:invalid"
        },
        "response": {
          "id": "e77c7ae4-65cf-4dea-9f97-c24e978d79eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6473f03-90b4-4c62-bb2c-230adf2deaff",
        "cursor": {
          "ref": "c089c51e-cced-42d0-88d6-1d25c1774ee3",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "24f7e156-9db0-4029-9114-e3205bfae187"
        },
        "item": {
          "id": "a6473f03-90b4-4c62-bb2c-230adf2deaff",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7b5d8dcd-6e6b-4dd0-aed7-2740ece26c39",
          "status": "Not Found",
          "code": 404,
          "responseTime": 80,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6552611d-72d8-465d-b1d8-4e176903c061",
        "cursor": {
          "ref": "940f80b9-10f5-497a-b43c-a59b37659fb2",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8bc4bec2-ca54-4208-95d4-287d95d5e7d3"
        },
        "item": {
          "id": "6552611d-72d8-465d-b1d8-4e176903c061",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a2a8e399-a235-4c56-b1df-f2d6345f9922",
          "status": "Not Found",
          "code": 404,
          "responseTime": 30,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dee888a-a75f-444b-a05d-4f2b8b115361",
        "cursor": {
          "ref": "df8bfbe3-4d53-4038-b5d0-157d241ea826",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bf32cfe7-a6ca-46cd-8082-b9486d19c86e"
        },
        "item": {
          "id": "2dee888a-a75f-444b-a05d-4f2b8b115361",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1faf8b6e-272f-48e9-a833-34e86f9b282b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d743aa18-a1ef-4b73-b207-be5345c0a4ef",
        "cursor": {
          "ref": "4e01e0b8-5749-4914-8fb9-4194ffd34b21",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "10b93996-77d3-4a44-ac5c-2f46ff8ce0c4"
        },
        "item": {
          "id": "d743aa18-a1ef-4b73-b207-be5345c0a4ef",
          "name": "identifiers"
        },
        "response": {
          "id": "c7a1b6b0-ee1e-428b-a5d5-144656f76143",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5488f8e-de33-4ae3-afed-5cdc050c6d55",
        "cursor": {
          "ref": "954a2912-99f3-4a3f-96bc-ed0bbbad6499",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "aa0e6f04-0487-4d2b-8d9b-88782438553e"
        },
        "item": {
          "id": "a5488f8e-de33-4ae3-afed-5cdc050c6d55",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "197f4fd5-12de-4e5e-8b17-dadeea1cff0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b45adea8-b81c-4191-8016-e4cf751b70af",
        "cursor": {
          "ref": "73bf9553-7641-429a-bf81-336d0c15f091",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a7e18dbe-7dd8-450f-8a93-9e290b4c2ac7"
        },
        "item": {
          "id": "b45adea8-b81c-4191-8016-e4cf751b70af",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d66985d3-65c2-4207-8034-cd5ed626f5b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61db0be4-e6f3-49af-a002-c6b9de9c4b3e",
        "cursor": {
          "ref": "429f4287-3799-4a1e-86d6-06afd0063eab",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3c8c4107-c258-4593-a135-a3f4b6c49ed6"
        },
        "item": {
          "id": "61db0be4-e6f3-49af-a002-c6b9de9c4b3e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "538d6e22-892c-4395-b526-4f1f673be91f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f2be4a-7b34-4f3e-803d-1e4111754ad6",
        "cursor": {
          "ref": "db0ca411-65b3-4fef-b5ef-27b8e45ec310",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "71eb9ea5-18a7-4ea8-83bd-4eb8bb3876e9"
        },
        "item": {
          "id": "80f2be4a-7b34-4f3e-803d-1e4111754ad6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "209549d2-088d-47f9-9f8d-e21d684472c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66fb63b1-4504-433d-98f5-f028f3ecc8a6",
        "cursor": {
          "ref": "3cc5705c-00a6-4169-a762-b5ceffa28ece",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7b74e148-fd20-40ff-b1ad-a99d28d2776a"
        },
        "item": {
          "id": "66fb63b1-4504-433d-98f5-f028f3ecc8a6",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "3ab89752-10fd-48c5-83fa-98602c924946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60dfc7b2-da9e-4f6b-a5bf-0e2183880742",
        "cursor": {
          "ref": "37aabc17-6bd9-40fd-a0fe-40d0973d1ba4",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5891592d-45de-4ad6-803c-2263405caa02"
        },
        "item": {
          "id": "60dfc7b2-da9e-4f6b-a5bf-0e2183880742",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f18235a5-aff3-483e-b52c-2ea7f5e2e0c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef25208-681e-404c-8094-6c0da93b941a",
        "cursor": {
          "ref": "766fcf6d-f57e-4173-8f43-fb93cdd0ff74",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8eb61f67-bf7a-440c-9030-e9df36851e7b"
        },
        "item": {
          "id": "1ef25208-681e-404c-8094-6c0da93b941a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "41f04201-7e1a-4776-b4bb-5629a602add3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c27358-0cac-41ec-a818-15ecbffb7bc5",
        "cursor": {
          "ref": "c45be62a-3cc8-4ab9-bb00-f261a834be99",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f2707a30-44c6-4fbb-9de7-92c97a2943df"
        },
        "item": {
          "id": "53c27358-0cac-41ec-a818-15ecbffb7bc5",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "36d729cb-59e9-48b2-a251-147fd2b26423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e28464-8581-467d-aed7-c5baac782e6f",
        "cursor": {
          "ref": "8effd0d5-61a3-4ee4-95fc-543d8db2747b",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7a365c79-42b8-43b6-bd1b-e28b7faff50b"
        },
        "item": {
          "id": "83e28464-8581-467d-aed7-c5baac782e6f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "41a882d4-8cb3-4156-bcc3-165023bb86b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50be0e34-ffab-4832-bc51-d01cbbedbb3b",
        "cursor": {
          "ref": "e82f453f-55dc-4add-9347-3c1adcd9407b",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "cc0dca3e-6feb-469e-a028-51c0bd828b9f"
        },
        "item": {
          "id": "50be0e34-ffab-4832-bc51-d01cbbedbb3b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "235d2de0-3af3-459e-bffc-3771c43dbb9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cabd5fce-b476-48c4-9045-4d11e5b22d59",
        "cursor": {
          "ref": "1bf236af-3bde-43f9-8bc7-571863fd643d",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7db62a46-51cd-4f9e-b1d5-062d3943e59e"
        },
        "item": {
          "id": "cabd5fce-b476-48c4-9045-4d11e5b22d59",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "01cb2d97-ae0a-433a-9cdf-89bcb8794472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72a6620-a5a4-4308-af7b-28684ac8be45",
        "cursor": {
          "ref": "d205837c-c016-4b1c-943b-73f30bd42407",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6947ee92-d022-48a4-80bf-5e4679ffe0e2"
        },
        "item": {
          "id": "c72a6620-a5a4-4308-af7b-28684ac8be45",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1a2c909d-e468-40a1-9c47-7b4368f3c96b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029b6132-842f-46e8-a6c6-fb984c4d4594",
        "cursor": {
          "ref": "1eb930ae-737e-4feb-9269-9995541932fe",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2b24b219-e4f1-4fdd-b803-f3194cef838d"
        },
        "item": {
          "id": "029b6132-842f-46e8-a6c6-fb984c4d4594",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "efc3ab95-4616-44a0-b896-fedb69ce6061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbaeb967-fd1c-4513-aa37-fdfe720f775f",
        "cursor": {
          "ref": "5799f640-f6b2-4bc3-8df6-1095a1d12a17",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e72058da-1854-4fc7-8a35-b9d83ec8e374"
        },
        "item": {
          "id": "fbaeb967-fd1c-4513-aa37-fdfe720f775f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5b64f4da-6fca-42db-8b40-45fcb73b6319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ead5cf1-c617-4f4d-8e31-276260c2670d",
        "cursor": {
          "ref": "5ad90e41-dd22-4d25-bb69-862d9c2a1e97",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "fa8deaf0-36ca-4eaf-b43b-1c4ee05300bc"
        },
        "item": {
          "id": "8ead5cf1-c617-4f4d-8e31-276260c2670d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "87dcce51-b50c-4f0a-983d-ca5b260226a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a833f8b-fa42-4c6c-9868-dc2855db965e",
        "cursor": {
          "ref": "2cba2234-2210-48b1-968e-1eed193ce57e",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "685afd7e-d8fe-4ecb-b170-59eee3d20740"
        },
        "item": {
          "id": "0a833f8b-fa42-4c6c-9868-dc2855db965e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "28f42e00-8701-4c5e-a9b6-70a4999205a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9fe9f37-912c-444d-9267-6bae8b5d0e04",
        "cursor": {
          "ref": "1e46f278-e0e8-46d2-a542-3a88174a322a",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "56a4fc5c-6237-481f-b813-1612e5adc5f7"
        },
        "item": {
          "id": "d9fe9f37-912c-444d-9267-6bae8b5d0e04",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "486fa5c0-14c0-49cd-966b-6c8af0a3d0fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80d6960-c128-4da4-af9b-398a351fc7fc",
        "cursor": {
          "ref": "e09ca135-f544-4f48-809c-7b7c36e235b1",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8d65f022-60d4-47da-aba6-8233f2ea1824"
        },
        "item": {
          "id": "f80d6960-c128-4da4-af9b-398a351fc7fc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e01fdc64-c19d-478c-89db-12e14710c0c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8d61f1-db96-4af4-927d-4113b49097d1",
        "cursor": {
          "ref": "b45ef59a-f7e8-4042-b42c-10febae6c4da",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "09740b12-bcea-415a-a514-b0af9d18ae1c"
        },
        "item": {
          "id": "0d8d61f1-db96-4af4-927d-4113b49097d1",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "46dcf7cf-5554-4dfd-a9d6-cf510d8bfbb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c989b5f8-b3e7-4c93-b8a2-8e9214d02ab4",
        "cursor": {
          "ref": "aaf9b515-a93e-4ebd-b643-5da3c791986f",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6448231d-fdff-4b9d-89de-f9d7c1fef25f"
        },
        "item": {
          "id": "c989b5f8-b3e7-4c93-b8a2-8e9214d02ab4",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "fdd1879e-ab1f-4b63-b192-dea48a274796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518eff72-6261-41f1-922c-15e4328d2eb1",
        "cursor": {
          "ref": "36355a25-0b90-4eca-8126-ea34f1d714d0",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a678f5c1-6ffd-45f7-b568-23c5937adab5"
        },
        "item": {
          "id": "518eff72-6261-41f1-922c-15e4328d2eb1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "aafd1886-4d33-42d0-a0dd-75a14252ad82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9cca6a-2912-488a-85bc-4352d88e0329",
        "cursor": {
          "ref": "9e97f5a8-d02a-4cc9-b135-d07c6648cefd",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d41464c1-2a99-4f61-be7b-9f8bcce4cf50"
        },
        "item": {
          "id": "6d9cca6a-2912-488a-85bc-4352d88e0329",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "1579462e-8cd9-440a-8ebe-ec7460b21b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e447c8-1166-4d51-9a5f-a8d39333ef57",
        "cursor": {
          "ref": "7556bc9d-1d0a-4794-bae0-1757745e125e",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "41446892-aede-40d8-a70a-964b0d9a9ca5"
        },
        "item": {
          "id": "c2e447c8-1166-4d51-9a5f-a8d39333ef57",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7d601de7-df40-4418-a24b-8e30ddb17c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b4d77b-f5fe-433f-8841-58f01b8a5989",
        "cursor": {
          "ref": "bb2fd0c7-1565-4e3c-9aed-3a604181ce8b",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8300bf76-49be-4123-9a1e-02facdf095b6"
        },
        "item": {
          "id": "b4b4d77b-f5fe-433f-8841-58f01b8a5989",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "99edab8d-6c79-479b-a25d-40d567c8ab57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfaceab1-e526-4769-8fbc-2878f1e30891",
        "cursor": {
          "ref": "aa11f420-3eff-4262-b212-cb712f43c4fb",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "36884473-997e-47c5-9fbf-d00dfb3d8c75"
        },
        "item": {
          "id": "dfaceab1-e526-4769-8fbc-2878f1e30891",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0cb2ab46-1886-46be-8b4b-fb3bdbf1196f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84dfa877-d279-4ee5-89fe-59206f60f06d",
        "cursor": {
          "ref": "69b4bd8e-4787-4b6c-a51c-0fc1b6958897",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c2550a0c-1570-478d-941c-6e3c5d5415ee"
        },
        "item": {
          "id": "84dfa877-d279-4ee5-89fe-59206f60f06d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b0079dde-8cc1-4a65-b7b1-973677856f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760515fa-8068-48c9-b8bd-0faa86733481",
        "cursor": {
          "ref": "1c51136a-8412-4abf-af01-6a547eecd24e",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d5ddc89e-e244-4d78-b91b-f3ae046468c4"
        },
        "item": {
          "id": "760515fa-8068-48c9-b8bd-0faa86733481",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2cef2976-c575-4adc-8098-f75214a230e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a4e34b-c6b5-4304-8ef6-5a95353ab638",
        "cursor": {
          "ref": "9733be63-d98a-4102-b208-dc0887f664f0",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5066c28f-d31d-42a0-b2c8-05b8b9d7f5aa"
        },
        "item": {
          "id": "e1a4e34b-c6b5-4304-8ef6-5a95353ab638",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "cdedb267-6eb1-42d6-a8be-0f3b42fde14c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94966c72-12c9-44bc-abe8-3f5e7336e29c",
        "cursor": {
          "ref": "1227dd8c-a2bd-4b10-8b43-53935c9d4347",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2096b12f-1abd-4ee2-8f55-fe2fb244261a"
        },
        "item": {
          "id": "94966c72-12c9-44bc-abe8-3f5e7336e29c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e998d935-36a6-4189-a731-50a61fd4065b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "223abcff-f453-4cc4-96bd-014072b9db65",
        "cursor": {
          "ref": "d3643333-23bf-4314-91db-08a13c8babf2",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b2b884a3-973f-48e4-8089-120ca436a848"
        },
        "item": {
          "id": "223abcff-f453-4cc4-96bd-014072b9db65",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ac3ad256-874c-4756-80ca-8bad3b2e87c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d81366-4cf0-4afb-90c6-d23f72da3dcc",
        "cursor": {
          "ref": "2ce5bb30-2b42-4010-97e8-249fba333dc0",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "67713171-9e72-4b81-9c0b-134e8e6f8d7c"
        },
        "item": {
          "id": "c3d81366-4cf0-4afb-90c6-d23f72da3dcc",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "cd115422-5093-41a7-a35e-edc2413fd425",
          "status": "Created",
          "code": 201,
          "responseTime": 647,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "5fd4b4f7-5956-4f0d-b953-a6a70fd56676",
        "cursor": {
          "ref": "94840242-0ca6-4597-b5a2-fa83e2876b69",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e1b46c89-69ef-4568-960e-cac179c9ec90"
        },
        "item": {
          "id": "5fd4b4f7-5956-4f0d-b953-a6a70fd56676",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0b084aaf-3415-4648-98c1-c2a4b30403a6",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "8fd95f6a-6b5b-473f-8030-83045f779a95",
        "cursor": {
          "ref": "9aae2067-2221-4ce8-a925-d1064e6ea522",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ef0abf91-1dd1-4a49-b977-723fdd5caf01"
        },
        "item": {
          "id": "8fd95f6a-6b5b-473f-8030-83045f779a95",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "de55ba61-32e7-4f3c-85e4-39d2b2b79f87",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3ddf0c95-58d3-421d-bbad-139c851163f3",
        "cursor": {
          "ref": "ff424d9a-8d6d-4607-b1ef-0b75f9034ea7",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "fdefd2f1-0274-4fb5-b0d3-26b560077026"
        },
        "item": {
          "id": "3ddf0c95-58d3-421d-bbad-139c851163f3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5fe95b62-2d05-4a60-86b2-bf918201dea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da1a928-366a-44cf-a6b7-0567752b16bc",
        "cursor": {
          "ref": "85168211-7d3f-49ca-a32a-380e4d3eb223",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "735c7022-f0e7-4647-823d-465221244c6d"
        },
        "item": {
          "id": "7da1a928-366a-44cf-a6b7-0567752b16bc",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8cd9b4fb-164b-43e0-b9ff-5c731f781be3",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e0c38821-895b-40f9-a451-32fa9a5fa183",
        "cursor": {
          "ref": "dc2fc7d4-232d-4200-92d6-594efd5cc1a3",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fdbec821-e3cc-42dc-be93-6f1d4fd8f559"
        },
        "item": {
          "id": "e0c38821-895b-40f9-a451-32fa9a5fa183",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8220e8bc-48d7-476d-a8e5-43ec97eff985",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e6690c03-e6a7-432e-b8c7-8503ce7a7808",
        "cursor": {
          "ref": "9953815b-158e-4d37-9a9c-e6069b36cb4d",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b0e63f95-1279-445c-96c8-63ecf7f67464"
        },
        "item": {
          "id": "e6690c03-e6a7-432e-b8c7-8503ce7a7808",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c57fb532-ed8d-48ae-844c-a67d2b401c9d",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "200fda56-7559-4ebc-874f-49874942a646",
        "cursor": {
          "ref": "c887bab5-a979-41dc-ab07-e485affdf538",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8a324e26-b141-4d00-87f2-e0453437e585"
        },
        "item": {
          "id": "200fda56-7559-4ebc-874f-49874942a646",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "64860fe9-fd34-4c59-8bf1-23773e949f7b",
          "status": "Created",
          "code": 201,
          "responseTime": 206,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "191cbb49-62e4-4cd7-b236-97747b6cac63",
        "cursor": {
          "ref": "97499eaf-fc93-4ab3-bc9b-2434af40bff8",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "84feae8b-243f-43d0-8910-6ff5c53ff61e"
        },
        "item": {
          "id": "191cbb49-62e4-4cd7-b236-97747b6cac63",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "da8cf00f-7962-4ac1-86fb-e6db263d3c12",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c64d4b89-644a-41bd-afc0-16b72acdeef9",
        "cursor": {
          "ref": "75139f83-3b57-42b2-959b-9a040b293e73",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "09b38801-285b-486f-9d1d-0e399bcd7827"
        },
        "item": {
          "id": "c64d4b89-644a-41bd-afc0-16b72acdeef9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "fd4e3d96-e063-4f56-a070-2567e32827a9",
          "status": "Created",
          "code": 201,
          "responseTime": 194,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "2489f6a2-7d5d-44ac-84de-788288cb3a9f",
        "cursor": {
          "ref": "051441a2-969d-4648-8b1d-1a01952eb30e",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c44d7231-9582-45c0-a8cb-24ba169be0e3"
        },
        "item": {
          "id": "2489f6a2-7d5d-44ac-84de-788288cb3a9f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "39bea75e-b694-45cc-a671-a00aeec80165",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "fec1e755-2348-4258-9a11-5b7f4321a3c1",
        "cursor": {
          "ref": "e0bcae83-61b7-49de-8d9a-371e8083eb8b",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5cc8f9ea-517f-4dc9-b907-421f789e7139"
        },
        "item": {
          "id": "fec1e755-2348-4258-9a11-5b7f4321a3c1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5d651e7e-8be8-466c-b467-16a2b60d157c",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e5b4deaa-3911-4788-a201-7dd5a2899a16",
        "cursor": {
          "ref": "e2a97392-7b39-4d5c-bb53-b107601c93a4",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d91abc05-abd2-4f1c-9530-5874b218ed35"
        },
        "item": {
          "id": "e5b4deaa-3911-4788-a201-7dd5a2899a16",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "478e6680-1528-4d98-920e-af54d605f59e",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "dc28c1f7-aa32-43ca-924b-696f5c5b1c00",
        "cursor": {
          "ref": "6f67eccd-cde0-4329-b22c-b5e61c2e1e5f",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "bb58240d-cf38-4139-8434-41cb0184bfd6"
        },
        "item": {
          "id": "dc28c1f7-aa32-43ca-924b-696f5c5b1c00",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1716574c-9090-403f-8c6d-0697c833b2df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b71051-9de4-4f1e-a7ff-ec38eb2c385b",
        "cursor": {
          "ref": "c083e7d7-ebd4-440c-a63e-2e2a71d52627",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "da4e2059-695d-4512-afa9-2c96f7e6cb4a"
        },
        "item": {
          "id": "31b71051-9de4-4f1e-a7ff-ec38eb2c385b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "75aec158-c01c-4983-90cc-47e6e1e3d185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222712e2-9659-4f71-b89b-72b3e5a22f0f",
        "cursor": {
          "ref": "a32d78a9-9cf6-486b-84cf-7071fa5ca8ad",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "18685972-d3d5-4946-b20c-92e18e8ba967"
        },
        "item": {
          "id": "222712e2-9659-4f71-b89b-72b3e5a22f0f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "32e26fff-0e4f-4c30-8ca9-9f2793959682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b1dc75-1383-4113-94aa-ed47ccf2fff1",
        "cursor": {
          "ref": "317fa42d-6efa-4973-9f43-15e915edcaae",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "91bc037c-876b-4330-bf98-182e1dc1c582"
        },
        "item": {
          "id": "62b1dc75-1383-4113-94aa-ed47ccf2fff1",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5cd49612-cc81-4e15-9e5a-8de245d14e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a7c264-71a0-4ccc-a7ba-f57cc15d4c72",
        "cursor": {
          "ref": "d7892484-7b2d-4c9d-b56d-8b720da86efc",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f0217ce5-b2bb-410a-9919-0ce01ea005a3"
        },
        "item": {
          "id": "06a7c264-71a0-4ccc-a7ba-f57cc15d4c72",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "613a711b-dbd6-4e99-ac45-42b07380a96e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c38cf088-4ba4-40cd-b63c-9c34072416df",
        "cursor": {
          "ref": "251539db-ca14-4611-90af-6770f68b9ca5",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0c2be63b-fcd1-441a-8350-bd0ccbb49964"
        },
        "item": {
          "id": "c38cf088-4ba4-40cd-b63c-9c34072416df",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f11642b9-702d-48c7-953c-7aa324c529c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84d156eb-1ed6-4615-b609-82eaa9fc5135",
        "cursor": {
          "ref": "977a1b91-bee1-472d-8335-17e652875741",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "22896007-fc9f-4d8a-ba43-52f3e8956c79"
        },
        "item": {
          "id": "84d156eb-1ed6-4615-b609-82eaa9fc5135",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b4238b40-2c4f-4cbd-a89c-bd5519810c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f32f1c9-5622-47a4-910c-0550f25cf26a",
        "cursor": {
          "ref": "6729f33c-88ea-4736-8996-2ee5956cfa77",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e5551e02-ffdd-4aee-a0de-39929b84272f"
        },
        "item": {
          "id": "6f32f1c9-5622-47a4-910c-0550f25cf26a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cf8563ee-2599-475d-8261-b9eeeda3355c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14a69e3c-077c-4a32-90f5-f3dc3f7a56fa",
        "cursor": {
          "ref": "2d2d7d20-30ad-4806-889a-28d4f5b9d44a",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "dcab0367-f361-4c39-959a-7aa1c39ced22"
        },
        "item": {
          "id": "14a69e3c-077c-4a32-90f5-f3dc3f7a56fa",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d4fbcb3c-9e86-4a51-bd7a-bcbce26dc3d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9def45c9-b985-4bfd-9a3e-a6f13ad3d3cb",
        "cursor": {
          "ref": "a288d61c-d7a2-48c1-b361-d37bc549ce84",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d58d59aa-555f-4c02-a3ba-9baede74a0ad"
        },
        "item": {
          "id": "9def45c9-b985-4bfd-9a3e-a6f13ad3d3cb",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5692c8c5-b75d-4aaa-bad7-3c4ccf1a333c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac5f846e-2c44-4edc-b25b-7001cc3ed739",
        "cursor": {
          "ref": "e02a8231-1cb9-4647-9d52-f81b49f07175",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f0178c1d-a9fc-43ec-86ab-75f90c80ecb7"
        },
        "item": {
          "id": "ac5f846e-2c44-4edc-b25b-7001cc3ed739",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ae74b286-6afe-4c92-83b8-4b270dffbc17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6de62e-4251-445b-8c50-18d54abaf785",
        "cursor": {
          "ref": "05aaae56-79eb-42ca-baf1-a2ec6a104168",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a4908eeb-a1c2-401e-95b8-6d9e10fe324c"
        },
        "item": {
          "id": "8d6de62e-4251-445b-8c50-18d54abaf785",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "861732c6-0500-4ec8-818c-143c26c6c71b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2bb0d1c-cdf5-4b04-a1a3-4250e0ba36a6",
        "cursor": {
          "ref": "5e3ce846-33a4-43fd-9529-8e3f32af149f",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c9cb4094-35c9-4e6e-9b89-c980334cc87e"
        },
        "item": {
          "id": "f2bb0d1c-cdf5-4b04-a1a3-4250e0ba36a6",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a1f9156c-652e-46ff-8f66-02613cecedaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691e707b-89d2-4702-869c-f3649f4c91e1",
        "cursor": {
          "ref": "ddb464fa-e229-4cb1-86a4-a03fdceecd9a",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5507ea37-87a7-474f-b6ec-52c0b57fa661"
        },
        "item": {
          "id": "691e707b-89d2-4702-869c-f3649f4c91e1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "bf1e098f-2636-4baf-8952-913c79d74fc2",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "2c722c66-d7bb-45cf-ae89-f9a67f2d1632",
        "cursor": {
          "ref": "a6bb4c96-3131-4c5e-82f9-117754bfbbe3",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "66beccfc-4815-4021-bd25-86fad9a585f1"
        },
        "item": {
          "id": "2c722c66-d7bb-45cf-ae89-f9a67f2d1632",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e67a3c98-3fed-4881-8953-b0fd7ef0d50c",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "bce26277-7e97-4068-bc2f-ee4208ca9a44",
        "cursor": {
          "ref": "cde2af90-ab42-4d54-aaea-f6fd496d0ea1",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "15bc55ca-9e81-4d7b-a7a8-c55769c3d9ab"
        },
        "item": {
          "id": "bce26277-7e97-4068-bc2f-ee4208ca9a44",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c6c0872a-6f6d-4a44-9ce4-f3a51763921a",
          "status": "Created",
          "code": 201,
          "responseTime": 208,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "6d9a569a-291e-4622-ae65-36ef7110c68a",
        "cursor": {
          "ref": "9d620226-5c32-4f87-b4b5-0400b64e0325",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d754bb7c-1d47-4330-b56f-d08ab8cfae85"
        },
        "item": {
          "id": "6d9a569a-291e-4622-ae65-36ef7110c68a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "bb44ff81-4692-44da-af77-94aba447299c",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "70e41569-b81b-410f-a953-1bf2dd32c233",
        "cursor": {
          "ref": "9b5f2705-70dc-40e6-a993-04223228587c",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "40b6affd-3b2c-4194-a2e7-3402a0e49db1"
        },
        "item": {
          "id": "70e41569-b81b-410f-a953-1bf2dd32c233",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d3c81e43-8c50-4b76-abca-2ec40cd0f603",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "51b16ca6-8427-405c-be6c-46ae1f3ffa66",
        "cursor": {
          "ref": "7482a53c-1701-45df-8709-e29312035881",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4d6183ba-7432-48d9-87b5-1f23dc482605"
        },
        "item": {
          "id": "51b16ca6-8427-405c-be6c-46ae1f3ffa66",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "094dcd5f-9a7d-409e-a058-c6ac5179373f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3ebc5c-9f24-408b-8729-c39c68d18bee",
        "cursor": {
          "ref": "19cb69ae-a523-4114-b29a-4c4f96f071fa",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "bcad6a37-c23d-4483-aebf-a02e7640ac4a"
        },
        "item": {
          "id": "ff3ebc5c-9f24-408b-8729-c39c68d18bee",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "714dc59b-b866-4299-8634-135aa6317d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c6fcbe-6f1f-40ba-931b-01d76301434f",
        "cursor": {
          "ref": "7da02139-dd29-4303-8016-f970e5cf7052",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8573a0fc-8e8f-4e1f-be53-7405fa85d2d9"
        },
        "item": {
          "id": "d0c6fcbe-6f1f-40ba-931b-01d76301434f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1f3cf2ba-bbfb-477f-b403-be90e4b4b980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb6c6e8-deb2-4159-9f11-d283d7e2bd14",
        "cursor": {
          "ref": "0397118f-1dca-4ae0-8a46-fb9ac58858e8",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4f2cd761-ad45-4482-babb-e0ea9d329a9f"
        },
        "item": {
          "id": "3bb6c6e8-deb2-4159-9f11-d283d7e2bd14",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f84238a7-8447-470f-ae98-20d373ae6c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece15fc6-2ca2-4780-ae4a-7fa615a69c5c",
        "cursor": {
          "ref": "52849165-f10e-456a-b23a-a9ec3b776566",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5db29328-68cd-47f0-a10a-8ec54ed9e2ca"
        },
        "item": {
          "id": "ece15fc6-2ca2-4780-ae4a-7fa615a69c5c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7fff589a-1058-4150-afed-cdcd8380b92f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9192e21-d45c-4679-9abc-5748c2b55730",
        "cursor": {
          "ref": "fdf3cd1a-d3cd-4a69-969b-5fcdf8c5f9f7",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0a4d15fe-b373-4666-b1ea-bf2d3a92f89d"
        },
        "item": {
          "id": "b9192e21-d45c-4679-9abc-5748c2b55730",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2da64120-3ca9-44e4-90e2-849ee4915c05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff520a84-69d6-4dc0-b905-c081b7c4494b",
        "cursor": {
          "ref": "ae9ab5c3-2e45-40b9-9ddd-4314d8589e97",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ecfd1c12-0c39-458c-91b6-31fd2d9580db"
        },
        "item": {
          "id": "ff520a84-69d6-4dc0-b905-c081b7c4494b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bb9656fb-0973-4f9d-84ad-693ada26023f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4790adb-7154-4a82-abc4-a64f9800f889",
        "cursor": {
          "ref": "ac09713b-e90c-4aec-8a12-8135d63cd8e3",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "780d10c0-70e8-4ddc-8c54-1f1feb4f166a"
        },
        "item": {
          "id": "d4790adb-7154-4a82-abc4-a64f9800f889",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "68ac2b88-be90-48fd-a581-a7fb2208d291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b830857a-6bb1-43b5-96ee-df547f11601a",
        "cursor": {
          "ref": "25eabbe4-77e6-4bfa-9ced-a0a80c217aea",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b720ef21-c36d-4737-bdf3-c0f28835a854"
        },
        "item": {
          "id": "b830857a-6bb1-43b5-96ee-df547f11601a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "dc9c1f4e-d0ad-4983-8889-dc74b4c3a69a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57da4fc1-5e99-4468-8329-cf80e1c5553b",
        "cursor": {
          "ref": "5ab87f50-0165-49d8-82e4-ad385d5678b4",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d5f193fa-588f-4912-834b-22b2ec6f6f56"
        },
        "item": {
          "id": "57da4fc1-5e99-4468-8329-cf80e1c5553b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a9e915bf-c022-4853-8f2f-d293c081c128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "343cf434-df40-4f61-a2ff-3c40bba4abd5",
        "cursor": {
          "ref": "ed7c4d21-b196-4f7b-ad0a-0817feedb8d5",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7c0dd180-18eb-4457-9d66-187a21d1996f"
        },
        "item": {
          "id": "343cf434-df40-4f61-a2ff-3c40bba4abd5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9252e277-9dfe-4249-ada7-5732d66f4447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e771d6-faf7-4f43-a01f-5c9665256d3c",
        "cursor": {
          "ref": "1095d040-b08a-41f9-acf3-3dddca103a44",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "72e5fe70-ea17-48f1-8342-25e58e0aef69"
        },
        "item": {
          "id": "13e771d6-faf7-4f43-a01f-5c9665256d3c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "948251f2-3b40-4a7c-8bcf-c2484350b431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3276b2-310c-4dd2-9ac5-55b08c2a35f3",
        "cursor": {
          "ref": "fbe69d64-4ddc-4026-bce2-89da0ab406cd",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f198f33e-b25e-4fef-b655-65d99b54534d"
        },
        "item": {
          "id": "7a3276b2-310c-4dd2-9ac5-55b08c2a35f3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4cccfba2-1d33-4698-a130-e642878c1df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac9a087-7e3e-43cb-8b0d-1d6d754c1f7e",
        "cursor": {
          "ref": "a3afc732-afd7-4a0b-8e27-b131432c9c8c",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "993559b1-27b7-49f1-a732-23379bc7ac8b"
        },
        "item": {
          "id": "6ac9a087-7e3e-43cb-8b0d-1d6d754c1f7e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a51e264e-ea5b-4c6c-b894-fd2257c90f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c43e1c-0db5-49d2-8647-3df4e6946d85",
        "cursor": {
          "ref": "d3a96ff2-c374-4853-bebf-4b91bd4fab13",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b479c7b6-74ea-4e43-8a70-fea8ba0a3868"
        },
        "item": {
          "id": "f2c43e1c-0db5-49d2-8647-3df4e6946d85",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "cc026382-369d-44d6-9fc7-a23c8bffd3af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c726a64a-fdea-4b29-9ea2-039740e03348",
        "cursor": {
          "ref": "e9d87ef7-8352-4995-a5e0-7cbbb4d6dd29",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1157a525-9622-48ef-b7d0-1b947112ac91"
        },
        "item": {
          "id": "c726a64a-fdea-4b29-9ea2-039740e03348",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "436b2f9d-0722-410d-9df3-e24305ad8d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f45189db-e687-4ab1-9b20-f0845ed9981e",
        "cursor": {
          "ref": "6b5b994c-3a1e-491e-baa7-97311394f5ca",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8f51906c-4a6a-4ce4-b5b3-a5d617e670f2"
        },
        "item": {
          "id": "f45189db-e687-4ab1-9b20-f0845ed9981e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7b5a8b1f-fea9-4f1e-9b92-9881c494b1b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31aa4c37-10d7-44ec-ac2e-86c4504b1d61",
        "cursor": {
          "ref": "e93cd96d-1116-41d8-8139-1210611cfdf3",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a76f4bb7-5402-4486-a0c8-f9c5690963c4"
        },
        "item": {
          "id": "31aa4c37-10d7-44ec-ac2e-86c4504b1d61",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "08190fe1-81be-485f-9c2c-c17e68ff4eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b1aef7-7ecc-4bc7-9c42-f35fdca335d3",
        "cursor": {
          "ref": "73bc4dc5-4f1f-4476-bf65-3fbec9cec2bc",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "14bb24e9-df3c-47c0-8fed-4767dca1f31b"
        },
        "item": {
          "id": "c4b1aef7-7ecc-4bc7-9c42-f35fdca335d3",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "25802b23-b2e8-42bc-9689-a560298b60cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bdf2f9a-0c1e-437f-aa14-b043f23aea0b",
        "cursor": {
          "ref": "75736b4a-e56a-4be7-a1d8-e57f5e8c653e",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5f395b22-450c-4af9-ab48-adb178e6354b"
        },
        "item": {
          "id": "1bdf2f9a-0c1e-437f-aa14-b043f23aea0b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8da31727-1dfb-4846-ad31-e93967fc5b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ae7d23-2921-4927-9ca8-8984f3dd2423",
        "cursor": {
          "ref": "6abd76d6-c305-4460-b583-cda1c3191d63",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2147058c-9ece-409d-92c1-01ca0f6c8d2a"
        },
        "item": {
          "id": "a2ae7d23-2921-4927-9ca8-8984f3dd2423",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "0b2b76b5-75f0-4ab1-a4e5-b1476ec99524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a517824-959b-4ff6-a3fd-1620acbf2c42",
        "cursor": {
          "ref": "bdefcfc2-9c0c-418c-9a40-1442dcdf0461",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4545df42-65d9-40cc-9824-489ca7176766"
        },
        "item": {
          "id": "0a517824-959b-4ff6-a3fd-1620acbf2c42",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "58e812c6-f22c-45c9-b49a-124f742b6f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe9ba876-a5f7-47db-a4d8-f001d5a6183b",
        "cursor": {
          "ref": "be443d6a-9f9d-43ae-a9b6-7b66977c90e5",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1d2171b5-2018-4b23-bb71-95bf5ebc27d9"
        },
        "item": {
          "id": "fe9ba876-a5f7-47db-a4d8-f001d5a6183b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2cacef1a-17bf-4323-acf7-bade2a9d03a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e8f5b6-80c4-4052-9dca-aadc109a702b",
        "cursor": {
          "ref": "9fc2086c-3796-4ae3-91b7-b6047091b041",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "05af8e43-9c0f-45ee-9af3-6951ed3d6749"
        },
        "item": {
          "id": "62e8f5b6-80c4-4052-9dca-aadc109a702b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "18c6b272-1848-42f4-a7a9-df2f24e85596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af814841-0c43-46fc-b850-7be97c38c3ea",
        "cursor": {
          "ref": "34c5ca85-e983-421e-bdec-2d81275af504",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "890edb98-188d-4cbb-98d0-decb0a610326"
        },
        "item": {
          "id": "af814841-0c43-46fc-b850-7be97c38c3ea",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6a324010-3c1e-4153-9769-b4f833163809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e459df99-1f51-401a-b95b-3300f038d814",
        "cursor": {
          "ref": "cb407f62-8a16-4ede-8726-7b3670e9da51",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e930ce9e-62bd-4fb3-bcb7-36c1bf7dd29b"
        },
        "item": {
          "id": "e459df99-1f51-401a-b95b-3300f038d814",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "60160f1e-70ec-4eaf-84f8-7a9ca367e039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff16390c-7cc8-455e-8c65-f59b8a5b4a9a",
        "cursor": {
          "ref": "3b30dd17-f0ca-4708-b77f-128740f2cfb8",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "1053d1fe-d663-431d-aca4-65445c3d1600"
        },
        "item": {
          "id": "ff16390c-7cc8-455e-8c65-f59b8a5b4a9a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "11c41959-ebe2-4871-b520-668e0313c4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e05dd7d-dfe6-45cc-bd0a-c84325b5002d",
        "cursor": {
          "ref": "a616653e-1b41-4ceb-a2cb-3679f01491ff",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1cd4724c-0c59-44e5-8619-78d37a585ca8"
        },
        "item": {
          "id": "8e05dd7d-dfe6-45cc-bd0a-c84325b5002d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "eedb1c69-0c55-4fb4-a7e7-581074571982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "787b325c-a568-4481-a2f6-90e14e2f2553",
        "cursor": {
          "ref": "401c3ce5-1d54-49a9-b8ff-6722c4f34174",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2eb86db2-e42f-4ad7-be8a-c0df35d5d812"
        },
        "item": {
          "id": "787b325c-a568-4481-a2f6-90e14e2f2553",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "60280b26-1b64-462b-83ff-95ea71cb7663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff8cec62-36d0-4e94-9d06-e54f2e3e91ec",
        "cursor": {
          "ref": "f61d6fef-bf4a-4e1a-9c80-774a453647bc",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0d628021-b21b-4a4b-9669-02fb0166eb81"
        },
        "item": {
          "id": "ff8cec62-36d0-4e94-9d06-e54f2e3e91ec",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "aad71c3f-1d48-4e69-a27a-9ff5fa23f03c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb79812e-6515-4df4-bb2e-665674357303",
        "cursor": {
          "ref": "6663e1aa-2747-45e7-bf10-9d4682b546a0",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "25f56d5d-de2f-4429-9231-00f4cd046103"
        },
        "item": {
          "id": "eb79812e-6515-4df4-bb2e-665674357303",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "753108b9-2c64-4918-84f5-c94bd6be6e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f83c19-f110-4e8e-8d19-edb4684227a2",
        "cursor": {
          "ref": "b05ca6ea-e48a-4601-8ed3-99e1c2a51060",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "56ca2b97-e17f-48f3-b68c-989e3ce98877"
        },
        "item": {
          "id": "74f83c19-f110-4e8e-8d19-edb4684227a2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "54c0b55f-8236-4cab-b122-b984e347c8b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f540807c-840d-4e09-af9e-b6b188b5a8d5",
        "cursor": {
          "ref": "c1ae27be-b267-4f4f-a48a-2f2a467c772f",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "48d7b70a-927e-421a-840d-e84de8b2ecf0"
        },
        "item": {
          "id": "f540807c-840d-4e09-af9e-b6b188b5a8d5",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "dc019199-f4f0-442b-8344-176bde83ab9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "88a9c2a1-6a68-4c0e-b72a-b877111b0b52",
        "cursor": {
          "ref": "05f265af-556f-4101-83ec-df5d9706b35b",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7f980d2e-4148-43d6-87d3-b1db71c8f174"
        },
        "item": {
          "id": "88a9c2a1-6a68-4c0e-b72a-b877111b0b52",
          "name": "credentials_issue"
        },
        "response": {
          "id": "75f25ef5-10d9-4010-98e1-0c19c0eba223",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d627424a-200b-452e-a11d-dff23bdd6853",
        "cursor": {
          "ref": "31976b9e-e549-458c-a1a7-b26d73875abc",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2580c321-0eb2-462f-8427-67904c8f0128"
        },
        "item": {
          "id": "d627424a-200b-452e-a11d-dff23bdd6853",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d77a1a17-cb4e-4763-b576-94b6ef20bbb6",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ece1f61-d1f6-4483-8555-9d36a3618151",
        "cursor": {
          "ref": "0b5ccdaa-b7fc-4c2c-a451-29ec6c4eb85b",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ec1fe892-8ef0-44c4-b3e5-0a1d4fca291d"
        },
        "item": {
          "id": "4ece1f61-d1f6-4483-8555-9d36a3618151",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b672b756-7db0-4b77-bd9d-ffa756c502f6",
          "status": "Created",
          "code": 201,
          "responseTime": 203,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "efdb03f7-ffdb-4372-aee4-fd209d1bd0d4",
        "cursor": {
          "ref": "135f9450-e30b-4f11-9fe7-8045e943335d",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c1e1df0f-19b9-436f-9ec0-e42fd0249b90"
        },
        "item": {
          "id": "efdb03f7-ffdb-4372-aee4-fd209d1bd0d4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "706d4709-6c03-4735-b083-08c51c756f70",
          "status": "Created",
          "code": 201,
          "responseTime": 193,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "19bcbbc1-ed39-4623-9aaa-c099a187c815",
        "cursor": {
          "ref": "18d6e85d-9424-4362-8d51-01b52a93f95c",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6832bcec-08b6-482a-bdd1-ea06201026b0"
        },
        "item": {
          "id": "19bcbbc1-ed39-4623-9aaa-c099a187c815",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ae836d51-0bb8-40a0-91b7-6cf7afacf607",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-27T00:34:20.386Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-27T00:34:20.386Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "89bb5d52-df83-4ab5-8137-731097d61857",
        "cursor": {
          "ref": "b5d8469f-bb85-40be-996d-daa520e7fcb4",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "163b3c42-bd90-437c-b094-afb3449b0edd"
        },
        "item": {
          "id": "89bb5d52-df83-4ab5-8137-731097d61857",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "04e265a2-d6db-4b06-9c8a-4337bdc9cd54",
          "status": "Created",
          "code": 201,
          "responseTime": 200,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7006ddfe-0caf-4eb1-85ad-91009cb200fb",
        "cursor": {
          "ref": "0febf8d3-36dd-4bed-9a53-05745118e353",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4afe5296-3f11-431c-84fd-52375db67af9"
        },
        "item": {
          "id": "7006ddfe-0caf-4eb1-85ad-91009cb200fb",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "51b5de63-5b97-4fda-8498-df9fce6b7c33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1074aa62-dba2-439a-bc3e-d4dd615a372f",
        "cursor": {
          "ref": "a6673799-159b-422d-90d0-193758c02b61",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "300fe9a3-3538-4c07-82e8-37ce082e2417"
        },
        "item": {
          "id": "1074aa62-dba2-439a-bc3e-d4dd615a372f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f03f4c96-0369-47ea-a82f-d3369a4260bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6dbb611-a0d2-4707-8d0e-9242e920b087",
        "cursor": {
          "ref": "d76e17a4-2b7b-4a7e-8cc4-c5a846cc9f18",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "20b25cd1-afd1-4494-bcd6-ae1a0c52184f"
        },
        "item": {
          "id": "b6dbb611-a0d2-4707-8d0e-9242e920b087",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "04be9348-34f0-4a6e-8c9d-403a1aa7751c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5940d6-e7c2-4793-9f20-8fb62bf1f3ca",
        "cursor": {
          "ref": "d72c0c23-8b34-4353-9ee1-d000f1ffc69c",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "23e33d5b-a346-4212-b153-3804dabe09e8"
        },
        "item": {
          "id": "be5940d6-e7c2-4793-9f20-8fb62bf1f3ca",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "dbdf21d4-3c23-4e29-8ae2-c0fcfbfcef04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d02fa2e-f997-4c51-ac9f-69de817fc1d4",
        "cursor": {
          "ref": "276167b8-3102-436a-aab1-00548b8f164b",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "50ca825e-a7f2-4ea4-9802-9119c81c74e4"
        },
        "item": {
          "id": "4d02fa2e-f997-4c51-ac9f-69de817fc1d4",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1bfde28f-e929-474d-becb-2cf0cc7371c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79ea26e-2f22-4914-a03c-a95021487c17",
        "cursor": {
          "ref": "a20f6a27-e4be-4d53-9e41-06a75da92c00",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7f4da302-2c42-4fed-b7f7-a5fb0db6832f"
        },
        "item": {
          "id": "a79ea26e-2f22-4914-a03c-a95021487c17",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d8b9b4f6-2bd6-4c9b-b5ad-01c00e1860e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b6995e-9137-4629-81dc-fb214782b351",
        "cursor": {
          "ref": "fb1befc6-1196-4e26-8a97-eac5f0acf590",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "192d4147-db23-4aee-910d-f0716ccbd8cb"
        },
        "item": {
          "id": "73b6995e-9137-4629-81dc-fb214782b351",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9e5a78f0-4521-477e-b5db-6238d56fa41a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d93cb29-4765-4c07-8d34-64b61359dab8",
        "cursor": {
          "ref": "bfb59b85-3a23-4e91-af5b-2bb442873e72",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "83f0645d-a0d3-4960-9820-8e330bff5968"
        },
        "item": {
          "id": "5d93cb29-4765-4c07-8d34-64b61359dab8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "103e0406-3f66-4c23-a7bc-469bb4935ae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27073cc0-cfa5-49a6-b8dd-7daf585578ea",
        "cursor": {
          "ref": "7121f834-05c9-4c94-953a-db62e915e17f",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5795d792-3fbe-4d58-a2a0-35d7560effd5"
        },
        "item": {
          "id": "27073cc0-cfa5-49a6-b8dd-7daf585578ea",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3f9be873-859e-4faa-a1e1-6c97742b7508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2a922b-8e82-4e2b-9aa6-1fed37855f43",
        "cursor": {
          "ref": "10b3c794-aeca-4ff3-9973-d2e75101d1b4",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d33695d8-47db-46ae-a3ca-a24828a1ddb4"
        },
        "item": {
          "id": "5b2a922b-8e82-4e2b-9aa6-1fed37855f43",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6e005083-b339-4c19-afc6-cb0da548a5e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90106280-a946-42a9-baf1-376c4bffa7be",
        "cursor": {
          "ref": "f32bea1e-d570-47de-a3f8-648275e426ff",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d1887363-e9e7-437d-b9ba-c90ba933ba0d"
        },
        "item": {
          "id": "90106280-a946-42a9-baf1-376c4bffa7be",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d93931b8-66bf-499a-bdce-f48787330ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c44345e-c266-4214-a04b-131603064a6a",
        "cursor": {
          "ref": "5bfc5ff0-b6a2-42c2-813a-36b85b520293",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "13e2a047-b61a-44d7-b743-c2d0c175d47c"
        },
        "item": {
          "id": "5c44345e-c266-4214-a04b-131603064a6a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f4d38564-57e4-4926-a900-6d5f6e87a484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e46cfc9-f2cf-46f2-a8d0-dea252c3657c",
        "cursor": {
          "ref": "163f14a8-776e-44d1-bfe1-519e8827f8ac",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b0de52fd-53ce-4e4f-b411-39ac63de59d5"
        },
        "item": {
          "id": "5e46cfc9-f2cf-46f2-a8d0-dea252c3657c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0be810fd-9829-4580-aa65-a77e5bcfb5b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "9cf7d04a-74e1-48ab-bebc-c0a70f0dc489",
        "cursor": {
          "ref": "b116330c-8345-4c2f-a56c-f486a250ac24",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6746ccbd-ca16-4335-87ab-2902df94c036"
        },
        "item": {
          "id": "9cf7d04a-74e1-48ab-bebc-c0a70f0dc489",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d1397e2b-ee67-4ce4-938d-7aab760270c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "086e5bff-71e1-4ee9-887e-1bb8420649d9",
        "cursor": {
          "ref": "bf255e44-af8a-43c8-bdc4-8b2dab912955",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "af973465-9442-4d6e-827d-c74a69d34a69"
        },
        "item": {
          "id": "086e5bff-71e1-4ee9-887e-1bb8420649d9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "910a6cdd-357f-4333-94ba-bfdd9bb71108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362d3660-3dce-49aa-aa37-6a201808ec9c",
        "cursor": {
          "ref": "5a5cb5df-7f3c-4810-9c88-cf2120267491",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "06d7dea0-f1c0-4985-9a62-612b6d700d03"
        },
        "item": {
          "id": "362d3660-3dce-49aa-aa37-6a201808ec9c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "31d1ae82-287f-473a-91f6-5b9406bf32cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e058c5b-ad14-4c0d-8b99-cc99ea04554f",
        "cursor": {
          "ref": "255053dd-07d8-4e3b-adc2-f01bf4bd7cfe",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "fc99c372-7c90-4213-a3bd-ad6c9fd33a28"
        },
        "item": {
          "id": "5e058c5b-ad14-4c0d-8b99-cc99ea04554f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2075c56c-3e49-499b-93f5-c0d1385c6df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b02123-750d-412f-9715-fbbeda4ecc5a",
        "cursor": {
          "ref": "40c43458-eb84-4953-bc14-b25bf8e0f0b9",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b610afbc-e0ea-4f58-b23d-e893c917565e"
        },
        "item": {
          "id": "b4b02123-750d-412f-9715-fbbeda4ecc5a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "83a618c6-81f7-4d30-bed9-272424e6e7e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12cac194-3f58-400b-a468-fabf3f3ddec3",
        "cursor": {
          "ref": "e9db0866-b79b-41e5-8528-df17a52a7a29",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "9811a7f8-d351-44e2-b3cc-16ccb2d71d66"
        },
        "item": {
          "id": "12cac194-3f58-400b-a468-fabf3f3ddec3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "097f646e-9f55-4bb1-8b30-8d649a001b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc720ba4-4868-48e0-b208-0c3335d4bf1e",
        "cursor": {
          "ref": "784f35b4-3e20-409c-a171-6a5f0752a4f8",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b6530b7c-432f-4a66-98c0-994b54c68342"
        },
        "item": {
          "id": "fc720ba4-4868-48e0-b208-0c3335d4bf1e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6ae2f6ba-9f8b-4e71-8400-75b02fd26d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69585df0-3417-4f5f-aea6-113950902df8",
        "cursor": {
          "ref": "f219f597-5465-4b6a-818f-6dda38c5a086",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f29effcc-9dc9-417d-950e-f1c827a9d468"
        },
        "item": {
          "id": "69585df0-3417-4f5f-aea6-113950902df8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "93612b38-c91f-428c-9227-364c1b55e4d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af126663-d94f-43bf-bdce-20d92f9f53c9",
        "cursor": {
          "ref": "53a7d56c-2234-42c2-abfd-11412006407c",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5fe17d38-5a5d-4c95-8533-ec0908af634a"
        },
        "item": {
          "id": "af126663-d94f-43bf-bdce-20d92f9f53c9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3dea544c-242a-4956-8f57-289c7d59815a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39fccc49-ebff-4b78-b5b4-0f34cec406f2",
        "cursor": {
          "ref": "58024162-c433-4c49-b6b5-e9b6cbd40092",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4ada7073-93fd-4734-ae7c-a33ee8994ca2"
        },
        "item": {
          "id": "39fccc49-ebff-4b78-b5b4-0f34cec406f2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3e818d7c-4c3d-4490-8b74-fb3250f3919d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de8ca15-a61b-40a6-9dd6-ccb6ce788c94",
        "cursor": {
          "ref": "0d950f83-5534-48be-9c93-12f2ab8cee62",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e0e57b5c-426c-42be-a576-05e806c59d47"
        },
        "item": {
          "id": "9de8ca15-a61b-40a6-9dd6-ccb6ce788c94",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bc50e2c7-f0fd-47a9-90ce-cda7cce2b549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e6e1d6-698e-407d-ba0d-4a959f8c280b",
        "cursor": {
          "ref": "207bad9c-9ac5-4f2b-89be-a4889b10887a",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7a21e5d3-8aa3-47c8-8a30-fc2363a9c116"
        },
        "item": {
          "id": "14e6e1d6-698e-407d-ba0d-4a959f8c280b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a734f71a-e932-4719-b289-432f69458443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55197684-27e6-4a5c-9fba-f61e5f7838a7",
        "cursor": {
          "ref": "90f6130d-bcea-45e7-a829-4fd01394eb63",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b15189a1-ef1f-4214-a401-645945424560"
        },
        "item": {
          "id": "55197684-27e6-4a5c-9fba-f61e5f7838a7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7487b5f4-1ff1-4a05-a6a9-7571d0e21bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04107693-50b2-49d3-878d-ce00b4ded6af",
        "cursor": {
          "ref": "eb10488e-8bbd-46e1-9f64-b36721ac5ae2",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "da308b24-6625-414e-bcd9-1125f263d336"
        },
        "item": {
          "id": "04107693-50b2-49d3-878d-ce00b4ded6af",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "18e5f661-c9c2-44b7-817b-0c153aac816b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3171f63-4dc4-48b5-801b-1121458e7b3c",
        "cursor": {
          "ref": "1d9d823e-9b59-4a79-9c39-512bd4aec427",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ac9fafed-e370-486e-97fb-643f9992d56e"
        },
        "item": {
          "id": "f3171f63-4dc4-48b5-801b-1121458e7b3c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "01d1950c-95aa-4c86-8adf-f046c9029858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac94d65-a464-461c-bd66-f4e11bc33ba9",
        "cursor": {
          "ref": "1a5ea7fa-3b11-4a45-b9c6-c69f0d901430",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "29985345-5149-4185-92c7-51140708bc96"
        },
        "item": {
          "id": "dac94d65-a464-461c-bd66-f4e11bc33ba9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6d4b6dba-655c-417a-84ed-97f552aef1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9f1071-d695-40d2-977c-28054472a5c8",
        "cursor": {
          "ref": "a4b06d31-4559-4e05-880c-49f23755952d",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a6d282ee-cb61-45dc-b114-c47c0d69a790"
        },
        "item": {
          "id": "8f9f1071-d695-40d2-977c-28054472a5c8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8d54f02a-c5a0-469a-94f7-f7eb27202c82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45f67f7-4d17-461f-bef7-fb5759e4de74",
        "cursor": {
          "ref": "eafe388c-e3c7-41d8-9e55-90011be2ac15",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "10e97b6a-37ed-46f0-9596-12d9895b8b77"
        },
        "item": {
          "id": "d45f67f7-4d17-461f-bef7-fb5759e4de74",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "dbdf1561-aea9-4cc4-9290-db1343e27b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0f103c-41cc-43ef-9ec7-e672eb55be96",
        "cursor": {
          "ref": "2071df90-8483-438f-9132-4f4732fbccff",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5173f44c-0ac7-4370-875a-811494416b13"
        },
        "item": {
          "id": "9e0f103c-41cc-43ef-9ec7-e672eb55be96",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5bbfb635-cf24-4444-a9fc-5f79478620f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "7d5f194a-132b-464b-8e16-c885cc1d4474",
        "cursor": {
          "ref": "ef49d273-d71c-4f8d-88ed-7696a932bc7d",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f7d7bebd-86f7-4ef4-94e0-1bfe93a80c16"
        },
        "item": {
          "id": "7d5f194a-132b-464b-8e16-c885cc1d4474",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5e90c45f-2e15-4e89-9283-767268c12f9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6311ac9-57c0-4323-b95e-3af5d8ae1443",
        "cursor": {
          "ref": "739e6492-cd63-4ad1-926d-7c1469d108cf",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "dd823da1-fbd6-48ea-959e-d93baaf4750b"
        },
        "item": {
          "id": "e6311ac9-57c0-4323-b95e-3af5d8ae1443",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ee8440dc-34f9-44e5-a531-760a5e8cfa52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cca1e4-d63f-4396-a4a1-1ec97f0c6508",
        "cursor": {
          "ref": "7e6b60c2-5f8f-4ea4-8bae-1403f3441394",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f1a47df7-9491-4452-b771-10c85dd533f0"
        },
        "item": {
          "id": "06cca1e4-d63f-4396-a4a1-1ec97f0c6508",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "51c3ae16-a489-48e9-9d44-ff0bda423650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25fdba07-6a7b-4787-8f21-21a9a31f059b",
        "cursor": {
          "ref": "93e95558-c045-4ca9-bd44-59acd2a410e3",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a9b06edb-b8e2-4a0f-a3d9-0e1b9ec29bef"
        },
        "item": {
          "id": "25fdba07-6a7b-4787-8f21-21a9a31f059b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "17dee4e5-2261-4e89-9f49-dcac154a1198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4607bd50-1866-4636-a2f7-dafc0ca0fe92",
        "cursor": {
          "ref": "8f61d681-570c-4be8-bc06-aa543cb21d6e",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5518aa7b-ef48-4a3e-882e-34bd44075c3c"
        },
        "item": {
          "id": "4607bd50-1866-4636-a2f7-dafc0ca0fe92",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3a6b0416-7c7a-42e2-8009-ebcd33bb9177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5973d7c9-4ca2-4a32-a563-b39a0fc28a96",
        "cursor": {
          "ref": "e532f0f4-c3ec-4613-a028-849cf50dc6b9",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "98d64e8f-1983-4c13-8b13-b15570c7d344"
        },
        "item": {
          "id": "5973d7c9-4ca2-4a32-a563-b39a0fc28a96",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "981d6747-96dc-4b03-abd5-15c344f2063d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33c3998-f5ea-40e9-a907-03de53dfe1a1",
        "cursor": {
          "ref": "03ef6964-ed4b-4504-92f8-d6cd264d170d",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "53fd601b-446b-4cd5-a6d9-4a9647f92ead"
        },
        "item": {
          "id": "c33c3998-f5ea-40e9-a907-03de53dfe1a1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "178f4995-d762-4762-8f43-5be6589a6c38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00c4c68-0036-4118-be88-c99ccf689bcb",
        "cursor": {
          "ref": "dcc3b1cf-2154-449d-801b-d8127053e300",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3e8ca3af-7010-444f-8ac7-9857da6f66d3"
        },
        "item": {
          "id": "e00c4c68-0036-4118-be88-c99ccf689bcb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "35c4aab8-5943-485c-9624-01bc00866b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f25fda-1304-4020-b352-d77744ad8fee",
        "cursor": {
          "ref": "f68161eb-4962-4667-bce7-e9355e4f1acd",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "52fd72a8-373f-427f-8909-693910c6d106"
        },
        "item": {
          "id": "f7f25fda-1304-4020-b352-d77744ad8fee",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "50e567bf-09a4-4583-9b33-2842f941497d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6a0865-93f1-45a9-bd0b-5fc75064b69a",
        "cursor": {
          "ref": "db34f699-af4b-4dc6-a682-a899d41daf7a",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b51dd43b-00a3-435e-8b98-eec50094fc0a"
        },
        "item": {
          "id": "9f6a0865-93f1-45a9-bd0b-5fc75064b69a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2a38183e-d168-4eb1-8844-a192a4ef260f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2fb1b0-547f-465d-80b2-d68ebe3ec8b7",
        "cursor": {
          "ref": "04f3a28a-5513-4d65-bd84-551512ef7308",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "140ff0f9-5351-48dc-95f8-4ccb4f0677d3"
        },
        "item": {
          "id": "be2fb1b0-547f-465d-80b2-d68ebe3ec8b7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3537c9de-64bc-4cbd-bc24-deb425e3de86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61be3f09-bfad-489d-a196-7afe4ebb05ce",
        "cursor": {
          "ref": "c19520c2-4805-43f6-b90f-45513f291151",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "bdb64121-ec0f-4fd1-80ce-3c451572bfce"
        },
        "item": {
          "id": "61be3f09-bfad-489d-a196-7afe4ebb05ce",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c0253b0f-b73c-4843-a468-08b3be484491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe0bc3a-98c8-4523-a068-88b1f0360f1d",
        "cursor": {
          "ref": "9b44955c-52f5-48ae-8919-181b1d44c063",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c17b00bb-2baf-4099-9303-e2382e4b659a"
        },
        "item": {
          "id": "2fe0bc3a-98c8-4523-a068-88b1f0360f1d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1da2d137-9235-42bf-a623-261b77aa53c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171284a8-3e7c-4ba8-8de2-c99b08e951f6",
        "cursor": {
          "ref": "6cafd147-a46e-4d36-9a5e-38f7e2aa84fa",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a344c953-517e-4c1c-bfb9-3ba27c4c9368"
        },
        "item": {
          "id": "171284a8-3e7c-4ba8-8de2-c99b08e951f6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "81551518-2a46-4d9b-aab3-d3861e6a43a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2926db77-a520-4da2-a65f-fbe750b937d1",
        "cursor": {
          "ref": "9908f0eb-70ba-4584-af00-312121adf613",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b80923fa-d47a-41eb-baae-1c8899f9a9a0"
        },
        "item": {
          "id": "2926db77-a520-4da2-a65f-fbe750b937d1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cf957ec4-aa34-4541-bdb6-116cadfe654c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "67c066ad-fbf3-4908-9fed-48ff5e4d05b4",
        "cursor": {
          "ref": "8c03d313-e8c3-485d-b446-337496cd6f27",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "98845d3f-adb0-4d60-9dfa-01f9da8d4c3c"
        },
        "item": {
          "id": "67c066ad-fbf3-4908-9fed-48ff5e4d05b4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8a050f0d-5e3a-4bf0-95d8-4fe014642d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "321fed82-497c-4494-8351-06b259765d42",
        "cursor": {
          "ref": "2b6bec6b-0cc0-4f52-9470-3830d5eb365c",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f0945141-b0e6-447f-9851-5fd35cfd9b66"
        },
        "item": {
          "id": "321fed82-497c-4494-8351-06b259765d42",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ed5c4a8c-e38c-402c-898c-a00fa881688f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b561e392-c780-4e61-9b7c-dee86825bbdf",
        "cursor": {
          "ref": "8029fd27-e932-4bf0-a3e2-a69831b7b51b",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "54e2a317-318d-4997-a6ad-fcb804abef74"
        },
        "item": {
          "id": "b561e392-c780-4e61-9b7c-dee86825bbdf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "495bd9ad-074d-4d82-9ea5-3066f4608e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9341f074-13ce-4f0c-8f6b-f2d096caf7af",
        "cursor": {
          "ref": "30d15b2b-dc17-452f-8f06-baab924d8bfd",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "58c73439-2fed-4147-8d2d-48ae65429e55"
        },
        "item": {
          "id": "9341f074-13ce-4f0c-8f6b-f2d096caf7af",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1d0fbaac-4f29-49d3-84a8-b5ef5c70a5c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dea91d7-7b6f-4d13-8e25-e792df8744e7",
        "cursor": {
          "ref": "ed60a929-0302-429b-87c8-b3697b02fd52",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d1772d13-1338-4a87-a59e-8facca142d70"
        },
        "item": {
          "id": "6dea91d7-7b6f-4d13-8e25-e792df8744e7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8a9382e9-4b0f-4b5e-bdef-a00fc449bfe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f25d2a4-229a-46c6-b1f9-0beff50dc94c",
        "cursor": {
          "ref": "0681404d-a3c4-48b3-bf53-39885b03dc89",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8d253e77-f003-48ab-bb63-6f820ae0950d"
        },
        "item": {
          "id": "5f25d2a4-229a-46c6-b1f9-0beff50dc94c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2fd9eeac-c506-4f54-bdf5-1914e980da3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf70840-3272-41dc-a8c9-13a295504eaf",
        "cursor": {
          "ref": "016618b7-ea9d-443d-a01b-79660abad471",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e0e4b95f-6a49-47d0-98f3-5ab36a2c563c"
        },
        "item": {
          "id": "fdf70840-3272-41dc-a8c9-13a295504eaf",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "20ca8ddb-cf5e-4606-9e2e-12a8f71d078c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31169576-fe4a-4222-b73f-b2fd27e50c08",
        "cursor": {
          "ref": "8306f73b-1f64-4556-8976-917b401f1180",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "099bed3a-fe0d-4398-a106-ba82c0d108f0"
        },
        "item": {
          "id": "31169576-fe4a-4222-b73f-b2fd27e50c08",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "577689ff-ba6b-4f49-a33d-efb954fe9ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74577435-acc1-40f0-8aa7-46cc804a0654",
        "cursor": {
          "ref": "585b0a4e-74b3-4634-bb6e-46b247016a0b",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "493d039d-1a47-464a-8df6-e4418478206c"
        },
        "item": {
          "id": "74577435-acc1-40f0-8aa7-46cc804a0654",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "78226a7b-12cd-489f-bb0c-15874ef7c03e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e55c8f74-e596-4987-b5b9-07e3c03bdec9",
        "cursor": {
          "ref": "18c93c81-c830-4fa9-8e30-8b3671344418",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0c92cfcf-9511-4d8d-806f-cb9fe41f124d"
        },
        "item": {
          "id": "e55c8f74-e596-4987-b5b9-07e3c03bdec9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "10d4598a-a94a-43d6-aad3-5041af4e03ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87876fa8-2db4-430a-87d1-716eaa5b2417",
        "cursor": {
          "ref": "91539ce1-973b-4372-8179-06215ab11f27",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "dfa58192-0d5c-4244-b70b-0078b848e94b"
        },
        "item": {
          "id": "87876fa8-2db4-430a-87d1-716eaa5b2417",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c51f4d64-cbd2-448a-b2d2-4f41edaeb273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab03e7b3-ecae-45b3-874e-986af723bf4c",
        "cursor": {
          "ref": "757fe6c5-cea0-4cdf-9845-24923d745514",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "048afe89-6670-4cde-bb14-edf49abfc254"
        },
        "item": {
          "id": "ab03e7b3-ecae-45b3-874e-986af723bf4c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "efd5698e-ac83-48b4-9c47-4dc2bd193147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e95b23-28aa-4e02-b248-fd0e204e469f",
        "cursor": {
          "ref": "74fe9810-1948-4edf-a510-0e5b631b04e1",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4da2425a-f65f-467a-a48e-1399253130dc"
        },
        "item": {
          "id": "07e95b23-28aa-4e02-b248-fd0e204e469f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "36bed990-f0c9-4a4d-9fc4-ae3be468086e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988ae0bc-5d10-402b-a873-1d2e82c7d363",
        "cursor": {
          "ref": "f1b40028-3e69-493d-babe-877bde3f83f4",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "626c4cbf-c805-4c38-86e3-6c46e0da14b0"
        },
        "item": {
          "id": "988ae0bc-5d10-402b-a873-1d2e82c7d363",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0c8d4164-4078-471b-bc08-c46309d5901f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc617211-3165-45f7-bf0c-370763ab2668",
        "cursor": {
          "ref": "98320c36-7200-4144-8a54-0f3b31f7600b",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1b7822e9-8f1f-4402-864f-d2ea47ed35a0"
        },
        "item": {
          "id": "dc617211-3165-45f7-bf0c-370763ab2668",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ac981b8d-3017-42a2-92c3-5edeecd316ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6552918-1902-44da-a32f-960b5903dbf1",
        "cursor": {
          "ref": "ee125dba-6735-4982-8c1b-732aa69cfe05",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a4f3df71-a576-4f27-aa48-a94448d5bb4d"
        },
        "item": {
          "id": "f6552918-1902-44da-a32f-960b5903dbf1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "06784f4b-cd28-4391-bea8-021ecf873444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46eee4db-055d-4fa0-b731-48b747b99647",
        "cursor": {
          "ref": "6a40c9db-2607-4650-a492-6d25bdc5c5f1",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a90f687c-1955-477b-9955-e4b2fef0495f"
        },
        "item": {
          "id": "46eee4db-055d-4fa0-b731-48b747b99647",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d0c416c4-30c3-4944-9646-8d4f301905fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8b6287-71bc-40fb-bf71-6e7667df9607",
        "cursor": {
          "ref": "a3d47d92-e499-4f68-bbd2-728a1bcbf135",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1cf6df9c-ee8a-4c4a-b93f-6fcd44d2e49f"
        },
        "item": {
          "id": "7f8b6287-71bc-40fb-bf71-6e7667df9607",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "3353901b-31c3-4b0e-9350-21779e0e8906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab043c97-675e-4347-9f91-ad90ce2bf8c3",
        "cursor": {
          "ref": "be4b6c25-cf17-4d31-b880-b22b3005da83",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "186ce0d1-e10b-41d3-924a-c07f17ee6dd0"
        },
        "item": {
          "id": "ab043c97-675e-4347-9f91-ad90ce2bf8c3",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "77c2b78d-67fd-4f29-9f47-e24ebc88607d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6119d1aa-66af-472f-a27a-7ec365a9dc55",
        "cursor": {
          "ref": "07f0e36e-42e3-4130-b3e2-1b3d80dca00f",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e8a44d64-3361-4f92-b245-930246607ef7"
        },
        "item": {
          "id": "6119d1aa-66af-472f-a27a-7ec365a9dc55",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "44123743-1eb1-4aea-9bcc-36b04a3325dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada89b29-adb8-4e42-afa6-5586843f6ed5",
        "cursor": {
          "ref": "848b7d3b-1a15-48dc-9aed-741facb01082",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2e7808dc-e273-462f-97fa-c5ef5f56c580"
        },
        "item": {
          "id": "ada89b29-adb8-4e42-afa6-5586843f6ed5",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "c485e734-0e3f-4b2c-8f46-c55d5515c7fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31692566-b027-4db4-bf2e-b5366e79d419",
        "cursor": {
          "ref": "3a674f84-b6ae-4713-8527-3a7d94d8052f",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "219bb832-44dd-4d1c-9239-b911b6e06fbe"
        },
        "item": {
          "id": "31692566-b027-4db4-bf2e-b5366e79d419",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "f449e6a9-c651-4851-bee6-1028f68593a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90fe969a-9d41-4b98-93c5-b50c0a079695",
        "cursor": {
          "ref": "871e323e-bb30-45b0-aa2b-1d568004dcbe",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5cd6b072-a594-42ae-9fe4-a9f0dd730d51"
        },
        "item": {
          "id": "90fe969a-9d41-4b98-93c5-b50c0a079695",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "74a8b407-78f1-4e50-8a9e-11cda3d9ed1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8d96e8-8de6-4a53-98f3-282f41ff196e",
        "cursor": {
          "ref": "c8be5d22-2178-4185-b40d-d0169d901b42",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "352af974-74b1-46d8-b7f0-436593935533"
        },
        "item": {
          "id": "9e8d96e8-8de6-4a53-98f3-282f41ff196e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "03060b3b-a965-407d-b2f6-2ee286a1cb4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f2331a-743e-492a-a871-04e8da6e7977",
        "cursor": {
          "ref": "c4c5d894-f0f8-447c-a0e4-e50c43833575",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e40d587e-7233-4d46-8e85-2642cbba0d07"
        },
        "item": {
          "id": "28f2331a-743e-492a-a871-04e8da6e7977",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "33e63a88-b8d2-4fca-8fe3-ec4a87483322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7645be-6665-4d9f-8c38-6d72904e9106",
        "cursor": {
          "ref": "5b5668f7-678c-4b91-856c-09c8ba3a139c",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d7e75f57-df63-46e1-a8a0-6e791ee626cb"
        },
        "item": {
          "id": "0e7645be-6665-4d9f-8c38-6d72904e9106",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a8103989-3488-4d05-97c8-26d291ff41df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7bd4c6-09b7-40da-a96b-0441679a2257",
        "cursor": {
          "ref": "fac4ce10-5b45-480e-8274-aeb5ee83fb92",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "da546fb2-e312-4a9f-ba03-2035ba941a2b"
        },
        "item": {
          "id": "7b7bd4c6-09b7-40da-a96b-0441679a2257",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "70dbb8ec-6711-4549-b6c5-8552fb23d8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee17183-6f95-4cb2-a869-58a7bad3bf12",
        "cursor": {
          "ref": "96a0fe1f-dfe8-4d6f-abf1-9e4361eb5836",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c349e283-a4ce-49ba-96af-e634603c39ed"
        },
        "item": {
          "id": "aee17183-6f95-4cb2-a869-58a7bad3bf12",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "fb45990a-a39f-4d27-b767-c9033c65d69b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af840c98-df88-48dc-b3a4-0bf5aef69eae",
        "cursor": {
          "ref": "259a0d42-d07f-4462-a3fe-9a1a45257914",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fa94634c-ffc9-4c2c-854f-29f40c4e8779"
        },
        "item": {
          "id": "af840c98-df88-48dc-b3a4-0bf5aef69eae",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fa10e323-fffc-47f2-b11c-8abe7db518f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d22e66b-d1a5-47db-a8d8-e5161c984d1e",
        "cursor": {
          "ref": "931b5641-ce58-4846-bf91-b658a37e7e1e",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c1230522-031c-4ecb-b1c4-4bd568fb5472"
        },
        "item": {
          "id": "4d22e66b-d1a5-47db-a8d8-e5161c984d1e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b0b14708-2a22-48f4-b691-7ad969c52959",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "1a2ea024-8bc0-47aa-ab55-b7f8283f4eab",
        "cursor": {
          "ref": "dd767b10-42f0-4c3d-bbc1-8511f67fef73",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "436838b4-d5ab-4f72-9c8f-e777775864cb"
        },
        "item": {
          "id": "1a2ea024-8bc0-47aa-ab55-b7f8283f4eab",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d8e2c97e-86b0-484e-9618-58223e7242b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9581a77-d5c9-45c8-bd8f-989da915adc8",
        "cursor": {
          "ref": "9de99380-bf00-4ff8-a2d1-fd8849b6cf31",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f0da41e2-8de3-46de-96e4-7b8831984b16"
        },
        "item": {
          "id": "b9581a77-d5c9-45c8-bd8f-989da915adc8",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7af63ac3-f2ae-40f1-9f14-aa9ac5e17bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72a5083-4061-41f7-ae5e-96a1d8bc3a0c",
        "cursor": {
          "ref": "9137ab1a-1139-437a-a1b2-cbe66dc1b6a5",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b418ee64-1847-4c13-8656-6d7af64282cf"
        },
        "item": {
          "id": "a72a5083-4061-41f7-ae5e-96a1d8bc3a0c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c0cea728-98c4-497a-9b59-bc28fc73b7e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9838f2e1-b764-4fa2-bea3-43963d0a95c0",
        "cursor": {
          "ref": "44519e2d-9762-4337-aa4d-325bc0c464be",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4ca4e425-9cf8-474f-9909-292bc2b40a8e"
        },
        "item": {
          "id": "9838f2e1-b764-4fa2-bea3-43963d0a95c0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1d7ce5af-e4d4-4e3a-bef1-acfa0c93f2cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74006863-2612-4f3e-b451-448bc27f3f3b",
        "cursor": {
          "ref": "818ad95e-336a-4b35-899f-538ea5589fb8",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "556b9ba1-9aab-4118-8657-75862dd3910a"
        },
        "item": {
          "id": "74006863-2612-4f3e-b451-448bc27f3f3b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9a4401d9-fe31-4da6-b07d-d420493c737c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c6cd91-ac5f-4e67-a4ee-00fdba9e5a39",
        "cursor": {
          "ref": "3dcfbb27-30b6-48b4-921c-57b5ff8af740",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8302c117-7602-4a48-9979-1e46bf33438e"
        },
        "item": {
          "id": "22c6cd91-ac5f-4e67-a4ee-00fdba9e5a39",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7520b0f0-26dd-4d89-9bfc-c5897ff71006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57cab51e-3f1f-48ce-b378-bb8675cf66b9",
        "cursor": {
          "ref": "4dc17e29-413b-4b20-bc31-11a01d4478ba",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6c457b89-522b-46d4-9fa0-19106001140c"
        },
        "item": {
          "id": "57cab51e-3f1f-48ce-b378-bb8675cf66b9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d93beeac-1ecf-4a9a-91d5-d3eceec861b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e0bb67-773b-4497-b24e-441145be1fcb",
        "cursor": {
          "ref": "dcc37358-fca1-4c5d-ac96-84fa9b5adc09",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2d78b113-e3d7-4b80-a5ef-b9e643b187e6"
        },
        "item": {
          "id": "74e0bb67-773b-4497-b24e-441145be1fcb",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e2fca6f3-49a1-4628-85e0-a0628b44a388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae3d870-ed48-4605-a5ea-790740dd87b8",
        "cursor": {
          "ref": "6e84cf74-c142-4b7a-9e9a-bfea85514026",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "afa44552-a695-4f4b-9305-20adbc4f5b2b"
        },
        "item": {
          "id": "2ae3d870-ed48-4605-a5ea-790740dd87b8",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "83634668-8fca-4a90-8773-dbce3fd27ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e9c43a3-e480-4d3e-b34c-0c07d9a0d6a4",
        "cursor": {
          "ref": "2ad22541-bc90-4c1f-a243-0548adba93f7",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0c3b2b22-95ba-4a39-b37b-2465182dd5b6"
        },
        "item": {
          "id": "2e9c43a3-e480-4d3e-b34c-0c07d9a0d6a4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ede2afd7-00bb-41f7-89e2-4611eeab9a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa815de-6596-4b73-852c-61bcf340cb12",
        "cursor": {
          "ref": "c424c81b-64dd-4c2b-a6e9-bd6847da8004",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "98d3da95-55a3-4653-b01e-7c7a80bf944b"
        },
        "item": {
          "id": "caa815de-6596-4b73-852c-61bcf340cb12",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0a9d3f13-eb61-4f47-ab4b-355926ff8e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e754fb2-89a9-414d-8215-d5c077aafeb9",
        "cursor": {
          "ref": "90abb41b-e70d-4dcb-837c-983e4b47076f",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f2636329-37a0-4feb-aa0a-19521863c853"
        },
        "item": {
          "id": "3e754fb2-89a9-414d-8215-d5c077aafeb9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b75b946e-49f0-42e3-b7e4-b86844e3b449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1743ecb2-13b1-42af-a67b-90c79fee0700",
        "cursor": {
          "ref": "23a8274e-cbd2-483f-8faa-b35be86b740c",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d9e616f2-e2a4-4a10-af8d-2063aed8de23"
        },
        "item": {
          "id": "1743ecb2-13b1-42af-a67b-90c79fee0700",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1e3268f3-4d4c-46bb-ba7f-079ae71422d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d428a8ad-7129-4f41-ab73-f002cf96d83c",
        "cursor": {
          "ref": "2578a60d-79ce-4ac7-a250-e1f11cb20f8d",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "79edd6e5-5a70-460d-8c4d-4e926e5ecd41"
        },
        "item": {
          "id": "d428a8ad-7129-4f41-ab73-f002cf96d83c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "888e0bf1-17c3-41d7-94e3-b06a8a3b0172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b05569a-c6b0-4050-b442-7a08c7f3b8b6",
        "cursor": {
          "ref": "630875cb-ab2b-4058-b734-65ebe0d1eff1",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5b4053d8-ee37-4391-a3da-37a62685653f"
        },
        "item": {
          "id": "8b05569a-c6b0-4050-b442-7a08c7f3b8b6",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "521cca0b-678e-49e8-bd9e-fbe1bd005e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba9efbd-6ca6-4302-9397-3748c5062804",
        "cursor": {
          "ref": "c00cec66-8b84-493e-bf8c-236dd7a24ce2",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7790f5ca-a114-49ed-bc39-d2d366139065"
        },
        "item": {
          "id": "eba9efbd-6ca6-4302-9397-3748c5062804",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "56f7823b-0cfe-4892-aa97-1c365aec3a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df41bb0e-027c-4170-b5eb-aa7a439bfc3a",
        "cursor": {
          "ref": "d4f4bffc-40bc-4732-85de-d4414cce7298",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1b6b1114-8f29-4fef-82a8-6da465477ef9"
        },
        "item": {
          "id": "df41bb0e-027c-4170-b5eb-aa7a439bfc3a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3b1ea855-3e21-451e-83aa-5f41a90c3596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0386e2ea-7a64-4957-84f1-ac18b8b7c432",
        "cursor": {
          "ref": "f68bf0a3-8485-4615-a900-560f62dd7bec",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "98a532a0-c70a-40ea-9d18-38332ff76094"
        },
        "item": {
          "id": "0386e2ea-7a64-4957-84f1-ac18b8b7c432",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "fc4020c7-f001-4b24-932b-704d8b2689d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50f0cfe-3133-4b12-8e72-ee5777d8a736",
        "cursor": {
          "ref": "7bf517a6-575a-44d2-9d9b-8bb3d042abb2",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "bbad5dd8-67fd-4418-b4d0-8200d2b2a88c"
        },
        "item": {
          "id": "e50f0cfe-3133-4b12-8e72-ee5777d8a736",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "404df699-6d3e-4533-8df4-0f69cd90c0e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ceaee0-2e18-4744-874b-fdacc3c3d346",
        "cursor": {
          "ref": "444f1006-4446-4576-a85a-f8245d7f0cc5",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "03498270-2429-47a6-b2d8-bb79b898703b"
        },
        "item": {
          "id": "10ceaee0-2e18-4744-874b-fdacc3c3d346",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "8cb43644-2b6a-4302-87b9-888c4f37d212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60c468f-bbc2-47e1-9dbf-da7854be01ec",
        "cursor": {
          "ref": "46430fbd-e525-4d7e-bbd5-b3e9e7f3328f",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7588a8ea-4123-4092-b19a-23e5f6f8084a"
        },
        "item": {
          "id": "a60c468f-bbc2-47e1-9dbf-da7854be01ec",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b010fd6b-2c3c-4d3c-9b32-34392d779076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a174c42-d09f-4cfd-b9a6-aa118d73e528",
        "cursor": {
          "ref": "20de7c11-2064-4b14-9f6a-4879e8245c6e",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "79586ef4-e2fb-4673-92a1-54181410a2ab"
        },
        "item": {
          "id": "5a174c42-d09f-4cfd-b9a6-aa118d73e528",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f8fc6750-bcef-452b-abdd-aee6ca83d5e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e42be5-7814-447a-bfb2-b14686dd2dd5",
        "cursor": {
          "ref": "d1f16b32-1f58-47f5-b013-7cf56b1cb93c",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0535c644-39fb-4150-a2d1-8745b17b2b73"
        },
        "item": {
          "id": "24e42be5-7814-447a-bfb2-b14686dd2dd5",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c08d7529-95be-4133-bea8-dc962d207fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4b1947-3b7d-4ba1-89d9-1a0db2f727ef",
        "cursor": {
          "ref": "789b6378-68c0-44a7-92e4-7f2d12fe583c",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f2076254-59e9-4426-8381-9b4d7b20d49e"
        },
        "item": {
          "id": "2b4b1947-3b7d-4ba1-89d9-1a0db2f727ef",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a2e42530-3d65-4ebc-98ac-c5d12b297fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa38a2c-bfac-4ced-b6c7-386dc4411dc0",
        "cursor": {
          "ref": "8aec7ab4-7235-40dc-bc30-a70b660c993a",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "bea832b4-fdc1-452c-adf2-b5a934688ffb"
        },
        "item": {
          "id": "afa38a2c-bfac-4ced-b6c7-386dc4411dc0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e091166a-1b61-480e-91ee-d49dbdf58880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca34b17f-98de-4f00-9cf9-bee75dfe1a49",
        "cursor": {
          "ref": "e1d2717d-3f6d-4807-9559-848248a3968f",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b14a57e1-990a-444e-aa56-13046835dd73"
        },
        "item": {
          "id": "ca34b17f-98de-4f00-9cf9-bee75dfe1a49",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7e9a5db7-b756-4ad5-a0a4-c28521e47c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f4fb92-c5b1-4c06-95b5-a0b71d8ce4bf",
        "cursor": {
          "ref": "39e36eea-4856-451d-b9ad-b920a74a1687",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0723ace0-6701-4e91-98c7-343feff916c0"
        },
        "item": {
          "id": "70f4fb92-c5b1-4c06-95b5-a0b71d8ce4bf",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "35e80d64-f615-4cd7-ae7b-5de272fad914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0824cff-862f-4553-afa0-c304d3929868",
        "cursor": {
          "ref": "8ea6b820-f1e9-45f8-81b9-7b74fd38f30c",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6fa66908-779a-4fd0-b97e-79dd6f72700c"
        },
        "item": {
          "id": "f0824cff-862f-4553-afa0-c304d3929868",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "339308ad-1ff4-44b2-8c1b-1695bab6d807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5b4298-72cf-4e46-83c6-18c655984983",
        "cursor": {
          "ref": "7e0a3b7e-27de-46f3-b8c2-46cd2c038d8e",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "26052b2a-8526-45df-9509-f4d92a70087f"
        },
        "item": {
          "id": "8e5b4298-72cf-4e46-83c6-18c655984983",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a0c72803-6599-430c-9dbb-234fb6a7abff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "282e92b7-5396-4e89-b636-a582b8890811",
        "cursor": {
          "ref": "7909949a-12f5-4bf5-94f5-aae10fed52c1",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "eb6daaf8-992f-4580-881c-53c2cef0ec3d"
        },
        "item": {
          "id": "282e92b7-5396-4e89-b636-a582b8890811",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6af71898-b746-4254-9116-4ccc9080c1f4",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "cf581774-4abc-4cde-887f-c2e6d67544a6",
        "cursor": {
          "ref": "4dfb0acc-fa96-4b60-a4ea-aff7c7733770",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "304089d8-b6e4-40e1-93d9-8e4c12bac27b"
        },
        "item": {
          "id": "cf581774-4abc-4cde-887f-c2e6d67544a6",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "34b3fe2b-d0e7-4018-9b7e-fc01c71f963d",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "82691f31-c290-4267-a53c-fc27cbed8bcf",
        "cursor": {
          "ref": "02feeeca-690a-49ca-93e4-66e674adb608",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a3860684-d474-4949-89a5-0950c78ba537"
        },
        "item": {
          "id": "82691f31-c290-4267-a53c-fc27cbed8bcf",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "32e2c2dd-8f44-430b-b772-95eeff268b8d",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "00103be9-ed6a-4fe8-a1ed-ec74ec3b17e7",
        "cursor": {
          "ref": "d479a31b-06fd-462a-a459-75b64133d0a2",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b26d5e5f-eed0-41ab-94f4-4fa3c50b3ec8"
        },
        "item": {
          "id": "00103be9-ed6a-4fe8-a1ed-ec74ec3b17e7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3c3e15b3-1317-4de1-80e1-8da0a6346ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf028f4-d6a1-471d-a982-d8c8fe282d83",
        "cursor": {
          "ref": "165ab40d-a130-4213-95de-2dd0ebca6e95",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5a330e2f-276a-4d4a-b847-66c8d5d615c2"
        },
        "item": {
          "id": "dcf028f4-d6a1-471d-a982-d8c8fe282d83",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "fbc19d8b-ffe4-452d-8be2-b85bfc819e29",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "a1663cc3-04bd-4a06-b90f-44caf1a4fd73",
        "cursor": {
          "ref": "4e1c794c-fa68-4539-a83e-e4a53e86aeb4",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "cea9d169-79d9-418d-a483-dd36e2f3eb9a"
        },
        "item": {
          "id": "a1663cc3-04bd-4a06-b90f-44caf1a4fd73",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1f825fbb-c449-4789-a29a-532b099d35d8",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "7df6bc24-9fbe-45c2-87a4-e11867b1eb0e",
        "cursor": {
          "ref": "13d9a352-df37-4655-aeb2-e29e16db422e",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8b75b460-af84-4cda-9ad3-dd91b1a8f3a1"
        },
        "item": {
          "id": "7df6bc24-9fbe-45c2-87a4-e11867b1eb0e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d8ed4f79-b06a-4adf-9d7d-011d2d19fbed",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "a95b222a-0bd2-4ce1-851a-938361eb5532",
        "cursor": {
          "ref": "7ee10e93-0045-4a32-9ba5-8a1a35d9abfb",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "147e365e-0880-4e14-8aae-af85ba34abab"
        },
        "item": {
          "id": "a95b222a-0bd2-4ce1-851a-938361eb5532",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2fee9442-da8e-4f58-ba21-625e4be70b92",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "6d264b4e-0084-447d-9dab-359b3f4a9f1d",
        "cursor": {
          "ref": "08c305fb-1092-4f7a-b0fe-0d9f375fe3ab",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2c70211e-c452-4741-9c83-73682c0e9c1f"
        },
        "item": {
          "id": "6d264b4e-0084-447d-9dab-359b3f4a9f1d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6d5d662f-6cd1-46d1-9a30-52b1fc1f836d",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "41bb8f80-9f21-4bbe-98e5-4ca97c34ac0a",
        "cursor": {
          "ref": "a2ebd7d4-69ed-40ac-aead-2eb2487f9b68",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ffb682ca-ce30-40b4-b465-8be42063ca56"
        },
        "item": {
          "id": "41bb8f80-9f21-4bbe-98e5-4ca97c34ac0a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0c08b1f2-266c-4720-9bfd-88ef549cb497",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "6ac264e9-675a-4106-9864-ee08d5f0a386",
        "cursor": {
          "ref": "0a228980-0676-4aa4-b3e5-7f82b4612d5b",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d78b89f2-eeb5-4737-86b1-770c34672bb2"
        },
        "item": {
          "id": "6ac264e9-675a-4106-9864-ee08d5f0a386",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "fe822483-a56d-4ce0-88ee-928f4199d92b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7d9822-8123-44c7-b58d-aac3072f0726",
        "cursor": {
          "ref": "d6d58914-8646-4db0-9deb-6a48fe96240b",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "687beab1-fb8c-4f0e-ab21-890a91dd5e1a"
        },
        "item": {
          "id": "3a7d9822-8123-44c7-b58d-aac3072f0726",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "265091bb-95aa-49d6-9320-69ddff98734f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3439c34a-72c7-4567-b5d0-fb8d008f2748",
        "cursor": {
          "ref": "8cee236c-314b-4fff-bbc6-6b6d22541983",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "921d8245-7db7-4454-a502-901bcf182a59"
        },
        "item": {
          "id": "3439c34a-72c7-4567-b5d0-fb8d008f2748",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f3370aea-14e5-44d0-bb05-c3a0eea5b7f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e98e295-cc64-4ad2-a474-3176d725df18",
        "cursor": {
          "ref": "4ff77980-d2ac-4a92-ada1-d5fb5efb23ee",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "68185dce-1e5f-49a1-90b1-ea75ae320b6b"
        },
        "item": {
          "id": "9e98e295-cc64-4ad2-a474-3176d725df18",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c6a0e322-e243-4eb1-b014-51140410771e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a224239-983a-48cc-9c96-82d0014ba7ab",
        "cursor": {
          "ref": "eb66f31f-042c-4836-a91d-9815c5ad66dd",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "60faca04-7515-4386-a859-b826b094933f"
        },
        "item": {
          "id": "8a224239-983a-48cc-9c96-82d0014ba7ab",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "511361a5-e001-4dde-8414-db0efbfa52f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273c7bb8-a8b6-4234-9f47-b85c27be26d4",
        "cursor": {
          "ref": "7c7f670c-4ee1-4f21-897b-51840a1ae747",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4ed6de61-414b-47c6-a714-c1ec93a38433"
        },
        "item": {
          "id": "273c7bb8-a8b6-4234-9f47-b85c27be26d4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9af2f8bd-5f78-47c7-a277-a8bdf230912c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9f63ce-ca55-477d-a787-30c6106c2ba7",
        "cursor": {
          "ref": "f62864e1-7fee-4b18-bc69-e9c6951437c7",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "fbf04770-f723-4217-83d1-d0d09ae248c2"
        },
        "item": {
          "id": "bf9f63ce-ca55-477d-a787-30c6106c2ba7",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b93b34f9-6f8f-4540-a13b-05f7fc6ddfff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c8df81-1548-4fd9-abe2-be2cca5eee82",
        "cursor": {
          "ref": "7a0a52ba-2735-4ab6-a50c-7e13095799e4",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6c235f05-7f36-4055-9c5a-49c9e557d5a9"
        },
        "item": {
          "id": "32c8df81-1548-4fd9-abe2-be2cca5eee82",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9ba9bc43-5a2f-4713-8217-26b54a55b1e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f1f9e9-886b-45c9-b28b-b98917dfb9a1",
        "cursor": {
          "ref": "a7de1741-a00a-4f1e-84a1-012c7c3bd6fd",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "73cc74a1-8d2d-41d7-bf4b-a9ccbae65750"
        },
        "item": {
          "id": "e7f1f9e9-886b-45c9-b28b-b98917dfb9a1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1bf55d6b-932c-421f-967c-a79724c8e45a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23106af-a044-4d8f-b56b-c7ef8b72e8bd",
        "cursor": {
          "ref": "651195fd-b84a-4f2f-a6db-079b4bd6a1ca",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "89c1e81e-4ba0-4373-ba20-228fb641584e"
        },
        "item": {
          "id": "a23106af-a044-4d8f-b56b-c7ef8b72e8bd",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2c104156-5e31-4f2d-ab5a-e8ca0952e10b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6acbc8-bfd3-4946-85ca-b5e2ef23ee6e",
        "cursor": {
          "ref": "cb110053-1c1f-4185-85e4-0ead5f49504a",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "17a0a521-8efc-4527-bc9c-40f92922d2c9"
        },
        "item": {
          "id": "0a6acbc8-bfd3-4946-85ca-b5e2ef23ee6e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1aaed83a-9c61-4675-9068-261f05281f8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263e7025-3382-487b-97c6-ca7d135633a1",
        "cursor": {
          "ref": "bcb09c5b-19b7-4407-9e42-d9b11696acdc",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a37bd2f5-3f4b-4ad3-bf26-1971c59d015d"
        },
        "item": {
          "id": "263e7025-3382-487b-97c6-ca7d135633a1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "768ef2a1-7e59-47bb-b92d-6ee387de7159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6742ef77-a737-4028-a2b5-15e566cad4d3",
        "cursor": {
          "ref": "c23c17c5-03ba-4d7d-8d69-98ba8da3314c",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3b36ed92-d2f7-4d59-8383-a566d6af9bf0"
        },
        "item": {
          "id": "6742ef77-a737-4028-a2b5-15e566cad4d3",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "bf88d6c4-27d4-4396-bd01-021f2e8d8cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13560f9-00ae-4787-8e8c-388afa613fc4",
        "cursor": {
          "ref": "4cfe41df-7554-480c-89a0-4fbe3aed9a92",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "69ecd0bb-66bf-4570-b17c-2dd110262a47"
        },
        "item": {
          "id": "e13560f9-00ae-4787-8e8c-388afa613fc4",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "44a35f37-ac28-452c-b3c1-bb0ae95df33d",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "fa0a2ba5-3cd4-4886-9c52-20cb7b1be2ba",
        "cursor": {
          "ref": "feda18a9-f805-4b78-b2f1-0d1c25bb4466",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3b80fe73-1ba5-4566-a8ee-3eda975ee0b9"
        },
        "item": {
          "id": "fa0a2ba5-3cd4-4886-9c52-20cb7b1be2ba",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0128b7ed-2834-4db0-945f-eb98724d7c11",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "d919c24e-eec5-45f4-b405-ddc6fb1ae7cd",
        "cursor": {
          "ref": "4354477c-6fd3-4f5d-b5cd-91c1283b26b6",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8854f56c-dcd3-4b40-b56e-f7a017e25fc5"
        },
        "item": {
          "id": "d919c24e-eec5-45f4-b405-ddc6fb1ae7cd",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "13c2cf29-eb47-40d7-ad86-f631101ca4d0",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "32f86c6b-4d3e-4d5a-b037-98c908512ab6",
        "cursor": {
          "ref": "8444d2b5-a3dc-4596-a79d-62a3ec38d2d5",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "05a07bae-df35-4f0e-8f3f-7cc94da89e7b"
        },
        "item": {
          "id": "32f86c6b-4d3e-4d5a-b037-98c908512ab6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c5089dcb-b54f-4f68-a4fb-320f5a9ffead",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "acb29916-066f-48a4-a36f-6d8d0981a955",
        "cursor": {
          "ref": "e3861dd9-fb60-4683-a4f1-f4e16f0eb871",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ee93141d-ddc8-434c-9285-f9d5f6d4b3da"
        },
        "item": {
          "id": "acb29916-066f-48a4-a36f-6d8d0981a955",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6d005103-454f-43b8-8aa3-a09ebcdcede0",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "1f660338-07e4-4148-86a0-6e40d226ade6",
        "cursor": {
          "ref": "a34e6df4-f4f0-447e-8b91-ebb9edcba8c9",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "cb90f3e5-4150-43c8-a7fb-5220222814c0"
        },
        "item": {
          "id": "1f660338-07e4-4148-86a0-6e40d226ade6",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ce3d3fda-1790-4b6b-a232-c661aa94d515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ec06d0-cfd3-48fe-97fa-e6e89c9c8bfb",
        "cursor": {
          "ref": "e9ef5317-05aa-436f-9ceb-d308d621f118",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "82186ebd-da80-4b1f-91f7-5f9665597dfd"
        },
        "item": {
          "id": "a4ec06d0-cfd3-48fe-97fa-e6e89c9c8bfb",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9a8bdb43-e55e-42da-8d5a-da83a880869d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db054346-e4e6-44c9-a9a3-0b4f99b55152",
        "cursor": {
          "ref": "5cc7f32d-b236-42ee-8df0-8c2857148367",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9c7b0976-15ff-4cd4-bb83-1ad0400fa676"
        },
        "item": {
          "id": "db054346-e4e6-44c9-a9a3-0b4f99b55152",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b0e4d0ec-80b9-4c27-9e06-47d53662adc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96673a8-0534-4185-a55e-48c261919b94",
        "cursor": {
          "ref": "3d8eca4d-a83e-45d6-8ecd-5faf649a5b6c",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e109e5ea-3f7d-49c0-9e97-bf45041c2fa3"
        },
        "item": {
          "id": "a96673a8-0534-4185-a55e-48c261919b94",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4f630e6c-07a2-45c3-82af-08982dd4347c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e908c2a-0ce8-4cdd-8cb1-28f75fceb4ea",
        "cursor": {
          "ref": "c7268a6a-f5ad-4d8e-884f-b9e66f76cf98",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5267a7f5-176e-4d7b-94a8-3d4acc638dc1"
        },
        "item": {
          "id": "3e908c2a-0ce8-4cdd-8cb1-28f75fceb4ea",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "76cbaedd-e2cb-42fc-9c67-312a280a1014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f7c774-1eaf-40a6-85d0-711da5938335",
        "cursor": {
          "ref": "506faad4-9f51-44f3-b243-a588fe08dea0",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ce8ee5e7-f46a-418a-a193-6d32d52fb403"
        },
        "item": {
          "id": "90f7c774-1eaf-40a6-85d0-711da5938335",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f6a80eb6-a6b4-4af8-8523-29895b0826b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258dfaa4-2bdb-48bd-a908-b0e8596e0568",
        "cursor": {
          "ref": "16bcbf6d-5b53-45cb-a9e6-fe7d83168099",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "dc4f1dc3-6856-4bcc-b545-e652ec6a9c25"
        },
        "item": {
          "id": "258dfaa4-2bdb-48bd-a908-b0e8596e0568",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ee65a7f3-2174-4962-9a9a-3eefe5ae7dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05a8ebb-ae4b-4d90-84bc-605cff6a3454",
        "cursor": {
          "ref": "fd212ccb-5fc6-41a0-b704-decab7eec422",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e03ae10c-9277-459c-925d-2626aed310cf"
        },
        "item": {
          "id": "e05a8ebb-ae4b-4d90-84bc-605cff6a3454",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "550c7119-169b-41c7-a59d-c8cb406cf19d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46660c67-6bc8-46fa-98b7-123301924056",
        "cursor": {
          "ref": "e07c4715-6b11-428f-bfe4-a0eabfae9f0d",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "48a8731e-2c6b-4a9e-8a66-245de2c46b74"
        },
        "item": {
          "id": "46660c67-6bc8-46fa-98b7-123301924056",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ad89db58-007c-4a77-ba69-2b6ab4dd87de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5bc9bae-0c92-42d6-97d6-a06f785e72e1",
        "cursor": {
          "ref": "d4e9dee3-69d8-46ad-bd73-5f3a4d0ae4c2",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c8ca328f-cae3-4ffd-a078-a447fd28beca"
        },
        "item": {
          "id": "e5bc9bae-0c92-42d6-97d6-a06f785e72e1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7f671d01-0ce3-48e6-b70d-ebde2a32be95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5801bd-6d07-4af7-ace9-d174776e84b5",
        "cursor": {
          "ref": "48adf4c2-212e-4532-8d63-06e51c7fa542",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "fdefa329-9c7e-4aeb-8aef-f9d26708a058"
        },
        "item": {
          "id": "9e5801bd-6d07-4af7-ace9-d174776e84b5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "82c72ea4-a30a-4527-a298-5a0b5bcef28e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b4d7d2-b713-4909-832b-9857b1d935d3",
        "cursor": {
          "ref": "d2af6e61-93d3-4335-8d5a-104c59986428",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "2e940e59-c31f-44ee-a1c2-65c7b5d106b1"
        },
        "item": {
          "id": "d6b4d7d2-b713-4909-832b-9857b1d935d3",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3546c036-9f0f-4877-9186-3b30094e956a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2781671c-314f-40f4-969c-8c5180a61093",
        "cursor": {
          "ref": "b7187fee-5817-48cb-bada-c48d0912e93d",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "b2fc061a-1962-46b7-9dfa-c6460dafebb5"
        },
        "item": {
          "id": "2781671c-314f-40f4-969c-8c5180a61093",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "dd53a59f-7f19-494d-8106-dfcca3282538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6987be0-4a67-4e52-b5c3-62e30cfad342",
        "cursor": {
          "ref": "c4df3842-420e-435f-9dae-ed42b9c5ae8f",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "10987277-49c0-4711-8242-f38d9b7ebda2"
        },
        "item": {
          "id": "e6987be0-4a67-4e52-b5c3-62e30cfad342",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "892b154a-f6c0-47b8-aafe-e0cb83d162eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f09e07-ff86-442c-9ffe-da694c32e52a",
        "cursor": {
          "ref": "f0e5bdb1-13c4-4715-9000-398a5a3a736c",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "5e24ee9b-1ecf-4ca1-867d-2842a6a7d6cf"
        },
        "item": {
          "id": "19f09e07-ff86-442c-9ffe-da694c32e52a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f586f18d-0461-4f0d-9735-0379f5c94798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7302852-d3d4-4525-a333-0638cc07dfab",
        "cursor": {
          "ref": "0ed9cc3d-dc74-4601-a3a5-ca7528349690",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "83800f7d-3e32-4d19-aa61-1ff40ac17bfd"
        },
        "item": {
          "id": "a7302852-d3d4-4525-a333-0638cc07dfab",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b0cc0dbc-d4f6-4cbf-8020-3813d693b399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1746a7c1-81aa-4c5a-89e6-3b5025024c78",
        "cursor": {
          "ref": "af2fc376-49bc-4e90-ba2b-b0db6135aaa3",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "c9b03887-60c0-4d2d-ba2f-3447a00a1f18"
        },
        "item": {
          "id": "1746a7c1-81aa-4c5a-89e6-3b5025024c78",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1623224e-854c-4527-9422-5a4108922e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef996cc5-b26d-44aa-9f9d-48a9ae5c7d69",
        "cursor": {
          "ref": "26e4dffe-6ade-4e08-8730-1697f16c0a6b",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "16c1c499-8576-4889-a116-86a32ef62eec"
        },
        "item": {
          "id": "ef996cc5-b26d-44aa-9f9d-48a9ae5c7d69",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4e73ba98-f4a1-4159-b5f6-cf2cce115f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eccc6b87-43b7-4a9c-8a40-6b7362e3ca19",
        "cursor": {
          "ref": "57b4ab14-c338-41e3-8109-9280371f06af",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "590b712b-8b1d-4e8f-bc42-14ba0d72c6bc"
        },
        "item": {
          "id": "eccc6b87-43b7-4a9c-8a40-6b7362e3ca19",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8d5193c1-3b7f-4e00-a282-56f1a152f305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95da48d-3879-4fd4-9969-ee2fc37a5b7b",
        "cursor": {
          "ref": "04d1ea25-b9de-4fc0-a324-ada3098622a1",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "2416bc01-1d03-44f9-a679-a984092a97bb"
        },
        "item": {
          "id": "c95da48d-3879-4fd4-9969-ee2fc37a5b7b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ef377137-d38e-458e-9158-99cc6bed15a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06b072f-3110-4f29-b309-a41b53eaa704",
        "cursor": {
          "ref": "6423210a-7402-40e1-a6bb-59b8a00b57a8",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "7873c324-2b0f-4fd7-b2c2-769f790e60eb"
        },
        "item": {
          "id": "c06b072f-3110-4f29-b309-a41b53eaa704",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f8c3cfc2-3ddc-4a5f-b4d0-9c0235e1d30c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad901eb0-fea6-43e1-aacc-666ed1b7dbe4",
        "cursor": {
          "ref": "6c3b0cf8-6b31-4129-a339-c8ebe8f9c110",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "bdf20f66-7ee1-4b79-9588-7f24cb9d4229"
        },
        "item": {
          "id": "ad901eb0-fea6-43e1-aacc-666ed1b7dbe4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8ef1fe07-3390-46b1-a08d-f27fa6f60699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8955b1e7-baa5-4d6b-9da8-885d58c35cb0",
        "cursor": {
          "ref": "945a7591-d684-4c2f-9847-ec6efde13cb7",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "0d9a1eff-1401-4b02-b1b1-35f768daf904"
        },
        "item": {
          "id": "8955b1e7-baa5-4d6b-9da8-885d58c35cb0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6ae6429b-ef65-4e62-80eb-6ed00a933a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37418110-f5cf-418d-a8ba-7e6309c0d702",
        "cursor": {
          "ref": "267689c9-01e6-403e-9f45-d80c237e0cc6",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "c97f6d3a-d16b-460d-817b-ffd804d35b75"
        },
        "item": {
          "id": "37418110-f5cf-418d-a8ba-7e6309c0d702",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2d7318b7-0932-41c6-be03-2571681cca63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4669dfc-dc72-4c72-a948-f2b0e257c21b",
        "cursor": {
          "ref": "ded477d1-a921-4c6c-b2f8-a37b5b9dd572",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "bb1596d8-c82e-49de-92b7-b39e8d40c688"
        },
        "item": {
          "id": "b4669dfc-dc72-4c72-a948-f2b0e257c21b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "67a14a0b-b894-44ad-b504-c185aab8b75e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5712aded-5305-43e2-9ae3-78898140e724",
        "cursor": {
          "ref": "ebe18383-1d39-4f7b-9867-e4b21919fc33",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "c07bf2ec-bfdd-4e23-99ba-c156f3da7059"
        },
        "item": {
          "id": "5712aded-5305-43e2-9ae3-78898140e724",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ede2f3ac-0768-45d0-a4df-1790ae851cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "945168f0-058b-4d0f-8e3c-978bb5b4f0e9",
        "cursor": {
          "ref": "e49426f0-d048-4836-bd92-b16d89a57b99",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "47bc79ee-07ab-4e4c-a13d-e5ad79088327"
        },
        "item": {
          "id": "945168f0-058b-4d0f-8e3c-978bb5b4f0e9",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0d78c7b6-53a7-4c9e-a33d-0ba131d1bee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7037beb6-06d4-40dd-96a6-2ffa8ad304dd",
        "cursor": {
          "ref": "a67e2131-8c64-466d-bd27-16971f8d84c8",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "fc57d7fc-51e2-413f-ad59-cc27a3171260"
        },
        "item": {
          "id": "7037beb6-06d4-40dd-96a6-2ffa8ad304dd",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7a2698bf-7534-4859-9a99-4c14e2645db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a1c6fe-32e6-437a-ba21-bfe419ffbd2c",
        "cursor": {
          "ref": "7ab1c22b-a35d-44fd-b193-a1c490fd6e9c",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "7d8d175f-2647-44ef-ae2f-3708e2dd4851"
        },
        "item": {
          "id": "a8a1c6fe-32e6-437a-ba21-bfe419ffbd2c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "dc9afc21-9f63-4394-9f9e-3ce1e91f2bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f04224-1abd-4978-ba17-5537061b1657",
        "cursor": {
          "ref": "7c8eb834-db16-4be3-9f59-09530200967e",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "12ef4fef-bc8f-403a-9d5d-a48e298f68ae"
        },
        "item": {
          "id": "f1f04224-1abd-4978-ba17-5537061b1657",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "289b26d1-d676-41db-b7ab-41660cd8d869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437fac88-65a7-4e2b-8106-9721224002b9",
        "cursor": {
          "ref": "dde7f1f1-39ea-42bc-952b-0f3306280ccf",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "29b80570-d0aa-4af5-a792-fa103dfb4359"
        },
        "item": {
          "id": "437fac88-65a7-4e2b-8106-9721224002b9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "61567dfd-6180-4f58-9530-25fa2999687a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f809b7-9424-438a-9a22-1adb55a998ef",
        "cursor": {
          "ref": "78857616-9e2e-4d0d-9c1e-43487f378a80",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "586297d9-9ac4-4fe7-a466-99b12ec7bacb"
        },
        "item": {
          "id": "80f809b7-9424-438a-9a22-1adb55a998ef",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "babc0d7d-475e-4b76-8bd6-351afcb031fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711881c7-58f6-4835-a55f-db943677016b",
        "cursor": {
          "ref": "b8290750-1eed-4ced-a1b4-8d4a357337d5",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "873340dc-44d3-41b9-8856-30e53553a326"
        },
        "item": {
          "id": "711881c7-58f6-4835-a55f-db943677016b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7d4d8b8c-a750-4202-896c-8cf558b04207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9959075a-34c7-45f6-a8c7-ee0560cc51d5",
        "cursor": {
          "ref": "2e72160b-72f6-42af-925b-a7eeab431def",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "1b3e64dd-982e-423f-88f2-5103b48bf9f2"
        },
        "item": {
          "id": "9959075a-34c7-45f6-a8c7-ee0560cc51d5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0bc2c68c-2f06-4b17-b55d-3a8e0a749e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86d9ace-044a-4cf0-9347-092dfe8f37b4",
        "cursor": {
          "ref": "5c33b802-0da2-4093-8a23-536d3a73e76e",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "ccfb2037-6551-4ce5-8bea-d2385394cf31"
        },
        "item": {
          "id": "e86d9ace-044a-4cf0-9347-092dfe8f37b4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "df6cf55a-09fc-47fc-b9fe-b0260f764ad6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08761fc3-55e2-4255-9394-f10d4cd61e22",
        "cursor": {
          "ref": "28b1a889-cba1-4c6e-872c-8cfc95d0689d",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "dc678b6b-4ff4-4747-86a8-9261c15fab2a"
        },
        "item": {
          "id": "08761fc3-55e2-4255-9394-f10d4cd61e22",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "197f3a9d-83d4-4a82-abb8-5840859b6a9e",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "23dd3460-7c29-46da-8736-36723956a4a9",
        "cursor": {
          "ref": "69a1c2f8-2979-47f9-acad-b50d6fc87b90",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "109aec18-1d2b-49d1-a297-5f9aa4218fff"
        },
        "item": {
          "id": "23dd3460-7c29-46da-8736-36723956a4a9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "28069e40-f99c-4f06-adc2-8c942d72273d",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "65db980b-8ec9-467c-9e09-d14aaf5152dd",
        "cursor": {
          "ref": "ac5662a1-92d4-4bba-80f8-0ec0c85135e0",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "6cf65521-fce4-46eb-8765-597a7908792d"
        },
        "item": {
          "id": "65db980b-8ec9-467c-9e09-d14aaf5152dd",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6fb5a4d5-fcde-45af-9b01-88c13802e88b",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f3ae94a-80c5-4491-88eb-c28b3c971194",
        "cursor": {
          "ref": "7545c1b8-87f1-4b88-9e55-9b2ae279a216",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "bd320f84-7fd4-4bd0-8b5e-0e9fe7ae4027"
        },
        "item": {
          "id": "3f3ae94a-80c5-4491-88eb-c28b3c971194",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ca097754-cf1a-40ac-a290-2d874bab59e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f3ae94a-80c5-4491-88eb-c28b3c971194",
        "cursor": {
          "ref": "7545c1b8-87f1-4b88-9e55-9b2ae279a216",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "bd320f84-7fd4-4bd0-8b5e-0e9fe7ae4027"
        },
        "item": {
          "id": "3f3ae94a-80c5-4491-88eb-c28b3c971194",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ca097754-cf1a-40ac-a290-2d874bab59e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4eb68f-4fe5-4e3e-a8ed-65324b65113e",
        "cursor": {
          "ref": "e9b9468d-9741-4b05-878c-174b06c6b3dc",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "24bc5bf9-ba72-43b1-9437-ad9f98e38468"
        },
        "item": {
          "id": "dc4eb68f-4fe5-4e3e-a8ed-65324b65113e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "dacc6777-6030-4996-8308-a9f898e35fa8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4317792c-9a31-4d23-a65c-d3a24c8bd880",
        "cursor": {
          "ref": "e23f81d7-a519-41f6-aec6-cc783a8a1d95",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "ded00cb7-a6ba-4eaf-af84-c77878ff4528"
        },
        "item": {
          "id": "4317792c-9a31-4d23-a65c-d3a24c8bd880",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0805ab15-5f58-4411-b50f-106ea3b63461",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}