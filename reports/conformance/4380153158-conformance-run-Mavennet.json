{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5bc60899-f47d-4304-9603-3d0ca18633d7",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f72da84e-501c-4a25-a42d-852a8e561b3c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5b690303-4558-42db-9298-00316837797a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "312fe224-d76b-4957-a98e-17d571a7ca54"
                }
              }
            ]
          },
          {
            "id": "179bdb9e-5749-4165-8293-8ce1a9a79d87",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a526b5db-5737-4326-bbd8-a449e0e97a60",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b13a6b5c-e823-420a-8dc8-bea2f08b3bbd"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "165d714f-032f-46e4-9b68-322b0bc2df9a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0a8203c6-b638-4565-bb3f-15bbafa9297c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1f49ff54-9911-4293-8103-957d21a2f49e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a11345e-8eb6-4915-8b68-bc9dd71e92ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ecac351c-cc5f-49ce-ba72-2776ed121b11"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "30ec045f-d3a6-4157-b526-72888ffbbb2e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "61a25b41-ca61-4a2b-8c7a-cf752424c39e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "51a168c4-b83a-475f-8cf5-9a0ec8a2228c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d7c95dc-6ebb-49ee-ac63-20c30e7495c1"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3e34863a-aab4-46b9-8648-e1810eb61c09",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "72dd4295-aee4-4f39-853f-1f5469f29dcd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "15ef3028-02b4-4fab-901e-74e644808bdd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9cc579c4-e7c2-4af3-953a-1b5de7b06efb"
            }
          }
        ]
      },
      {
        "id": "0339d9fa-144a-4030-9594-e55ea98a43ce",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "40f11cf2-df7c-40b7-a8b8-94460d329bf1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6dd9820a-ca48-492c-814e-ba9545b7fcc7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d1dbd41e-2d1d-4b10-ba7b-4848409c3ad8",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea6f945-3c9e-4727-8c94-209b9b985370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7924cc6d-bde7-4fb4-99c7-851bcffa7799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa22b3a0-4174-4a01-b4c8-c335245fadc4",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "429c25bd-35a3-4db4-a774-75b728804518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e908f2b-244e-46ca-b370-9e68c139f330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6cd955e-302b-4f32-861e-8295674f1a96",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f2a176-9ca6-4fc6-941a-7a4ddb69e444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d242d21f-9c75-4e8f-8b56-ea23a56efd4a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "31cc3427-f6c0-4ad7-bab8-301785ab4496",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "204938aa-eba2-441b-b9d7-818cb8d314e2",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ecc6f1-6920-4e21-8ec4-eb6482a45476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7246a51-34be-4b28-b9cc-f7585806df2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e9bd02-f0f4-4ae0-8f0a-edf10a049aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9037d502-a5f8-4467-add6-d99c0c527626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce24f13-4a4a-4e26-8b0e-36334f4330c8",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01c8e69-5bcb-4ee1-a419-a988b38137c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22ec6777-fc00-4755-a55c-b8bf3ebeb5f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b28503-c816-4ecc-a4f5-aa730a63b8c5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "6c869990-2a36-4745-bdad-1882753d2ea3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0c7ed1ae-947a-4cfc-8c80-bd95f1454685",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0888e6cf-0bd0-4f7e-a961-776dc1863782",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a277cc2e-78c4-4ff1-990a-b9dbc2d1b7a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ba59db20-424f-4b8e-b952-b2b31baf76a3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf2eb589-8f8b-4089-96b9-e3e117e4aabe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "6bff4bf7-45e5-476b-9044-4185ad0d79d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ade5d13c-935b-4805-a24e-fb1af7d06de7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "69d2d119-dba2-4189-ad66-80d5efab6bfd"
            }
          }
        ]
      },
      {
        "id": "20c6090c-461f-49e2-acec-f5df8a918835",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3fd3aa50-3efd-47ae-a522-cf4d19d2a668",
            "name": "Negative Testing",
            "item": [
              {
                "id": "474ba240-8e3b-4efd-9532-5dc80b97db1c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "13f3bdbf-22c3-472f-a57c-70b9a117198f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97234f3-7318-42c9-bdc5-6a61ad331e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d14e9b0-a049-4c50-99ba-16450314a026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05426d42-53ae-4902-8a92-d07f72bb7642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "931a362c-3795-4fbe-86c2-3cec46a1348c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7dc3db-8075-4b24-ad5b-de672adf0d73",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "735cb96b-3b05-40b7-99d1-3495f0ada3fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aeed403-73d0-4cb1-9e84-e9fb6de63a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d047ee36-fb9a-405a-aa64-e959ab1b5099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f423a975-35ae-42c1-8363-2261fd1b3cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f995ea-f352-4ae0-917e-12da3f9989a6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff56a38e-4f2d-44af-b1e9-75ff5bd1cdc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f81ea521-139c-42ed-82d9-94dd433f4380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42ca4ed-f0c8-4fd9-aaf4-a3d8460011e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68d37ffd-5960-460a-9e41-cf926765642a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74eea39c-bfb1-4d62-a747-c0b1edd02d7e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd6698e-a37a-418d-b7e9-a05b1e988e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd3653da-4c29-48d8-86b4-e79e40ff78e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cedab50-796e-4a0e-a907-d7553971deef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c326ebf-faf9-42ee-b763-91b6e4aadd26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ef0341-f397-49a0-88d0-70f35b9fc7d0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757a3dc9-d4f6-4978-86ee-fe24a2f14efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b4c54e4-a1c9-4a7b-87b6-e816016d27c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c85853-be0f-4c1d-8796-bf27de3d1864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34e08c4f-194e-4502-907e-ad28ac81c64e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "219059f0-608b-4838-bb91-f4965611a8dd",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71375f7b-65c0-410f-b3cd-a88188996724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e5d334-8210-4296-ae68-70454134c7aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee73809e-df97-4ff5-8dc7-9de312ff4606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fcd0d5dd-3c2a-4fe7-915b-29e66fa56dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65933735-afcc-4635-b26c-c3f803f2810a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f399d5e-6889-4d92-9430-7d95e545d382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4533f4de-e9f4-4c1e-893e-b6c9bf9d0d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725e6ddd-a64c-4b7d-9c42-d55605f7c821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ceb729d-aac8-438e-949a-b035c7ed5950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009937de-01d7-4972-82d6-950947195138",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a506636d-169f-4594-945f-033fdd1bc5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53d172fe-b415-406d-8cce-f712a5783e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93fbbbdd-8a7c-4a8a-9c3c-c1d87aa54be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e6a8761-39c0-41e7-a61f-39aeee11f110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a05db3ea-5608-45f1-bf65-17d293304c1c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe704da9-f8bd-4b27-9528-3d43d0c8fc3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f914be4-e8dd-47aa-a389-da1bcf07d3aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5127b51d-4969-43a1-b20a-b14c6432bd50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb7ab08b-6082-4563-b4da-fd1b70f9a993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899ba465-4bbd-4aeb-8bc9-f4cc7d5d2c0e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd790e9-aab2-4ff7-84a5-d460aabf309d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d736ef9f-c9f7-44b8-8ddd-b55bcd97f6dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51b6ad3-b02f-4dc8-b5b9-19b58455850a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "713ae25e-d7bd-4d7b-9867-74dd9cd3317f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756e7392-bf52-4708-b8e8-3774e7d59266",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0486cc05-415b-43ab-917b-e3e4014f7312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "959a45ce-5a9b-4931-887b-81e3bd4e6508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105f705c-54a9-4df7-9330-8256516dd4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a7b6149-3c74-42b2-83a6-a8a95efbf7ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b1399c8-f9f7-44d4-96e4-1e21e959be21",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1717f96b-bf4d-4fcb-a4c6-06d1f9553c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4416ef1a-cdf0-4430-9857-9b0c364a166d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5114be6-53bc-464c-8f64-91a8ecaf1486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "495c5684-b159-4bc4-abce-78c16a261f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a343ebc8-a77e-440a-ba36-13788a73ac7d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8243dd8-f3d1-4350-ae24-7f2c68a57f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103d6f81-8315-4c70-ad25-b1f4ad423299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281ce0ea-37c5-45b0-9382-4cb4f5941598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a25dd2f8-e432-4b98-8142-ee82e3c55d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a7cefb1-28b8-42d2-a835-0f7acf2cbd48",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca550d3b-b89b-4d36-895d-517d5d9f0f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "121bb92a-a0a3-49b0-be3e-3a4725506315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd7c1a93-086b-4b28-b37a-9355e99e211d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7a11cd4-f49b-4f3e-8729-80c7cbdd7e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0005d88-2135-4a16-a754-23db4dfd3775",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "729fd018-967d-4dea-8ee4-501f65f04ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaeab8a6-7f20-421c-822a-05ad41789522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7eb173-8ad2-4bf5-a72c-9e01b165aff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed741d99-f4cf-4af3-a7d4-75ad5ddd6508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2449f215-c7f6-42ab-9b30-9f25c23aa8d9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f533540f-38d4-4926-a9b0-093a311c4198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f418642-d2d6-4ee7-af14-5ce6ffbb74a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16acbb6b-8a11-4283-ab20-edc72f102dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c8fe56c-8457-47ff-9368-99c39baa49bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9afb0c-6d17-4ff8-b6d9-f9befef316b1",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "014873c0-61c8-4722-9039-d61d932468b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "208afbe9-1503-44cb-9da1-215712cc3957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ec6c44-1a9e-4918-b0fc-1ca8c11af73d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c727973-42a4-4f9b-b054-487bbf046a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbfbf100-8d93-4934-8b6a-2963820a7db5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00bec719-c571-4c57-ae71-123747a1ea53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1fb7de4-4520-45c0-bd5e-badd5f86ffa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea08e25-67bd-4a02-91e9-6d19a92f7996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "20b29bd3-b89b-4dfc-9413-bf88b1384ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b79c6f-b287-4a5b-985f-3a95af3588ff",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd5807b-2a95-45b0-b9ce-6f946c83d236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "606da233-bb46-4efc-8c78-5eb9ad48b46a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ef3809-62c2-4a0b-95b7-e7a5e08a18b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "63cb589f-8fea-454a-868d-af558a8fc7b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04583bef-f0d9-403b-9c16-084082ef5ae0",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ede239-4c57-4a3a-8b94-bd7c5655e9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cbfa71f-6453-4115-bf48-1fdd9e04abc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55dfc271-a094-460e-94f3-fcf5b3c9cf31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1000f14a-e1e4-44a9-980c-8f0124b2e623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20285472-5116-4db0-84d2-0b7464ee26a0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7d47fb-13b8-4eaf-bcf6-39ccd949103e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90318185-de00-4dd4-ba99-baf90982bb2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9a4405-6672-40ec-8b77-ed74d3f92e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8616ae3a-154c-498d-b068-5524f7dfb459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6127b1d-bc3a-4b9d-a0ad-433a37850271",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928635ac-dff2-4d6e-a317-64a0d2cb90e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138375a7-df88-40bc-bf59-7008aab42a36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2150e3-777d-4598-9fb5-7d91d636e87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3559072-cbc3-4c07-8711-7c37afc076c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6e9174-5785-45a8-92a3-de2b8df9b900",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ba3552-9347-4edc-b14f-43dda1f38f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1286037-a794-4dc5-a18f-ae59ee59b5ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bccc2ee-4305-46e3-adb2-e86a0e3a0ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7ba59942-feda-42c7-9724-9288ebabc183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b19701-c0f5-4d82-865f-b44a6db47e9d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c1310a-33f5-4b14-89c7-178d40e9d87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd781ad3-f113-4815-9ae1-13501dc91d54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f204bee-4313-4efb-846b-3773b983ff9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "46a12809-0fa8-4896-988b-31c1b96402ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119803d5-9acc-486b-8e71-e6fa372a7884",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1208aa57-16da-4184-8fcc-b61ba51163c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb5b009-2c62-4b95-a20d-c1e3d694594c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3013fcb3-38ae-4994-ad35-659fdcba840d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "238a3230-f76f-4ab2-b928-308d49befc84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c412c4d-d900-4313-acda-e5433644c29f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a49d7797-1c12-42c1-a236-95fc4b1ae7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d03ee975-9e21-44e1-bd04-83af0ab5b599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37aee463-38e0-4c0c-b886-577dcb6ba3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "546ca67f-8673-455e-960f-3e2d7580dd0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0da7a3b-29fc-4e92-9b30-b86b78faf73f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d74e73-d0b8-4215-95fe-c91fa492da30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ca3887-83ca-496b-ab57-9aa082eb69be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4eff3e-b8ff-48b0-9da6-018b8e67ab4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c07aeb1f-31f6-4114-968f-91b81d7fd8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cef4cb3-00fe-4793-aa84-3c39d4fb55a4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a837c2d-c0bf-4dab-9927-920530c196fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a62280be-69ab-4597-bb54-725e3fb6a54f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "181e3fd9-8a53-4032-ae79-85ae689fa81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "39af366d-c06a-48b0-96db-af8816433afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0644cc-372f-48b8-b6f4-03e9e4e79d02",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59b8652-9954-4439-9d6c-53193fb51f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3cef9e2-5f52-489e-9859-2c69f082d8cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6682baf7-c53f-4e82-8d02-0d000d8208fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5fa33f5-fc98-44e9-8a2a-b0f9c7d1f186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8db2f2-f1ca-4854-ba2e-22c422a98048",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051afafd-7b4d-4095-bf46-3aed7e49d2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6bbc18b-1643-448d-8b80-8b05b23c0ed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3df5582-18af-4ff9-8159-0e2e0479761f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "9be60044-020a-4049-8f17-892938ae88b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d18035-be11-4edd-83bd-380e9d397002",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa452e7c-4e9a-44cb-93d7-a66cd3d2dd4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043f7de6-932c-4cb0-8cab-1c3370bd783d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a87e54-00c5-411d-a7b8-1e3b2e4fb709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bec9f49-9dc7-4713-a18e-b4a21e96d264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a1f15a2-5e0b-4831-a084-eab38349aef5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39adc28-59d7-4fc0-96d0-68c7a0251032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4908505b-92e4-4cb4-a4e5-2ddaf671224e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de1a35b-c204-48e3-a6ce-72edc2500ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b43bd878-4788-41d4-b074-c4e433a13d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58800c0e-7b17-4419-b1de-62005217e4d4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4a479f-b9f6-4d99-a5f7-73849873936d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84a97d56-a399-4ef2-b454-49e81dd2b653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ea816d-ffd2-4e4b-a85c-c44229194788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7a7354b-cded-4a88-b63c-8d0a69a41539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341ec4f0-841f-456f-a88b-89f98ebe02d5",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f214009-b43a-4e04-b3e1-50c8c86e1d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b8adc4e-619e-45c4-a6dc-5880adabf30b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8e7d2d2-664d-4330-8b2f-3541f4bd97ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d50f6b34-ee7d-49a6-85ce-3ccb6b865519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258ec4f1-8fc8-4904-abbd-ff42f2be4631",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ee42d3-be78-47ac-883a-cda9d06fd556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5130bbc4-f554-4567-8f80-b1d4de46a2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a237e0f-738e-47a3-ac76-b74104b92be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3bfe76a4-ca66-46ab-ad0f-294478a039e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4469db8d-d151-4448-96ea-6fa9e5b39063",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "385a9199-de47-440e-af90-82fa9c176587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1eec64d4-007d-40e0-8cd9-9482b9f1276d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6957e1-d764-4425-a60f-75248fe75fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59f4cc55-ac21-4868-81ab-c523319ca8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d171fac-32c3-4e2d-aaea-b2bbeb4478f9",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be44db9-b7c8-46f9-9244-6e1a57fdedc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9cc41aa-eb7a-4687-952f-422aabc0c5ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b638828-8c50-494e-9bf0-9d3671b7ce75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "90fcfc8d-5c60-434c-8edb-33ed57bee10d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7386b8-5e2b-48b0-81da-bdff5579174e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315ac846-38c1-42a8-a9a1-d74575130f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "babe3d2d-ef87-4d9b-b299-abc7ed7561d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d89632a2-f6d0-4bb4-b562-fcf0ac47cb48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf125607-907b-4c38-9f4c-601a27cfce07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec91772-3135-494d-8efa-3052df18700c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d81433-e71c-4aea-b114-4ebeee4a7d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aafb71ca-f99c-4f7d-91d8-2731129a1f7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e519579-b9c1-4cc3-b892-ad88e2179dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc33a45f-8136-4b9f-bc02-4ad83a8f57b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "947dbebd-52fc-432f-94c4-6b492e26f76b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be849cdc-3e7d-4e91-83c7-9cfd44c1ddfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1b380fc-3841-4e7b-b748-35bf0d073bf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c597a45f-9430-4bdf-a39f-5407b42bb197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1668c7f4-301d-4379-b6c8-e4b0f35a1c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73514a9c-0f7f-4612-8c6f-9c2e7723928e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0517fec7-cb15-4bc7-8256-5e0089937e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b3fc2f-4b07-4d9b-aee8-687bf68a9c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7075da4b-407d-4513-8f83-1b335c8e6cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "625623da-c4ba-489d-b524-db4d132765c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29561de9-6a82-48cf-8f82-86b039dbe966",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d5d6d2-b99a-456b-9c23-fdce4735b533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc7d503-6dea-4a7a-acdf-94fa94103cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc039f1c-92b0-44ae-ab84-cd7d9cca0321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "eff4a493-f748-408c-abbb-83b25352f557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "737a1db4-3c3d-4773-9382-850c52de2cf5",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "520010d4-f0da-4f5e-8224-d844085cdabc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90953bff-71e5-4b94-891a-e255fc7c97d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393f6679-060a-4004-94ea-731b433ffaa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8d8c3b2-6048-43f1-981b-690f4458e8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc2f862-e5d0-42b5-89c6-af2678ffe6c3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7282afae-f049-4846-b2fa-4cc72d129334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5307b028-6ece-4542-82ba-88ac9928556f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72484b7-74c9-41b7-a7eb-0911b4f4ae6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dc12dbb-daca-4238-a296-4b92e41c2a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b3796b-07ce-4bb9-ad75-ca9afff52ea8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a7a745-a2c0-4731-be55-96fc1757bb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d85d1c0c-802f-468f-9c3c-1356609d3773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "162fc074-85ed-4398-94eb-28cf3b08d6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b0f37c3-0d72-44a7-ad00-7c8143d617a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bcb4030-4344-42ff-bd12-7a01b720f1ea",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "759f3d7d-8f6f-4db1-b3e6-5ec445107ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d7d1e8-e8a6-4532-8420-204a13083f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20830cd4-024f-4ed3-8203-3e83b3489fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eab26dfa-6b1d-44bb-b48f-ad17a00c44d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f73f69a-d7b3-4e7a-802b-09599ec40a96",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec6962b-be3c-418d-a9e1-28f15350f02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1bfc797-b260-4ee0-becb-85e7ff913774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e845aca8-8089-4b07-8ef7-58a63adb80f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe8a0e7f-4e82-4342-9af0-b279f8aa82ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c78ade3-fe3d-47bf-a2af-4257a90e692c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19959eac-dff2-40ca-9348-0b5f5793b9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b6be230-bea2-461a-a712-9554ac8a52d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea89bf6b-3909-47f5-963a-a7fdfd94a507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7026095-4334-4920-a445-2180fe3d03c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ff116c8-9105-444c-9aba-5081635006c9",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef1aae9-ba58-455b-9eb2-fe2091060faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e17ddd25-5067-4dba-a39e-60e05c5c9a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48fc603-d16c-4dc6-b750-2f9d58cd6cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d32ac59-ade3-46a8-8c1d-68498bf71cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b7d143b-93bb-4e9e-91d4-f8a0ee127b78",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24808415-c7eb-4be3-b5bd-d0ce8b16b0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f97b2b5c-7d7a-4ddf-a269-d85ae62d9174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb67d208-2ee4-4fb6-8792-a5530a5e0f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "33419f6b-be5d-4017-8637-85bd4f7f7a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0dc0a2-566b-42f9-904f-797bbdfdb841",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83792996-c7ab-425a-b3a6-bab94491ecbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d42a8de4-b505-4344-b243-f8545e2a967d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765c4162-04bb-496a-988f-f1082e1bb8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3109a580-869d-431a-b2cc-7b1d26ac6ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8595dd6-9105-40ea-931e-be69a170d0fa",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7612189-a930-4b9a-be07-d96d628f8698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60596012-bd12-4eae-b949-16fac9afdfe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae48adc-654f-4743-ba5a-2dda7cb7cb41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee3067e2-396f-4751-93ed-6050f4e215ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278b0463-005f-4745-9687-a8014ce19c9b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07f2e4c-761f-4072-bd7f-21de55c4d5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb28bdd-fa6f-44bd-8eb2-bd65c449f1e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89890ab3-1a3d-47e9-924b-724d5a47767c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "319e4320-025d-4955-9307-fac3b00bc983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ca9012-c973-49e3-9f3d-41f97db2975a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93131ee-5b8e-4b88-ad58-761fe581d169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c8348a-7388-4dc0-af41-9fa6c7d1a2e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2fc34ec-65fe-421b-89cf-e650890cd34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1025b92-30f1-433b-b1be-e8c617ab127f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94b25ed-5570-480b-9f1b-c34adc7e997c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e5bccf-32d3-4bc9-b142-0667a702b2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7307e935-faf3-45bb-afc4-fb7491ca5af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b9a99d-d52b-45ed-8467-f43ed0ae3396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d732b5d3-4455-48f5-beab-943264a488db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac50451-e44b-49a6-8980-eaa804bf50d3",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef012a2-c2c2-4c5e-8f03-4580fe447d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20fc4217-ad04-43f4-ae4d-bd7ba245d08d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c7948a1-0d73-42a3-aebb-b30ed558286f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "639397ff-9953-40d5-9c58-595571cdc950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d6bb5f-dd8b-452b-bf09-7b610d519d4d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628c456f-e1ad-4ffc-81af-7250983e8bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12948c3a-0955-4683-9c71-12b295e5c223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2ba693-e094-42bf-a367-75203dce4e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e0829bb-babe-4aee-8b97-fad257a1440c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c153cdb-f3de-40f0-ac63-8cbc978b3344",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf5d9cd-5fd1-454c-8c7f-3090206e8dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b5944a6-5472-458b-a408-8283c42092f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f5aadc-2153-4ec9-8fc6-b7d9114869c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fed2dae-1f43-451e-89b9-9b19d0aebfd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a5406c-5513-4531-a618-420eb350b825",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "923b7313-bcca-4c1f-9e40-cc46753e1e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b6a3a33-80c1-4a5a-9ecf-ffb6d7c7f6d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c0ae9ac-4420-4404-80bd-cf634573a73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c8f6f25-25ed-49f8-8104-ad3baa5022a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4a9373-915d-45f6-8505-00f9117ab283",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9919df-c954-46d3-8267-13ff05c08cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c15550af-fc4a-4ffc-a783-eb0b359c1f5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f621f3b0-89a0-428c-b6ec-08ce701aa684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef1ecdb9-26ff-4b0a-a221-af159bb444f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa21a89-9cb9-4add-b40c-3c6e0561d7f1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ea666a-fda2-45cf-92f7-df6aba2f0efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d9e0e53-f859-43e6-8a11-b8b077a747b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d27c1e8-8d84-448d-81c3-d73a0453598f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "34972537-6724-482d-9b1c-5a8b5f7c6bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea96cfbe-d477-4389-9a28-21c419bb83f0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "368919c0-cc99-40ef-a804-233610243afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f5dc599-b08c-4092-a70b-02c67e1925f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5cda99-c3a2-452a-ab1c-166359988ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "46183d2d-5c85-4945-a2c6-5ae486daa27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f11757-dd76-46fd-874b-8810bd4799fb",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8072244-631c-4c65-a5e0-20fe0e2a5c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66cd099-5877-4f4e-8f4b-4df7f7d22edf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61833649-77d8-4c82-8add-9127b4789b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "73351118-f523-438c-9ef3-e344b7835585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b62a7de-d672-492a-ae08-04aa641d2ff9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e74ecac-30b0-4f4f-9515-8506ec4eaf04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd2f1dd-1f79-4091-8fcc-e2b0538067e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32aa195f-a0bf-467c-967f-a2ee0263eca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9b3fce3-3ef8-4f7a-9277-b6b49455a421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04055859-f016-41d3-8715-c85d186ff815",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4301921a-8e80-435e-8f21-552d5cc46e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb132c7f-6881-4126-bb2c-222c09256625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae7d0fc-55a9-4876-b9ee-3886a0b62d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca2adbd1-57a6-4af6-b29c-7a861ecdb18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cda556a-9d5c-45cd-b0c6-514f757ea24b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11bf4992-cd15-4215-9ac2-a79233e88700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ec04c20-49bb-4320-b6f3-5aad5abfa43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c81ee8-b21d-4ca2-b5cd-ed98c7425ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "47a883fb-0250-4993-bfe1-22c18bf2d8fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ecd3991-1ce6-43c9-88df-83a09b1f23af",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23eff3d-2b1e-470d-9835-1058d6f2fa20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "805b7c59-78ed-463c-a96f-58811f9bbb7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebb3c2e-2d76-4a40-bed8-1d281e25e8d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14e3984e-e3c4-4f3e-a218-a286e469f672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f02444c2-2317-4f2c-8ed0-99105f69759a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562f6396-a223-40d6-90c9-14109e5ca91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3df0e62f-c43e-41d5-9fed-580fb1c08bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a77f88a-8ea8-49fd-ab75-d4d3c4516221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d062e61-9d5c-4fcc-9c7b-121c00f94363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89efadcc-677c-4653-b5c2-6c4039a96a1b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07733c4b-d1c1-4254-a4c0-7969f15cccfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba7ba552-8ea8-44d9-9463-eb47ec20a216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53cc5b95-bc42-4291-8e9a-4660c6aeaa26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e519ec87-2708-4088-a69a-179f4c22e77c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227b7e70-ee6c-41a4-998f-e24caf3b6ee1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9bf186d-9302-4619-9aeb-87b5766f6483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1d7ce7a-9625-41ac-9013-4b990c3452b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e35b0c6-a8d5-474c-b8c2-d6bd67603fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b15421dd-fd3a-4c5b-94a8-8e874d9f6e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d30a15-dbe0-40c5-ad5c-9c69632e83a9",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13aa791e-8228-4738-805c-c5da6c83df04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40cb5454-21c9-4d03-838e-74df6bec808e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342b9110-887e-4678-8f61-46109d7ce433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b75be19-56fb-43b8-af33-26b3cc05f03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd7501d-88fd-42d9-9485-65d54248a1b0",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "899fe49c-c39a-48ea-a38b-e60dd2fc57de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cecdc1f-e394-4e1a-adf1-6ec7a7943b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c48ea151-4137-42c9-adfc-2dabe22ad240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50e62ab8-f83c-4b82-ad38-7ba699fd378f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2adf872c-1aa7-4dc6-b1f1-5919ed20fdc6",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58729111-5fd3-47d5-a852-6a49643e5aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f2ea0bf-6fb3-4c2e-ae61-afd1e47f726f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07cfb735-1a28-409f-a658-62123ddbb744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "65b2a1c9-1332-4ea4-9b3a-5d2cb5340463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b412ef29-5788-460d-b863-cc99510b5ebe",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3646925e-9084-43de-a26a-f1a412d6b076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e222fc8-3b65-41b1-a96e-eb2359a3d40a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c79ccac-682a-4f37-8737-4b0c2743bcf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db85d102-5e3f-41b8-bfa5-c9cc32dca579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6670b657-67ff-4771-85b8-3d376145f01c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5753c7df-304e-43f3-8d21-99612855d49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fca906b-f648-4ccd-9f40-1c413718c87b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccadb2f4-2cf0-498a-8287-57f5cd499a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee51f4b-297a-4347-a346-55f7de4d9b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6baa1c00-e0b9-4f08-8bc7-2a6920a766f6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3810da5e-28b9-4da1-a48f-77fa2f4bc3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "605db087-e114-467b-af8d-1f5d0c8f8332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cbc2073-59a8-4ded-8aed-2087d90830db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca7d37f-75b9-42cb-99f5-69ee6665678f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420b1d18-6cb0-42b5-813a-47b751b3f909",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ca9506-f842-4e8c-9d26-810b5620ee02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd193f70-48b4-4210-89ba-db840c4a10ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f92ec32-8353-4016-b98e-7c42556a7d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89fb888b-f6ff-454a-97e0-07674ffa1b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f83acd37-1a99-4769-8f09-3acaa1c8d545",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74156736-e758-47a2-82df-d794a5014788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c165499-61e2-4238-9e37-dce8469d7be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68f0ae2-ab3d-40a8-84fe-b2854327fbb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "676ff2e8-6a8d-41a2-94f1-09e5fc20a6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca301556-d522-41c6-a212-47c5cca41cfa",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8679bc64-1367-4ccd-8ff5-9ee2ac0218e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f7b244b-0930-45b6-8fbd-1e71f0ce83ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cecd8e2e-b603-48c0-9f2b-6a06fb2d4973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f4e41bb-cda1-48a4-a546-61bc06a8c0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607b3469-a24f-4fc0-853d-41c63047f45b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf19851-2db1-4776-9459-71ad384adf25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f521d3d-f88f-4f20-bd5e-d8b6c0f0656e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "162ee6ba-3660-418b-bb8f-02b2c18e5425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "858e9616-31e1-4207-82ff-3fc67302abb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff171732-3e05-4a74-9fd0-ca000761a1f0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac444992-f4f1-402f-90cc-f26a4fbc2462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "496634a2-8c5d-4dad-a8fe-147f5ec78f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0051d0bd-0802-4eb4-972f-b272b9c57def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff41aed3-4b56-404c-85d0-37803d986f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a276e75c-a3e2-45d2-8e77-47fc8e190ada",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53b4f04-b69e-4ee7-86a3-bdd8da4c6c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a56104a1-1af6-4120-b943-eda693e2f0d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056e0131-a3ac-47b8-ac9a-e2a492223c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8582d994-844d-497d-af01-a90721f83246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed7b157-bd82-471d-a2eb-7dc1c9e94278",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c2e8d0-00e7-4d79-8d52-6975d53c41b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5922b74a-1c7c-4921-839b-006cd266a31d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "874dced4-f976-4956-a414-28febb78e8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3d48d8-a5de-4ee8-9d73-ee44997c1a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f69bd8-b79c-46d6-9a71-7d9a0243a068",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7c3cc7-efc7-4f78-907d-49043ad65ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcf68b4d-3e98-47f0-b69a-b6acf1c32201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6293087c-add0-4a15-858d-daa35133785a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "09fed787-7341-446c-88e3-4835b11dc978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df64be3-096e-4a47-b14e-18e25800a1a3",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4719e4-6c74-4706-8eeb-610f5b16b1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f20b15d-6cd4-4cd6-83bd-4064e1619f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b111a565-c704-4e4c-a82b-d2dff72a0741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "759f1cf5-3555-4676-8421-a08163a31583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0aed36-97ed-490b-adcc-ab73369b946f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "266c6819-dc84-445b-b2df-f25cdf6e0404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fcaaa0b-967e-49f6-8526-82bff5738ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220c63cc-6c77-435e-b0ef-2e2837e8da29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fffc20c-c105-4d69-955f-b2328b7299e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a479c685-619e-405a-bf96-79df7b76f71f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c36b26-89d0-47aa-b848-76cfa6d6a1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "501c56f6-feb8-4765-8ea0-6655ef7d53a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e39fd620-8412-4b8f-92c1-aa147a162394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8561137e-fde8-40d2-8b96-08d0134e309e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436f3dcf-9da1-4065-a9c2-940b2b76490c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe112988-a68a-4a7c-bb20-877439c27824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82ee7bba-1f75-4176-9a30-5c34ad2d2ad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae78816-07c5-4ddb-a76f-18635adac031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "12d0b05a-0c89-4503-aa31-42a339c4a8d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5e9193-64b2-4bf1-af5a-c3b1a6e5db79",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c075e3fa-0611-427f-9b7e-df825e3053f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7beacc9c-c581-45b5-a452-da55436a9376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786b0b00-bc4a-407f-8651-6ea775f6c86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7313850-640f-49b7-af40-67368e7befc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba060e1-86c4-4973-a481-2365a7120a9a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9311aa-801c-4f94-815b-d269a70987be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9183bd5d-24ec-4764-993b-58946687f7c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d17da4-8915-4852-9cd0-443f38ac829e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c51e5a8e-6684-4be3-bff4-866268c4f8db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2b8ebd-2ae1-4270-9f86-03f3e9cfb488",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381c2f71-1b6c-4c25-823f-f9cf33149223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe6b415-95e4-40b9-9595-4aeac8214514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b457af7-1fc5-46c4-82bc-ee3b467ed317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d226e50-df3d-47ea-a053-4e59a2dfa4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3713cf-961b-4a9a-bad1-978959f3748e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73d9f26-936f-4f00-a8fa-d14b9548d962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bfd501de-20dc-4468-8ad1-560aa89a2f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0ed40f-845a-4176-aea7-3b926825eb74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "04f2344b-cbf4-481a-a935-9b68b2d505c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cc7aac44-043c-4de5-8407-c772a0b3c986",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ca2bdd9f-b8f6-4464-9bda-7e94ed4bc286",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d281e9bf-f592-4e66-9dce-82a6748e29e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bcda77c1-7ed9-4e15-bdb7-a73a2d705eec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3303772d-7545-4773-9392-44267b948707",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c106e77a-b383-455d-9592-2abf72ddef53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26edc6d8-96da-4b62-b358-a8ffded5227c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "150b38b1-e058-42dd-90b1-2113ebfe0cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b4cdbf5-8bd5-420d-ab86-d009e12d9c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8a4f32-9875-4895-bffb-1c4c2a5ac0f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "094042de-1db3-457e-84f5-db3d329f613a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d1877f7-0ce7-4e14-9bfd-455ce48243f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfa9e471-5e2d-4762-ac37-5c925235c9e6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4cd82d12-0d82-4d1a-a3fc-e1e6a0e3d65f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6aba9765-5592-41bc-8b91-e60256cdd968"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "421b47de-4ced-4060-820b-8b021f4594cb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a214b9e-cf4a-44ab-b06d-45c398b8c020"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "20a7da41-26fb-4e2d-8bf5-c524ad457198",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5b5b3210-b41a-4c59-b14c-dbd299993688"
                }
              }
            ]
          },
          {
            "id": "b645c74e-aa9b-411f-a791-c1b160d907f8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "83c264ed-4580-4659-a9cc-8ca5176e56e0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfabd638-5c1e-4b7a-b1f9-7b81626c2343",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "af3e14e9-0e17-4aee-b427-cc63dc6e0a02"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "711ea0c3-7ac7-4fbd-b2d6-1288e7b3572e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f55c57cd-9aaa-45be-aaae-1cebde5f0c90"
                    }
                  }
                ]
              },
              {
                "id": "aa4ae12d-a099-4981-a8c9-04df3e90a524",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "697dbc48-0696-4557-a94c-1689b3e9afaa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0a92a17d-cde6-4fa3-ae32-5e49c34638e1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "640438db-6bf3-4193-9699-a6e82c4656ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "47a4ccda-8363-4119-94bd-5e79cfc0c4a4"
                    }
                  }
                ]
              },
              {
                "id": "a26784dd-3661-40b2-9b12-4ed126a0c92b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0374a5ab-ac50-4f64-a07f-b17ee36839b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ec53e5eb-777e-42dd-ab49-a4a99f4e9134"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4bceca69-7c29-4b87-97e6-5adaab824a6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "96136188-34cb-435d-8870-037463e5f991"
                    }
                  }
                ]
              },
              {
                "id": "1e5e6d27-b465-473e-9ef5-fc4980757f87",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8904830e-7fd6-439f-b9ae-24b193a1aec6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "56bfb186-8a02-46f3-a563-eb0afe43bce4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca1261fc-f794-4fc3-873a-f16fff523549",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "84fe3512-70df-401e-a47b-98158ef2df96"
                    }
                  }
                ]
              },
              {
                "id": "e9271166-b9a4-4056-8ebe-88c37b90656e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e10540a9-67cf-4f3b-80c1-0cf37b30bb7e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e841a2c2-c421-4713-810a-2f8708952977"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46626239-e107-4abe-a481-9929d73738fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "68a314e1-7295-4623-8397-94f95106705a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "22329ed4-4a19-450a-acbf-8477b643fbe6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fd9c162f-6785-4cee-98e5-248dd741052e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "882ba1b1-7566-4f34-9362-b13cad723b0d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f3a4c572-538a-4d14-83f2-d23853f3869d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8501c6d6-3c65-43dc-b7eb-970a1e8a5669",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "844f2802-c049-4080-b1d5-66cae6a0299b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18872b47-7fce-459b-8bd1-a3aeae1933a3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2c96be2d-3225-4a12-92fa-056867c63e69"
            }
          }
        ]
      },
      {
        "id": "63d2a98b-d12a-4c70-b6b3-42da423dd1f2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "591587c0-e82c-4d38-b6dd-bab65c175e56",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dcaed63e-0bb3-4fad-8848-346cd227732d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c2b6d496-72a3-4a9d-ba49-f9ec308be997",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b07318-a49e-4f58-8b4c-b6f2415a7964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5ecbca9-9959-489f-91fd-3621904a4126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ed729f-0706-49d2-bdf1-1e21c49c33ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b41f72f-c14b-4b20-87eb-0fff15a44d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22901dbc-9990-43bf-8d07-3c2fc5377c57",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1332f7fa-fcab-432a-8d00-36f67e0616bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36738a27-1718-44a1-91a8-f1b65d78663c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91325176-ba95-45e4-88fe-602f8ca967c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb6262b-c57e-42ae-9a96-b72509931e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81262fa8-4a88-484c-bb7e-6941cfbec41c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0888716d-d3a9-4411-ae7b-5f64ede614e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a5e09c-b93a-41d4-97f9-db0241f330b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4aa575-208a-42af-af0f-3027624483fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6e9e040-80a7-4892-b8f4-b0f1e425b816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65f6c93-fa66-4fbf-9ab7-2fc6bfe227cf",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe41214-e15c-4dd0-8473-c0e8b2308618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cabdfc82-6a16-4a5c-bad5-c483811dde01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b116ba8-dc48-46b9-ab1b-98d3c15f4691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8a0ca30-d115-4a31-ae48-735eaf524b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64112f01-4b71-46a5-a8fd-5c8bd49b4534",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ebcabb-9f77-4db4-a433-0457a404282f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ecb26ba-4d9a-49af-b867-7500f520fd7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74485fc-db3d-4db8-ab57-cc8ad50aa5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "87e41f6d-5ae4-46cb-b6c5-49f1e26a413c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1426fe89-d609-4da6-967b-b73b0ade7059",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d35aa22-d65a-4335-b5fd-8d4484ea5f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c41e961-3e52-49b3-8ca9-1757507e88ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ef02f6-52f9-4af5-8ffd-68ca7e3f70fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8127fa54-9f14-4e52-a5fd-d57cfb6a5bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6a4bf6-de65-4969-b0d1-5a4f0f81a5a5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9c4712-4d4e-4829-877f-bfb646b09e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af46574b-cfc3-4a4e-bee2-aeb0e24dd7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f59ca1-24b9-4493-9b8b-22d6f717a630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "01e10474-ac57-4634-864e-8f2d872f6a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c26293-85c0-4e4c-b024-d9fe275f8354",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe2cc5f-09bc-4aae-9940-6c34ed8d0957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01e9a55f-7965-472a-92a7-b08b2fdeb9b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be2876f5-3727-44b2-8f34-06b72274fd89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d11988db-4cc7-4332-9972-c02985835a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bc10b1d-7e87-4997-930d-10e580913cd9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5738e3b-5e21-4b30-9844-f2887b877997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31624e5e-6861-4dba-ad07-6bf8f946f09e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c8bb84-f668-46c8-b897-457e51af00be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96f78a2a-05fc-44bd-a0aa-4fdee5a3cf59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aacbdc6e-82c7-4386-8611-545c68c8c6c6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3451a8b6-2f85-4847-80f1-c91369d1733c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "121137c0-1e3a-46a3-acb3-ce1c5603c0c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f963220-9071-472a-9dc3-8b0cc288faaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd03c25b-6ea7-47e8-b5ff-6419da20f97c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91a0381-7fee-4433-82e4-6b754f78ded2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0041bff3-d15e-4b1d-ac5e-cb72a5f7c13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24358aea-2412-43b4-9424-958acf24125f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066edf6e-4bf1-4f17-ae9c-0741204560c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5d8f13ec-37ed-4318-ac87-14309a4fe545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd96e21-beb4-42bd-a2e8-f320cc962364",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67fd5256-60fb-47d9-9624-feb7670c2ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2801590-b495-4fdc-a792-f5c111b7ad96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87887e4-6edf-4ad3-aa2d-94295cd9fc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b26cccc6-93e5-44c6-93af-91a768fa758e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b14a194-4ec0-474e-871c-4625a0ed5e54",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7904c5f-292c-4368-b3c0-04c0c6e09c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38ea1029-867b-40e6-8e53-597f07d662ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058e1752-b9dc-4a24-83ab-91673e1f2785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "be92ab19-c1ce-4360-8552-c4145ab62263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc942d5f-8ee4-4139-88b4-f62745b73e41",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4620966-e44a-4b39-988d-fc3bbe32e243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1564378a-c088-489e-89d3-4fbb2b92812a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336463c3-e2d0-4223-99b6-68f1d5ec96d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc8dea1-372b-4d16-94be-c256297ae261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8e0aa4-2433-458d-bc8b-848f80789836",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7416b80a-3eab-4603-a596-21f202f09fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d943687-5d21-4f2b-9559-42dd1a831c2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8575c4ed-de9a-4f05-895c-4a4070137f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca0b0733-adf3-4132-b571-3bb5b0577229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c573be-a56a-4773-ac6b-90868b4b6bd7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d09b154-e4ce-4ff7-bc1a-c621286e2349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8453d517-33df-4fc9-a18c-6facee6a73f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a3ccd4-2a6a-45b9-9386-5adb0ad0b17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4533553-55be-4365-8535-8f9892db6341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bfd6d10-4ae5-43de-8eba-d512384da3f9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fb086c-943f-43a2-bf6e-30021d4c0bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c77dbe-3957-4cef-b1d6-558ea7e3dc91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b771a743-ad36-40e5-8ffe-d8da63c16b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e69958df-a83a-4007-8bce-d9b8606882a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc798e1-f10b-4ecf-aee5-9e412d5d0368",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44486d20-fcaf-4770-84af-fdd6dd3df5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c5f7945-9cba-4549-9875-3b7a39ab0372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc49493-e03a-48a8-a519-861ced2d088d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b2cf7ab-4f1e-4bb9-b461-d4b878743168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60db0a2-c102-4fe6-ae72-cd47e4ac328f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50498900-d865-4015-b903-5c3508638873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfe7ad87-ee80-4890-91dc-12953b87988a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b5d62c-ec7a-40a3-9483-52e634f07443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1a3b628-49a0-4c81-90ba-a7073ce50a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e456b3e7-3ea6-43ff-a396-d9d26a56d35d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d448268b-091b-447c-9092-8b393543687f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c16c8e-50ca-4e8e-b35e-8a3b0c6b5613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866929dd-d673-47ef-8fe3-925db9228912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a2ce8cf-575c-407a-9cc5-eb55b9927c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31700094-38c6-457b-9239-56c75dd63b8d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce17ef4d-2d6c-4be2-a20d-77f43c9ef940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d609617-4b31-4242-bc53-900c30c0cb7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7474cd-2d1e-4bd9-a108-eb7c4a426d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4edc8bc-a890-402a-89f0-989a4a38bd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f682dae-1294-49ae-b842-26f3c370807b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521845da-489f-482b-b1ae-31a84fee21dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e638e31-3f76-4e32-b745-e5d0b9df4b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c1cf69-cfe1-4bd6-94ae-9302591ff0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0d1ecce-439e-4e54-b68e-41e2e5560db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c78e932-38cb-4c2d-969d-f0679fa10ef5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ef1285-ac69-4504-a057-e10e35841be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ad0621-9251-4eaf-9e38-a7e996113ad9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb7f5b5-555f-47dc-9d1a-0ae6e47f960f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52bd8f7e-a774-4b75-94a2-02a20698e455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a0ebf3-0e95-4c71-91e0-c3d9854972b0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "661ed8c1-c971-40af-b02e-3464df90f162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c962fc68-8623-4c99-bbad-e0e06c4b750c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3542cc-f855-4097-b085-1e3fa843cd2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91b57e50-213e-46fd-8b4f-a9c5657e33bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303c7724-fc77-4503-a4fc-2d34e8397c7c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1af05b-693a-409b-a354-99313d954f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f06651d-3621-42fa-83ed-56410194a050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e91b3d-47f8-4a7e-86cd-d1d7d17bc126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e473a7b6-26a1-49ec-9463-b250f8af3f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd70c235-c0b1-4d46-b27a-54f0e105e70c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df11ce1f-8202-4dca-8819-8b64e872b7ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f533cd5-4114-446a-9464-f5a0f1fac80e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e69503-4ac2-473a-a04b-674cba628c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df817528-bcfb-4f25-b42e-85663e6646ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5713b7-1bfb-4ea3-91aa-7b02b88795d5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b41ef8-ea02-4764-bbb7-45fbc18596c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "215db23a-5679-4eb5-b945-3891313f34fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9a5535-bca9-4e00-a41e-78392ce47afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b6c2a5-1bfb-4fd2-bef3-78c026452d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9777e7-da95-4096-99fa-18f765142a64",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4294199f-5b3f-4766-be2a-0b3188b9349d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d1fdd3-d250-4c31-9087-214c789a116e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28346ff-9728-4fd3-92f7-55b90ef4a288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e288ed6-1902-4831-81a2-f543ea0eb549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa3ed482-803a-4262-b81c-53e6e42feb2f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c932e19c-6116-416c-84d5-82ac9162013d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d35512a-f4b6-46fb-a796-72ae1e0b756e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3620141f-cbee-41f7-a753-23b175de9dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3d24354-80b9-46e7-b7d3-441dc5998c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9487a221-ed35-4ddf-9854-dc37d51d5a93",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7893973f-fc50-46c9-86e8-7571faae673f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bec241d-64f8-4adb-b9b2-adcdbbaf7264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634c47fb-3d2a-4748-a283-59523da7be56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e310eeaf-2366-4ae7-8f19-83244803df73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47c9000-bae5-4ce7-b003-6b18ce4346c4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef4509c-87e3-4324-a09b-200fcf412656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5466759-fdd0-4cd5-8bd8-f20bcc1c780d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eade2d8c-01ab-414c-afb5-8d215468727c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7bab4cb-91bb-42c3-9e2f-9b269d5a2b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae570af-ec40-4335-8672-d50916b98dbc",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c41c74-c6b2-4817-abf8-cd8617bc4dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c4ae5c9-a944-4e41-a8e1-c75e39fc6430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0535af04-cc49-4e78-8f75-aae563de83bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0755ff84-ce2a-46aa-9897-fcdd28064208"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "85b60740-1279-434b-801f-baad478c9815",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4dcd44b0-7c45-48a4-b24a-379045135229",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb4bc48-9203-4495-80a3-dcbcdc5b8b78",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "06a75c76-b0b2-41ed-b71e-350fb593ca15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "153c9b00-725e-4c27-90af-364516165b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c70588b-32b7-4d6d-9bad-5585b57c1120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0dbc44-f493-4642-8662-2684c50a40b6",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4097735f-3fe2-43ec-9d5f-01f9a9776f8b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "17d2a960-66f3-4988-af51-45bd19d63ceb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69bef17c-43fa-4cc7-8ebf-e4c7dabab918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "302b4273-1446-421e-8d9d-bc96cd2f689b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0de478a5-4c94-4979-9cce-1a712145c13c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb448fba-51cf-4779-81c7-290390242b65"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5bd02e2-6a54-4ca9-b964-ab285f2f87b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17087996-0a28-4366-8ef6-097b7d870de2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "590a59e6-2a40-4846-9611-42267a549a81",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5aceeb90-38ba-4009-b821-1fc17df2952a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cdd7670f-16b5-421a-8c58-da035600c0db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5631f861-d1ba-4d96-ad30-b63c1720ea8e"
            }
          }
        ]
      },
      {
        "id": "5ec0a911-4b9f-48f4-b9b8-fd901b906d5d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0c9976ef-63eb-45f8-949b-b1a89f9af17c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "36373edb-d235-4d58-b6fb-2075e6e06f3d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ed80b81a-3782-41c6-966e-babc4f15615d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906ad936-63c9-47fc-93fd-de38faafdccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "776ea38f-401e-4cfa-8117-a28c2b80c352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fafd224a-064e-4e0c-80a6-93694adad0e1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "916e5eae-ddb7-474c-9bd6-f7fff50d976a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5039829c-4066-47f9-af29-fd211d9eaf9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156ddfa6-c6b7-41ec-bd63-d033c1724395",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0321c863-fee4-4e13-a550-2edb76b22319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2627447c-84b2-4a98-8948-436a7c66d4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e11057d-8cb4-411d-a077-8a13514b564b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c861ac-234c-498e-851c-d83e132afdda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee58af7-8cd9-4e64-9779-3896df38fab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b86396-635d-4d45-92c3-b8662c3e5a47",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd8a1e1-9166-469a-8ea7-ee6bfd48e2db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d588c8b5-c3dd-4373-94bf-efd2fb813276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807b4855-d383-447d-bd9e-540aaff08805",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3bba44b-b14f-4a20-97cd-930beeed5f48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39fe02dc-a405-47be-a9c8-967050ae7d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0758e6d7-f6f0-40cf-a814-e57904f23fc6",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b699d93-ed91-45a2-8a1a-e1789989a6a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbdb9773-659f-448b-8a72-2169723d54b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f68a04f-8cf8-4242-810d-86af3038652a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d68dcd-d786-4f2b-8ec9-5c0215b48b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68057e08-5478-47b8-96c2-bde221071cf8",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27f224e-d2df-426d-a370-cdeccbc912ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3097aedb-b435-4840-ab03-18150fe300fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a485448-e301-455d-9a0a-7561bd072918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b8eff30-7c08-4142-8760-f60cc8f21123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc4cf64-23e2-4586-99f4-bf81949a0355",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de00d29-7794-4094-a38e-f98b5f27c755",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8fcdc74-08fd-424c-bc42-7d55d920f3cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4193be-5cd3-4574-b92f-d0fce1059ea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e059970-8849-4989-8fb5-cfa5dd0a9507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1252b7b9-cdf8-44d0-b4fa-6be3a7f35925",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5971d12-8d04-43d8-9b8b-d6f32558f53d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1714855-74e7-4afc-a8f4-25e1dfee2b01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab30894-d37e-4b04-845b-c67bd8df57d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "379ec123-fa9d-4ac2-9545-16991d86b297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64691ca3-815f-443f-8c6a-fa20f97507dc",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905ac6e2-463b-46ed-9159-bd505194c679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3099b266-ad3e-4a57-87fc-9a9ac4431751"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e17a8b7-6d2e-45fb-be24-e4f45d96d6b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01dde7d6-f24e-4a49-9c4c-895f681675ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17cd027-b299-4e6a-8307-980ba5df3836",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f653685-9df7-47aa-b4be-8cf020a22a1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a35e3ea2-1109-4231-bc4b-0274cc2fcdd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5b18f6-b11e-4318-8d6e-8f00160c6aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eaff754-9204-4dd1-af86-6818bed7f939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7bd4a2-0e2e-48b3-8ccc-203c70b89c43",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73fe71e3-774b-454d-80ef-2af6a8db4b09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5237a5f-7985-4ba2-ad6a-4a9279666a0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "273e5e53-db2b-41a1-81a1-a3f4c1ea0fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1990ee1d-fd8e-4852-9bae-dbe8818b1cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1673dd20-0dc6-4b4b-a635-2a6c07fcd88e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8cfe33-f6e6-486a-903e-41208d3d3be9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74d73b78-16b1-4891-847a-6634300ef318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a007984-8dc1-4d45-80a7-8a5d52e990bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06c85c90-124b-4ee4-ae7d-770c6972365c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf237a4-02e7-4842-bb96-f533a2f15a42",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21afef4b-2b17-4c75-a54f-0d1084e71eaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a824c53-081f-494c-a645-9f2a4e22def0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd5377f-0a41-4ae0-891e-7d6008406cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bb02d97-2e77-471c-96e6-b73055bc7ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f498959a-566a-4804-b9bf-cc15116d5f77",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0ef717-ae8f-4145-b971-23822589a1ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcd5ec4a-17c4-45e6-8461-f406040b55e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40e3035-f7dd-4876-aaf8-f03eea7b709c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af994c4-00a2-4b47-b428-cc0c68d628a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84299b9b-2497-4e5a-8626-6ef983bc0b0d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b7697e-5446-4c62-b953-15b84316985a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "260197af-e87a-4fe1-89f4-1d697a7b48e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59258f4c-72b8-4a6c-a11d-cfae0d8f87f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "484bc255-b918-4a2a-83dc-f558869f8d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e325371-e7d0-406b-a310-4d62aef7081b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e25aee-387d-4df5-91f6-65cfe36eff22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95fed76e-77b6-46c7-ac31-9ab913af9ac5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f11781-fd6b-4b3b-850d-00a3c79b301d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ec14af-aa21-4ead-83a0-a27e3c399930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c25697-c776-402f-b311-7d3a42135935",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979a2809-3f81-4af7-8fae-962f244c78ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19391119-d68e-4ffd-9a60-56114c03f866"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12fb177-9338-46af-951c-086fccfb0660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60276412-b481-4785-8478-d0f9bb2beb02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d646a69-2d26-45b9-a66a-b0a238011f5c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac4f611-e419-4be5-8f2e-ba3b7121c6bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9cfcf78-3b8d-4bb0-9e5f-b02b2a41131d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e833c902-126a-4b7d-8227-410b038e2d5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff86f014-ec9e-4e6f-ad9a-f8f8f2a61cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01090d54-7d6d-41bc-92f8-90d3430694be",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e81239e5-8f9c-4e44-afc0-2b678c35e611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "643d2504-590f-4012-a618-ff72cf191c96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d6eea0-0f83-4be6-bc3a-0291afea43f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "781a3e55-d3a5-4218-844d-3649d99fc2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92cf547-3654-424f-b59a-776351ad3b88",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55a4cd8-9670-409b-9a80-ae03e36470d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc1c4982-7bbc-4674-807d-2ccee4361863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b513c6-9a02-4793-a449-72523ab7c90d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "853b7ce5-7af5-4a0c-9db9-53866708bbd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2f6013-facc-4cef-9c2b-104e8f401416",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de87d9b-e09d-4748-88ca-572c77252614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e89610f-97bb-4052-958c-681bb7d4c31c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c1484b-66f2-4e34-8dbc-99a3d2b70fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6918f711-4a00-4b4d-a899-0e9eb378f7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7626e3-cf73-40b3-8e36-69e2c0b282b3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc4e56c-9efa-4e44-97d7-e68be1f96711",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acb53754-dca9-4e0f-a30f-ce781b69a836"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93adc8f7-15f7-4573-82fd-2f00e801397d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a05192a-cf09-4962-902b-4b54e57d42c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b8e267-9712-4c42-87ab-6441c44e9758",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6469f6-f294-47a0-bf11-50a48c9affa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6a1a027-e6bb-4769-9c52-da3619217c5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8cf0ad-0831-4cbe-8882-d09700e4eb28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "899202cb-c4e7-4e92-bb3a-2d6c3f61bd32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfe3903-987f-4432-bea5-134b5e96cfb3",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb33e90-0c89-45de-8cde-f950b1b0a4ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "868f0171-cf1d-4241-b3ec-03c53852bf26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7ae199-2764-43ab-a660-9518f83b3ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e837d8b0-fdcc-43a5-8f37-b2d151a13b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40911c94-9e8d-4a9f-8d6b-52e28024fa51",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b52b3656-f7b0-4f3e-ba2d-f633d96b716f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5320853-7732-40a3-818f-7f489818f1cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b11d2072-3878-4a32-8554-3a1123ab5f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3552dcd1-1cd0-4afd-96bd-b928c025119d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8b863d-ac57-4b83-83ed-92415b0f9151",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "823e5b08-6dc0-48d4-bb1b-32af440ad61c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1816c03e-33cf-4455-a807-285046477f82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c105905-a047-40bd-aa7c-efc6e31c68c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65ba7944-aa82-4482-883a-34735746d610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26778eb-7e58-4e07-b0bd-2a5caa7abbb2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b6f75d-9dca-46a0-9fbe-ff356d79beb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "395d72d7-b589-490e-9fc5-f103e42a4dca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0685732-d0de-4f6a-94a7-27b04c0e6ccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c3bedc0-653b-45eb-8acd-3d76116b1cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d536aa4b-e1c1-499d-bf18-0143f494e733",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e327fed-5cf8-4e6d-9971-3c3e747c2306",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efcdd4e5-9fa7-461d-8098-b900ad9983a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e679479a-0b0e-4a16-a54c-179cefa7d67a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9bfaa8e-4bf3-49e3-9683-8598845d819c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61de801-d9b8-41a7-ad92-37e75b61d877",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff1b4a9-a26d-4b69-a68e-553e156a7358",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5fbdef3-6125-4f38-921c-3ce14bdf8aaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f0c7e2-f0eb-48da-910f-60099c5b35b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe85cc02-4435-49c3-b97c-59de42ffe9d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b6748c-92e5-4988-a278-d98aa514f143",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49d3ade-7d77-4899-a544-eae57400d85a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eeb7e1ca-9346-4277-8d8e-4cadbeb5ec8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77422c6e-ca8c-4a43-9641-9c56dd54499f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c585a2a9-62cb-4f58-a4eb-73cf5b0c8b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b013266-adbe-4991-8684-867f04aedb2f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67add2ed-1b53-41cf-9a0f-d9afb36ba24e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e55e3ce6-aaf1-40a9-8ff3-b61ae093052a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88915263-18a7-401f-9429-5170c5acbebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c65fae05-f47b-4a9f-9fb8-80b8b3926e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f60924ee-305e-4e26-8142-f72030ecf2d9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08b4454-4f27-4b97-8fb2-b8cd52e97fe5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7e007bf-4426-43c1-92d9-cbbdb585f5cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2d02e0-3f29-4e07-bfe8-0feae5829d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3deefe1-b98e-44d9-a70a-d44fe8159f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d327f5e5-b9eb-4ad3-b737-a523f3b5a7db",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad3fe86-4543-4d80-a05d-a10b871a5e04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa46b04-88d7-4f1c-84f6-17ae26a44d65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd790da-df96-45e1-8234-b3f67ee836ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77af5677-17b5-4140-9c3c-6cacb1cde23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b9af254-8f0b-4733-8aec-56457a5b8867",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af527b7-1e93-4c92-b80d-df5b383f4d30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd577129-e1d7-41b7-a9ff-d12f8565ad40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cbd965a-b35b-4637-90eb-366b13df9be2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "069407d0-6db6-443b-9f92-073f06327eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecea5ab6-c4c4-457b-82b9-ffd447b1b089",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf33bcb-47ec-48ac-a460-f0e2233227ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b03012d-038f-4489-8d5c-caf457c8dd9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdbf063b-d701-4a61-a9da-bad2b881686d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ebd060-c23f-4650-9458-0dbc66164fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca89b13-9e14-4b0d-a497-a46fe87b1cb1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09f855b-6e87-4fa1-8036-5ce2fb236171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed71e2fa-8186-48d9-8330-fbadb7e72f76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d7239d-3d80-4e8c-99e1-643c4aea54e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a87b2442-8e23-4578-802d-72c2cb107ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea54dc1-723e-4d0b-8912-a43359fcce63",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09020a19-1cbb-4740-beae-2f32edb0612d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8e24e59-9e11-48d2-bbcb-3f665d963941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfc9044-cfef-4a99-b781-e73f39a1f19c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b076a5af-5332-4172-af86-57dcf579ffde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a18d72-6a0b-453b-909f-d74fc3ff3cc0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01343ae-f670-4b13-8c43-d263d511b312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3abaee70-b29a-49f8-894a-57a555960e0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "676b7a45-62ba-4de1-a07c-e8982764a355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6f42061-7e8d-491a-aac4-2730e1fe8ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9960d8ad-e297-4f8c-b1ff-b3910fbbcb9b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3b20ce-2424-49b2-ba8a-814712f2dfcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f29a4f64-686a-4ccd-a958-dbdbf586f895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "237bc8c7-fff1-4aa2-bd34-91c7139edbef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "276c4045-0636-41e2-886e-65086dbaf5ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6a2d10-7ac4-45bb-b5e8-dee3c6003559",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2fb745-ec62-42e3-86e8-5be482884ba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9ee7f60-908a-4c9e-8590-5a0524269881"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f142f4-dadb-404d-aaa0-94178cf3b13b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9603f768-d3b3-4b2c-99ff-3012a556fe17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55ffec5-35c8-4dd8-aca1-547a11fcde80",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "463ac586-dafe-43f1-b17d-01252a97a74c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "800d4169-2f27-459f-bf39-46b5b0421f55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5007c670-5907-43a6-af02-98f658ea1793",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32cd764a-e0ee-4793-9fac-ed2ec89a94cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0ea465-0551-4d9f-9cca-7026f4dcf207",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29e29b8-1e8e-4672-82a4-6888da79ea3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77aeb428-82b5-48bf-a2c0-bf7b8bc129ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af8948c-104f-4e81-82b2-c14c4773b15d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "112629ce-8552-4aa5-908b-af4b90799da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53869c9f-5b1a-4ddc-b0a7-4e1465ec6abc",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d85302-325e-480f-b984-0e642b7af35f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b98b7b2-a4c1-47ab-ac19-30b73de26cab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5203244e-827b-469a-92da-b78511f2ee41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36b1076f-6690-4bfa-b3ea-5489e2e53ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5350c2-050a-45be-904b-08ece1ab063d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56629382-8b9f-4330-a582-a77bf9b5f442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c62199f5-1eb8-4322-8093-1ef40bdda088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58e0891-aff9-406e-b672-7ab9c861375e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1630e93d-f25a-4c00-b451-9230a9f599b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf6c652-788c-4fbe-a8b9-ae8ca1293715",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b57d0ce-0e95-41bd-bab6-198083ffd934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d772e523-0223-45fe-be2a-d867716c39ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d3efa5-d620-4062-bff8-54d1dd20bfcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adbfce4b-9654-4130-af60-54b1ff8f8715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db582098-c29b-477b-bb02-5e563c7f1f54",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8642bb1f-81f7-4289-9f10-ebe5ec5b2dba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "501e47cb-292a-4d3a-86ab-4682f3ee9cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f7871a-3e22-4398-9132-98b171f573d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8677df81-20f8-4fdd-8e61-0a48d539512c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67dbb9f-9d4b-4587-91e8-04258b5f8152",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f83faa1-36d4-4ea3-b3fa-1d9bd9955fb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "780f968e-db47-4bf0-bad3-62b11648577f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2d20ea-7d20-4e87-9e62-a1293c58cbad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca8fc7c6-3b60-42f3-8b69-7ab016e9780b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aed7891-437f-4cad-9b00-3ce3fee6a8a0",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e17f88-8dc3-4037-83a4-9f3d08188e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b57ad2be-ca0d-4e59-9a2a-0156863ab7c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "133be316-25e9-4652-b4a9-4adc9bbf4399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdb09deb-db0c-4340-a100-60a660819128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba20baa1-3b5f-42e2-9b1e-8943230229c9",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be86709-23c6-4ad1-80fd-3cafe282c6ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e5d2193-527c-4266-bc70-6953b291e273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33adb671-c9b2-4ae3-b37d-75b6bd99d2d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cef4ea8-42c3-4910-9feb-eedc9a011e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524567a3-721d-4a0d-bf25-270c0a858c2f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003c6912-d822-4ee8-9175-6bb1f43277d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ca6a289-5080-402a-94cd-c4ad2d2f58d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73439a25-7812-45e7-8625-754142da50de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16726bb8-87df-45dd-b2d1-21e529613b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37218cc1-1618-4cd8-9464-65b6486a5a51",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32fc32b2-cb26-488c-99f1-f2963c609ed0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1943f2b-c2fd-4d6a-8797-1ecd2f6a0267"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83581fe4-dc48-4e80-8600-9cd3e8327a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51f8aaa-6e0b-48e2-b169-dea88db6b2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e52186c-1c7a-4d3b-ae95-b8ddab14dec8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a964a85a-8bbf-498e-970e-82a556330799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0edf0e9e-dab2-4af9-a105-7235f89e9f9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf6d255-4271-405c-b4ce-88ebb03784e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65dc7fe1-dfc5-4b9b-bdbd-0e1a4c853ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b887c61-b2db-4af1-b6c8-4ed6f5f5aa73",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32743924-b5df-4a51-a453-6eb369f42893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87b2adcc-8980-445b-b320-82260e9c2996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b92b88-0dce-43e3-89d3-78ce98eaed2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1976955d-6d01-4212-b20e-37ef4493c891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e069e41-fc8d-44cc-ac7d-bb0750aede76",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "017a47ce-d0bf-49f7-ab7a-88dfe707a0b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98035304-7733-410a-aad0-02a223ca175e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1c200f-c949-45b8-bfbc-99098a2a7e89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6d982fb-a0e7-40c5-b9c4-0a70321fc084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717f3dda-17fa-4259-8789-8b33b20ee5b2",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08456494-3b22-4619-a1f6-3244deff1f7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9fe5026-f01b-4bca-8ba3-b46d1f02575a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "698a8700-ee7e-4f31-a8e0-28df1dd9266e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a3a7546-7e62-43f6-8f28-fda87570a489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8156a1b8-254f-4a18-b115-2e85ab310118",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05c384f-837e-4d7a-a81d-e187433443d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2230765c-b7dc-43fe-995e-651be8874b6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb22abc8-8068-4b90-9d8e-12c634f31c2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a34bc4-18e0-41fa-ab28-0b48feacf1cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd53d41-3685-45d3-8ea1-9468ddf7d95a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34aeb901-d2bb-4172-9a7e-f61a4f8fd5d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56c79073-bf32-4dda-929f-fb955caa5301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a20e6f-a08d-4842-8477-883f8325dd43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3a90361-d544-40fb-bb48-a7e2e7ea63ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8936df63-b67e-4649-8aaa-9bd87aac2cc2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1ce39a-e72f-4d7e-8d36-b22d8d0a23d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5313123-a3a0-49e2-81f7-58eebfe2198b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c8b6eb-04bf-4468-a1e8-cb9e0eff154b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a28be5e1-cabf-4b81-8a0e-3629fc810820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1961c8-e144-4b5f-9c57-b774b784709a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5085f14b-99dd-45be-b7e7-0467f10fd5ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "324b326e-0fcf-4b14-8f7f-42b6a699b696"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d55122-bb64-4735-b4ba-ad200f9ec31c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ea57d5b-bed0-4e1c-9d18-382ad35350d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79fad6e-1068-408f-bc0c-1fc933542d00",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59092de2-dc5e-443e-a5ef-7300b89a6ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e713f1-74b9-4cba-b6a5-29317cabf919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0c2f6b-5c14-49ef-8edb-478e61015451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a70d9ac-7cca-4930-b29c-4f3a0350e5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71980ef9-32c5-45fb-8a5d-5ac4310fa751",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b20884-2865-4bde-95e6-227639b3a8ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b474918a-229d-422d-b039-49e7e173bd06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2a1db3-a11e-4441-9c5d-553c65be7e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fcc340f-ba66-4c10-ae6a-c595c7a46919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e69154d-2e70-4510-853e-968f9e012aef",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9bc91a-f306-4cdf-9f23-61e014e2e56b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be00f7e3-3047-40e0-a075-b00744db99ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7a29f6-5d35-412f-bf84-89e48dacf0b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d149e52-9da2-4268-813b-c2f716767cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc343665-4c02-4f5c-83e4-f8db5a83c4fd",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad83a6c4-3e59-448b-afbd-395429398401",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f8178bb-ce03-43dd-85e4-fb756b696a4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce67cbfc-e98a-44d5-89c9-77d29b4e4c58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98fdf56e-f607-4661-91e8-eedd4499fcdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5b87d0-63f0-4c1a-b6a3-9388ea8d97ff",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7fbfbe-e762-4bed-b21e-aef729dad1b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2469908b-9a89-4f3c-b2cc-38d8432379ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8cc310-27c6-4da2-bdae-372d7abe973a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fadd575c-77af-40ae-aa77-04e4fd14390f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d407e27-8eb8-4ae2-9c1d-290d9638eb55",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3754df-e194-4a4e-843b-522a3bb2cf20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3e3155c-bd97-4df5-b5fd-9b07efe4eed4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39acf936-37c6-4d12-bf99-4d5438cf4ec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf47e11-0010-42ff-bbb9-80ce2c24d0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33719d0-1d61-480e-8735-dc71c81ef1a7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9214041-b600-4930-b3c2-0de857dc9041",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22cf1abd-4704-44e7-8280-dedf538ab918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7729bf0-2423-4fc0-93dd-8e835ce3cc0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81a451d6-eac8-4d1b-9a4c-28847c804c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee7c717e-f99b-4f69-9a41-33833252939d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a43c076d-9d8e-4b47-8e7d-d44b76285aba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f094ad04-1426-4aac-b29c-0b2268d35eee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e412b55-2595-4795-bf3b-5254e7b54fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7af4ca25-5d2e-495d-846d-9c0ab0a9c79a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c0b157-5e6a-4c56-8f96-c0247a1c52cb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f39686-3bbc-4d7a-9ee9-4f974a5540a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b32f64f8-c617-42f5-9763-3917799cb08c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e7c08b-db4c-443d-8801-77f218757625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58313b4f-a34e-4ee2-83a3-069865e69489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5232bf2f-38b6-444c-8e08-af8df97bb298",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750d0687-57e0-44e9-b37e-748a68775314",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8c31caa-f3c8-444d-adb0-52b435f30443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f800a2a-1c36-441b-93b4-481bfee3f350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acd48e48-fc3e-4707-9f4d-d8e1c3863318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70929625-7c5b-44a6-949b-493a28b02268",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b4eb7ef-ac5f-4bc3-bc8d-c33f068a40a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cec1741c-550b-4c6e-b782-155ccac53ba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2abb6fc-9e81-401f-9b0a-2f61230d12cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f707e6-fc7a-4879-bdfb-7611ec366493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64fbed77-df6a-453d-b48f-15598992f5c5",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c45fe2b-d2c0-4b92-be0b-3b040d802222",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e023d57-960c-4b13-aa4c-d9e157f0b007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aafecfa-a808-48a8-90a8-9043a67036f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88249bd2-a36c-4260-a3d2-99c391682bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d730136-8458-451a-820f-dab2fca316b5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101f1a01-a358-4577-9675-875c2e7e05dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05e008d0-9bfc-44e8-93f5-0e17962280d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7c8524-d40d-49b4-b613-572374761a9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa419c1-b154-4bc8-9e0a-8f60405cfb6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2332415b-fd92-4702-b2ce-84c487392c56",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b95a45-ebdd-4f29-a186-4c3301133bfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1325550-615d-43e7-a69f-15c404b98fe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e173afaa-c91b-41d9-8f29-7027fe4fe999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee52c5d-1ec5-4bbd-b9b3-cd991f1dd074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31307496-435e-4984-a034-4525d88bc597",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0db886-18a7-487c-8b43-21018a4682cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fc5d831-95da-4dd0-a251-59a12daaec70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08678009-674c-4ae8-bd5b-9139f24eed79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5653cd68-f764-425d-8700-b9a86090e268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a9c0456-dbb0-45b5-a7b6-ebb3effd2e82",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec5c4c2-7504-4d34-ab05-3957e3b7c858",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce9b7f7a-0090-426b-8b64-d82a66417a38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9ae6d0-01c4-48be-841a-784334e90cf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e373998-c4e2-467a-89b4-14ab89bb9efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476d451a-c0d8-44cf-9a9a-2a8abd777a9d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da43cd31-ca1a-4ad7-bc60-73be1a818460",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06503f3c-cd65-49ef-bc06-a3d1c0be8fa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "815584e0-920b-4cc6-982f-e6a00871a32a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e560ac-d764-46d1-ab09-5efaf6c2b5d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996798fe-5a11-47f8-96fb-150e14e312d8",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d661315c-5f1f-4afc-83a1-f24e866b5755",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f755e988-1cef-47aa-a254-d9dd525d2990"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5702a7-6277-4186-a35c-55da7e6dd4d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07efb57e-97b4-4db9-a59f-0b92f5349d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02bacfd-ec62-4000-920d-af68611aff6a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c276e6e7-0441-48dd-adb0-112766f49f27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eb72f46-53dc-4437-ba7f-1246cbe29388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e93a7e-2284-4595-849f-81840fdfbb6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad09aa5-a691-474d-a0cf-c1f2d19ea25b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a07c46af-504a-4dfd-b2da-15584ef76ccc",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d38db35-1a98-4c25-b4ab-c6d70cc27ae1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d83acbec-3697-46c5-bd41-71098bf35ed3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4d2c3d-75c7-475c-89a8-cc615d12bb7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d58abed-aba2-447c-93dd-cf1b915e16bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab6b837-e172-4e0c-9ab2-60566c19c5a1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2cda494-5062-4535-aed6-4d51e512b93f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b63c6f32-4867-4f89-a2c9-54cbece8bf97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c58ce1-6c46-4d28-a02c-97ff91005f66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71e95d39-7724-4528-ac63-d3e4117fa6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f7d0d8-b33d-4e51-b461-978835063eb3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e07cde-cf81-46a3-9208-3c4702fa4395",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f8a1a4a-c425-4fe6-8023-0c278fa8c192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c33c2b-933e-4ac7-aaf1-536f99ff0600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dfddcf9-94b2-4452-a701-95ab2279f5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ab4ed5-6df3-46fc-ae64-843b9b5993c8",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbfddf6-f5e0-4b58-9e59-dcd00a946bed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f25d53a-130d-422b-8f78-5e6bc21df687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "944837e1-9fdf-4f7f-b803-ca24e32a0a2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d80b3f13-24f8-41c6-a9a5-eaa3022cae89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bab28cc-4063-46ba-9b6a-c2f69c2d93cc",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ebeaf6-3bcd-411d-9ffe-d264ed46aa6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3350c29d-cae7-4369-b942-d284f55b8909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1c3b04-6f1b-40ac-b046-4d31f47ae6d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7210d7e8-434d-4a49-abe0-874ad5b9a72a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d3c8bd-591f-418b-b548-467725de6ad3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4896c90-596f-4ea8-ae32-b83126d19acc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f21e46e-63ea-4349-8f57-d9ac206ef638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1323973e-b214-4142-b351-8ef6d999bab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a7ecfce-d158-40b1-b56f-423dbe605337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1894c94-cc84-4af4-8a0e-35227f345bc6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc628f6d-f7b4-4b05-bec4-9abefef5c9cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "473b9cad-f06b-4638-b77e-47eb54c3d67a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50f534a-aa6b-4528-b96d-d473eb8932ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12b1eb59-2dc0-4cc6-8477-0c3fcc841f9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10f205c-1f81-4d7c-a9b0-0be04bf91b45",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98578095-5ed8-40e0-9058-7b0d909e7b11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f76b2b52-817c-4667-b45f-2b4f684b82b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d59054-1dd7-4d3a-a4db-45b1a40fa702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44518408-94fd-4641-9ffb-14b07f24baa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89ed86c-df48-421a-9227-c1cdb0a1a362",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074a7c5d-3856-449c-8324-e814bc1aa984",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "584e19d7-907a-4d19-a886-de813199664c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "960617a7-97e4-4fc8-883e-c20f311a786c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "228da4b9-e653-419a-808a-22d525614304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f889d7-4272-433a-8a6c-544853522c0a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49a3d4c-9490-4d98-bfea-e83ae2225d71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5090379-d15d-48d6-9f03-3af4add72df5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa55a3a3-910b-4594-a3a1-6019d5156233",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1053cc73-692f-4250-b6d1-d69d1ec0bd0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d154838d-c5a5-4399-a22c-6a05700da834",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04fe49b8-27c4-4453-8995-3701cc12fc15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9350e8c5-3bd6-4b1e-a842-089d549a1136"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a28c21-1331-4de6-b673-33eb7ac7b733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad6cfa6-69db-4db2-a001-cc2a6e59af7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c8f572-bf31-4a35-bee8-6fba3d13166b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dfbf454-3cc8-48c7-91ac-e77c6b89d7c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd37f9c1-446e-4242-b1ea-a614c517f55f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a3cbbd-f8d7-4ce0-8f39-250c85d236e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c44c710e-c84a-4440-920c-b0e322a94ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e81235-f743-4f01-81b0-11a25bbc0fdf",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cedcaa55-ffca-42ef-8f78-4b05610b1861",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39193987-fbb1-4f0c-bd80-a6bf7c5d3da9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7829003-38fd-41f5-a5b6-64a13b4dd47d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9150de1e-68f5-4a8d-a2df-eb68da0d47a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf8d7254-4a6d-4bc2-bfd5-cb6d6b31990e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59bff037-8c37-455e-8e60-22f6e7a12e1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cbe693a-1198-4e0d-9668-d7f701a6bb96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8526a549-622d-4424-af21-d3c43eaea405",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72c82008-1df1-4212-b006-66fc2c31f3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4290d86e-6b18-4fe5-9d88-031aeb28afd4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5684fa80-fa08-47b0-9bc4-f91f62bcd9b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9843a93a-20b0-4fa1-bcdb-107191e903fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b179ec08-c948-4621-91ea-647262d3648a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed5afeb-75ea-4a1a-8af9-0c39d51bd56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b7acab-cdea-447e-b57c-b5fdda5375da",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9e17dd-1e99-413d-9b3a-687362b5fef9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cf082d4-0db4-4ce9-9e51-4af5fe626581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "716bb06b-ed74-4e8e-bacd-466857b093c1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2263bb54-3151-4c91-afc2-e645b0543291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47626bfc-f6bc-466b-b56d-aa153abf6fdc",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373fda29-4083-4b9a-b7c0-b0d2ab7482c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8e4e12b-185f-471b-9d34-6a964aaf9b20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf79526-663a-448c-8ecb-83422381d731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba580ddf-1212-46b0-810d-c237118aa1d0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c31749b-09ed-4400-80ec-9bad019f47bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87641aab-7793-41f4-a5a2-7f66ab9b758f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "85016438-7556-4698-8e3b-5ad25521b832",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf02629a-4969-4f57-939d-e8746868a5d6"
                    }
                  }
                ]
              },
              {
                "id": "c6f5af3b-ece2-42f2-9002-f830a856871f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "648ca383-fd6a-490b-be78-29121c1962ed",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca61fa9-b885-4fae-90c9-098e2c6f1db1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f34eeb01-51c1-45bb-8619-c8d72397ad67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53eadb27-cc2c-47bf-9ce1-e3b68487546c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ee50aa7-e110-4281-b80b-8d49e795e02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c4e6a6f-60d4-486c-8b06-b5c1ca189967",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ecd342-9c3d-4546-bc7b-e4cc226d0e31",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "19d3f105-aea6-4890-a659-b4a9f64ac01a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d1fd96-8a48-4589-a0fd-ad44e85d9df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be7bf857-f07e-4067-9f46-ca4768c019df"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5eb4291-4f1a-404d-98fd-0589f5363e0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01c7fc21-62b2-4448-8e5a-aed72a7d9091"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ad1a674-d81e-4ce4-b533-62c1dd21ab33",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bd42d18-570c-452d-9353-1d76a3ec3115"
                    }
                  }
                ]
              },
              {
                "id": "7457db66-05ab-42d1-824d-b77ad1739b52",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "5c2edbe2-63ae-42c5-99b3-58b4d871faf9",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a771d84b-314c-44ce-b7f1-68d4bef8745a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "903d1773-dec7-4407-a4cb-a02707e7e67a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787bf18f-88f6-444e-9350-7a9b18cf2c08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ca1025-74db-44a5-99f8-cc426deb2b7a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7237e1ca-a5c3-45cb-ac44-6954e26efe03",
            "name": "Positive Testing",
            "item": [
              {
                "id": "37d89223-64df-44d5-9c2d-d0a79e783a1f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "147f8075-19de-44b5-ad10-e54c32c158a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "497ff988-e976-4817-95b8-b7f1baa36652"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78f724b2-1432-4de6-810d-10e8ae878c75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c749d09-829c-48e0-a38d-8bc0992be27e"
                    }
                  }
                ]
              },
              {
                "id": "11ed4657-3825-41a5-8eb3-76129694e1f7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a50fee7-a617-43b4-ae36-7c62bcb22500",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "eb504a0c-efec-49c4-9c0e-6372bc4432b2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26b00dd1-51c1-438c-a3c3-55df643f4e87",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9868f8c8-8685-43dd-b29a-6872798ef46f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ebd5334f-7c34-491d-85c9-7919cf84e722",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "51eed74e-ee8a-4d42-98da-3273738c3bf7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1af16659-0819-4231-9bcc-3cf0af2b4220",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "726bca12-fbf9-4504-89a6-d85d1c26c70d"
            }
          }
        ]
      },
      {
        "id": "5c9a8f66-467e-4951-a6bf-5086025758a6",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0eebd7cc-4eb3-494d-b195-c57c5afb35aa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bda92a6d-6a56-4fee-8b77-5b7fa3e1633f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f96669eb-b1ec-4908-897b-5ad21d61880e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f8b74a-d288-4a3b-ade8-ee5a2ab238ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "30eb40b4-0827-4db0-aba8-9158468a5e7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4a4328-7c6d-4824-9867-d47aaa4c3038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "770fefee-f2d8-40e9-a323-cdf3cc81e070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8d993b-9d2f-4641-924e-45cfbb1ea6e6",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0ba2e6-9853-4469-9490-90f385f2ae42",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3ed53cc7-79b7-44cf-a2a7-d572755eba97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d327e08-36d8-432a-8488-b42167aa6e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5721b255-e44d-43c1-8243-82083376374b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae0141e5-c070-4519-a2eb-2d4f2fd377e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b95157b-3deb-45bf-a819-9292c4c9b5e6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a31e58bc-c8e0-4040-90d4-94c41527faa8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e855f111-1627-4452-b406-0ef0850fc010"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c9f42cbe-df9c-4582-ad24-5e0cf67585af",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "85b83584-a275-4265-9af0-211d460bc960"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4baa25d9-4f0a-4427-b8de-f7611300e596",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0acc71a9-19a2-4cd7-ac23-ffde9973c2b8"
            }
          }
        ]
      },
      {
        "id": "ddfa5e52-37ba-479f-a332-cb7b66d5dabe",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9eebe322-a922-43f1-ba43-ee6ef00204fe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4dbe8a73-3665-4ae1-8ace-f0b602ba28e8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a8480620-ec73-4d88-828e-3f96fbf6305d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0167300-ffb6-468b-b4e0-bb1b56281943",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55433039-ef5b-49a0-8d9c-d7f6e2b6fae4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2816afbb-a480-4833-a3ca-1e3d6162b73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5da4a671-6858-45d0-ac8e-cbb9bc0df78e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d1c4cb0-df79-44ce-b36f-6cc34dc5f1b2",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5846cf84-be56-47b7-91fe-8ed0fce381a9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "50a8c4f2-483b-4a59-a14b-200c0c4fa2db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df6188fb-f71b-444b-b78e-d5c64eeb52e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f39c0d0e-dc9f-4d49-ba3f-aa96b88e545e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e73c2103-8b55-440d-8397-a05725f03023",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2dd82e8e-ab7d-4c31-9bf7-e952b16fc6fd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ccdda2a-9614-4bef-ade5-b201e9d1f454",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af727efe-2fb2-4f47-8144-e7cced0f4eae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "515891d1-d0f2-4f13-8273-3eeafb8dc321",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f04e406f-a481-4805-b4d2-2e9b8b01a4be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20a2beb0-c346-481f-a3be-6413718f7530",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "12cb1297-e3e8-474b-a19c-92b2441eefc2"
            }
          }
        ]
      },
      {
        "id": "1ecceda6-d491-4082-8bd9-fbe06bcfd173",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "865bd8e9-1e0e-40a5-8d29-776fc43eb070",
            "name": "Negative Testing",
            "item": [
              {
                "id": "305adfac-f917-47cd-acae-b14be5984126",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8af97d28-733d-4e95-9702-91c73a137c3b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "029db9d4-bd16-436b-9eed-00159f348fad",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5466cf4e-328c-4592-96ef-f7c9d44a6c97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81dff435-bac7-4582-8806-b946e6dfad0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b616a780-69a4-482f-a7f3-4d95793fcd28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1470a804-3d78-4098-8117-2ba005ad9e83",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5378fb-8bf1-4421-a8d3-732cafa5bab3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a2342e91-6546-49b7-811e-b76af53bb193"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1543afc9-57f4-4465-91c8-71e6a752afb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8fd38a17-8469-401a-b247-b20b63f1e3c3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c56a1e8-0797-481a-95f3-77eb26c43412",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c11c1bb-09fb-4652-85e1-43ef9e3bee4f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef7e1477-ede1-46c3-97f5-6a6ee3e62997",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0dcdd402-cc72-4fdc-ba50-1dddd83f3c3e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7105daaf-ef43-49cb-884e-25e4653c9702",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d7e4a9ae-ca8e-41dc-9d48-493e6d76ca26"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d6b999b-0eda-4e0f-9eee-06f1485e6518",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f681cbc2-f281-492f-aa91-54e13f64ce10"
            }
          }
        ]
      },
      {
        "id": "480bb716-550b-4594-b58d-9e3bb9849266",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8a57b5e4-b971-4309-a73b-0f52f25af732",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e9ed1831-9312-4e15-bd1c-6667a85dbe79",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d0142c9c-3220-4e7b-ba42-9481b090a2e0",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d74790e4-09aa-48ba-8e6d-e80c94b0f471",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7091c331-ba11-4eed-a272-80e5f5b42af3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 401,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 469
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 217.22070652201793,
      "responseMin": 7,
      "responseMax": 10020,
      "responseSd": 1227.3824867067974,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1678408908302,
      "completed": 1678409004233
    },
    "executions": [
      {
        "id": "f72da84e-501c-4a25-a42d-852a8e561b3c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "83c5de01-578c-41b0-bdcd-6ff1d151059e",
          "httpRequestId": "410206b2-e53c-47b5-916f-3029092afec2"
        },
        "item": {
          "id": "f72da84e-501c-4a25-a42d-852a8e561b3c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b6453242-8e68-4c75-a9ab-c9a3172b232c",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 0
        }
      },
      {
        "id": "179bdb9e-5749-4165-8293-8ce1a9a79d87",
        "cursor": {
          "ref": "92a972b3-55fb-43a4-94b8-1bc5f8d8ebcb",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "542e8156-db17-491c-8484-331b18fe2f06"
        },
        "item": {
          "id": "179bdb9e-5749-4165-8293-8ce1a9a79d87",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "40751638-cbb6-462d-a6ea-312a670c8e60",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "1f49ff54-9911-4293-8103-957d21a2f49e",
        "cursor": {
          "ref": "c269d968-5652-41a2-a1a2-08003b245513",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "93b267ea-1cb2-4584-9a6f-de0357c11b75"
        },
        "item": {
          "id": "1f49ff54-9911-4293-8103-957d21a2f49e",
          "name": "did_json"
        },
        "response": {
          "id": "61785e46-b6df-4527-809a-4be771bc1072",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1dbd41e-2d1d-4b10-ba7b-4848409c3ad8",
        "cursor": {
          "ref": "bd652f83-82d2-49d8-b369-005c6dd10224",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "821e87a6-7937-4ffc-ab2e-7a2b2ff988fb"
        },
        "item": {
          "id": "d1dbd41e-2d1d-4b10-ba7b-4848409c3ad8",
          "name": "did:invalid"
        },
        "response": {
          "id": "61ea8136-2ee9-433e-b1f3-b735f69774d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1dbd41e-2d1d-4b10-ba7b-4848409c3ad8",
        "cursor": {
          "ref": "bd652f83-82d2-49d8-b369-005c6dd10224",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "821e87a6-7937-4ffc-ab2e-7a2b2ff988fb"
        },
        "item": {
          "id": "d1dbd41e-2d1d-4b10-ba7b-4848409c3ad8",
          "name": "did:invalid"
        },
        "response": {
          "id": "61ea8136-2ee9-433e-b1f3-b735f69774d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa22b3a0-4174-4a01-b4c8-c335245fadc4",
        "cursor": {
          "ref": "13fbb087-065a-41f5-8683-799feaa070cc",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a4b5d234-d118-4327-bf16-ebaebca973a8"
        },
        "item": {
          "id": "aa22b3a0-4174-4a01-b4c8-c335245fadc4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "30c6034e-549b-4b69-9e0a-0dc6d23d48d2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 325,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6cd955e-302b-4f32-861e-8295674f1a96",
        "cursor": {
          "ref": "90732147-a968-44ab-8ad6-dad27bd0ef76",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bc19bb80-54b9-48a4-9daa-63c7d3a35e23"
        },
        "item": {
          "id": "a6cd955e-302b-4f32-861e-8295674f1a96",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "15c2e52a-45c4-400e-9347-37e17548c249",
          "status": "Not Found",
          "code": 404,
          "responseTime": 33,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204938aa-eba2-441b-b9d7-818cb8d314e2",
        "cursor": {
          "ref": "08a9d195-716a-44fd-a67e-9203932ed00b",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5eb03b2f-6bb5-4110-b605-16b44eb12736"
        },
        "item": {
          "id": "204938aa-eba2-441b-b9d7-818cb8d314e2",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "88642bd9-db96-4460-874e-650e83ae5ca9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce24f13-4a4a-4e26-8b0e-36334f4330c8",
        "cursor": {
          "ref": "224ce804-021c-4aca-90f3-df38aa999652",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a88c81ef-90a6-4a56-9f58-9fe4180ad66f"
        },
        "item": {
          "id": "5ce24f13-4a4a-4e26-8b0e-36334f4330c8",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "26295933-9a06-4508-99bd-ff3050bf4d94",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "5ce24f13-4a4a-4e26-8b0e-36334f4330c8",
        "cursor": {
          "ref": "224ce804-021c-4aca-90f3-df38aa999652",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a88c81ef-90a6-4a56-9f58-9fe4180ad66f"
        },
        "item": {
          "id": "5ce24f13-4a4a-4e26-8b0e-36334f4330c8",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "26295933-9a06-4508-99bd-ff3050bf4d94",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "0888e6cf-0bd0-4f7e-a961-776dc1863782",
        "cursor": {
          "ref": "c57aeff7-4846-4722-9733-ca4b2c05abec",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "605c7a28-f78a-4465-a555-206fd9cfeb93"
        },
        "item": {
          "id": "0888e6cf-0bd0-4f7e-a961-776dc1863782",
          "name": "identifiers"
        },
        "response": {
          "id": "c681c6d4-2051-41ab-91ce-cce9786f0a25",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f3bdbf-22c3-472f-a57c-70b9a117198f",
        "cursor": {
          "ref": "4c68c4f7-5896-42a2-a784-daf71c67cc98",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f1dc58cb-f1b2-4ba5-875b-fbef19568c51"
        },
        "item": {
          "id": "13f3bdbf-22c3-472f-a57c-70b9a117198f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b4de04dd-52ab-433e-9666-3e64c642a2ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "13f3bdbf-22c3-472f-a57c-70b9a117198f",
        "cursor": {
          "ref": "4c68c4f7-5896-42a2-a784-daf71c67cc98",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f1dc58cb-f1b2-4ba5-875b-fbef19568c51"
        },
        "item": {
          "id": "13f3bdbf-22c3-472f-a57c-70b9a117198f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b4de04dd-52ab-433e-9666-3e64c642a2ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "9f7dc3db-8075-4b24-ad5b-de672adf0d73",
        "cursor": {
          "ref": "587335bd-95fb-4374-8bf3-e767e5cb774c",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2812591c-e4c9-4c3f-bd23-b9406194d516"
        },
        "item": {
          "id": "9f7dc3db-8075-4b24-ad5b-de672adf0d73",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8d273d41-d0a8-4e8e-8baf-c15048be24ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "39f995ea-f352-4ae0-917e-12da3f9989a6",
        "cursor": {
          "ref": "df103fa6-8191-4be9-a692-d05da00a2420",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "655add0b-7e7b-45f7-9ec7-2f7f69ef5b7f"
        },
        "item": {
          "id": "39f995ea-f352-4ae0-917e-12da3f9989a6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c8858f36-043f-4797-8b1f-78ec1addd123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "74eea39c-bfb1-4d62-a747-c0b1edd02d7e",
        "cursor": {
          "ref": "f6c1e771-ad18-480b-80e8-1a027d967b6e",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4c0d5628-ca0e-4117-8814-44114beb34c7"
        },
        "item": {
          "id": "74eea39c-bfb1-4d62-a747-c0b1edd02d7e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6a33944c-d2e3-4abe-b6dd-e747703ee03c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "34ef0341-f397-49a0-88d0-70f35b9fc7d0",
        "cursor": {
          "ref": "97dd0444-cdf2-4c9f-8e7a-3ef74d503d44",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d2744397-fa87-483e-bc8c-f9027f76de86"
        },
        "item": {
          "id": "34ef0341-f397-49a0-88d0-70f35b9fc7d0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7e9593d6-959a-4069-ad84-601d4a4f230a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "219059f0-608b-4838-bb91-f4965611a8dd",
        "cursor": {
          "ref": "72145162-27c4-42c0-9789-ee344963de4b",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "49c69e34-f8b0-49a9-b9d9-38306bacaa12"
        },
        "item": {
          "id": "219059f0-608b-4838-bb91-f4965611a8dd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "65feb565-e407-49a3-a805-db694484cccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "65933735-afcc-4635-b26c-c3f803f2810a",
        "cursor": {
          "ref": "a3f08e99-9871-471d-b5f8-1841b33b9838",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1fabf394-9107-411d-a189-113c9b22fa2b"
        },
        "item": {
          "id": "65933735-afcc-4635-b26c-c3f803f2810a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b7d02fab-ac3e-4d29-89ca-58ec7b075e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "009937de-01d7-4972-82d6-950947195138",
        "cursor": {
          "ref": "e2a2aa2f-32e8-4f85-a5ae-59ef7f83b027",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "42b0b2f1-3cfd-48f8-b3ac-546109d8e92b"
        },
        "item": {
          "id": "009937de-01d7-4972-82d6-950947195138",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e4ef7021-e70b-4a4d-a4d7-728f0995aa21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "a05db3ea-5608-45f1-bf65-17d293304c1c",
        "cursor": {
          "ref": "642bc9d1-5002-4849-b4fd-8585d4bf24c5",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "bddeec2a-df74-4d55-b3a1-1d6b09fd8ae1"
        },
        "item": {
          "id": "a05db3ea-5608-45f1-bf65-17d293304c1c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "467d4ad9-d1f7-4613-84d4-92b2ad797400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "899ba465-4bbd-4aeb-8bc9-f4cc7d5d2c0e",
        "cursor": {
          "ref": "fc6c352f-c819-4c77-abbf-e2d5f84f1f96",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2e70b8a5-bae1-48db-9f29-479d0fdc14bd"
        },
        "item": {
          "id": "899ba465-4bbd-4aeb-8bc9-f4cc7d5d2c0e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b54be765-020e-45e6-8cd3-debfb703077c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "756e7392-bf52-4708-b8e8-3774e7d59266",
        "cursor": {
          "ref": "92ff8515-36c2-4ba1-8ac2-147161244a7b",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "17257c3b-2bfc-4e69-87ab-edca5e754903"
        },
        "item": {
          "id": "756e7392-bf52-4708-b8e8-3774e7d59266",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d00b3ae1-0d81-4425-862f-0922cfe1ed9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "8b1399c8-f9f7-44d4-96e4-1e21e959be21",
        "cursor": {
          "ref": "076de194-b103-4ba7-9cd2-1c6d54accb66",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ef82d9fb-d221-471d-a136-11e977f439c7"
        },
        "item": {
          "id": "8b1399c8-f9f7-44d4-96e4-1e21e959be21",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "cb0771f3-6e0c-4043-8b30-69eefb9bfa8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "a343ebc8-a77e-440a-ba36-13788a73ac7d",
        "cursor": {
          "ref": "2f1ed407-43b2-4678-93c4-b442cc2af55a",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9d6d738c-4890-4e8d-929c-a7727eee15a1"
        },
        "item": {
          "id": "a343ebc8-a77e-440a-ba36-13788a73ac7d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a43f5956-f3fa-4606-adcc-c39c7d0a12a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "4a7cefb1-28b8-42d2-a835-0f7acf2cbd48",
        "cursor": {
          "ref": "3b0d3690-1307-4114-88ee-5d2158fb7f9f",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f295f418-8b18-4aea-9420-082ccfbe919d"
        },
        "item": {
          "id": "4a7cefb1-28b8-42d2-a835-0f7acf2cbd48",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "445c1b7e-348b-46ff-96ec-b01a67c052c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "f0005d88-2135-4a16-a754-23db4dfd3775",
        "cursor": {
          "ref": "2dbad390-3caa-4daa-8b00-2cdb65a72f60",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "072832ba-58bd-4dcb-bf73-0ca15447c2e8"
        },
        "item": {
          "id": "f0005d88-2135-4a16-a754-23db4dfd3775",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3776f889-7961-4483-a968-5573fb767ccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "2449f215-c7f6-42ab-9b30-9f25c23aa8d9",
        "cursor": {
          "ref": "56cc0c55-ae3b-4339-aab7-21917b62ff4a",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "553faa7c-d09f-44f7-a614-eb5441db7b11"
        },
        "item": {
          "id": "2449f215-c7f6-42ab-9b30-9f25c23aa8d9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "faa5f30b-a464-4f4f-b96c-2d501df64685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "8a9afb0c-6d17-4ff8-b6d9-f9befef316b1",
        "cursor": {
          "ref": "c9fc5fa9-10fe-4b57-99bf-4b00eef723d9",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "915cddc2-a170-4776-a5b9-34b034ea21e0"
        },
        "item": {
          "id": "8a9afb0c-6d17-4ff8-b6d9-f9befef316b1",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c049ce29-f6ae-41a8-83d5-1187f0aae46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "bbfbf100-8d93-4934-8b6a-2963820a7db5",
        "cursor": {
          "ref": "e2d98af5-4425-4750-99e3-c88e1ddd1a19",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5945d227-94fa-4dcf-a8b7-20c78c9b6969"
        },
        "item": {
          "id": "bbfbf100-8d93-4934-8b6a-2963820a7db5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1e9a88c5-0cd3-4f8f-9ec4-71237c559edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "87b79c6f-b287-4a5b-985f-3a95af3588ff",
        "cursor": {
          "ref": "8ab7dc98-cace-4ecc-867a-c33375710b93",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d4f3b5b5-db9f-46d1-8f2f-e3f3fa2192af"
        },
        "item": {
          "id": "87b79c6f-b287-4a5b-985f-3a95af3588ff",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "099e933c-de28-452e-89b5-721ab89b0ab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "04583bef-f0d9-403b-9c16-084082ef5ae0",
        "cursor": {
          "ref": "6b7948a4-7423-45d1-89c0-398fd8c86192",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0d135705-b4f6-4958-9f54-3bc85220ba3a"
        },
        "item": {
          "id": "04583bef-f0d9-403b-9c16-084082ef5ae0",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5281e632-f576-432e-81fe-2777d38c924c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "20285472-5116-4db0-84d2-0b7464ee26a0",
        "cursor": {
          "ref": "2fd3bc33-ff69-4f7a-8697-aa49efe50791",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1a10b1ac-85ac-4376-a2e2-5e89496a94d5"
        },
        "item": {
          "id": "20285472-5116-4db0-84d2-0b7464ee26a0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b75ccbc3-059d-4ba9-b6f2-c728281587bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "d6127b1d-bc3a-4b9d-a0ad-433a37850271",
        "cursor": {
          "ref": "79b862ab-7728-4fa8-b22d-7ed522fa82df",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "eab291c9-a900-4781-84bc-b488929aacd4"
        },
        "item": {
          "id": "d6127b1d-bc3a-4b9d-a0ad-433a37850271",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "fb965d98-03e0-41d3-95d1-3dcbaf4cb92d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "0c6e9174-5785-45a8-92a3-de2b8df9b900",
        "cursor": {
          "ref": "e2ee6d4b-65a8-4eaf-97eb-2fb6b8b39211",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "96ef1378-ac09-4df2-8255-8d781254365a"
        },
        "item": {
          "id": "0c6e9174-5785-45a8-92a3-de2b8df9b900",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a1fca745-44b5-4639-a70f-fb7832f5e274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "29b19701-c0f5-4d82-865f-b44a6db47e9d",
        "cursor": {
          "ref": "9c8bdadf-9af2-422d-8f62-e5fedd51950e",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "94b37215-a933-45d1-8f73-3a4903ba94ed"
        },
        "item": {
          "id": "29b19701-c0f5-4d82-865f-b44a6db47e9d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "18de11c5-a784-498a-87de-e4540c4249df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "119803d5-9acc-486b-8e71-e6fa372a7884",
        "cursor": {
          "ref": "d484ebab-c0b2-4d8d-b00e-07daa5427a39",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "eb437da4-af14-447e-81f8-5f3b240e63d9"
        },
        "item": {
          "id": "119803d5-9acc-486b-8e71-e6fa372a7884",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d1bb13c3-a91c-44ab-980b-788daec4d554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5173,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "5c412c4d-d900-4313-acda-e5433644c29f",
        "cursor": {
          "ref": "2466572d-5199-4326-aa5a-d1a2293fe27f",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "af3edf84-9a11-4bd1-afab-f688cf6ea907"
        },
        "item": {
          "id": "5c412c4d-d900-4313-acda-e5433644c29f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0b033f32-1295-4e78-b06d-c4127b48163f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4891,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "c0da7a3b-29fc-4e92-9b30-b86b78faf73f",
        "cursor": {
          "ref": "cadc5a86-3632-417b-a289-fbc01d27ed73",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0dfe7569-c3c1-40ea-8b75-b360c972b560"
        },
        "item": {
          "id": "c0da7a3b-29fc-4e92-9b30-b86b78faf73f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2bd9184f-b2cc-4f77-905f-ff7e427309a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4012,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "8cef4cb3-00fe-4793-aa84-3c39d4fb55a4",
        "cursor": {
          "ref": "edf3e877-5961-4255-b90b-a5458fc47cd2",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "de683cd6-dd81-4ac8-885a-c98eaad67ff4"
        },
        "item": {
          "id": "8cef4cb3-00fe-4793-aa84-3c39d4fb55a4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "fd375d3b-c8fe-43b7-a0f4-e0b4ec7af6af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3359,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "1d0644cc-372f-48b8-b6f4-03e9e4e79d02",
        "cursor": {
          "ref": "4d1bf2a3-148a-49f1-9b8a-da88f6558bb3",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6c72f997-887f-41cd-9e65-381053a429fd"
        },
        "item": {
          "id": "1d0644cc-372f-48b8-b6f4-03e9e4e79d02",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d88330fb-bddd-4c03-a701-4e3bd9ce8d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2564,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "4e8db2f2-f1ca-4854-ba2e-22c422a98048",
        "cursor": {
          "ref": "6e64e713-cd96-4c79-b3b2-9bd668916a06",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f114e36f-d31a-4abc-9d31-ee562e57c7bc"
        },
        "item": {
          "id": "4e8db2f2-f1ca-4854-ba2e-22c422a98048",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "51c37d2c-90bc-4e39-9215-4f12d8bd61ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e2d18035-be11-4edd-83bd-380e9d397002",
        "cursor": {
          "ref": "23e7b793-e62d-4d22-9b55-b96d53ba4143",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "212d41a8-9621-4eba-be97-d13403b3a851"
        },
        "item": {
          "id": "e2d18035-be11-4edd-83bd-380e9d397002",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8018d236-a109-4d26-89ef-3d1e511285aa",
          "status": "Created",
          "code": 201,
          "responseTime": 2581,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "6a1f15a2-5e0b-4831-a084-eab38349aef5",
        "cursor": {
          "ref": "1ca0e7ef-c082-45c3-8eef-f7de0930ae4e",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "27ac9e84-03d3-4476-9377-dc99a7ca1b7c"
        },
        "item": {
          "id": "6a1f15a2-5e0b-4831-a084-eab38349aef5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "67e00e33-8f50-47e2-a5d9-14ad65882958",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 4430,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "58800c0e-7b17-4419-b1de-62005217e4d4",
        "cursor": {
          "ref": "ce4d7ff9-6de9-4372-a280-6d02d51541be",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2d2c5691-1565-4210-b52d-510182e8f129"
        },
        "item": {
          "id": "58800c0e-7b17-4419-b1de-62005217e4d4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b7e75802-e0e2-48de-b716-fa5a5662c73a",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 21,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "341ec4f0-841f-456f-a88b-89f98ebe02d5",
        "cursor": {
          "ref": "0a0b813f-f484-45d0-aeb7-a27fea2a4f17",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8bdfd03a-1163-4a1b-a1c3-66c1d7b1286d"
        },
        "item": {
          "id": "341ec4f0-841f-456f-a88b-89f98ebe02d5",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "52dbd851-16f4-44e9-ae66-f961df6524a0",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "258ec4f1-8fc8-4904-abbd-ff42f2be4631",
        "cursor": {
          "ref": "f7bb3e8e-35f3-48d7-93c9-2e35f407e361",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5856b2a0-e4c0-404f-8d8f-8cd72e96b85c"
        },
        "item": {
          "id": "258ec4f1-8fc8-4904-abbd-ff42f2be4631",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7df31f01-845c-4008-a8d8-c8015c57ce4f",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4469db8d-d151-4448-96ea-6fa9e5b39063",
        "cursor": {
          "ref": "bdd80061-cb97-460e-abec-3b68bbff23df",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "51ec6b0c-5500-41c2-871b-821ef194a156"
        },
        "item": {
          "id": "4469db8d-d151-4448-96ea-6fa9e5b39063",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a7293473-747f-4c18-b64d-09f199b46ae6",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 502",
              "stack": "AssertionError: expected response to have status code 422 but got 502\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5d171fac-32c3-4e2d-aaea-b2bbeb4478f9",
        "cursor": {
          "ref": "5c3dfa7b-39b8-42ae-b691-fc76f9e1ce06",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c90dfe64-7f2b-4cbc-8ccd-f6b6098be1e2"
        },
        "item": {
          "id": "5d171fac-32c3-4e2d-aaea-b2bbeb4478f9",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4b9f12ce-1bb3-4cc1-8a86-e3e1a6a42ac4",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "5e7386b8-5e2b-48b0-81da-bdff5579174e",
        "cursor": {
          "ref": "dfccb97b-1f65-4bda-97ee-ac10d024d08e",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "352ebe1b-244c-47a1-a95f-9448c4aba00f"
        },
        "item": {
          "id": "5e7386b8-5e2b-48b0-81da-bdff5579174e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0d2a0326-64ea-4302-b9c4-7ca6cab9ed4e",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "dec91772-3135-494d-8efa-3052df18700c",
        "cursor": {
          "ref": "76c1482c-b801-4a44-91c6-e28f8b17c4a4",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "74156da5-0a95-407a-bfdd-885c5b1b372d"
        },
        "item": {
          "id": "dec91772-3135-494d-8efa-3052df18700c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "283fc99e-5736-4394-941e-510662f88243",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "947dbebd-52fc-432f-94c4-6b492e26f76b",
        "cursor": {
          "ref": "c7151263-7499-4175-a5db-cf5e0d58566f",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c6510735-4a23-426a-811d-8ad7f3dcbbf4"
        },
        "item": {
          "id": "947dbebd-52fc-432f-94c4-6b492e26f76b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3cdc0799-1e73-49e2-866c-cd4df368f621",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 19,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "73514a9c-0f7f-4612-8c6f-9c2e7723928e",
        "cursor": {
          "ref": "efaa2dac-7cb0-40c7-bc95-8f0d398b6155",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "72a49d5b-1c12-4259-a7a1-5dd9effed8d6"
        },
        "item": {
          "id": "73514a9c-0f7f-4612-8c6f-9c2e7723928e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "29cbce7b-e256-4352-ba23-67f85132ceb6",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "29561de9-6a82-48cf-8f82-86b039dbe966",
        "cursor": {
          "ref": "5fb313ba-6167-401e-b417-b866d867b5d5",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d1f476bb-da72-4b19-b424-556720bdf3db"
        },
        "item": {
          "id": "29561de9-6a82-48cf-8f82-86b039dbe966",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "71c97e49-2472-4e44-8a06-724a218fac7b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "737a1db4-3c3d-4773-9382-850c52de2cf5",
        "cursor": {
          "ref": "5a2d8b46-82c4-4980-aaab-edc550abe8b6",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3e2b8707-ae52-4524-9eaf-671620ea804f"
        },
        "item": {
          "id": "737a1db4-3c3d-4773-9382-850c52de2cf5",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7a802614-2852-4e3b-bd01-7146f74cba1e",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 502",
              "stack": "AssertionError: expected response to have status code 422 but got 502\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "3cc2f862-e5d0-42b5-89c6-af2678ffe6c3",
        "cursor": {
          "ref": "9d7e3668-dd91-47f4-949a-a2470cf6ed88",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5a0ccc5b-85fc-4991-bc86-ba3c4d960e9d"
        },
        "item": {
          "id": "3cc2f862-e5d0-42b5-89c6-af2678ffe6c3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "bd7c2c04-0227-438f-ad19-162b2b0d78b5",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "43b3796b-07ce-4bb9-ad75-ca9afff52ea8",
        "cursor": {
          "ref": "b69cfe1b-3bd9-4a0d-b510-754bf5c1b4dd",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2720ba8b-24c2-4fb3-9362-148729ad33ed"
        },
        "item": {
          "id": "43b3796b-07ce-4bb9-ad75-ca9afff52ea8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2c45283b-3fe4-46c8-84c6-37332047311e",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "4bcb4030-4344-42ff-bd12-7a01b720f1ea",
        "cursor": {
          "ref": "e5567d3e-dd02-4291-8cdf-c2a0ad8ba37d",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3d0f468a-50a2-489e-9910-65548df71913"
        },
        "item": {
          "id": "4bcb4030-4344-42ff-bd12-7a01b720f1ea",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "df842eaa-ae5d-49fc-8821-aeed3f67f489",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 19,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "2f73f69a-d7b3-4e7a-802b-09599ec40a96",
        "cursor": {
          "ref": "3a28381f-8faf-4b62-8d94-a983a28aebff",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "bc090812-64fe-44c7-a01c-b3b3270a4c4d"
        },
        "item": {
          "id": "2f73f69a-d7b3-4e7a-802b-09599ec40a96",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "58735e33-845c-4318-a574-b94e7d31f3b7",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "0c78ade3-fe3d-47bf-a2af-4257a90e692c",
        "cursor": {
          "ref": "7752ed07-3b37-44ce-ada8-afa970a3ad6d",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2f22c04e-f57e-4702-a6d3-fa6dfa010fcd"
        },
        "item": {
          "id": "0c78ade3-fe3d-47bf-a2af-4257a90e692c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ca7cab57-1d73-4da1-87fe-edad00d6cb40",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 19,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "1ff116c8-9105-444c-9aba-5081635006c9",
        "cursor": {
          "ref": "e56e2439-cc9a-4500-b336-aac679611910",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fe7f115f-24e0-46af-818a-008b923bf754"
        },
        "item": {
          "id": "1ff116c8-9105-444c-9aba-5081635006c9",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f5fdc480-ae37-40af-9d54-2eb69d3c16a0",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "2b7d143b-93bb-4e9e-91d4-f8a0ee127b78",
        "cursor": {
          "ref": "610dcf5e-1baa-4cb3-a7e8-76db8b5860fd",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "707093c1-9462-495f-b8c4-662c9e8205cd"
        },
        "item": {
          "id": "2b7d143b-93bb-4e9e-91d4-f8a0ee127b78",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b5a78e98-2c73-4275-ac27-c2054b0694c1",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "da0dc0a2-566b-42f9-904f-797bbdfdb841",
        "cursor": {
          "ref": "79aeed0f-85cb-4855-bf57-14d926a2ac76",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0cf4abdf-8bab-4139-9eb2-e0ac52971e1d"
        },
        "item": {
          "id": "da0dc0a2-566b-42f9-904f-797bbdfdb841",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "524620c9-544b-4a62-a57f-5e7ad2814a6d",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "a8595dd6-9105-40ea-931e-be69a170d0fa",
        "cursor": {
          "ref": "b38f113c-38fb-4b45-b580-af9f43fa2d6e",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "762b36bf-2bff-4694-9a89-16d3c9b9739c"
        },
        "item": {
          "id": "a8595dd6-9105-40ea-931e-be69a170d0fa",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f08214a9-f032-4865-b45a-7273791233d3",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 19,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "278b0463-005f-4745-9687-a8014ce19c9b",
        "cursor": {
          "ref": "9af68594-3d97-41e0-9803-8d9d454f36a8",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "79766289-bd67-4f31-9c3d-fe9457678a31"
        },
        "item": {
          "id": "278b0463-005f-4745-9687-a8014ce19c9b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e6e60bdd-6ef1-40fe-8368-591e4b5edb31",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 19,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "e1ca9012-c973-49e3-9f3d-41f97db2975a",
        "cursor": {
          "ref": "a5f423cf-ed31-46d3-84e1-e8c376a31140",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fe094c0b-21c8-48bb-ac48-b95c7eb3c705"
        },
        "item": {
          "id": "e1ca9012-c973-49e3-9f3d-41f97db2975a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "31a08787-7e54-470b-9411-1a3d3adf399d",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "f94b25ed-5570-480b-9f1b-c34adc7e997c",
        "cursor": {
          "ref": "1f3559b8-e33c-4b10-9802-5e1f83015221",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "30e1206d-08e5-45a6-8981-954191e5d5ae"
        },
        "item": {
          "id": "f94b25ed-5570-480b-9f1b-c34adc7e997c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "53a02a63-c6b8-4068-8fe5-d4f76f7494cf",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "eac50451-e44b-49a6-8980-eaa804bf50d3",
        "cursor": {
          "ref": "6434f0d1-5775-43b1-80c9-cae6d7faf675",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "039dc818-a787-4d70-9c4f-322179db1b25"
        },
        "item": {
          "id": "eac50451-e44b-49a6-8980-eaa804bf50d3",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f0ea788b-ba06-4af4-95d0-efa79d97029c",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "33d6bb5f-dd8b-452b-bf09-7b610d519d4d",
        "cursor": {
          "ref": "cb45146e-528a-40ce-88e8-376917cc318e",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f961be1f-5ed4-4b89-b50f-30a6865b9dbf"
        },
        "item": {
          "id": "33d6bb5f-dd8b-452b-bf09-7b610d519d4d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8e935d40-2aa4-4670-b5a9-eb94615fee15",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "8c153cdb-f3de-40f0-ac63-8cbc978b3344",
        "cursor": {
          "ref": "bdaf0e9d-98db-468a-8a50-db7f53d0033f",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e5a45236-2166-423e-b059-d70a10afce90"
        },
        "item": {
          "id": "8c153cdb-f3de-40f0-ac63-8cbc978b3344",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d48d1732-02ab-424c-b298-7536c5db7c54",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "83a5406c-5513-4531-a618-420eb350b825",
        "cursor": {
          "ref": "2cb600b6-c54e-4cd5-acca-c38e8fdfdff9",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ca22d69a-f95c-460f-b402-a8642b57c2ff"
        },
        "item": {
          "id": "83a5406c-5513-4531-a618-420eb350b825",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1dedee62-da41-405e-a00f-2a1e136cebab",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "2d4a9373-915d-45f6-8505-00f9117ab283",
        "cursor": {
          "ref": "ef81e789-e12a-4dfe-b825-eeae1164e4cb",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d2e39ef8-85bb-4eaf-9de1-f36776eab21b"
        },
        "item": {
          "id": "2d4a9373-915d-45f6-8505-00f9117ab283",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8b34b03a-8b6b-4d06-93b0-c4153fa0b7ad",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "faa21a89-9cb9-4add-b40c-3c6e0561d7f1",
        "cursor": {
          "ref": "6fb5cc7b-57a8-43ad-8d52-92584e16282e",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7f681ca9-91ff-4d66-8aa8-81aa80133d10"
        },
        "item": {
          "id": "faa21a89-9cb9-4add-b40c-3c6e0561d7f1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ab4b92aa-712b-43ea-ae48-ef85578db28d",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 19,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "ea96cfbe-d477-4389-9a28-21c419bb83f0",
        "cursor": {
          "ref": "9ef01e0d-0b42-43eb-b6da-eb41cbaceae1",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ff4cdbda-b967-4f9a-9274-c602c0f7371c"
        },
        "item": {
          "id": "ea96cfbe-d477-4389-9a28-21c419bb83f0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5301ddc6-a76a-4f3e-930f-769c6872a735",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "b3f11757-dd76-46fd-874b-8810bd4799fb",
        "cursor": {
          "ref": "39ab11bb-d421-47dd-a7cb-9755699b21b0",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7ca1eeed-da55-4071-ab7a-4c5e6b98475b"
        },
        "item": {
          "id": "b3f11757-dd76-46fd-874b-8810bd4799fb",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2d224f07-76dc-4a71-8243-68bcfd10414e",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "6b62a7de-d672-492a-ae08-04aa641d2ff9",
        "cursor": {
          "ref": "1d10e117-5f0a-48fd-b70f-8fefa3ddaff3",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "71484625-1bf2-401f-b38b-1a5b1b8df6de"
        },
        "item": {
          "id": "6b62a7de-d672-492a-ae08-04aa641d2ff9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "971d642b-4607-4bc3-a2fb-b7aab0d6740d",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "04055859-f016-41d3-8715-c85d186ff815",
        "cursor": {
          "ref": "387f7ca1-15fb-4cca-9549-f268f3694e92",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4b0b8250-1d53-4232-9b68-1d13afb415e0"
        },
        "item": {
          "id": "04055859-f016-41d3-8715-c85d186ff815",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "56fcc002-6060-4916-a160-6e3c5251b9bd",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "7cda556a-9d5c-45cd-b0c6-514f757ea24b",
        "cursor": {
          "ref": "eb265da4-ab1b-42ed-996e-c5856f17a66e",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5d9b8d61-78a4-4e6c-83e8-aa66d59afd13"
        },
        "item": {
          "id": "7cda556a-9d5c-45cd-b0c6-514f757ea24b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b5cebbad-61e1-46e2-957a-fc916e820065",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "9ecd3991-1ce6-43c9-88df-83a09b1f23af",
        "cursor": {
          "ref": "bdf35c3e-b424-4c28-9407-94fdfc895dca",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e191740f-fc5d-4af8-ae57-68b82212bda5"
        },
        "item": {
          "id": "9ecd3991-1ce6-43c9-88df-83a09b1f23af",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "28c1e55b-2be0-4c26-bb0a-eef1e09ccd48",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "f02444c2-2317-4f2c-8ed0-99105f69759a",
        "cursor": {
          "ref": "f6c31284-72d4-4eb7-a492-89f4bdef6f02",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "46f6342b-16fd-4441-8c2c-60c11ee2bf46"
        },
        "item": {
          "id": "f02444c2-2317-4f2c-8ed0-99105f69759a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "52699e38-dd2a-423b-974a-acf42353a695",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "89efadcc-677c-4653-b5c2-6c4039a96a1b",
        "cursor": {
          "ref": "9ff7107a-d4f4-4017-a3ee-2b2c2f2a486d",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ab8966d4-1919-4c07-b814-67ec85e09b19"
        },
        "item": {
          "id": "89efadcc-677c-4653-b5c2-6c4039a96a1b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "40f15aaf-672e-4cb1-9d90-3e6af353b9de",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "227b7e70-ee6c-41a4-998f-e24caf3b6ee1",
        "cursor": {
          "ref": "b1852062-ea01-4c6b-8ece-c04d34970f8c",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "13c1affa-0936-4fa6-89af-f491f245c71e"
        },
        "item": {
          "id": "227b7e70-ee6c-41a4-998f-e24caf3b6ee1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d065ecb6-4c1a-44f8-a201-86806e66c34b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "e8d30a15-dbe0-40c5-ad5c-9c69632e83a9",
        "cursor": {
          "ref": "832a2668-e36e-4ef5-938f-4f776da0b0ff",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "15c33ddf-78bf-4878-8480-e53806d3f304"
        },
        "item": {
          "id": "e8d30a15-dbe0-40c5-ad5c-9c69632e83a9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a1e83de0-ff73-41ed-84ae-30708656ce39",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 19,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "acd7501d-88fd-42d9-9485-65d54248a1b0",
        "cursor": {
          "ref": "44093f3c-6f6c-413b-b491-dbbfa3ca3b7f",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3626bb95-0c0d-4a42-ba4b-39c0745b59c9"
        },
        "item": {
          "id": "acd7501d-88fd-42d9-9485-65d54248a1b0",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f9a4065c-92a7-4b51-ae6f-89049211e352",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "2adf872c-1aa7-4dc6-b1f1-5919ed20fdc6",
        "cursor": {
          "ref": "74369f05-7827-423b-92de-acdd0bad768f",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f887c7cb-5064-4700-ac8f-1673cf464707"
        },
        "item": {
          "id": "2adf872c-1aa7-4dc6-b1f1-5919ed20fdc6",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "94beeffd-2dda-4026-9c29-72d7e7630f10",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "b412ef29-5788-460d-b863-cc99510b5ebe",
        "cursor": {
          "ref": "465ba1e9-b054-4c67-a324-97917470ee19",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "344b78a0-a7e0-4b69-91af-6a2f3a8b9fd1"
        },
        "item": {
          "id": "b412ef29-5788-460d-b863-cc99510b5ebe",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "266efdb6-2d94-4561-b2f0-e4fb5c607c7a",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "6670b657-67ff-4771-85b8-3d376145f01c",
        "cursor": {
          "ref": "6fcb00cd-de82-45b0-ad82-4e0475bdcd27",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b606e706-bb6e-4a61-8196-31aa633a1f9b"
        },
        "item": {
          "id": "6670b657-67ff-4771-85b8-3d376145f01c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9b35f448-6c99-4453-a277-91327d8e1bdb",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "6baa1c00-e0b9-4f08-8bc7-2a6920a766f6",
        "cursor": {
          "ref": "441bf153-b7a0-4c14-a8e7-0922013948f0",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "22e553c7-bdd9-48ed-936f-af94014d58fe"
        },
        "item": {
          "id": "6baa1c00-e0b9-4f08-8bc7-2a6920a766f6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1cad6269-857e-446b-952b-0b84fd0cc8d4",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "420b1d18-6cb0-42b5-813a-47b751b3f909",
        "cursor": {
          "ref": "e9cabaa7-b16a-4a44-9822-e1eb7e82d969",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a38ec2b2-96e2-4266-92ff-75f399597c73"
        },
        "item": {
          "id": "420b1d18-6cb0-42b5-813a-47b751b3f909",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0f55247b-6267-4155-a2d8-c5ec468ee7a1",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "f83acd37-1a99-4769-8f09-3acaa1c8d545",
        "cursor": {
          "ref": "9a3798d6-f07c-49b1-8f51-7b394349a441",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "61f2d721-3b2b-48d2-ab39-51fdb58748d0"
        },
        "item": {
          "id": "f83acd37-1a99-4769-8f09-3acaa1c8d545",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "574e3f5f-ca4c-4d13-8982-d843cd1e89f2",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "ca301556-d522-41c6-a212-47c5cca41cfa",
        "cursor": {
          "ref": "4afa4daa-602c-4df0-9a9c-e97a028c472c",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "50774c0e-a427-447e-aff4-fe1e75fa4a9a"
        },
        "item": {
          "id": "ca301556-d522-41c6-a212-47c5cca41cfa",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c128242b-3771-4c2f-98c9-f31f569fee05",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 20,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "607b3469-a24f-4fc0-853d-41c63047f45b",
        "cursor": {
          "ref": "babf0656-e63d-4228-8030-fb17f197ea53",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "dcc7eda5-7784-41b0-91f7-c4ea9c9d9e2d"
        },
        "item": {
          "id": "607b3469-a24f-4fc0-853d-41c63047f45b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "be8620a2-2df7-43b6-baa4-53a9f63132d6",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "ff171732-3e05-4a74-9fd0-ca000761a1f0",
        "cursor": {
          "ref": "b0fdcd98-ae86-41c3-ba57-00cf34b88812",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "45cd5afe-c5b3-44bc-b0e0-b936b19f8613"
        },
        "item": {
          "id": "ff171732-3e05-4a74-9fd0-ca000761a1f0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5a922033-2946-4387-9044-3fe8ab03b661",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "a276e75c-a3e2-45d2-8e77-47fc8e190ada",
        "cursor": {
          "ref": "7e8f3e29-51b4-4d54-89a7-01a6d09c96c5",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ea73168b-006e-4338-b473-27d941f59420"
        },
        "item": {
          "id": "a276e75c-a3e2-45d2-8e77-47fc8e190ada",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "657563d8-ae86-421f-b8df-2f178e67ac0c",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "0ed7b157-bd82-471d-a2eb-7dc1c9e94278",
        "cursor": {
          "ref": "2a6d609b-d7b7-4ab0-aab6-6e98417ba25a",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7c3e0d42-227f-4c2b-b67a-ac5bf53906e8"
        },
        "item": {
          "id": "0ed7b157-bd82-471d-a2eb-7dc1c9e94278",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a973ba10-c7d8-413e-876d-3b5437088025",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "79f69bd8-b79c-46d6-9a71-7d9a0243a068",
        "cursor": {
          "ref": "db0f09eb-453e-4229-b329-112e2a9a6ef3",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "dca10d39-dcee-41d9-be22-ac49fed47ac8"
        },
        "item": {
          "id": "79f69bd8-b79c-46d6-9a71-7d9a0243a068",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "07e63209-4a12-4e5b-8f6a-2b0aec1a8c27",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "7df64be3-096e-4a47-b14e-18e25800a1a3",
        "cursor": {
          "ref": "58e33517-5e9b-4969-9768-0b8de1b7b51a",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4f58fb6f-b0fe-42e6-9ca0-37883bc8c51e"
        },
        "item": {
          "id": "7df64be3-096e-4a47-b14e-18e25800a1a3",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "6e4264ac-9caa-43c9-afd8-04e892f53169",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "cf0aed36-97ed-490b-adcc-ab73369b946f",
        "cursor": {
          "ref": "983d1a3d-ce88-45b5-934f-9096a8d9e4c4",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1f0385bc-4e91-4f63-9df5-b983279fa00e"
        },
        "item": {
          "id": "cf0aed36-97ed-490b-adcc-ab73369b946f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e0d809d5-1de2-4887-98b7-568766f78957",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "a479c685-619e-405a-bf96-79df7b76f71f",
        "cursor": {
          "ref": "e5405470-be70-447d-831a-c6c32693b618",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "1fab765b-dcbd-48ca-b63a-186eab835c95"
        },
        "item": {
          "id": "a479c685-619e-405a-bf96-79df7b76f71f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d0af9401-3a61-4e0a-b534-497e7c378221",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "436f3dcf-9da1-4065-a9c2-940b2b76490c",
        "cursor": {
          "ref": "86e08f04-aace-44dd-a565-fed79f429407",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6a2e1d0c-b933-45d0-abfa-184de4094bd8"
        },
        "item": {
          "id": "436f3dcf-9da1-4065-a9c2-940b2b76490c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0c16cec7-a973-4b24-8050-c121b7724bb4",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "be5e9193-64b2-4bf1-af5a-c3b1a6e5db79",
        "cursor": {
          "ref": "09661eb1-d016-488f-b1cf-d373588676d1",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "78e107a0-3444-4be3-9470-84db7969936b"
        },
        "item": {
          "id": "be5e9193-64b2-4bf1-af5a-c3b1a6e5db79",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "384c8c7a-56ee-4eee-bcac-e45fc0bb123f",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "5ba060e1-86c4-4973-a481-2365a7120a9a",
        "cursor": {
          "ref": "61b888ff-cb73-4859-8150-c582932eeb6a",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e1f9ad49-c6e2-469c-9b7b-970a5b3246a7"
        },
        "item": {
          "id": "5ba060e1-86c4-4973-a481-2365a7120a9a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6929f3d1-f941-4d45-a211-1c498e1ad13e",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "2d2b8ebd-2ae1-4270-9f86-03f3e9cfb488",
        "cursor": {
          "ref": "a84c87e5-2bc2-4f4c-ad45-989e7956003c",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "36afa8dd-bfdb-463e-8095-fdc9c5a8a37f"
        },
        "item": {
          "id": "2d2b8ebd-2ae1-4270-9f86-03f3e9cfb488",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f4136df6-c993-4c2c-9f9e-8c83a0c39987",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "ad3713cf-961b-4a9a-bad1-978959f3748e",
        "cursor": {
          "ref": "87c66c90-0df6-47cc-844f-63b9dbd16227",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "de8edf75-15ba-4ffa-84df-f26e4cd1c148"
        },
        "item": {
          "id": "ad3713cf-961b-4a9a-bad1-978959f3748e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9aaf7e39-a107-45a6-8368-80a7216eaef1",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 23,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "ca2bdd9f-b8f6-4464-9bda-7e94ed4bc286",
        "cursor": {
          "ref": "3e72758a-9ed7-494e-bfde-c63e0c5a0803",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5739eb95-161c-4474-8a60-04a641230202"
        },
        "item": {
          "id": "ca2bdd9f-b8f6-4464-9bda-7e94ed4bc286",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1526d690-bdf6-4ac6-a2c2-28421f38a973",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 502",
              "stack": "AssertionError: expected response to have status code 401 but got 502\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "26edc6d8-96da-4b62-b358-a8ffded5227c",
        "cursor": {
          "ref": "27dd2935-3710-465d-aa59-5850b5eab3dd",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "bf82aaca-0db5-4e1c-9737-a2d570d781f6"
        },
        "item": {
          "id": "26edc6d8-96da-4b62-b358-a8ffded5227c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "f7f0cc12-b4bd-4929-8115-70526054289f",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 502",
              "stack": "AssertionError: expected response to have status code 403 but got 502\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "83c264ed-4580-4659-a9cc-8ca5176e56e0",
        "cursor": {
          "ref": "62f289ed-064e-46da-97d6-cb2783356fbd",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "0025c40d-a617-4fed-9995-3d2a6b93f535"
        },
        "item": {
          "id": "83c264ed-4580-4659-a9cc-8ca5176e56e0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "06b5e839-0e7d-4f28-9d70-bbc619aa5e1e",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 502",
              "stack": "AssertionError: expected response to have status code 201 but got 502\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:104)"
            }
          }
        ]
      },
      {
        "id": "aa4ae12d-a099-4981-a8c9-04df3e90a524",
        "cursor": {
          "ref": "78bc368d-d9bb-4e61-ab58-3b7c5075b49f",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "80910d2f-6489-4d32-b64e-16e6606cafc9"
        },
        "item": {
          "id": "aa4ae12d-a099-4981-a8c9-04df3e90a524",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "77ea16c4-fe63-42cd-a45e-623b9c6bcf1a",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 502",
              "stack": "AssertionError: expected response to have status code 201 but got 502\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:105)"
            }
          }
        ]
      },
      {
        "id": "a26784dd-3661-40b2-9b12-4ed126a0c92b",
        "cursor": {
          "ref": "8f09a4b8-e997-4fa4-b9a7-23da96bbee67",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d4b10c28-e63f-4a19-97ed-2c7ff6036cc2"
        },
        "item": {
          "id": "a26784dd-3661-40b2-9b12-4ed126a0c92b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f47058f5-6ffc-45e5-87d1-4e4c6ee1156b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 502",
              "stack": "AssertionError: expected response to have status code 201 but got 502\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          }
        ]
      },
      {
        "id": "1e5e6d27-b465-473e-9ef5-fc4980757f87",
        "cursor": {
          "ref": "c5ddaf5a-94a1-461d-b981-36051d3ac99c",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "595fd993-8a51-45b9-a4ea-d5b56cec8b46"
        },
        "item": {
          "id": "1e5e6d27-b465-473e-9ef5-fc4980757f87",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bbb196a1-3a96-469e-adf2-137cc092f267",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 502",
              "stack": "AssertionError: expected response to have status code 201 but got 502\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "e9271166-b9a4-4056-8ebe-88c37b90656e",
        "cursor": {
          "ref": "bf8812c2-a6c9-49dc-a2fd-b32fe11b1fc3",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "78b8da98-687a-41ce-960b-d8f6fa62fc6c"
        },
        "item": {
          "id": "e9271166-b9a4-4056-8ebe-88c37b90656e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "667f4789-ed69-4f7b-95d8-30235b1a506e",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 502",
              "stack": "AssertionError: expected response to have status code 201 but got 502\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "c2b6d496-72a3-4a9d-ba49-f9ec308be997",
        "cursor": {
          "ref": "5edfd2e6-eefc-4f21-a7e1-3893f6f80382",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3f12dca2-72c5-4f2f-b921-e793c6d5ea31"
        },
        "item": {
          "id": "c2b6d496-72a3-4a9d-ba49-f9ec308be997",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "014f04b3-ebcf-4247-aab9-1a9f43296a6e",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "c2b6d496-72a3-4a9d-ba49-f9ec308be997",
        "cursor": {
          "ref": "5edfd2e6-eefc-4f21-a7e1-3893f6f80382",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3f12dca2-72c5-4f2f-b921-e793c6d5ea31"
        },
        "item": {
          "id": "c2b6d496-72a3-4a9d-ba49-f9ec308be997",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "014f04b3-ebcf-4247-aab9-1a9f43296a6e",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "22901dbc-9990-43bf-8d07-3c2fc5377c57",
        "cursor": {
          "ref": "0a287e69-f04c-42b4-b456-5ea2c3d5d440",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e53570da-8d6e-45b0-899c-dd73df6aa2c1"
        },
        "item": {
          "id": "22901dbc-9990-43bf-8d07-3c2fc5377c57",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2b31149f-6291-4df7-b5b0-e426d5961572",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "22901dbc-9990-43bf-8d07-3c2fc5377c57",
        "cursor": {
          "ref": "0a287e69-f04c-42b4-b456-5ea2c3d5d440",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e53570da-8d6e-45b0-899c-dd73df6aa2c1"
        },
        "item": {
          "id": "22901dbc-9990-43bf-8d07-3c2fc5377c57",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2b31149f-6291-4df7-b5b0-e426d5961572",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "81262fa8-4a88-484c-bb7e-6941cfbec41c",
        "cursor": {
          "ref": "765daa0b-7c6c-4aaf-9263-9e7f071c67bf",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "933949b3-1863-4d2f-98b0-65443c85bee0"
        },
        "item": {
          "id": "81262fa8-4a88-484c-bb7e-6941cfbec41c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a77ef715-9243-4778-8afd-3083afeb6077",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "81262fa8-4a88-484c-bb7e-6941cfbec41c",
        "cursor": {
          "ref": "765daa0b-7c6c-4aaf-9263-9e7f071c67bf",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "933949b3-1863-4d2f-98b0-65443c85bee0"
        },
        "item": {
          "id": "81262fa8-4a88-484c-bb7e-6941cfbec41c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a77ef715-9243-4778-8afd-3083afeb6077",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "e65f6c93-fa66-4fbf-9ab7-2fc6bfe227cf",
        "cursor": {
          "ref": "42c361e0-2a67-41f4-a391-1294b3743901",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "67bc85c8-5648-496d-a074-d3f3c6e51515"
        },
        "item": {
          "id": "e65f6c93-fa66-4fbf-9ab7-2fc6bfe227cf",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7d8065cb-a44a-4f79-bae0-58f1de302c25",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "e65f6c93-fa66-4fbf-9ab7-2fc6bfe227cf",
        "cursor": {
          "ref": "42c361e0-2a67-41f4-a391-1294b3743901",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "67bc85c8-5648-496d-a074-d3f3c6e51515"
        },
        "item": {
          "id": "e65f6c93-fa66-4fbf-9ab7-2fc6bfe227cf",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7d8065cb-a44a-4f79-bae0-58f1de302c25",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "64112f01-4b71-46a5-a8fd-5c8bd49b4534",
        "cursor": {
          "ref": "15c5a843-25dd-4ecd-9e84-c78b5720c22a",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e7b1b0a4-50e5-4c58-849d-ea0dc5722a7c"
        },
        "item": {
          "id": "64112f01-4b71-46a5-a8fd-5c8bd49b4534",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "39e0671d-de83-4ff0-8a89-b2bf02d5e179",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "64112f01-4b71-46a5-a8fd-5c8bd49b4534",
        "cursor": {
          "ref": "15c5a843-25dd-4ecd-9e84-c78b5720c22a",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e7b1b0a4-50e5-4c58-849d-ea0dc5722a7c"
        },
        "item": {
          "id": "64112f01-4b71-46a5-a8fd-5c8bd49b4534",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "39e0671d-de83-4ff0-8a89-b2bf02d5e179",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "1426fe89-d609-4da6-967b-b73b0ade7059",
        "cursor": {
          "ref": "6c32d43a-a043-49cb-8d47-e2a3d3950702",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c53b2c7d-a79b-4349-9156-7adf4ec190e5"
        },
        "item": {
          "id": "1426fe89-d609-4da6-967b-b73b0ade7059",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e391f989-3e01-410b-9be5-1c50a12658a1",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "1426fe89-d609-4da6-967b-b73b0ade7059",
        "cursor": {
          "ref": "6c32d43a-a043-49cb-8d47-e2a3d3950702",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c53b2c7d-a79b-4349-9156-7adf4ec190e5"
        },
        "item": {
          "id": "1426fe89-d609-4da6-967b-b73b0ade7059",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e391f989-3e01-410b-9be5-1c50a12658a1",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "0d6a4bf6-de65-4969-b0d1-5a4f0f81a5a5",
        "cursor": {
          "ref": "e471422b-37f0-4261-83f8-9637efe596da",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "23cbbdc7-2546-4534-9c6d-fe19f39dec9f"
        },
        "item": {
          "id": "0d6a4bf6-de65-4969-b0d1-5a4f0f81a5a5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ebd12574-62d3-4c75-9cbf-1529757b90bb",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "0d6a4bf6-de65-4969-b0d1-5a4f0f81a5a5",
        "cursor": {
          "ref": "e471422b-37f0-4261-83f8-9637efe596da",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "23cbbdc7-2546-4534-9c6d-fe19f39dec9f"
        },
        "item": {
          "id": "0d6a4bf6-de65-4969-b0d1-5a4f0f81a5a5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ebd12574-62d3-4c75-9cbf-1529757b90bb",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "82c26293-85c0-4e4c-b024-d9fe275f8354",
        "cursor": {
          "ref": "93f9a387-cf33-4c73-847f-88d8b270fcc2",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f79ff8e4-32e5-416f-a17d-d7c119d5dad3"
        },
        "item": {
          "id": "82c26293-85c0-4e4c-b024-d9fe275f8354",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5a2b4a08-0a08-41ea-a377-8564d65356f8",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "82c26293-85c0-4e4c-b024-d9fe275f8354",
        "cursor": {
          "ref": "93f9a387-cf33-4c73-847f-88d8b270fcc2",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f79ff8e4-32e5-416f-a17d-d7c119d5dad3"
        },
        "item": {
          "id": "82c26293-85c0-4e4c-b024-d9fe275f8354",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5a2b4a08-0a08-41ea-a377-8564d65356f8",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "2bc10b1d-7e87-4997-930d-10e580913cd9",
        "cursor": {
          "ref": "3fdcfe2f-7401-40bb-8578-6a401f42c594",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "faf8f19c-0033-4a5a-a3a1-3a73c9e27abd"
        },
        "item": {
          "id": "2bc10b1d-7e87-4997-930d-10e580913cd9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8f5a3206-a2f8-4c64-9792-9ae5261bc56b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "2bc10b1d-7e87-4997-930d-10e580913cd9",
        "cursor": {
          "ref": "3fdcfe2f-7401-40bb-8578-6a401f42c594",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "faf8f19c-0033-4a5a-a3a1-3a73c9e27abd"
        },
        "item": {
          "id": "2bc10b1d-7e87-4997-930d-10e580913cd9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8f5a3206-a2f8-4c64-9792-9ae5261bc56b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "aacbdc6e-82c7-4386-8611-545c68c8c6c6",
        "cursor": {
          "ref": "0fce9c23-a7c9-4df5-b573-4892d382dc7d",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0d68938c-dc40-4945-b18f-922a88278b15"
        },
        "item": {
          "id": "aacbdc6e-82c7-4386-8611-545c68c8c6c6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d1a1c97c-8a7a-4056-b66a-0119b4aa6e5f",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "aacbdc6e-82c7-4386-8611-545c68c8c6c6",
        "cursor": {
          "ref": "0fce9c23-a7c9-4df5-b573-4892d382dc7d",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0d68938c-dc40-4945-b18f-922a88278b15"
        },
        "item": {
          "id": "aacbdc6e-82c7-4386-8611-545c68c8c6c6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d1a1c97c-8a7a-4056-b66a-0119b4aa6e5f",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "b91a0381-7fee-4433-82e4-6b754f78ded2",
        "cursor": {
          "ref": "5d5c02f5-5ac2-4180-b9dc-897194737c10",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9914cf79-1d20-41a2-bb90-7c08e18abba0"
        },
        "item": {
          "id": "b91a0381-7fee-4433-82e4-6b754f78ded2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "bf17d2be-eda1-4640-8f0b-3478f1742fdf",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "b91a0381-7fee-4433-82e4-6b754f78ded2",
        "cursor": {
          "ref": "5d5c02f5-5ac2-4180-b9dc-897194737c10",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9914cf79-1d20-41a2-bb90-7c08e18abba0"
        },
        "item": {
          "id": "b91a0381-7fee-4433-82e4-6b754f78ded2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "bf17d2be-eda1-4640-8f0b-3478f1742fdf",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "ffd96e21-beb4-42bd-a2e8-f320cc962364",
        "cursor": {
          "ref": "5a5973cc-af90-490f-a2a6-882a7709ccaa",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "abf65166-051c-43fa-943d-9bfd7c0013c8"
        },
        "item": {
          "id": "ffd96e21-beb4-42bd-a2e8-f320cc962364",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0144cd39-b421-4bfb-8177-423420df01bc",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "ffd96e21-beb4-42bd-a2e8-f320cc962364",
        "cursor": {
          "ref": "5a5973cc-af90-490f-a2a6-882a7709ccaa",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "abf65166-051c-43fa-943d-9bfd7c0013c8"
        },
        "item": {
          "id": "ffd96e21-beb4-42bd-a2e8-f320cc962364",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0144cd39-b421-4bfb-8177-423420df01bc",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "7b14a194-4ec0-474e-871c-4625a0ed5e54",
        "cursor": {
          "ref": "44cc2651-6f09-43e8-a7d9-fb01fd9dd4d3",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c07cdd8b-255b-4889-863f-2a482eea0cd5"
        },
        "item": {
          "id": "7b14a194-4ec0-474e-871c-4625a0ed5e54",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ee1c57ba-895e-4474-8930-eb1135edce72",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "7b14a194-4ec0-474e-871c-4625a0ed5e54",
        "cursor": {
          "ref": "44cc2651-6f09-43e8-a7d9-fb01fd9dd4d3",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c07cdd8b-255b-4889-863f-2a482eea0cd5"
        },
        "item": {
          "id": "7b14a194-4ec0-474e-871c-4625a0ed5e54",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ee1c57ba-895e-4474-8930-eb1135edce72",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "fc942d5f-8ee4-4139-88b4-f62745b73e41",
        "cursor": {
          "ref": "feaee19e-ff7b-4dc5-a63d-7e124c9b1c2a",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "46e5d8b9-6b5b-4c03-b79e-1cc90634fbf0"
        },
        "item": {
          "id": "fc942d5f-8ee4-4139-88b4-f62745b73e41",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "caa0e4f7-91d5-4a67-af2e-3034453e29fc",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "fc942d5f-8ee4-4139-88b4-f62745b73e41",
        "cursor": {
          "ref": "feaee19e-ff7b-4dc5-a63d-7e124c9b1c2a",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "46e5d8b9-6b5b-4c03-b79e-1cc90634fbf0"
        },
        "item": {
          "id": "fc942d5f-8ee4-4139-88b4-f62745b73e41",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "caa0e4f7-91d5-4a67-af2e-3034453e29fc",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "db8e0aa4-2433-458d-bc8b-848f80789836",
        "cursor": {
          "ref": "b64f1074-43b6-4e37-970d-b4e7b30add0e",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7ab79e05-f173-4e5d-a437-18b664187c67"
        },
        "item": {
          "id": "db8e0aa4-2433-458d-bc8b-848f80789836",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2eb812f3-67dc-433e-bbaf-f3979381499d",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "db8e0aa4-2433-458d-bc8b-848f80789836",
        "cursor": {
          "ref": "b64f1074-43b6-4e37-970d-b4e7b30add0e",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7ab79e05-f173-4e5d-a437-18b664187c67"
        },
        "item": {
          "id": "db8e0aa4-2433-458d-bc8b-848f80789836",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2eb812f3-67dc-433e-bbaf-f3979381499d",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "32c573be-a56a-4773-ac6b-90868b4b6bd7",
        "cursor": {
          "ref": "1307aa47-33d0-430f-b693-e0e12cdc8b42",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "135648f5-96a5-4a71-b98a-a99ee7e41206"
        },
        "item": {
          "id": "32c573be-a56a-4773-ac6b-90868b4b6bd7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "15f0fde7-9c4b-45ee-8f13-3c6b44ff490c",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "32c573be-a56a-4773-ac6b-90868b4b6bd7",
        "cursor": {
          "ref": "1307aa47-33d0-430f-b693-e0e12cdc8b42",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "135648f5-96a5-4a71-b98a-a99ee7e41206"
        },
        "item": {
          "id": "32c573be-a56a-4773-ac6b-90868b4b6bd7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "15f0fde7-9c4b-45ee-8f13-3c6b44ff490c",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "5bfd6d10-4ae5-43de-8eba-d512384da3f9",
        "cursor": {
          "ref": "13444ecd-606a-4d5e-96bd-00ecdce63e61",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "feccb4a9-a1f9-496e-a795-276d23d00356"
        },
        "item": {
          "id": "5bfd6d10-4ae5-43de-8eba-d512384da3f9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5440a836-0bb2-42b8-9e17-4e59132eab00",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "5bfd6d10-4ae5-43de-8eba-d512384da3f9",
        "cursor": {
          "ref": "13444ecd-606a-4d5e-96bd-00ecdce63e61",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "feccb4a9-a1f9-496e-a795-276d23d00356"
        },
        "item": {
          "id": "5bfd6d10-4ae5-43de-8eba-d512384da3f9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5440a836-0bb2-42b8-9e17-4e59132eab00",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "afc798e1-f10b-4ecf-aee5-9e412d5d0368",
        "cursor": {
          "ref": "0bd4ff5c-cce6-458c-ad25-e7e8e431ecf2",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f73141af-1ff6-43e6-aa64-46a32e6f27e8"
        },
        "item": {
          "id": "afc798e1-f10b-4ecf-aee5-9e412d5d0368",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6a8986ba-673d-401f-9e91-8a0e1c853ee4",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "afc798e1-f10b-4ecf-aee5-9e412d5d0368",
        "cursor": {
          "ref": "0bd4ff5c-cce6-458c-ad25-e7e8e431ecf2",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f73141af-1ff6-43e6-aa64-46a32e6f27e8"
        },
        "item": {
          "id": "afc798e1-f10b-4ecf-aee5-9e412d5d0368",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6a8986ba-673d-401f-9e91-8a0e1c853ee4",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "b60db0a2-c102-4fe6-ae72-cd47e4ac328f",
        "cursor": {
          "ref": "d76ba436-09c1-4f79-a56c-0bd27bff51f5",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c5062980-bd62-4d2c-96ef-c648364f5a91"
        },
        "item": {
          "id": "b60db0a2-c102-4fe6-ae72-cd47e4ac328f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e1854b8c-2f28-4481-9e64-db5d0a1d4658",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "b60db0a2-c102-4fe6-ae72-cd47e4ac328f",
        "cursor": {
          "ref": "d76ba436-09c1-4f79-a56c-0bd27bff51f5",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c5062980-bd62-4d2c-96ef-c648364f5a91"
        },
        "item": {
          "id": "b60db0a2-c102-4fe6-ae72-cd47e4ac328f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e1854b8c-2f28-4481-9e64-db5d0a1d4658",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "e456b3e7-3ea6-43ff-a396-d9d26a56d35d",
        "cursor": {
          "ref": "d524a0b4-b91f-45ce-b507-d7bbd9251d87",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "88b06d75-89ec-4533-af9e-2bbaa84896e0"
        },
        "item": {
          "id": "e456b3e7-3ea6-43ff-a396-d9d26a56d35d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9f1e7d29-cd31-45c8-a687-4e605b5e1e51",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "e456b3e7-3ea6-43ff-a396-d9d26a56d35d",
        "cursor": {
          "ref": "d524a0b4-b91f-45ce-b507-d7bbd9251d87",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "88b06d75-89ec-4533-af9e-2bbaa84896e0"
        },
        "item": {
          "id": "e456b3e7-3ea6-43ff-a396-d9d26a56d35d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9f1e7d29-cd31-45c8-a687-4e605b5e1e51",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "31700094-38c6-457b-9239-56c75dd63b8d",
        "cursor": {
          "ref": "96b953be-851d-4b56-a0f9-62f46359d620",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a772e778-03c8-49db-b9b2-ac3a16809996"
        },
        "item": {
          "id": "31700094-38c6-457b-9239-56c75dd63b8d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ff63f32c-fe73-4930-bb2f-67462c3afd0d",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "31700094-38c6-457b-9239-56c75dd63b8d",
        "cursor": {
          "ref": "96b953be-851d-4b56-a0f9-62f46359d620",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a772e778-03c8-49db-b9b2-ac3a16809996"
        },
        "item": {
          "id": "31700094-38c6-457b-9239-56c75dd63b8d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ff63f32c-fe73-4930-bb2f-67462c3afd0d",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "8f682dae-1294-49ae-b842-26f3c370807b",
        "cursor": {
          "ref": "e9175ee3-409b-4366-844e-ec3bd5ff6de6",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "31c5ae43-026a-4d1f-bc69-389345851c96"
        },
        "item": {
          "id": "8f682dae-1294-49ae-b842-26f3c370807b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b4df1b6c-7bbf-4677-9bb7-0c316bf9eb54",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "8f682dae-1294-49ae-b842-26f3c370807b",
        "cursor": {
          "ref": "e9175ee3-409b-4366-844e-ec3bd5ff6de6",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "31c5ae43-026a-4d1f-bc69-389345851c96"
        },
        "item": {
          "id": "8f682dae-1294-49ae-b842-26f3c370807b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b4df1b6c-7bbf-4677-9bb7-0c316bf9eb54",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "7c78e932-38cb-4c2d-969d-f0679fa10ef5",
        "cursor": {
          "ref": "6eaae7ce-526e-4154-b9ed-852a59548fe6",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "03471cda-1081-49a8-91b1-3925e46c1b0f"
        },
        "item": {
          "id": "7c78e932-38cb-4c2d-969d-f0679fa10ef5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "760c8dff-f0c6-4c77-baa1-d4839400eb52",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "7c78e932-38cb-4c2d-969d-f0679fa10ef5",
        "cursor": {
          "ref": "6eaae7ce-526e-4154-b9ed-852a59548fe6",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "03471cda-1081-49a8-91b1-3925e46c1b0f"
        },
        "item": {
          "id": "7c78e932-38cb-4c2d-969d-f0679fa10ef5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "760c8dff-f0c6-4c77-baa1-d4839400eb52",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "63a0ebf3-0e95-4c71-91e0-c3d9854972b0",
        "cursor": {
          "ref": "dd4bc3af-bc11-4101-9e52-eab1e53a48bc",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8b062109-e101-42ce-bfbb-1cb7f574c255"
        },
        "item": {
          "id": "63a0ebf3-0e95-4c71-91e0-c3d9854972b0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b1ed3724-3622-466c-b43b-4ffabe7cc384",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "63a0ebf3-0e95-4c71-91e0-c3d9854972b0",
        "cursor": {
          "ref": "dd4bc3af-bc11-4101-9e52-eab1e53a48bc",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8b062109-e101-42ce-bfbb-1cb7f574c255"
        },
        "item": {
          "id": "63a0ebf3-0e95-4c71-91e0-c3d9854972b0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b1ed3724-3622-466c-b43b-4ffabe7cc384",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "303c7724-fc77-4503-a4fc-2d34e8397c7c",
        "cursor": {
          "ref": "4553bbda-2f54-43a2-96d5-607e27c8dfe9",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8b40afcf-3bc3-4cf9-bba5-60ed2592e43a"
        },
        "item": {
          "id": "303c7724-fc77-4503-a4fc-2d34e8397c7c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "97998be1-f892-449f-82c6-76b134a47302",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "303c7724-fc77-4503-a4fc-2d34e8397c7c",
        "cursor": {
          "ref": "4553bbda-2f54-43a2-96d5-607e27c8dfe9",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8b40afcf-3bc3-4cf9-bba5-60ed2592e43a"
        },
        "item": {
          "id": "303c7724-fc77-4503-a4fc-2d34e8397c7c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "97998be1-f892-449f-82c6-76b134a47302",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "fd70c235-c0b1-4d46-b27a-54f0e105e70c",
        "cursor": {
          "ref": "fda40985-071d-4e8b-b6d5-d92a9a3cc8bf",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f46fa714-91c6-4a55-9608-43e924e1a4cf"
        },
        "item": {
          "id": "fd70c235-c0b1-4d46-b27a-54f0e105e70c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7096f932-162a-48a4-8147-45d7c78e5e68",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "fd70c235-c0b1-4d46-b27a-54f0e105e70c",
        "cursor": {
          "ref": "fda40985-071d-4e8b-b6d5-d92a9a3cc8bf",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f46fa714-91c6-4a55-9608-43e924e1a4cf"
        },
        "item": {
          "id": "fd70c235-c0b1-4d46-b27a-54f0e105e70c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7096f932-162a-48a4-8147-45d7c78e5e68",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "2c5713b7-1bfb-4ea3-91aa-7b02b88795d5",
        "cursor": {
          "ref": "4686d6a5-796c-4602-aaa0-5bcfa7ea34cf",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d1d17a03-06c5-41c3-aaf8-8b1620f32589"
        },
        "item": {
          "id": "2c5713b7-1bfb-4ea3-91aa-7b02b88795d5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "83e4ca0e-4feb-4d59-be4a-1f1779cc54b3",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "2c5713b7-1bfb-4ea3-91aa-7b02b88795d5",
        "cursor": {
          "ref": "4686d6a5-796c-4602-aaa0-5bcfa7ea34cf",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d1d17a03-06c5-41c3-aaf8-8b1620f32589"
        },
        "item": {
          "id": "2c5713b7-1bfb-4ea3-91aa-7b02b88795d5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "83e4ca0e-4feb-4d59-be4a-1f1779cc54b3",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "2c9777e7-da95-4096-99fa-18f765142a64",
        "cursor": {
          "ref": "fe490bdf-fa37-4d01-a00f-58c5688e515b",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "23b2d346-5ad3-491b-bcc9-4d06b70fab60"
        },
        "item": {
          "id": "2c9777e7-da95-4096-99fa-18f765142a64",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "23b87fb6-f6e6-4f07-bc4f-eea7d5d3f4d0",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "2c9777e7-da95-4096-99fa-18f765142a64",
        "cursor": {
          "ref": "fe490bdf-fa37-4d01-a00f-58c5688e515b",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "23b2d346-5ad3-491b-bcc9-4d06b70fab60"
        },
        "item": {
          "id": "2c9777e7-da95-4096-99fa-18f765142a64",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "23b87fb6-f6e6-4f07-bc4f-eea7d5d3f4d0",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "fa3ed482-803a-4262-b81c-53e6e42feb2f",
        "cursor": {
          "ref": "aadf0251-a762-4735-b6a8-8fc1cf9d4976",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2ba0a7f7-80fe-4fb2-ae83-1245158fe3e3"
        },
        "item": {
          "id": "fa3ed482-803a-4262-b81c-53e6e42feb2f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "45f2f49f-5f0f-4d11-809b-04268bd0b3d0",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "fa3ed482-803a-4262-b81c-53e6e42feb2f",
        "cursor": {
          "ref": "aadf0251-a762-4735-b6a8-8fc1cf9d4976",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2ba0a7f7-80fe-4fb2-ae83-1245158fe3e3"
        },
        "item": {
          "id": "fa3ed482-803a-4262-b81c-53e6e42feb2f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "45f2f49f-5f0f-4d11-809b-04268bd0b3d0",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "9487a221-ed35-4ddf-9854-dc37d51d5a93",
        "cursor": {
          "ref": "9a735ca6-4f6c-4d4e-a404-596eab8d3e04",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "45e51ce5-d8f0-4832-a7ef-ae86b3dc0922"
        },
        "item": {
          "id": "9487a221-ed35-4ddf-9854-dc37d51d5a93",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0027175c-2e90-4248-8791-dd072530af09",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "9487a221-ed35-4ddf-9854-dc37d51d5a93",
        "cursor": {
          "ref": "9a735ca6-4f6c-4d4e-a404-596eab8d3e04",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "45e51ce5-d8f0-4832-a7ef-ae86b3dc0922"
        },
        "item": {
          "id": "9487a221-ed35-4ddf-9854-dc37d51d5a93",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0027175c-2e90-4248-8791-dd072530af09",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "a47c9000-bae5-4ce7-b003-6b18ce4346c4",
        "cursor": {
          "ref": "611671f6-6d8c-42ee-8baa-326241ed2d3e",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7e0e28a7-c84f-436f-b3af-197fe3421be7"
        },
        "item": {
          "id": "a47c9000-bae5-4ce7-b003-6b18ce4346c4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6695dcc7-218e-470e-8d9b-79887597eec8",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "a47c9000-bae5-4ce7-b003-6b18ce4346c4",
        "cursor": {
          "ref": "611671f6-6d8c-42ee-8baa-326241ed2d3e",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7e0e28a7-c84f-436f-b3af-197fe3421be7"
        },
        "item": {
          "id": "a47c9000-bae5-4ce7-b003-6b18ce4346c4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6695dcc7-218e-470e-8d9b-79887597eec8",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "8ae570af-ec40-4335-8672-d50916b98dbc",
        "cursor": {
          "ref": "0ceb7373-097a-429b-a74e-bddc15331a97",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "932f562a-3d35-4860-9284-f366d153ec71"
        },
        "item": {
          "id": "8ae570af-ec40-4335-8672-d50916b98dbc",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "aa328c76-2ea9-46b4-bae9-75bf63295d4b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "8ae570af-ec40-4335-8672-d50916b98dbc",
        "cursor": {
          "ref": "0ceb7373-097a-429b-a74e-bddc15331a97",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "932f562a-3d35-4860-9284-f366d153ec71"
        },
        "item": {
          "id": "8ae570af-ec40-4335-8672-d50916b98dbc",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "aa328c76-2ea9-46b4-bae9-75bf63295d4b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "4dcd44b0-7c45-48a4-b24a-379045135229",
        "cursor": {
          "ref": "a1fc2838-16a8-48c2-a564-0cb1c5c646aa",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "5bf7236c-e355-4da3-adfc-095f530bf132"
        },
        "item": {
          "id": "4dcd44b0-7c45-48a4-b24a-379045135229",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "efcc7554-bd8f-43f8-8f55-7145a3cd1681",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 502",
              "stack": "AssertionError: expected response to have status code 401 but got 502\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "4dcd44b0-7c45-48a4-b24a-379045135229",
        "cursor": {
          "ref": "a1fc2838-16a8-48c2-a564-0cb1c5c646aa",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "5bf7236c-e355-4da3-adfc-095f530bf132"
        },
        "item": {
          "id": "4dcd44b0-7c45-48a4-b24a-379045135229",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "efcc7554-bd8f-43f8-8f55-7145a3cd1681",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 502",
              "stack": "AssertionError: expected response to have status code 401 but got 502\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "6d0dbc44-f493-4642-8662-2684c50a40b6",
        "cursor": {
          "ref": "64b79672-d17c-497e-99c7-da022473357a",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b6eaedcc-aed5-4e3e-b527-42fb9913152f"
        },
        "item": {
          "id": "6d0dbc44-f493-4642-8662-2684c50a40b6",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "9ca6709e-5c5d-4c67-b889-13889f25fce2",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 19,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 502",
              "stack": "AssertionError: expected response to have status code 403 but got 502\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "6d0dbc44-f493-4642-8662-2684c50a40b6",
        "cursor": {
          "ref": "64b79672-d17c-497e-99c7-da022473357a",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b6eaedcc-aed5-4e3e-b527-42fb9913152f"
        },
        "item": {
          "id": "6d0dbc44-f493-4642-8662-2684c50a40b6",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "9ca6709e-5c5d-4c67-b889-13889f25fce2",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 19,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 502",
              "stack": "AssertionError: expected response to have status code 403 but got 502\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "ed80b81a-3782-41c6-966e-babc4f15615d",
        "cursor": {
          "ref": "3a4e1423-ae50-4847-849d-a195d820a52c",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f377a6ca-92b4-411f-8a1c-74a3b751657a"
        },
        "item": {
          "id": "ed80b81a-3782-41c6-966e-babc4f15615d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "616d7a70-0b60-458f-a4bc-65e669324e06",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "ed80b81a-3782-41c6-966e-babc4f15615d",
        "cursor": {
          "ref": "3a4e1423-ae50-4847-849d-a195d820a52c",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f377a6ca-92b4-411f-8a1c-74a3b751657a"
        },
        "item": {
          "id": "ed80b81a-3782-41c6-966e-babc4f15615d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "616d7a70-0b60-458f-a4bc-65e669324e06",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "fafd224a-064e-4e0c-80a6-93694adad0e1",
        "cursor": {
          "ref": "1b4e6361-bdad-4abe-a01e-cc710c63b434",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5eb9a94d-ed99-404d-84c2-e6aab47a5238"
        },
        "item": {
          "id": "fafd224a-064e-4e0c-80a6-93694adad0e1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ffe64df7-0986-41d5-b06f-dfc26bc1f104",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "fafd224a-064e-4e0c-80a6-93694adad0e1",
        "cursor": {
          "ref": "1b4e6361-bdad-4abe-a01e-cc710c63b434",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5eb9a94d-ed99-404d-84c2-e6aab47a5238"
        },
        "item": {
          "id": "fafd224a-064e-4e0c-80a6-93694adad0e1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ffe64df7-0986-41d5-b06f-dfc26bc1f104",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "156ddfa6-c6b7-41ec-bd63-d033c1724395",
        "cursor": {
          "ref": "5093d337-5970-4ac5-b96b-fea4046979e7",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "376221bc-35c2-40b9-bfed-862e59965e56"
        },
        "item": {
          "id": "156ddfa6-c6b7-41ec-bd63-d033c1724395",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "760da657-9eb7-4067-96a4-caf6a41dc1ca",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "156ddfa6-c6b7-41ec-bd63-d033c1724395",
        "cursor": {
          "ref": "5093d337-5970-4ac5-b96b-fea4046979e7",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "376221bc-35c2-40b9-bfed-862e59965e56"
        },
        "item": {
          "id": "156ddfa6-c6b7-41ec-bd63-d033c1724395",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "760da657-9eb7-4067-96a4-caf6a41dc1ca",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "3e11057d-8cb4-411d-a077-8a13514b564b",
        "cursor": {
          "ref": "bcf277d2-7105-49f0-ab51-32da849c5651",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b241fc97-e9e7-422f-8293-0ea403194262"
        },
        "item": {
          "id": "3e11057d-8cb4-411d-a077-8a13514b564b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0f2b9b14-7dd5-4ef8-ae26-fdb6a2a09d5b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "3e11057d-8cb4-411d-a077-8a13514b564b",
        "cursor": {
          "ref": "bcf277d2-7105-49f0-ab51-32da849c5651",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b241fc97-e9e7-422f-8293-0ea403194262"
        },
        "item": {
          "id": "3e11057d-8cb4-411d-a077-8a13514b564b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0f2b9b14-7dd5-4ef8-ae26-fdb6a2a09d5b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "40b86396-635d-4d45-92c3-b8662c3e5a47",
        "cursor": {
          "ref": "71d93173-5ca6-4599-93b7-c9719788fc57",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7afeb765-0b90-475f-bdff-a369fe1dec24"
        },
        "item": {
          "id": "40b86396-635d-4d45-92c3-b8662c3e5a47",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "295de9f2-98f2-4369-96d5-60fa68342af9",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "40b86396-635d-4d45-92c3-b8662c3e5a47",
        "cursor": {
          "ref": "71d93173-5ca6-4599-93b7-c9719788fc57",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7afeb765-0b90-475f-bdff-a369fe1dec24"
        },
        "item": {
          "id": "40b86396-635d-4d45-92c3-b8662c3e5a47",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "295de9f2-98f2-4369-96d5-60fa68342af9",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "807b4855-d383-447d-bd9e-540aaff08805",
        "cursor": {
          "ref": "f29b13d3-71a8-45bf-91dd-786046884099",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "77305e5d-e614-4464-b015-6751c59fbf4c"
        },
        "item": {
          "id": "807b4855-d383-447d-bd9e-540aaff08805",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "05793aa3-691f-4a2f-8da5-b02fa4422e70",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "807b4855-d383-447d-bd9e-540aaff08805",
        "cursor": {
          "ref": "f29b13d3-71a8-45bf-91dd-786046884099",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "77305e5d-e614-4464-b015-6751c59fbf4c"
        },
        "item": {
          "id": "807b4855-d383-447d-bd9e-540aaff08805",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "05793aa3-691f-4a2f-8da5-b02fa4422e70",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "0758e6d7-f6f0-40cf-a814-e57904f23fc6",
        "cursor": {
          "ref": "a43b2ac6-d966-4756-82a3-64a1404398f3",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b5e5aff2-b756-435a-9cfb-4c315313a5e9"
        },
        "item": {
          "id": "0758e6d7-f6f0-40cf-a814-e57904f23fc6",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7effe233-1951-424a-9e10-79a0427838e2",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "0758e6d7-f6f0-40cf-a814-e57904f23fc6",
        "cursor": {
          "ref": "a43b2ac6-d966-4756-82a3-64a1404398f3",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b5e5aff2-b756-435a-9cfb-4c315313a5e9"
        },
        "item": {
          "id": "0758e6d7-f6f0-40cf-a814-e57904f23fc6",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7effe233-1951-424a-9e10-79a0427838e2",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "68057e08-5478-47b8-96c2-bde221071cf8",
        "cursor": {
          "ref": "e48b6f5f-653b-40d0-8b02-0a90dc779d3f",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b3f8fef8-242a-47f7-b7ef-8b586fc312ba"
        },
        "item": {
          "id": "68057e08-5478-47b8-96c2-bde221071cf8",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2c1c3cfe-d62f-47f1-bfff-2d26466cc8d5",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "68057e08-5478-47b8-96c2-bde221071cf8",
        "cursor": {
          "ref": "e48b6f5f-653b-40d0-8b02-0a90dc779d3f",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b3f8fef8-242a-47f7-b7ef-8b586fc312ba"
        },
        "item": {
          "id": "68057e08-5478-47b8-96c2-bde221071cf8",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2c1c3cfe-d62f-47f1-bfff-2d26466cc8d5",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "7cc4cf64-23e2-4586-99f4-bf81949a0355",
        "cursor": {
          "ref": "51aa58a4-9c02-44b7-9e03-c777b10c5fd8",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6cd7a705-344e-4fc2-aa33-6e8f18f385e6"
        },
        "item": {
          "id": "7cc4cf64-23e2-4586-99f4-bf81949a0355",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3d67bf62-da32-4f3f-afe0-7529689545f5",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "7cc4cf64-23e2-4586-99f4-bf81949a0355",
        "cursor": {
          "ref": "51aa58a4-9c02-44b7-9e03-c777b10c5fd8",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6cd7a705-344e-4fc2-aa33-6e8f18f385e6"
        },
        "item": {
          "id": "7cc4cf64-23e2-4586-99f4-bf81949a0355",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3d67bf62-da32-4f3f-afe0-7529689545f5",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "1252b7b9-cdf8-44d0-b4fa-6be3a7f35925",
        "cursor": {
          "ref": "a19ddd00-af97-4b13-ad9d-c0e1edcce25c",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e49cbe19-104d-436d-96cc-e2b552f32dc7"
        },
        "item": {
          "id": "1252b7b9-cdf8-44d0-b4fa-6be3a7f35925",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "93e16571-7697-47be-b202-33269818e740",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "1252b7b9-cdf8-44d0-b4fa-6be3a7f35925",
        "cursor": {
          "ref": "a19ddd00-af97-4b13-ad9d-c0e1edcce25c",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e49cbe19-104d-436d-96cc-e2b552f32dc7"
        },
        "item": {
          "id": "1252b7b9-cdf8-44d0-b4fa-6be3a7f35925",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "93e16571-7697-47be-b202-33269818e740",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "64691ca3-815f-443f-8c6a-fa20f97507dc",
        "cursor": {
          "ref": "91471ccf-b083-4dda-9638-03e0226df970",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6f669980-3ec7-4fc5-b587-fea8a5c30525"
        },
        "item": {
          "id": "64691ca3-815f-443f-8c6a-fa20f97507dc",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "de8b5ef1-9976-4376-b879-643419d18ab2",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "64691ca3-815f-443f-8c6a-fa20f97507dc",
        "cursor": {
          "ref": "91471ccf-b083-4dda-9638-03e0226df970",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6f669980-3ec7-4fc5-b587-fea8a5c30525"
        },
        "item": {
          "id": "64691ca3-815f-443f-8c6a-fa20f97507dc",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "de8b5ef1-9976-4376-b879-643419d18ab2",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "d17cd027-b299-4e6a-8307-980ba5df3836",
        "cursor": {
          "ref": "6d4385f9-27b9-4806-a4c5-7732b8e79c72",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cd6aa71c-2c0b-475f-99e5-f6d0ee112525"
        },
        "item": {
          "id": "d17cd027-b299-4e6a-8307-980ba5df3836",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1f54d70c-5465-4eaf-93a6-c662b395b92b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "d17cd027-b299-4e6a-8307-980ba5df3836",
        "cursor": {
          "ref": "6d4385f9-27b9-4806-a4c5-7732b8e79c72",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cd6aa71c-2c0b-475f-99e5-f6d0ee112525"
        },
        "item": {
          "id": "d17cd027-b299-4e6a-8307-980ba5df3836",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1f54d70c-5465-4eaf-93a6-c662b395b92b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "ef7bd4a2-0e2e-48b3-8ccc-203c70b89c43",
        "cursor": {
          "ref": "edd7ed2d-77d8-4501-8e69-809a19ef9394",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b8a933bd-4240-4c06-bfca-69511964b9b5"
        },
        "item": {
          "id": "ef7bd4a2-0e2e-48b3-8ccc-203c70b89c43",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "43de45f5-a91d-4b0f-aa19-a77e3c43d6fe",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "ef7bd4a2-0e2e-48b3-8ccc-203c70b89c43",
        "cursor": {
          "ref": "edd7ed2d-77d8-4501-8e69-809a19ef9394",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b8a933bd-4240-4c06-bfca-69511964b9b5"
        },
        "item": {
          "id": "ef7bd4a2-0e2e-48b3-8ccc-203c70b89c43",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "43de45f5-a91d-4b0f-aa19-a77e3c43d6fe",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "1673dd20-0dc6-4b4b-a635-2a6c07fcd88e",
        "cursor": {
          "ref": "50dbead5-b10a-4c51-9393-5dd5b0ba205f",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e6159373-28c3-4f23-aff7-25fe809953b1"
        },
        "item": {
          "id": "1673dd20-0dc6-4b4b-a635-2a6c07fcd88e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "05a61988-6478-41a3-971d-aa0eba4977ca",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "1673dd20-0dc6-4b4b-a635-2a6c07fcd88e",
        "cursor": {
          "ref": "50dbead5-b10a-4c51-9393-5dd5b0ba205f",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e6159373-28c3-4f23-aff7-25fe809953b1"
        },
        "item": {
          "id": "1673dd20-0dc6-4b4b-a635-2a6c07fcd88e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "05a61988-6478-41a3-971d-aa0eba4977ca",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "0cf237a4-02e7-4842-bb96-f533a2f15a42",
        "cursor": {
          "ref": "84e65932-6646-4b95-a4bf-5852304a1fb3",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e38a8229-b529-4521-b1a3-7eacd533584a"
        },
        "item": {
          "id": "0cf237a4-02e7-4842-bb96-f533a2f15a42",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "58a8a593-e064-4027-bf23-694460d433c1",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "0cf237a4-02e7-4842-bb96-f533a2f15a42",
        "cursor": {
          "ref": "84e65932-6646-4b95-a4bf-5852304a1fb3",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e38a8229-b529-4521-b1a3-7eacd533584a"
        },
        "item": {
          "id": "0cf237a4-02e7-4842-bb96-f533a2f15a42",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "58a8a593-e064-4027-bf23-694460d433c1",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "f498959a-566a-4804-b9bf-cc15116d5f77",
        "cursor": {
          "ref": "9496259d-891f-42ff-b4fc-bd6ab9e18d34",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "42d0f5fd-b740-40f7-a9df-c6b09b286e94"
        },
        "item": {
          "id": "f498959a-566a-4804-b9bf-cc15116d5f77",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2e07dee5-f123-4dea-9b0f-e9c8a259347e",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "f498959a-566a-4804-b9bf-cc15116d5f77",
        "cursor": {
          "ref": "9496259d-891f-42ff-b4fc-bd6ab9e18d34",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "42d0f5fd-b740-40f7-a9df-c6b09b286e94"
        },
        "item": {
          "id": "f498959a-566a-4804-b9bf-cc15116d5f77",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2e07dee5-f123-4dea-9b0f-e9c8a259347e",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "84299b9b-2497-4e5a-8626-6ef983bc0b0d",
        "cursor": {
          "ref": "f9fc6a53-6c90-40e8-859d-d39fc9006e2b",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e6ec85a6-8cfd-400a-952b-10c1afbf52fd"
        },
        "item": {
          "id": "84299b9b-2497-4e5a-8626-6ef983bc0b0d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b38faae3-53c1-4296-9a8a-e84424048052",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "84299b9b-2497-4e5a-8626-6ef983bc0b0d",
        "cursor": {
          "ref": "f9fc6a53-6c90-40e8-859d-d39fc9006e2b",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e6ec85a6-8cfd-400a-952b-10c1afbf52fd"
        },
        "item": {
          "id": "84299b9b-2497-4e5a-8626-6ef983bc0b0d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b38faae3-53c1-4296-9a8a-e84424048052",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "0e325371-e7d0-406b-a310-4d62aef7081b",
        "cursor": {
          "ref": "3564b627-6fd9-4335-945e-d7428b3b6aea",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "688f0bee-d760-48db-bf90-cfaa14320f9e"
        },
        "item": {
          "id": "0e325371-e7d0-406b-a310-4d62aef7081b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "110b36d2-95a7-4b42-8e3c-d384df4eb783",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "0e325371-e7d0-406b-a310-4d62aef7081b",
        "cursor": {
          "ref": "3564b627-6fd9-4335-945e-d7428b3b6aea",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "688f0bee-d760-48db-bf90-cfaa14320f9e"
        },
        "item": {
          "id": "0e325371-e7d0-406b-a310-4d62aef7081b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "110b36d2-95a7-4b42-8e3c-d384df4eb783",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "d3c25697-c776-402f-b311-7d3a42135935",
        "cursor": {
          "ref": "c3b9669d-e787-424d-ad7d-024c6506ddab",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e9b48b0f-e76d-4cf6-a48d-1ed0a3c974f2"
        },
        "item": {
          "id": "d3c25697-c776-402f-b311-7d3a42135935",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "fc79f9d7-d3d6-4ab3-bb6a-046b572db982",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "d3c25697-c776-402f-b311-7d3a42135935",
        "cursor": {
          "ref": "c3b9669d-e787-424d-ad7d-024c6506ddab",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e9b48b0f-e76d-4cf6-a48d-1ed0a3c974f2"
        },
        "item": {
          "id": "d3c25697-c776-402f-b311-7d3a42135935",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "fc79f9d7-d3d6-4ab3-bb6a-046b572db982",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "8d646a69-2d26-45b9-a66a-b0a238011f5c",
        "cursor": {
          "ref": "8bc5b6d2-d84f-44b8-80be-26261c5866bd",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a8c7bdbf-dc9d-4762-af30-e37a6bd03f9a"
        },
        "item": {
          "id": "8d646a69-2d26-45b9-a66a-b0a238011f5c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "809ac081-39d1-40ad-9d98-1a796e8fcd97",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "8d646a69-2d26-45b9-a66a-b0a238011f5c",
        "cursor": {
          "ref": "8bc5b6d2-d84f-44b8-80be-26261c5866bd",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a8c7bdbf-dc9d-4762-af30-e37a6bd03f9a"
        },
        "item": {
          "id": "8d646a69-2d26-45b9-a66a-b0a238011f5c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "809ac081-39d1-40ad-9d98-1a796e8fcd97",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "01090d54-7d6d-41bc-92f8-90d3430694be",
        "cursor": {
          "ref": "cda750ae-4622-44cb-b69c-7a6f0f3ea4bc",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1f18c4b3-3860-47bc-8e65-b19ee94081c3"
        },
        "item": {
          "id": "01090d54-7d6d-41bc-92f8-90d3430694be",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "afd800f9-a312-44b6-b5da-88b80c7abbab",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "01090d54-7d6d-41bc-92f8-90d3430694be",
        "cursor": {
          "ref": "cda750ae-4622-44cb-b69c-7a6f0f3ea4bc",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1f18c4b3-3860-47bc-8e65-b19ee94081c3"
        },
        "item": {
          "id": "01090d54-7d6d-41bc-92f8-90d3430694be",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "afd800f9-a312-44b6-b5da-88b80c7abbab",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "c92cf547-3654-424f-b59a-776351ad3b88",
        "cursor": {
          "ref": "db88e6bd-092a-4d0e-8902-532c8bbe8918",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f0db770d-49da-46b8-9a34-5c1b7cbc35cc"
        },
        "item": {
          "id": "c92cf547-3654-424f-b59a-776351ad3b88",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c6af7a6e-a9f7-4f65-9dec-61339ae77fda",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "c92cf547-3654-424f-b59a-776351ad3b88",
        "cursor": {
          "ref": "db88e6bd-092a-4d0e-8902-532c8bbe8918",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f0db770d-49da-46b8-9a34-5c1b7cbc35cc"
        },
        "item": {
          "id": "c92cf547-3654-424f-b59a-776351ad3b88",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c6af7a6e-a9f7-4f65-9dec-61339ae77fda",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "8e2f6013-facc-4cef-9c2b-104e8f401416",
        "cursor": {
          "ref": "89dd6d44-1466-446c-8bc4-ca9ab4c13c3b",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "03322353-a2e9-4d23-b80e-f2b5cedf0faf"
        },
        "item": {
          "id": "8e2f6013-facc-4cef-9c2b-104e8f401416",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3039e3d1-dfa8-4984-9d2e-4a119c21f9f5",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "8e2f6013-facc-4cef-9c2b-104e8f401416",
        "cursor": {
          "ref": "89dd6d44-1466-446c-8bc4-ca9ab4c13c3b",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "03322353-a2e9-4d23-b80e-f2b5cedf0faf"
        },
        "item": {
          "id": "8e2f6013-facc-4cef-9c2b-104e8f401416",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3039e3d1-dfa8-4984-9d2e-4a119c21f9f5",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "dc7626e3-cf73-40b3-8e36-69e2c0b282b3",
        "cursor": {
          "ref": "1985c290-9a16-452c-a738-28bdccc88abc",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "14b8727b-262e-4c0c-aea8-d984eef6783d"
        },
        "item": {
          "id": "dc7626e3-cf73-40b3-8e36-69e2c0b282b3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "67bff5d4-8790-46de-9bd5-27ff6245b63c",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "dc7626e3-cf73-40b3-8e36-69e2c0b282b3",
        "cursor": {
          "ref": "1985c290-9a16-452c-a738-28bdccc88abc",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "14b8727b-262e-4c0c-aea8-d984eef6783d"
        },
        "item": {
          "id": "dc7626e3-cf73-40b3-8e36-69e2c0b282b3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "67bff5d4-8790-46de-9bd5-27ff6245b63c",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "d8b8e267-9712-4c42-87ab-6441c44e9758",
        "cursor": {
          "ref": "f8769e16-6689-44d8-9e65-6bab4caf6a73",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8727fb3c-a735-4390-8c65-7e72ff08e3a2"
        },
        "item": {
          "id": "d8b8e267-9712-4c42-87ab-6441c44e9758",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "387525f4-86d8-4df4-8bd4-e9535d7d2904",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "d8b8e267-9712-4c42-87ab-6441c44e9758",
        "cursor": {
          "ref": "f8769e16-6689-44d8-9e65-6bab4caf6a73",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8727fb3c-a735-4390-8c65-7e72ff08e3a2"
        },
        "item": {
          "id": "d8b8e267-9712-4c42-87ab-6441c44e9758",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "387525f4-86d8-4df4-8bd4-e9535d7d2904",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "dbfe3903-987f-4432-bea5-134b5e96cfb3",
        "cursor": {
          "ref": "d72dae3e-46c8-4ace-a77a-703ec1b6798c",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ee106405-8dfe-43b7-b8c7-bf3051a829e5"
        },
        "item": {
          "id": "dbfe3903-987f-4432-bea5-134b5e96cfb3",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a5595799-7e1a-45e2-aa2f-d705cf2f525a",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 19,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "dbfe3903-987f-4432-bea5-134b5e96cfb3",
        "cursor": {
          "ref": "d72dae3e-46c8-4ace-a77a-703ec1b6798c",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ee106405-8dfe-43b7-b8c7-bf3051a829e5"
        },
        "item": {
          "id": "dbfe3903-987f-4432-bea5-134b5e96cfb3",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a5595799-7e1a-45e2-aa2f-d705cf2f525a",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 19,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "40911c94-9e8d-4a9f-8d6b-52e28024fa51",
        "cursor": {
          "ref": "e96d73e9-7183-450e-8731-e6eddf058cda",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "79bb1a2b-df36-412d-a10b-6de3097e579e"
        },
        "item": {
          "id": "40911c94-9e8d-4a9f-8d6b-52e28024fa51",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "42e64187-fa2e-4f71-81c3-07e54067de32",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "40911c94-9e8d-4a9f-8d6b-52e28024fa51",
        "cursor": {
          "ref": "e96d73e9-7183-450e-8731-e6eddf058cda",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "79bb1a2b-df36-412d-a10b-6de3097e579e"
        },
        "item": {
          "id": "40911c94-9e8d-4a9f-8d6b-52e28024fa51",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "42e64187-fa2e-4f71-81c3-07e54067de32",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "5d8b863d-ac57-4b83-83ed-92415b0f9151",
        "cursor": {
          "ref": "aa66ce5d-3c33-4b4a-8b3a-b881c960093a",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7b771729-a213-4629-9c6b-e860eafa3c94"
        },
        "item": {
          "id": "5d8b863d-ac57-4b83-83ed-92415b0f9151",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2ccb90c9-55ed-47de-a9cb-1d57d458ab9d",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "5d8b863d-ac57-4b83-83ed-92415b0f9151",
        "cursor": {
          "ref": "aa66ce5d-3c33-4b4a-8b3a-b881c960093a",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7b771729-a213-4629-9c6b-e860eafa3c94"
        },
        "item": {
          "id": "5d8b863d-ac57-4b83-83ed-92415b0f9151",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2ccb90c9-55ed-47de-a9cb-1d57d458ab9d",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "e26778eb-7e58-4e07-b0bd-2a5caa7abbb2",
        "cursor": {
          "ref": "049f3a01-c59b-47ce-8650-c648761e873e",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4159e6d8-07a0-4ee3-91ec-67168db0665d"
        },
        "item": {
          "id": "e26778eb-7e58-4e07-b0bd-2a5caa7abbb2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4acaa909-40a5-45fb-b88d-f7d65b579f91",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "e26778eb-7e58-4e07-b0bd-2a5caa7abbb2",
        "cursor": {
          "ref": "049f3a01-c59b-47ce-8650-c648761e873e",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4159e6d8-07a0-4ee3-91ec-67168db0665d"
        },
        "item": {
          "id": "e26778eb-7e58-4e07-b0bd-2a5caa7abbb2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4acaa909-40a5-45fb-b88d-f7d65b579f91",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "d536aa4b-e1c1-499d-bf18-0143f494e733",
        "cursor": {
          "ref": "8e715803-bf6b-442e-8470-2cd88998d9c6",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "2422a49b-c292-4b1f-804e-5c7749f455f6"
        },
        "item": {
          "id": "d536aa4b-e1c1-499d-bf18-0143f494e733",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "29be89d0-6dd1-42fc-84d1-360f9b26351b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "d536aa4b-e1c1-499d-bf18-0143f494e733",
        "cursor": {
          "ref": "8e715803-bf6b-442e-8470-2cd88998d9c6",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "2422a49b-c292-4b1f-804e-5c7749f455f6"
        },
        "item": {
          "id": "d536aa4b-e1c1-499d-bf18-0143f494e733",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "29be89d0-6dd1-42fc-84d1-360f9b26351b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "a61de801-d9b8-41a7-ad92-37e75b61d877",
        "cursor": {
          "ref": "8c7d8f29-6fc1-4e4e-bb3d-1aa2bd28a4fc",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b3e21821-ea0b-478e-b4b2-eee34918ded1"
        },
        "item": {
          "id": "a61de801-d9b8-41a7-ad92-37e75b61d877",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "22fcb368-dd69-4036-8660-5c9503f6c234",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "a61de801-d9b8-41a7-ad92-37e75b61d877",
        "cursor": {
          "ref": "8c7d8f29-6fc1-4e4e-bb3d-1aa2bd28a4fc",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b3e21821-ea0b-478e-b4b2-eee34918ded1"
        },
        "item": {
          "id": "a61de801-d9b8-41a7-ad92-37e75b61d877",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "22fcb368-dd69-4036-8660-5c9503f6c234",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "d8b6748c-92e5-4988-a278-d98aa514f143",
        "cursor": {
          "ref": "de854ea8-b5c5-400f-addd-ca5c3980967c",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3dc59f4f-c7c1-43fa-af0c-b83fdff3b415"
        },
        "item": {
          "id": "d8b6748c-92e5-4988-a278-d98aa514f143",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5c6ce2c3-1a6a-4e69-ac8a-ba2fb512c060",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "d8b6748c-92e5-4988-a278-d98aa514f143",
        "cursor": {
          "ref": "de854ea8-b5c5-400f-addd-ca5c3980967c",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3dc59f4f-c7c1-43fa-af0c-b83fdff3b415"
        },
        "item": {
          "id": "d8b6748c-92e5-4988-a278-d98aa514f143",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5c6ce2c3-1a6a-4e69-ac8a-ba2fb512c060",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "1b013266-adbe-4991-8684-867f04aedb2f",
        "cursor": {
          "ref": "315fded8-65f4-432f-96c2-d08220089e9a",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f66c6dde-1e93-4b52-b818-0c7d413bb533"
        },
        "item": {
          "id": "1b013266-adbe-4991-8684-867f04aedb2f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "178ccf93-7fa7-4e51-a466-2ee8705273ef",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "1b013266-adbe-4991-8684-867f04aedb2f",
        "cursor": {
          "ref": "315fded8-65f4-432f-96c2-d08220089e9a",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f66c6dde-1e93-4b52-b818-0c7d413bb533"
        },
        "item": {
          "id": "1b013266-adbe-4991-8684-867f04aedb2f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "178ccf93-7fa7-4e51-a466-2ee8705273ef",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "f60924ee-305e-4e26-8142-f72030ecf2d9",
        "cursor": {
          "ref": "890eaac2-9d1b-4e64-995d-bd8e8ad18b18",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "bd458784-7fdb-472b-bb2a-7e999aaf037d"
        },
        "item": {
          "id": "f60924ee-305e-4e26-8142-f72030ecf2d9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "79dc9ad6-1d3f-4786-840d-40f7ee9d3590",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "f60924ee-305e-4e26-8142-f72030ecf2d9",
        "cursor": {
          "ref": "890eaac2-9d1b-4e64-995d-bd8e8ad18b18",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "bd458784-7fdb-472b-bb2a-7e999aaf037d"
        },
        "item": {
          "id": "f60924ee-305e-4e26-8142-f72030ecf2d9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "79dc9ad6-1d3f-4786-840d-40f7ee9d3590",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "d327f5e5-b9eb-4ad3-b737-a523f3b5a7db",
        "cursor": {
          "ref": "4a3fde4a-0eee-4ca6-a888-429b7fd76e75",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e7e6e6da-9ba0-4aa2-98ee-48bf7f7f747e"
        },
        "item": {
          "id": "d327f5e5-b9eb-4ad3-b737-a523f3b5a7db",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ab176c5d-3cee-4629-99b6-da1080c09862",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "d327f5e5-b9eb-4ad3-b737-a523f3b5a7db",
        "cursor": {
          "ref": "4a3fde4a-0eee-4ca6-a888-429b7fd76e75",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e7e6e6da-9ba0-4aa2-98ee-48bf7f7f747e"
        },
        "item": {
          "id": "d327f5e5-b9eb-4ad3-b737-a523f3b5a7db",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ab176c5d-3cee-4629-99b6-da1080c09862",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "1b9af254-8f0b-4733-8aec-56457a5b8867",
        "cursor": {
          "ref": "a601a4a6-3e4f-4b97-8062-90f78b0ef6da",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d5c7e81b-5c8a-4d30-9cf1-bbe88bf45446"
        },
        "item": {
          "id": "1b9af254-8f0b-4733-8aec-56457a5b8867",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "efa75e51-bb96-48df-93f9-9b4446bd048e",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "1b9af254-8f0b-4733-8aec-56457a5b8867",
        "cursor": {
          "ref": "a601a4a6-3e4f-4b97-8062-90f78b0ef6da",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d5c7e81b-5c8a-4d30-9cf1-bbe88bf45446"
        },
        "item": {
          "id": "1b9af254-8f0b-4733-8aec-56457a5b8867",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "efa75e51-bb96-48df-93f9-9b4446bd048e",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "ecea5ab6-c4c4-457b-82b9-ffd447b1b089",
        "cursor": {
          "ref": "1b23e391-45d8-4642-a2d2-d2f4696eaac3",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "74ab8b15-8182-471f-863d-9f6df62a2508"
        },
        "item": {
          "id": "ecea5ab6-c4c4-457b-82b9-ffd447b1b089",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d195e8fe-914c-413f-b719-c1cbef46b99e",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "ecea5ab6-c4c4-457b-82b9-ffd447b1b089",
        "cursor": {
          "ref": "1b23e391-45d8-4642-a2d2-d2f4696eaac3",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "74ab8b15-8182-471f-863d-9f6df62a2508"
        },
        "item": {
          "id": "ecea5ab6-c4c4-457b-82b9-ffd447b1b089",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d195e8fe-914c-413f-b719-c1cbef46b99e",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "4ca89b13-9e14-4b0d-a497-a46fe87b1cb1",
        "cursor": {
          "ref": "ee04060a-bced-41f0-8aa4-10c72e999329",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "10f23fbf-3141-43a4-8040-d90ca72aebec"
        },
        "item": {
          "id": "4ca89b13-9e14-4b0d-a497-a46fe87b1cb1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9e2bdc72-4d31-409f-b4ea-31289f34fba0",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "4ca89b13-9e14-4b0d-a497-a46fe87b1cb1",
        "cursor": {
          "ref": "ee04060a-bced-41f0-8aa4-10c72e999329",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "10f23fbf-3141-43a4-8040-d90ca72aebec"
        },
        "item": {
          "id": "4ca89b13-9e14-4b0d-a497-a46fe87b1cb1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9e2bdc72-4d31-409f-b4ea-31289f34fba0",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "6ea54dc1-723e-4d0b-8912-a43359fcce63",
        "cursor": {
          "ref": "f8a48703-6c98-4ac9-9790-79267dd333af",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "35485361-5775-4a99-a11f-c3a8f73c473e"
        },
        "item": {
          "id": "6ea54dc1-723e-4d0b-8912-a43359fcce63",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1dafa3b1-19ea-4876-b2b0-1fa999281b2c",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "6ea54dc1-723e-4d0b-8912-a43359fcce63",
        "cursor": {
          "ref": "f8a48703-6c98-4ac9-9790-79267dd333af",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "35485361-5775-4a99-a11f-c3a8f73c473e"
        },
        "item": {
          "id": "6ea54dc1-723e-4d0b-8912-a43359fcce63",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1dafa3b1-19ea-4876-b2b0-1fa999281b2c",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "d1a18d72-6a0b-453b-909f-d74fc3ff3cc0",
        "cursor": {
          "ref": "d4b334d7-9a18-4ac7-b9ca-9e0d980b9fee",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c07fdf76-8acf-493f-bbff-3a2b2bfda6f2"
        },
        "item": {
          "id": "d1a18d72-6a0b-453b-909f-d74fc3ff3cc0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "11bd72d8-6f14-457d-bf55-417c4283941b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "d1a18d72-6a0b-453b-909f-d74fc3ff3cc0",
        "cursor": {
          "ref": "d4b334d7-9a18-4ac7-b9ca-9e0d980b9fee",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c07fdf76-8acf-493f-bbff-3a2b2bfda6f2"
        },
        "item": {
          "id": "d1a18d72-6a0b-453b-909f-d74fc3ff3cc0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "11bd72d8-6f14-457d-bf55-417c4283941b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "9960d8ad-e297-4f8c-b1ff-b3910fbbcb9b",
        "cursor": {
          "ref": "5cc2b125-1d66-4543-a504-28b3d3853061",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0b08f31f-9c9e-4ad2-bd84-33242c668973"
        },
        "item": {
          "id": "9960d8ad-e297-4f8c-b1ff-b3910fbbcb9b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7269fe4b-d67f-431e-b7ef-cebeb058f692",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "9960d8ad-e297-4f8c-b1ff-b3910fbbcb9b",
        "cursor": {
          "ref": "5cc2b125-1d66-4543-a504-28b3d3853061",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0b08f31f-9c9e-4ad2-bd84-33242c668973"
        },
        "item": {
          "id": "9960d8ad-e297-4f8c-b1ff-b3910fbbcb9b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7269fe4b-d67f-431e-b7ef-cebeb058f692",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "fb6a2d10-7ac4-45bb-b5e8-dee3c6003559",
        "cursor": {
          "ref": "edd704c0-33ac-4a72-911c-1d009d01a5de",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a2fbdb66-b792-4cf3-ae93-69ac520ccc7a"
        },
        "item": {
          "id": "fb6a2d10-7ac4-45bb-b5e8-dee3c6003559",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8f231272-c085-4f58-8fc1-c949fcccd740",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "fb6a2d10-7ac4-45bb-b5e8-dee3c6003559",
        "cursor": {
          "ref": "edd704c0-33ac-4a72-911c-1d009d01a5de",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a2fbdb66-b792-4cf3-ae93-69ac520ccc7a"
        },
        "item": {
          "id": "fb6a2d10-7ac4-45bb-b5e8-dee3c6003559",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8f231272-c085-4f58-8fc1-c949fcccd740",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "b55ffec5-35c8-4dd8-aca1-547a11fcde80",
        "cursor": {
          "ref": "3408a219-bd22-45e0-84e7-623ae9462a95",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8663efe1-5477-4d44-8dc8-5cd66b13dd9f"
        },
        "item": {
          "id": "b55ffec5-35c8-4dd8-aca1-547a11fcde80",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "106db3d9-dfbe-4782-8fb5-d427d39ab7bf",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 19,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b55ffec5-35c8-4dd8-aca1-547a11fcde80",
        "cursor": {
          "ref": "3408a219-bd22-45e0-84e7-623ae9462a95",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8663efe1-5477-4d44-8dc8-5cd66b13dd9f"
        },
        "item": {
          "id": "b55ffec5-35c8-4dd8-aca1-547a11fcde80",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "106db3d9-dfbe-4782-8fb5-d427d39ab7bf",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 19,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "fa0ea465-0551-4d9f-9cca-7026f4dcf207",
        "cursor": {
          "ref": "1eeb4585-b895-46c9-b1cc-a01676dc12b2",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "419aa012-a9aa-4fda-8ebe-02658647016c"
        },
        "item": {
          "id": "fa0ea465-0551-4d9f-9cca-7026f4dcf207",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "67148b7d-f69a-47d5-b736-7b7000b3b60d",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "fa0ea465-0551-4d9f-9cca-7026f4dcf207",
        "cursor": {
          "ref": "1eeb4585-b895-46c9-b1cc-a01676dc12b2",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "419aa012-a9aa-4fda-8ebe-02658647016c"
        },
        "item": {
          "id": "fa0ea465-0551-4d9f-9cca-7026f4dcf207",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "67148b7d-f69a-47d5-b736-7b7000b3b60d",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "53869c9f-5b1a-4ddc-b0a7-4e1465ec6abc",
        "cursor": {
          "ref": "52205a0c-d6df-4a7b-9be0-ab78136f5489",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "154487a1-768b-4776-8d15-b84fee0a8956"
        },
        "item": {
          "id": "53869c9f-5b1a-4ddc-b0a7-4e1465ec6abc",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "be56ca4e-3df4-4b38-9225-c2fbc4a4267b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "53869c9f-5b1a-4ddc-b0a7-4e1465ec6abc",
        "cursor": {
          "ref": "52205a0c-d6df-4a7b-9be0-ab78136f5489",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "154487a1-768b-4776-8d15-b84fee0a8956"
        },
        "item": {
          "id": "53869c9f-5b1a-4ddc-b0a7-4e1465ec6abc",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "be56ca4e-3df4-4b38-9225-c2fbc4a4267b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "3d5350c2-050a-45be-904b-08ece1ab063d",
        "cursor": {
          "ref": "b6534b1f-fbf6-456f-ad12-58e5898a860d",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8fc1f9fb-2744-48e6-b739-c1e4971c6157"
        },
        "item": {
          "id": "3d5350c2-050a-45be-904b-08ece1ab063d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e511e353-0981-4c92-a3ab-551ede35b37b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "3d5350c2-050a-45be-904b-08ece1ab063d",
        "cursor": {
          "ref": "b6534b1f-fbf6-456f-ad12-58e5898a860d",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8fc1f9fb-2744-48e6-b739-c1e4971c6157"
        },
        "item": {
          "id": "3d5350c2-050a-45be-904b-08ece1ab063d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e511e353-0981-4c92-a3ab-551ede35b37b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "daf6c652-788c-4fbe-a8b9-ae8ca1293715",
        "cursor": {
          "ref": "ff93fc80-8ce6-4087-a134-cd1a243f1aab",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ca898803-d38b-4f47-9d2e-601d42ab3340"
        },
        "item": {
          "id": "daf6c652-788c-4fbe-a8b9-ae8ca1293715",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6ba18fdb-cd7a-4c8a-89b9-1de0b437b475",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "daf6c652-788c-4fbe-a8b9-ae8ca1293715",
        "cursor": {
          "ref": "ff93fc80-8ce6-4087-a134-cd1a243f1aab",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ca898803-d38b-4f47-9d2e-601d42ab3340"
        },
        "item": {
          "id": "daf6c652-788c-4fbe-a8b9-ae8ca1293715",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6ba18fdb-cd7a-4c8a-89b9-1de0b437b475",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "db582098-c29b-477b-bb02-5e563c7f1f54",
        "cursor": {
          "ref": "ad39f754-0c7a-4626-8c0b-aba78aae16da",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "459430fb-7f2d-47fd-87db-89084f8d1cff"
        },
        "item": {
          "id": "db582098-c29b-477b-bb02-5e563c7f1f54",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "83d9da19-7b1c-43b2-b6d9-8c454cac696a",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "db582098-c29b-477b-bb02-5e563c7f1f54",
        "cursor": {
          "ref": "ad39f754-0c7a-4626-8c0b-aba78aae16da",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "459430fb-7f2d-47fd-87db-89084f8d1cff"
        },
        "item": {
          "id": "db582098-c29b-477b-bb02-5e563c7f1f54",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "83d9da19-7b1c-43b2-b6d9-8c454cac696a",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "e67dbb9f-9d4b-4587-91e8-04258b5f8152",
        "cursor": {
          "ref": "03e96a30-e4f9-4663-b8b6-9c40c647bd24",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7bc50c83-4698-428c-ab90-9fec0f548354"
        },
        "item": {
          "id": "e67dbb9f-9d4b-4587-91e8-04258b5f8152",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b72697b3-6e9e-44b9-935d-058ed7206067",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "e67dbb9f-9d4b-4587-91e8-04258b5f8152",
        "cursor": {
          "ref": "03e96a30-e4f9-4663-b8b6-9c40c647bd24",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7bc50c83-4698-428c-ab90-9fec0f548354"
        },
        "item": {
          "id": "e67dbb9f-9d4b-4587-91e8-04258b5f8152",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b72697b3-6e9e-44b9-935d-058ed7206067",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "1aed7891-437f-4cad-9b00-3ce3fee6a8a0",
        "cursor": {
          "ref": "548223fa-a807-44aa-94f3-7b536111af26",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8c27a81d-7f45-4ad9-9e08-862097cf9dd2"
        },
        "item": {
          "id": "1aed7891-437f-4cad-9b00-3ce3fee6a8a0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6af990da-223c-45b0-a31a-95ab05d984f7",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "1aed7891-437f-4cad-9b00-3ce3fee6a8a0",
        "cursor": {
          "ref": "548223fa-a807-44aa-94f3-7b536111af26",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8c27a81d-7f45-4ad9-9e08-862097cf9dd2"
        },
        "item": {
          "id": "1aed7891-437f-4cad-9b00-3ce3fee6a8a0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6af990da-223c-45b0-a31a-95ab05d984f7",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "ba20baa1-3b5f-42e2-9b1e-8943230229c9",
        "cursor": {
          "ref": "24c227fb-ff2e-4554-9255-1dfd5fcdc079",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1addd780-3437-400d-9b9e-208e88cc4aad"
        },
        "item": {
          "id": "ba20baa1-3b5f-42e2-9b1e-8943230229c9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a3934ae6-247e-4d64-942f-c72af4a3cd02",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "ba20baa1-3b5f-42e2-9b1e-8943230229c9",
        "cursor": {
          "ref": "24c227fb-ff2e-4554-9255-1dfd5fcdc079",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1addd780-3437-400d-9b9e-208e88cc4aad"
        },
        "item": {
          "id": "ba20baa1-3b5f-42e2-9b1e-8943230229c9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a3934ae6-247e-4d64-942f-c72af4a3cd02",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "524567a3-721d-4a0d-bf25-270c0a858c2f",
        "cursor": {
          "ref": "84711a3e-ddce-4522-bb87-da2f1a715a42",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8e91954d-9a21-4166-8284-2e46cc79a1b7"
        },
        "item": {
          "id": "524567a3-721d-4a0d-bf25-270c0a858c2f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ca4ad447-3e62-4e56-a60d-1b6b8ec5f41c",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "524567a3-721d-4a0d-bf25-270c0a858c2f",
        "cursor": {
          "ref": "84711a3e-ddce-4522-bb87-da2f1a715a42",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8e91954d-9a21-4166-8284-2e46cc79a1b7"
        },
        "item": {
          "id": "524567a3-721d-4a0d-bf25-270c0a858c2f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ca4ad447-3e62-4e56-a60d-1b6b8ec5f41c",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "37218cc1-1618-4cd8-9464-65b6486a5a51",
        "cursor": {
          "ref": "63e03a38-55da-4f7f-8c55-50314bda0b46",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4e158f3a-1a13-42b8-b008-bf855ba20329"
        },
        "item": {
          "id": "37218cc1-1618-4cd8-9464-65b6486a5a51",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "124accc9-bdfe-4dc1-9918-3625d26ceef6",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "37218cc1-1618-4cd8-9464-65b6486a5a51",
        "cursor": {
          "ref": "63e03a38-55da-4f7f-8c55-50314bda0b46",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4e158f3a-1a13-42b8-b008-bf855ba20329"
        },
        "item": {
          "id": "37218cc1-1618-4cd8-9464-65b6486a5a51",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "124accc9-bdfe-4dc1-9918-3625d26ceef6",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "5e52186c-1c7a-4d3b-ae95-b8ddab14dec8",
        "cursor": {
          "ref": "4cccd7e2-bd9f-4a06-a8f1-302d1dabaaee",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "bb709feb-fbef-4083-90b6-f4ba468d68f7"
        },
        "item": {
          "id": "5e52186c-1c7a-4d3b-ae95-b8ddab14dec8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d33ca599-af3f-4b26-b793-2c7d56757fb0",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "5e52186c-1c7a-4d3b-ae95-b8ddab14dec8",
        "cursor": {
          "ref": "4cccd7e2-bd9f-4a06-a8f1-302d1dabaaee",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "bb709feb-fbef-4083-90b6-f4ba468d68f7"
        },
        "item": {
          "id": "5e52186c-1c7a-4d3b-ae95-b8ddab14dec8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d33ca599-af3f-4b26-b793-2c7d56757fb0",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "2b887c61-b2db-4af1-b6c8-4ed6f5f5aa73",
        "cursor": {
          "ref": "75b6f26c-4a09-4a49-8a9d-38a555fa1336",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8c9ea0b2-52b5-48d9-93be-56f838c0245a"
        },
        "item": {
          "id": "2b887c61-b2db-4af1-b6c8-4ed6f5f5aa73",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "aff8fa6c-da89-407f-a78b-f21e85eac552",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "2b887c61-b2db-4af1-b6c8-4ed6f5f5aa73",
        "cursor": {
          "ref": "75b6f26c-4a09-4a49-8a9d-38a555fa1336",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8c9ea0b2-52b5-48d9-93be-56f838c0245a"
        },
        "item": {
          "id": "2b887c61-b2db-4af1-b6c8-4ed6f5f5aa73",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "aff8fa6c-da89-407f-a78b-f21e85eac552",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "0e069e41-fc8d-44cc-ac7d-bb0750aede76",
        "cursor": {
          "ref": "ca3052f1-0f45-468e-a2e7-ee24616419f1",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d5013b80-1569-49e1-9329-59129ebe24b0"
        },
        "item": {
          "id": "0e069e41-fc8d-44cc-ac7d-bb0750aede76",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6f932ed6-98ae-40f4-bec5-8d06c2108dcf",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "0e069e41-fc8d-44cc-ac7d-bb0750aede76",
        "cursor": {
          "ref": "ca3052f1-0f45-468e-a2e7-ee24616419f1",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d5013b80-1569-49e1-9329-59129ebe24b0"
        },
        "item": {
          "id": "0e069e41-fc8d-44cc-ac7d-bb0750aede76",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6f932ed6-98ae-40f4-bec5-8d06c2108dcf",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "717f3dda-17fa-4259-8789-8b33b20ee5b2",
        "cursor": {
          "ref": "fbb415f1-e3df-423d-9d61-b5fb68fbef7d",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "af8c8bb6-584d-43e8-bd9c-1b5160c511eb"
        },
        "item": {
          "id": "717f3dda-17fa-4259-8789-8b33b20ee5b2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "44f4ef9b-0d5b-49b7-beb1-ffcba662824b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "717f3dda-17fa-4259-8789-8b33b20ee5b2",
        "cursor": {
          "ref": "fbb415f1-e3df-423d-9d61-b5fb68fbef7d",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "af8c8bb6-584d-43e8-bd9c-1b5160c511eb"
        },
        "item": {
          "id": "717f3dda-17fa-4259-8789-8b33b20ee5b2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "44f4ef9b-0d5b-49b7-beb1-ffcba662824b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "8156a1b8-254f-4a18-b115-2e85ab310118",
        "cursor": {
          "ref": "f25c5cc3-d210-41b0-ac2d-108375748edb",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "643f7578-0f45-4550-ba77-8ab8ddd33b60"
        },
        "item": {
          "id": "8156a1b8-254f-4a18-b115-2e85ab310118",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d6989e3a-49f9-403e-a98d-60034a63e491",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "8156a1b8-254f-4a18-b115-2e85ab310118",
        "cursor": {
          "ref": "f25c5cc3-d210-41b0-ac2d-108375748edb",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "643f7578-0f45-4550-ba77-8ab8ddd33b60"
        },
        "item": {
          "id": "8156a1b8-254f-4a18-b115-2e85ab310118",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d6989e3a-49f9-403e-a98d-60034a63e491",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "9cd53d41-3685-45d3-8ea1-9468ddf7d95a",
        "cursor": {
          "ref": "6023e7c3-2751-49c7-8965-b33be2b03e4f",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "101f524a-67f6-45da-a7a1-a4fbd1b9a7f8"
        },
        "item": {
          "id": "9cd53d41-3685-45d3-8ea1-9468ddf7d95a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "942bf8b9-744f-409b-8c95-f3ff3f783b25",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "9cd53d41-3685-45d3-8ea1-9468ddf7d95a",
        "cursor": {
          "ref": "6023e7c3-2751-49c7-8965-b33be2b03e4f",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "101f524a-67f6-45da-a7a1-a4fbd1b9a7f8"
        },
        "item": {
          "id": "9cd53d41-3685-45d3-8ea1-9468ddf7d95a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "942bf8b9-744f-409b-8c95-f3ff3f783b25",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "8936df63-b67e-4649-8aaa-9bd87aac2cc2",
        "cursor": {
          "ref": "5ccf714a-ea27-4af3-8b98-11e07a84df16",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "00eb1d5b-0701-4612-a8b2-c61bf52b4c66"
        },
        "item": {
          "id": "8936df63-b67e-4649-8aaa-9bd87aac2cc2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0b9a6d25-5bf0-4342-9b98-9adad2c50858",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "8936df63-b67e-4649-8aaa-9bd87aac2cc2",
        "cursor": {
          "ref": "5ccf714a-ea27-4af3-8b98-11e07a84df16",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "00eb1d5b-0701-4612-a8b2-c61bf52b4c66"
        },
        "item": {
          "id": "8936df63-b67e-4649-8aaa-9bd87aac2cc2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0b9a6d25-5bf0-4342-9b98-9adad2c50858",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 18,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "2a1961c8-e144-4b5f-9c57-b774b784709a",
        "cursor": {
          "ref": "9914a20c-ff88-4656-9f8b-05d502bcfd75",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3c0a6f82-711c-41bf-87fb-b684bc76c3e0"
        },
        "item": {
          "id": "2a1961c8-e144-4b5f-9c57-b774b784709a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0fb27856-1e40-4777-be6a-5e4289a9ba29",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "2a1961c8-e144-4b5f-9c57-b774b784709a",
        "cursor": {
          "ref": "9914a20c-ff88-4656-9f8b-05d502bcfd75",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3c0a6f82-711c-41bf-87fb-b684bc76c3e0"
        },
        "item": {
          "id": "2a1961c8-e144-4b5f-9c57-b774b784709a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0fb27856-1e40-4777-be6a-5e4289a9ba29",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "a79fad6e-1068-408f-bc0c-1fc933542d00",
        "cursor": {
          "ref": "66a9bc2d-62be-4edb-8ad9-19292998f8bb",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "289ea2e5-26d1-464c-8870-86f09520ff02"
        },
        "item": {
          "id": "a79fad6e-1068-408f-bc0c-1fc933542d00",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "208a4447-6582-4f85-8c0f-db4d5848c3bf",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "a79fad6e-1068-408f-bc0c-1fc933542d00",
        "cursor": {
          "ref": "66a9bc2d-62be-4edb-8ad9-19292998f8bb",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "289ea2e5-26d1-464c-8870-86f09520ff02"
        },
        "item": {
          "id": "a79fad6e-1068-408f-bc0c-1fc933542d00",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "208a4447-6582-4f85-8c0f-db4d5848c3bf",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "71980ef9-32c5-45fb-8a5d-5ac4310fa751",
        "cursor": {
          "ref": "d9d24ee7-08c3-4dff-979d-019c239c8764",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1322a664-ce1d-449e-9ab6-3a17a088dd38"
        },
        "item": {
          "id": "71980ef9-32c5-45fb-8a5d-5ac4310fa751",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f8ce550e-0861-4215-a032-c11e09119205",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "71980ef9-32c5-45fb-8a5d-5ac4310fa751",
        "cursor": {
          "ref": "d9d24ee7-08c3-4dff-979d-019c239c8764",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1322a664-ce1d-449e-9ab6-3a17a088dd38"
        },
        "item": {
          "id": "71980ef9-32c5-45fb-8a5d-5ac4310fa751",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f8ce550e-0861-4215-a032-c11e09119205",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "6e69154d-2e70-4510-853e-968f9e012aef",
        "cursor": {
          "ref": "7d916dd4-c075-4708-835a-5cac33b6d5f6",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5b5ec8b2-aa53-4156-9d34-8cba16161d6f"
        },
        "item": {
          "id": "6e69154d-2e70-4510-853e-968f9e012aef",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "72792d2d-824f-4a6a-92a3-34b9a47098ea",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "6e69154d-2e70-4510-853e-968f9e012aef",
        "cursor": {
          "ref": "7d916dd4-c075-4708-835a-5cac33b6d5f6",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5b5ec8b2-aa53-4156-9d34-8cba16161d6f"
        },
        "item": {
          "id": "6e69154d-2e70-4510-853e-968f9e012aef",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "72792d2d-824f-4a6a-92a3-34b9a47098ea",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 16,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "bc343665-4c02-4f5c-83e4-f8db5a83c4fd",
        "cursor": {
          "ref": "e1567f0c-5253-4ae9-9d21-eb7413edee0f",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a8cd95a1-5ec3-433b-9576-b5521ea9d8b8"
        },
        "item": {
          "id": "bc343665-4c02-4f5c-83e4-f8db5a83c4fd",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7ab01e26-86ec-4a22-a034-e094727832cc",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "bc343665-4c02-4f5c-83e4-f8db5a83c4fd",
        "cursor": {
          "ref": "e1567f0c-5253-4ae9-9d21-eb7413edee0f",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a8cd95a1-5ec3-433b-9576-b5521ea9d8b8"
        },
        "item": {
          "id": "bc343665-4c02-4f5c-83e4-f8db5a83c4fd",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7ab01e26-86ec-4a22-a034-e094727832cc",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "ca5b87d0-63f0-4c1a-b6a3-9388ea8d97ff",
        "cursor": {
          "ref": "1c9ccfc0-1ca8-45d9-abe4-dd1119dec859",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d7dc55e9-b939-4196-8cae-5643083a1bb8"
        },
        "item": {
          "id": "ca5b87d0-63f0-4c1a-b6a3-9388ea8d97ff",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e7134163-aa77-4657-ada8-80d20a1bf3b6",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "ca5b87d0-63f0-4c1a-b6a3-9388ea8d97ff",
        "cursor": {
          "ref": "1c9ccfc0-1ca8-45d9-abe4-dd1119dec859",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d7dc55e9-b939-4196-8cae-5643083a1bb8"
        },
        "item": {
          "id": "ca5b87d0-63f0-4c1a-b6a3-9388ea8d97ff",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e7134163-aa77-4657-ada8-80d20a1bf3b6",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "3d407e27-8eb8-4ae2-9c1d-290d9638eb55",
        "cursor": {
          "ref": "916d0d0f-89fe-4e79-af1b-572aef8ab381",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ab6ff886-fe0b-477b-b0cb-8d64a80483da"
        },
        "item": {
          "id": "3d407e27-8eb8-4ae2-9c1d-290d9638eb55",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "00ce8a90-5769-4278-9660-a6d4587af2c8",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "3d407e27-8eb8-4ae2-9c1d-290d9638eb55",
        "cursor": {
          "ref": "916d0d0f-89fe-4e79-af1b-572aef8ab381",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ab6ff886-fe0b-477b-b0cb-8d64a80483da"
        },
        "item": {
          "id": "3d407e27-8eb8-4ae2-9c1d-290d9638eb55",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "00ce8a90-5769-4278-9660-a6d4587af2c8",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 17,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "e33719d0-1d61-480e-8735-dc71c81ef1a7",
        "cursor": {
          "ref": "94268312-45b6-4b13-b080-733e119c678e",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "fa39dfca-26af-4622-bd98-c6623810084d"
        },
        "item": {
          "id": "e33719d0-1d61-480e-8735-dc71c81ef1a7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "325b6a03-2393-429b-8cea-62ff8ed296b7",
          "status": "Gateway Time-out",
          "code": 504,
          "responseTime": 10018,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 504",
              "stack": "AssertionError: expected response to have status code 400 but got 504\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "e33719d0-1d61-480e-8735-dc71c81ef1a7",
        "cursor": {
          "ref": "94268312-45b6-4b13-b080-733e119c678e",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "fa39dfca-26af-4622-bd98-c6623810084d"
        },
        "item": {
          "id": "e33719d0-1d61-480e-8735-dc71c81ef1a7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "325b6a03-2393-429b-8cea-62ff8ed296b7",
          "status": "Gateway Time-out",
          "code": 504,
          "responseTime": 10018,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 504",
              "stack": "AssertionError: expected response to have status code 400 but got 504\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "ee7c717e-f99b-4f69-9a41-33833252939d",
        "cursor": {
          "ref": "012d271f-bcc9-4cdf-9d78-8fd15cbc021d",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e452e65e-df04-42f6-81f6-13df816638b4"
        },
        "item": {
          "id": "ee7c717e-f99b-4f69-9a41-33833252939d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "53b0ed81-961e-4dbc-b110-eb6356d1d54c",
          "status": "Gateway Time-out",
          "code": 504,
          "responseTime": 10019,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 504",
              "stack": "AssertionError: expected response to have status code 400 but got 504\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "ee7c717e-f99b-4f69-9a41-33833252939d",
        "cursor": {
          "ref": "012d271f-bcc9-4cdf-9d78-8fd15cbc021d",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e452e65e-df04-42f6-81f6-13df816638b4"
        },
        "item": {
          "id": "ee7c717e-f99b-4f69-9a41-33833252939d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "53b0ed81-961e-4dbc-b110-eb6356d1d54c",
          "status": "Gateway Time-out",
          "code": 504,
          "responseTime": 10019,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 504",
              "stack": "AssertionError: expected response to have status code 400 but got 504\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "f9c0b157-5e6a-4c56-8f96-c0247a1c52cb",
        "cursor": {
          "ref": "cdaec821-9518-4f6b-8c87-d58f8cfccedf",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3d450c15-f9b1-464a-b5b5-f9625bb438cf"
        },
        "item": {
          "id": "f9c0b157-5e6a-4c56-8f96-c0247a1c52cb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e54a36ff-3b53-49cc-b916-8afad812decd",
          "status": "Gateway Time-out",
          "code": 504,
          "responseTime": 10019,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 504",
              "stack": "AssertionError: expected response to have status code 400 but got 504\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "f9c0b157-5e6a-4c56-8f96-c0247a1c52cb",
        "cursor": {
          "ref": "cdaec821-9518-4f6b-8c87-d58f8cfccedf",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3d450c15-f9b1-464a-b5b5-f9625bb438cf"
        },
        "item": {
          "id": "f9c0b157-5e6a-4c56-8f96-c0247a1c52cb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e54a36ff-3b53-49cc-b916-8afad812decd",
          "status": "Gateway Time-out",
          "code": 504,
          "responseTime": 10019,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 504",
              "stack": "AssertionError: expected response to have status code 400 but got 504\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "5232bf2f-38b6-444c-8e08-af8df97bb298",
        "cursor": {
          "ref": "6e628ed9-b00a-496a-a0d2-d12f84b9b9e4",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2aa04b0e-9277-40da-8e29-f12d52082da8"
        },
        "item": {
          "id": "5232bf2f-38b6-444c-8e08-af8df97bb298",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c1ba7b76-5035-44f3-8441-64c63e73dace",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "5232bf2f-38b6-444c-8e08-af8df97bb298",
        "cursor": {
          "ref": "6e628ed9-b00a-496a-a0d2-d12f84b9b9e4",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2aa04b0e-9277-40da-8e29-f12d52082da8"
        },
        "item": {
          "id": "5232bf2f-38b6-444c-8e08-af8df97bb298",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c1ba7b76-5035-44f3-8441-64c63e73dace",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "70929625-7c5b-44a6-949b-493a28b02268",
        "cursor": {
          "ref": "76d14adb-dfc6-425f-a371-0fb0280347fb",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f8fe102b-64ae-4cab-80a4-f2993498e3e9"
        },
        "item": {
          "id": "70929625-7c5b-44a6-949b-493a28b02268",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5f3eab1b-1ebb-4d2f-b692-deaef64c3184",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "70929625-7c5b-44a6-949b-493a28b02268",
        "cursor": {
          "ref": "76d14adb-dfc6-425f-a371-0fb0280347fb",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f8fe102b-64ae-4cab-80a4-f2993498e3e9"
        },
        "item": {
          "id": "70929625-7c5b-44a6-949b-493a28b02268",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5f3eab1b-1ebb-4d2f-b692-deaef64c3184",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "64fbed77-df6a-453d-b48f-15598992f5c5",
        "cursor": {
          "ref": "362889be-7494-4028-8247-ec6b712ef9f4",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fa6fbd13-fee5-4322-a327-8e3ea556c3fe"
        },
        "item": {
          "id": "64fbed77-df6a-453d-b48f-15598992f5c5",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "17069424-364e-4ba2-ab41-53ef3cfbcca0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "64fbed77-df6a-453d-b48f-15598992f5c5",
        "cursor": {
          "ref": "362889be-7494-4028-8247-ec6b712ef9f4",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fa6fbd13-fee5-4322-a327-8e3ea556c3fe"
        },
        "item": {
          "id": "64fbed77-df6a-453d-b48f-15598992f5c5",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "17069424-364e-4ba2-ab41-53ef3cfbcca0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "1d730136-8458-451a-820f-dab2fca316b5",
        "cursor": {
          "ref": "cdec6eb9-ea09-49cc-808f-db1a6c735e7c",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1a1bf7e6-2709-423d-90e0-24614c64ce3d"
        },
        "item": {
          "id": "1d730136-8458-451a-820f-dab2fca316b5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "55f2bb90-06cf-49f4-b158-b06394b00039",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "1d730136-8458-451a-820f-dab2fca316b5",
        "cursor": {
          "ref": "cdec6eb9-ea09-49cc-808f-db1a6c735e7c",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1a1bf7e6-2709-423d-90e0-24614c64ce3d"
        },
        "item": {
          "id": "1d730136-8458-451a-820f-dab2fca316b5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "55f2bb90-06cf-49f4-b158-b06394b00039",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "2332415b-fd92-4702-b2ce-84c487392c56",
        "cursor": {
          "ref": "fc6fb73f-3617-4e34-8786-db10333d335b",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "95e7ae1e-9881-412f-a6a1-0dec9e40b561"
        },
        "item": {
          "id": "2332415b-fd92-4702-b2ce-84c487392c56",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4e03eb07-7ff8-4e9b-a931-41641867eb63",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "2332415b-fd92-4702-b2ce-84c487392c56",
        "cursor": {
          "ref": "fc6fb73f-3617-4e34-8786-db10333d335b",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "95e7ae1e-9881-412f-a6a1-0dec9e40b561"
        },
        "item": {
          "id": "2332415b-fd92-4702-b2ce-84c487392c56",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4e03eb07-7ff8-4e9b-a931-41641867eb63",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "31307496-435e-4984-a034-4525d88bc597",
        "cursor": {
          "ref": "2019e1b9-6d6e-4530-a450-ab7cdb50c5ce",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5ddaacc8-8959-44b6-8130-d731bfffc6ba"
        },
        "item": {
          "id": "31307496-435e-4984-a034-4525d88bc597",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "26a70d8c-4e22-47dd-a352-6f866599d5ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "31307496-435e-4984-a034-4525d88bc597",
        "cursor": {
          "ref": "2019e1b9-6d6e-4530-a450-ab7cdb50c5ce",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5ddaacc8-8959-44b6-8130-d731bfffc6ba"
        },
        "item": {
          "id": "31307496-435e-4984-a034-4525d88bc597",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "26a70d8c-4e22-47dd-a352-6f866599d5ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "4a9c0456-dbb0-45b5-a7b6-ebb3effd2e82",
        "cursor": {
          "ref": "368c43e0-7037-4e58-8dc3-7f15007ed150",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0a0fd39d-0339-47e7-993d-afda2574d41b"
        },
        "item": {
          "id": "4a9c0456-dbb0-45b5-a7b6-ebb3effd2e82",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fae308a8-e232-4895-bf0f-76ffff757e24",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "4a9c0456-dbb0-45b5-a7b6-ebb3effd2e82",
        "cursor": {
          "ref": "368c43e0-7037-4e58-8dc3-7f15007ed150",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0a0fd39d-0339-47e7-993d-afda2574d41b"
        },
        "item": {
          "id": "4a9c0456-dbb0-45b5-a7b6-ebb3effd2e82",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fae308a8-e232-4895-bf0f-76ffff757e24",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "476d451a-c0d8-44cf-9a9a-2a8abd777a9d",
        "cursor": {
          "ref": "f208c7ff-2d1b-45ae-8227-07d66e034a87",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c6aa5c92-2bd5-4e72-a8e3-d11c987bc96c"
        },
        "item": {
          "id": "476d451a-c0d8-44cf-9a9a-2a8abd777a9d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f118667e-fa41-41f0-a72a-6743a0024587",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "476d451a-c0d8-44cf-9a9a-2a8abd777a9d",
        "cursor": {
          "ref": "f208c7ff-2d1b-45ae-8227-07d66e034a87",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c6aa5c92-2bd5-4e72-a8e3-d11c987bc96c"
        },
        "item": {
          "id": "476d451a-c0d8-44cf-9a9a-2a8abd777a9d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f118667e-fa41-41f0-a72a-6743a0024587",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "996798fe-5a11-47f8-96fb-150e14e312d8",
        "cursor": {
          "ref": "bcecbaef-1fd9-4b7b-8f9e-576f04f1b566",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "71e12a13-74d5-41ce-844b-710fe1f3c978"
        },
        "item": {
          "id": "996798fe-5a11-47f8-96fb-150e14e312d8",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f7b439f2-d421-4d1a-94c3-94e65d40f161",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "996798fe-5a11-47f8-96fb-150e14e312d8",
        "cursor": {
          "ref": "bcecbaef-1fd9-4b7b-8f9e-576f04f1b566",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "71e12a13-74d5-41ce-844b-710fe1f3c978"
        },
        "item": {
          "id": "996798fe-5a11-47f8-96fb-150e14e312d8",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f7b439f2-d421-4d1a-94c3-94e65d40f161",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "d02bacfd-ec62-4000-920d-af68611aff6a",
        "cursor": {
          "ref": "5d752074-5c5b-48f2-8a59-86e99d3b6160",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "83d73049-c85e-4bf3-a4a4-b645c90435fa"
        },
        "item": {
          "id": "d02bacfd-ec62-4000-920d-af68611aff6a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "355ab052-d605-4e9f-bbce-cc58338ed14d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "d02bacfd-ec62-4000-920d-af68611aff6a",
        "cursor": {
          "ref": "5d752074-5c5b-48f2-8a59-86e99d3b6160",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "83d73049-c85e-4bf3-a4a4-b645c90435fa"
        },
        "item": {
          "id": "d02bacfd-ec62-4000-920d-af68611aff6a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "355ab052-d605-4e9f-bbce-cc58338ed14d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "a07c46af-504a-4dfd-b2da-15584ef76ccc",
        "cursor": {
          "ref": "83845b78-efea-4c93-b9d9-296023090652",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a27cb11b-0508-49d1-a917-feb2cb266f9f"
        },
        "item": {
          "id": "a07c46af-504a-4dfd-b2da-15584ef76ccc",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7ea05c09-1e2d-4e67-993a-80a00d5ba253",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "a07c46af-504a-4dfd-b2da-15584ef76ccc",
        "cursor": {
          "ref": "83845b78-efea-4c93-b9d9-296023090652",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a27cb11b-0508-49d1-a917-feb2cb266f9f"
        },
        "item": {
          "id": "a07c46af-504a-4dfd-b2da-15584ef76ccc",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7ea05c09-1e2d-4e67-993a-80a00d5ba253",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "1ab6b837-e172-4e0c-9ab2-60566c19c5a1",
        "cursor": {
          "ref": "b4ec7d95-503f-4fac-b32d-960eb77c8913",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b3744dbe-92fa-4c16-b13b-32b0a982c3c0"
        },
        "item": {
          "id": "1ab6b837-e172-4e0c-9ab2-60566c19c5a1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "2dde4daf-bd36-4e25-a966-bfe34521c16c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "1ab6b837-e172-4e0c-9ab2-60566c19c5a1",
        "cursor": {
          "ref": "b4ec7d95-503f-4fac-b32d-960eb77c8913",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b3744dbe-92fa-4c16-b13b-32b0a982c3c0"
        },
        "item": {
          "id": "1ab6b837-e172-4e0c-9ab2-60566c19c5a1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "2dde4daf-bd36-4e25-a966-bfe34521c16c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "54f7d0d8-b33d-4e51-b461-978835063eb3",
        "cursor": {
          "ref": "c76fb38b-71be-429a-8375-b5494827174b",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "08111dad-507d-49ff-ad54-098cb0405215"
        },
        "item": {
          "id": "54f7d0d8-b33d-4e51-b461-978835063eb3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "68f131b9-1fcc-41d8-99ad-e6fc19899ef2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "54f7d0d8-b33d-4e51-b461-978835063eb3",
        "cursor": {
          "ref": "c76fb38b-71be-429a-8375-b5494827174b",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "08111dad-507d-49ff-ad54-098cb0405215"
        },
        "item": {
          "id": "54f7d0d8-b33d-4e51-b461-978835063eb3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "68f131b9-1fcc-41d8-99ad-e6fc19899ef2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "f7ab4ed5-6df3-46fc-ae64-843b9b5993c8",
        "cursor": {
          "ref": "03daecc0-fa7a-4151-b493-cdba9eb2da5b",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7c3cbd68-4dc9-4cec-9c23-b5b93e9df6ec"
        },
        "item": {
          "id": "f7ab4ed5-6df3-46fc-ae64-843b9b5993c8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "cc3284ec-0dbc-460e-8554-ebbc1745eeec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "f7ab4ed5-6df3-46fc-ae64-843b9b5993c8",
        "cursor": {
          "ref": "03daecc0-fa7a-4151-b493-cdba9eb2da5b",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7c3cbd68-4dc9-4cec-9c23-b5b93e9df6ec"
        },
        "item": {
          "id": "f7ab4ed5-6df3-46fc-ae64-843b9b5993c8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "cc3284ec-0dbc-460e-8554-ebbc1745eeec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "9bab28cc-4063-46ba-9b6a-c2f69c2d93cc",
        "cursor": {
          "ref": "9c686a6a-6a54-4c86-8391-96ca48d591ea",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f6de526f-ccad-4f2c-8828-f106f467b947"
        },
        "item": {
          "id": "9bab28cc-4063-46ba-9b6a-c2f69c2d93cc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8d786e4e-5a33-4376-a49a-617cb2ac664d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "9bab28cc-4063-46ba-9b6a-c2f69c2d93cc",
        "cursor": {
          "ref": "9c686a6a-6a54-4c86-8391-96ca48d591ea",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f6de526f-ccad-4f2c-8828-f106f467b947"
        },
        "item": {
          "id": "9bab28cc-4063-46ba-9b6a-c2f69c2d93cc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8d786e4e-5a33-4376-a49a-617cb2ac664d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "81d3c8bd-591f-418b-b548-467725de6ad3",
        "cursor": {
          "ref": "83654981-856d-4d96-bba5-4af16a872c83",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9e3e4868-2c06-4151-9df6-95a4f844cb81"
        },
        "item": {
          "id": "81d3c8bd-591f-418b-b548-467725de6ad3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e91ba496-e4b3-4d7d-9fa5-5702b71adaba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "81d3c8bd-591f-418b-b548-467725de6ad3",
        "cursor": {
          "ref": "83654981-856d-4d96-bba5-4af16a872c83",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9e3e4868-2c06-4151-9df6-95a4f844cb81"
        },
        "item": {
          "id": "81d3c8bd-591f-418b-b548-467725de6ad3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e91ba496-e4b3-4d7d-9fa5-5702b71adaba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "c1894c94-cc84-4af4-8a0e-35227f345bc6",
        "cursor": {
          "ref": "4747d3ed-0f71-4351-94b5-91d454dcf366",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "22a05d0a-e3db-4865-94fa-501cf44c0ae3"
        },
        "item": {
          "id": "c1894c94-cc84-4af4-8a0e-35227f345bc6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "3b9ebdf3-e187-414c-a1dd-a1de9c6192cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "c1894c94-cc84-4af4-8a0e-35227f345bc6",
        "cursor": {
          "ref": "4747d3ed-0f71-4351-94b5-91d454dcf366",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "22a05d0a-e3db-4865-94fa-501cf44c0ae3"
        },
        "item": {
          "id": "c1894c94-cc84-4af4-8a0e-35227f345bc6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "3b9ebdf3-e187-414c-a1dd-a1de9c6192cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "d10f205c-1f81-4d7c-a9b0-0be04bf91b45",
        "cursor": {
          "ref": "b8e23b1c-154f-4bb3-9952-a4af07663bad",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6a5ebf74-181a-4b9c-a98f-270a56db31ee"
        },
        "item": {
          "id": "d10f205c-1f81-4d7c-a9b0-0be04bf91b45",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "99da477c-21ae-4071-af08-53a10d8688ec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "d10f205c-1f81-4d7c-a9b0-0be04bf91b45",
        "cursor": {
          "ref": "b8e23b1c-154f-4bb3-9952-a4af07663bad",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6a5ebf74-181a-4b9c-a98f-270a56db31ee"
        },
        "item": {
          "id": "d10f205c-1f81-4d7c-a9b0-0be04bf91b45",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "99da477c-21ae-4071-af08-53a10d8688ec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "a89ed86c-df48-421a-9227-c1cdb0a1a362",
        "cursor": {
          "ref": "19d6a6e2-a742-4441-981e-9e0bd4f58283",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "86cddadb-cf87-4649-b754-d4c2fe5d4e39"
        },
        "item": {
          "id": "a89ed86c-df48-421a-9227-c1cdb0a1a362",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4b6bbbbf-ec38-4602-ac75-d9a11eaf5fb5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "a89ed86c-df48-421a-9227-c1cdb0a1a362",
        "cursor": {
          "ref": "19d6a6e2-a742-4441-981e-9e0bd4f58283",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "86cddadb-cf87-4649-b754-d4c2fe5d4e39"
        },
        "item": {
          "id": "a89ed86c-df48-421a-9227-c1cdb0a1a362",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4b6bbbbf-ec38-4602-ac75-d9a11eaf5fb5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "75f889d7-4272-433a-8a6c-544853522c0a",
        "cursor": {
          "ref": "28ffac42-8b0c-4288-989c-fc3dbd652942",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b25617f3-fd36-4752-baa0-c25b307c01e7"
        },
        "item": {
          "id": "75f889d7-4272-433a-8a6c-544853522c0a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "539c3f89-fdf3-445c-9245-507273396bc4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "75f889d7-4272-433a-8a6c-544853522c0a",
        "cursor": {
          "ref": "28ffac42-8b0c-4288-989c-fc3dbd652942",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b25617f3-fd36-4752-baa0-c25b307c01e7"
        },
        "item": {
          "id": "75f889d7-4272-433a-8a6c-544853522c0a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "539c3f89-fdf3-445c-9245-507273396bc4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "d154838d-c5a5-4399-a22c-6a05700da834",
        "cursor": {
          "ref": "ef444425-8c2a-4ec8-ba26-c97c95ddf6dd",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "cc4b87a5-6684-468b-a803-8725e88360f6"
        },
        "item": {
          "id": "d154838d-c5a5-4399-a22c-6a05700da834",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "158a20df-78a2-446b-a430-a3318d87e61a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "d154838d-c5a5-4399-a22c-6a05700da834",
        "cursor": {
          "ref": "ef444425-8c2a-4ec8-ba26-c97c95ddf6dd",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "cc4b87a5-6684-468b-a803-8725e88360f6"
        },
        "item": {
          "id": "d154838d-c5a5-4399-a22c-6a05700da834",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "158a20df-78a2-446b-a430-a3318d87e61a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "a6c8f572-bf31-4a35-bee8-6fba3d13166b",
        "cursor": {
          "ref": "87032b94-068e-4066-b2a0-f221c0829a4b",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "48a8003e-f3bf-42a6-97a7-78414e290f9b"
        },
        "item": {
          "id": "a6c8f572-bf31-4a35-bee8-6fba3d13166b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b4974712-6f26-460f-b5c7-e6633eea47d9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "a6c8f572-bf31-4a35-bee8-6fba3d13166b",
        "cursor": {
          "ref": "87032b94-068e-4066-b2a0-f221c0829a4b",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "48a8003e-f3bf-42a6-97a7-78414e290f9b"
        },
        "item": {
          "id": "a6c8f572-bf31-4a35-bee8-6fba3d13166b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b4974712-6f26-460f-b5c7-e6633eea47d9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "b7e81235-f743-4f01-81b0-11a25bbc0fdf",
        "cursor": {
          "ref": "e30ba464-7cb1-4753-a523-49a4ae1d33ce",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "596c5ab2-ae8d-49fc-86a4-ee46a39fd1ea"
        },
        "item": {
          "id": "b7e81235-f743-4f01-81b0-11a25bbc0fdf",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "082f2330-77a5-4a2d-8d7e-aae3fe3098fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "b7e81235-f743-4f01-81b0-11a25bbc0fdf",
        "cursor": {
          "ref": "e30ba464-7cb1-4753-a523-49a4ae1d33ce",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "596c5ab2-ae8d-49fc-86a4-ee46a39fd1ea"
        },
        "item": {
          "id": "b7e81235-f743-4f01-81b0-11a25bbc0fdf",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "082f2330-77a5-4a2d-8d7e-aae3fe3098fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "cf8d7254-4a6d-4bc2-bfd5-cb6d6b31990e",
        "cursor": {
          "ref": "6b287d38-a9c6-4c1d-afd9-750226c1b28b",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "86b2e922-b282-4301-9e14-a0b39c8dad3a"
        },
        "item": {
          "id": "cf8d7254-4a6d-4bc2-bfd5-cb6d6b31990e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "edfeda7e-a4ae-4877-88ec-f0d3ded39939",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "cf8d7254-4a6d-4bc2-bfd5-cb6d6b31990e",
        "cursor": {
          "ref": "6b287d38-a9c6-4c1d-afd9-750226c1b28b",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "86b2e922-b282-4301-9e14-a0b39c8dad3a"
        },
        "item": {
          "id": "cf8d7254-4a6d-4bc2-bfd5-cb6d6b31990e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "edfeda7e-a4ae-4877-88ec-f0d3ded39939",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "4290d86e-6b18-4fe5-9d88-031aeb28afd4",
        "cursor": {
          "ref": "cf80ab5d-ef56-4bfc-8e38-1aeddf3d7ab3",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "786a701d-24a2-401f-8e08-9fe9994803bf"
        },
        "item": {
          "id": "4290d86e-6b18-4fe5-9d88-031aeb28afd4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a347e62b-c420-4222-b98a-c7f4607d7a48",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "4290d86e-6b18-4fe5-9d88-031aeb28afd4",
        "cursor": {
          "ref": "cf80ab5d-ef56-4bfc-8e38-1aeddf3d7ab3",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "786a701d-24a2-401f-8e08-9fe9994803bf"
        },
        "item": {
          "id": "4290d86e-6b18-4fe5-9d88-031aeb28afd4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a347e62b-c420-4222-b98a-c7f4607d7a48",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "e9b7acab-cdea-447e-b57c-b5fdda5375da",
        "cursor": {
          "ref": "b1f059f8-931a-4026-8d92-74dd58badf90",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "59a71786-bedd-4f87-be6b-149591472046"
        },
        "item": {
          "id": "e9b7acab-cdea-447e-b57c-b5fdda5375da",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c287be3a-afce-4db9-a512-7aafda06e031",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "e9b7acab-cdea-447e-b57c-b5fdda5375da",
        "cursor": {
          "ref": "b1f059f8-931a-4026-8d92-74dd58badf90",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "59a71786-bedd-4f87-be6b-149591472046"
        },
        "item": {
          "id": "e9b7acab-cdea-447e-b57c-b5fdda5375da",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c287be3a-afce-4db9-a512-7aafda06e031",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "47626bfc-f6bc-466b-b56d-aa153abf6fdc",
        "cursor": {
          "ref": "7d30261d-9e45-4832-b141-bc941065497e",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bc00a18c-8f72-4afc-978e-ff1b0e37a702"
        },
        "item": {
          "id": "47626bfc-f6bc-466b-b56d-aa153abf6fdc",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fe70c45c-8697-45a9-b1ef-8740fbee989c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "47626bfc-f6bc-466b-b56d-aa153abf6fdc",
        "cursor": {
          "ref": "7d30261d-9e45-4832-b141-bc941065497e",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bc00a18c-8f72-4afc-978e-ff1b0e37a702"
        },
        "item": {
          "id": "47626bfc-f6bc-466b-b56d-aa153abf6fdc",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fe70c45c-8697-45a9-b1ef-8740fbee989c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "648ca383-fd6a-490b-be78-29121c1962ed",
        "cursor": {
          "ref": "b2bde134-b39e-4dda-9df2-a83cdb807d87",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6fb1d07f-96b1-4cc7-9338-bce0f1c8641a"
        },
        "item": {
          "id": "648ca383-fd6a-490b-be78-29121c1962ed",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "38035b98-30b7-4598-a091-35c3e79a2e7c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "648ca383-fd6a-490b-be78-29121c1962ed",
        "cursor": {
          "ref": "b2bde134-b39e-4dda-9df2-a83cdb807d87",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6fb1d07f-96b1-4cc7-9338-bce0f1c8641a"
        },
        "item": {
          "id": "648ca383-fd6a-490b-be78-29121c1962ed",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "38035b98-30b7-4598-a091-35c3e79a2e7c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "3c4e6a6f-60d4-486c-8b06-b5c1ca189967",
        "cursor": {
          "ref": "76bd6d57-79d5-4a6e-bb96-7237e7a8fd14",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d8b4d9b5-0b45-4dbf-9fbb-4abf13017ffb"
        },
        "item": {
          "id": "3c4e6a6f-60d4-486c-8b06-b5c1ca189967",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "e0d7dfd8-1655-4f6d-802b-23d60a28a8b4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "3c4e6a6f-60d4-486c-8b06-b5c1ca189967",
        "cursor": {
          "ref": "76bd6d57-79d5-4a6e-bb96-7237e7a8fd14",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d8b4d9b5-0b45-4dbf-9fbb-4abf13017ffb"
        },
        "item": {
          "id": "3c4e6a6f-60d4-486c-8b06-b5c1ca189967",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "e0d7dfd8-1655-4f6d-802b-23d60a28a8b4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "5c2edbe2-63ae-42c5-99b3-58b4d871faf9",
        "cursor": {
          "ref": "ebef5d8f-f8c1-4802-9b98-ea95f3408ec9",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f578d437-7573-4751-92a5-0202451d1f6a"
        },
        "item": {
          "id": "5c2edbe2-63ae-42c5-99b3-58b4d871faf9",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a1b8d71a-7952-4a51-bebd-5bd0390343ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:242)"
            }
          }
        ]
      },
      {
        "id": "5c2edbe2-63ae-42c5-99b3-58b4d871faf9",
        "cursor": {
          "ref": "ebef5d8f-f8c1-4802-9b98-ea95f3408ec9",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f578d437-7573-4751-92a5-0202451d1f6a"
        },
        "item": {
          "id": "5c2edbe2-63ae-42c5-99b3-58b4d871faf9",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a1b8d71a-7952-4a51-bebd-5bd0390343ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:242)"
            }
          }
        ]
      },
      {
        "id": "37d89223-64df-44d5-9c2d-d0a79e783a1f",
        "cursor": {
          "ref": "e903e8d0-5c07-48c0-97f1-662f946c655f",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9b380925-43e4-48bf-8c2a-cadee7fdfe63"
        },
        "item": {
          "id": "37d89223-64df-44d5-9c2d-d0a79e783a1f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "548e4890-71ed-4766-b8ce-0da8e6dc005f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "37d89223-64df-44d5-9c2d-d0a79e783a1f",
        "cursor": {
          "ref": "e903e8d0-5c07-48c0-97f1-662f946c655f",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9b380925-43e4-48bf-8c2a-cadee7fdfe63"
        },
        "item": {
          "id": "37d89223-64df-44d5-9c2d-d0a79e783a1f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "548e4890-71ed-4766-b8ce-0da8e6dc005f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "11ed4657-3825-41a5-8eb3-76129694e1f7",
        "cursor": {
          "ref": "5ec397dc-c98b-4852-9870-9489cab8a3c9",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1153ca5e-244a-41c2-b096-9a6b193cda56"
        },
        "item": {
          "id": "11ed4657-3825-41a5-8eb3-76129694e1f7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f66e50e8-4c7a-4e84-8a73-f0656975459b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "11ed4657-3825-41a5-8eb3-76129694e1f7",
        "cursor": {
          "ref": "5ec397dc-c98b-4852-9870-9489cab8a3c9",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1153ca5e-244a-41c2-b096-9a6b193cda56"
        },
        "item": {
          "id": "11ed4657-3825-41a5-8eb3-76129694e1f7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f66e50e8-4c7a-4e84-8a73-f0656975459b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "f96669eb-b1ec-4908-897b-5ad21d61880e",
        "cursor": {
          "ref": "50b31f7a-ff0c-4821-9d89-eee69458a435",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7a3b851c-63cc-40d6-901b-19e565ab62b4"
        },
        "item": {
          "id": "f96669eb-b1ec-4908-897b-5ad21d61880e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "f96669eb-b1ec-4908-897b-5ad21d61880e",
        "cursor": {
          "ref": "50b31f7a-ff0c-4821-9d89-eee69458a435",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7a3b851c-63cc-40d6-901b-19e565ab62b4"
        },
        "item": {
          "id": "f96669eb-b1ec-4908-897b-5ad21d61880e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "f96669eb-b1ec-4908-897b-5ad21d61880e",
        "cursor": {
          "ref": "50b31f7a-ff0c-4821-9d89-eee69458a435",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7a3b851c-63cc-40d6-901b-19e565ab62b4"
        },
        "item": {
          "id": "f96669eb-b1ec-4908-897b-5ad21d61880e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "1f8d993b-9d2f-4641-924e-45cfbb1ea6e6",
        "cursor": {
          "ref": "6ff11433-29a8-4bec-b0b7-b53ff5a515c2",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b08a0798-b66a-47c3-a9cc-583517c89146"
        },
        "item": {
          "id": "1f8d993b-9d2f-4641-924e-45cfbb1ea6e6",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "1f8d993b-9d2f-4641-924e-45cfbb1ea6e6",
        "cursor": {
          "ref": "6ff11433-29a8-4bec-b0b7-b53ff5a515c2",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b08a0798-b66a-47c3-a9cc-583517c89146"
        },
        "item": {
          "id": "1f8d993b-9d2f-4641-924e-45cfbb1ea6e6",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "1f8d993b-9d2f-4641-924e-45cfbb1ea6e6",
        "cursor": {
          "ref": "6ff11433-29a8-4bec-b0b7-b53ff5a515c2",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b08a0798-b66a-47c3-a9cc-583517c89146"
        },
        "item": {
          "id": "1f8d993b-9d2f-4641-924e-45cfbb1ea6e6",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "a8480620-ec73-4d88-828e-3f96fbf6305d",
        "cursor": {
          "ref": "11263ab7-5263-43e8-b9ea-a616f5b664d2",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f331cfb0-039a-4456-bddb-6a3b13ddd508"
        },
        "item": {
          "id": "a8480620-ec73-4d88-828e-3f96fbf6305d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "a8480620-ec73-4d88-828e-3f96fbf6305d",
        "cursor": {
          "ref": "11263ab7-5263-43e8-b9ea-a616f5b664d2",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f331cfb0-039a-4456-bddb-6a3b13ddd508"
        },
        "item": {
          "id": "a8480620-ec73-4d88-828e-3f96fbf6305d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "a8480620-ec73-4d88-828e-3f96fbf6305d",
        "cursor": {
          "ref": "11263ab7-5263-43e8-b9ea-a616f5b664d2",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f331cfb0-039a-4456-bddb-6a3b13ddd508"
        },
        "item": {
          "id": "a8480620-ec73-4d88-828e-3f96fbf6305d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "4d1c4cb0-df79-44ce-b36f-6cc34dc5f1b2",
        "cursor": {
          "ref": "210f0b8f-e926-486a-9d85-95d9c468c12c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6c533741-b545-43ab-88e9-140b6e78aa5c"
        },
        "item": {
          "id": "4d1c4cb0-df79-44ce-b36f-6cc34dc5f1b2",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "4d1c4cb0-df79-44ce-b36f-6cc34dc5f1b2",
        "cursor": {
          "ref": "210f0b8f-e926-486a-9d85-95d9c468c12c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6c533741-b545-43ab-88e9-140b6e78aa5c"
        },
        "item": {
          "id": "4d1c4cb0-df79-44ce-b36f-6cc34dc5f1b2",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "4d1c4cb0-df79-44ce-b36f-6cc34dc5f1b2",
        "cursor": {
          "ref": "210f0b8f-e926-486a-9d85-95d9c468c12c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6c533741-b545-43ab-88e9-140b6e78aa5c"
        },
        "item": {
          "id": "4d1c4cb0-df79-44ce-b36f-6cc34dc5f1b2",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "8af97d28-733d-4e95-9702-91c73a137c3b",
        "cursor": {
          "ref": "bc400c0c-b60f-41a2-95ff-9f1ac40289f3",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "18b07fc7-ef94-44d0-af03-9c90c862a5e6"
        },
        "item": {
          "id": "8af97d28-733d-4e95-9702-91c73a137c3b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8af97d28-733d-4e95-9702-91c73a137c3b",
        "cursor": {
          "ref": "bc400c0c-b60f-41a2-95ff-9f1ac40289f3",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "18b07fc7-ef94-44d0-af03-9c90c862a5e6"
        },
        "item": {
          "id": "8af97d28-733d-4e95-9702-91c73a137c3b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8af97d28-733d-4e95-9702-91c73a137c3b",
        "cursor": {
          "ref": "bc400c0c-b60f-41a2-95ff-9f1ac40289f3",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "18b07fc7-ef94-44d0-af03-9c90c862a5e6"
        },
        "item": {
          "id": "8af97d28-733d-4e95-9702-91c73a137c3b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "1470a804-3d78-4098-8117-2ba005ad9e83",
        "cursor": {
          "ref": "a8dadb8f-8d03-4671-be2c-31c0256a978b",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1d1f0df1-299d-4dd6-a034-3d0eb1e44e02"
        },
        "item": {
          "id": "1470a804-3d78-4098-8117-2ba005ad9e83",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1470a804-3d78-4098-8117-2ba005ad9e83",
        "cursor": {
          "ref": "a8dadb8f-8d03-4671-be2c-31c0256a978b",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1d1f0df1-299d-4dd6-a034-3d0eb1e44e02"
        },
        "item": {
          "id": "1470a804-3d78-4098-8117-2ba005ad9e83",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1470a804-3d78-4098-8117-2ba005ad9e83",
        "cursor": {
          "ref": "a8dadb8f-8d03-4671-be2c-31c0256a978b",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1d1f0df1-299d-4dd6-a034-3d0eb1e44e02"
        },
        "item": {
          "id": "1470a804-3d78-4098-8117-2ba005ad9e83",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}