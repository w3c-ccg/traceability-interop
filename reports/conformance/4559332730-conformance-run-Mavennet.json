{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "48377174-ceb9-4ff0-a6a0-71b8a933aa7b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "318cf73b-de52-4a44-b46e-94937a9d2742",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c69da850-75c7-44c6-bb15-d7474d783e78",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c3a018b2-03ab-4255-a9bb-f5b896558668"
                }
              }
            ]
          },
          {
            "id": "a661bf20-dd6a-4574-9793-b00ae22d1811",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "60a07b36-a08e-4730-ab8e-24f26de6d2db",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "46a95722-4ca7-4c5e-acfd-eb4ae7c7f0d2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d632482a-e258-4fa6-8a8a-c6b5c279925e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "65c31ada-6c95-4edd-a432-a314a8efbfe0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "69a62c01-b8df-46fc-8619-4f1e73bfab4c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "adb84cc4-0d3d-4115-b4f4-50c332da0dd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5beb1ad9-9286-4450-8fa9-a71860b1961d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a36d5948-878b-4672-a57a-45d872b6cc57",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "68f8ee4a-627f-4d45-8237-0185913d7367"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "22549b65-34fd-40bd-bcdb-56c1cf4acdd2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "07118606-ad5f-419e-a185-3053706150fc"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "896a8f52-e8c6-46e7-a0e7-b243dc486774",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "be6b821d-088d-4117-9da2-f4dfe4d9065b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b57a36f2-f944-4b2e-904a-9804a874395c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0d86846d-5f26-426c-8f34-08ad144eeb78"
            }
          }
        ]
      },
      {
        "id": "7cb5df7c-727b-4b54-b564-6f84201947b5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0511d214-d1ac-44b6-8086-334a8a0de1d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fd285237-4b24-4d22-8611-ecc132b9cdc6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "39dcebec-07d2-4616-9ce0-e5cd6c97b17f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6b0077-3a92-4bab-84ee-1574044ba615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae7c6f17-552d-44d0-947d-f195212f07c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7baec25-2667-48a6-8fd9-bb26902479ae",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4dc9d84-353a-4fd2-a193-e4499fe8d331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b940a37e-f399-4d29-b52b-c29cd298d811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1faeaed-5be5-420e-a4c5-75ccd0a09943",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f743b5d8-4959-4a08-af16-31bd86e2ab07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "330412f2-5318-4e32-95e7-4cee7ce3bbc8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ef4941b4-4caf-4a21-97ce-9655291f2605",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8cf3363f-1e90-4e98-b711-0c5b735fa9ff",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb14ea1-de83-4629-a2ba-5e45673838a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9177ef49-e557-4ca5-beec-ef5c1dfda31f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5c0536-ddc9-4f99-a7e2-43c37d8563b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67a43182-11b8-47dc-9000-b868ef86e44d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c38ab2-e4af-4b41-a062-2a868cc43b1c",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1994db7-4af3-4656-8405-ee41bd7a075f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3363d088-1ca3-43d4-9bed-09be356da6dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c0c12f-0714-4b48-9d1a-db48d1db8f05",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "554ce1ac-c37d-42b0-a5ca-98f081ced4f1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6a932fdf-318f-4ec2-a9ae-4773c8a0e772",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f348b886-f3d2-4fd3-8f41-1b37b968ea45",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c46d838-30a3-44e6-8f76-37e71ea185ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c1ae5aff-b24b-4d72-ad07-f6392f2b4d3c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "000ffb5d-5f5b-4d6e-94d6-dcfa523b6eb8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "03e66490-38b4-4de1-b8fa-8ac2a84d247f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f580443f-26b5-4aae-9ba9-9f53c03e75e9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8f53e314-b300-4787-bf9a-d61bb55ffa94"
            }
          }
        ]
      },
      {
        "id": "b3bc46e5-e04f-42c6-8693-c9f26d77f44a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4cbf3353-079b-4080-8cf5-d2688c3a546a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "328c2de3-9873-4a61-a198-b7981ba30447",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "121483ce-7a0c-4f5f-bd61-f10d78f3a496",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d04994-c84e-486a-89ba-5a917cba69cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7646e0e-94fe-48f3-b724-5550ec606087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77219e6b-8214-4e67-af83-c0600542a759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2564393d-4cc0-4d9b-a123-83c6f42c3acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c3ebfa-855e-4814-a05d-d759e7843f20",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc57d5ff-cbb3-4727-ae0b-d7b0095439ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f76128e5-1493-4894-8794-72236fc04df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e26a4ea-7ea1-4fac-bf74-5d0fcd3baf99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c56a3fdf-f4e9-405e-a6ae-4091d9f28c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6fe3b3f-cf02-4503-952d-b44e1e536a53",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c84dd51-deaa-4e51-8af4-679478b75738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ce85cef-e00f-4cc8-8040-b417e2730752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be08bfc-dad3-4b3d-9ac0-4c49ac018f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "797e0539-01f6-48db-9977-fad3c80ae72b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f40470f-897a-4e37-aac2-779aeb1151d0",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0343f7-f3f0-45c9-a896-dd54b328d0b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f18b2db-0ccb-45f0-b3f6-1b7bfd2c579f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79b09e9-9bcc-4c7c-8f57-035839987361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f8d8acf-0d67-416a-b48c-8ea49cefb53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23392dc8-89de-4345-8bea-62fafcf47e53",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15c44dd-e652-480c-9f2b-cb7e08f7952b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e98a8b0-df6d-417a-b455-f725bcfb6b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aafcd7cf-209a-4964-b3b7-9500a6d73b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38aa9ff4-82cb-4c7f-bd19-325813eefb60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99e2cb2-0e42-42a3-b1a2-cdb944d3a1c3",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df314d68-074f-409c-94ee-377b0b240d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd149635-bc30-4549-8f55-a37c072f10d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9122d706-1f92-483f-97c5-c83067730f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f5c5229-8857-4a74-bbdf-20583fbb23ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a18a00-1ff9-46b7-9020-a553e76f5bf6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "250cbd43-30ed-43a7-a561-7183efbc260d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91375833-d61f-4ddb-a7e4-bc9dfeffde77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52fb5c8-717c-4d3d-8fd7-58b112959a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b9f7195-9dd3-400d-8aa6-c4fd8633fd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e6726d-aabc-4bb6-a125-71eca5b5d4b2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b3e36f5-a863-4a0c-8a45-25cf1229afd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e362e41c-1504-440f-a508-525e8edeb5b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd823ca9-129b-4217-8ced-c4f2da59bf47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17982566-8cf8-453a-a521-991d2b1e583e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07594e6-44c5-48c2-809f-c2a85ba20962",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a9d00d-b92b-4fa8-b9f8-9a289ceb327b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c794b40-8694-4fb2-ad34-425d289724ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1aa11a-a458-4d58-8e4b-b739e207740a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8e728ca-37d9-4c58-bed7-b08fb1e165b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23195b96-7d4e-4b1c-a587-72469b9fd9d1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "350253d5-ca3e-42ac-af70-2d3e631446d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a9e0ea7-0afd-4c83-afbd-cd60da233fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69302b61-3abe-46e5-92f7-ad80df798406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "921f93c1-ed5d-4d73-9d18-7c6dfef0ba01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1c9a26-95e6-460f-8dbc-be26aab87084",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0543cd40-57cf-4f1b-b1d4-853b1af9c74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f8c5e9-97d5-4170-b324-cde7024deab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ec36e8-ef8e-4f91-98f9-6f8df9e891d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccdffb17-8537-494d-abc2-9d07564ceed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea74b3f-6ff1-4c9b-9c94-bd02bf2e818e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91096327-05ca-4e2f-8ff4-d71dab254630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe055df-c7a9-4004-b070-a1a0a90766af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f921896-6531-4579-bb90-517fe3955b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95b96eb9-1053-4e4f-8f5b-dc4bba6654e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d4d6f4-2e56-4f2d-b9d0-cc149616f70e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c55258b-e396-4389-a18a-24fa0ec3ce74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e55285-dc58-4eec-a074-2078883d98b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fafe75d2-6938-4a7e-817f-d32aa78edff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9d6e0f0-2c2f-40f0-94e5-d23a162bc61f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555a5688-19d4-4392-9415-60e091ded264",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70951475-0395-498b-abf9-1c4986153a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14def5ab-183f-4d3b-81f7-c64540ce17ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da705c79-deec-4a10-b402-0d81c8960872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "046d89fc-9c1d-4d81-a12a-0a63da0fd8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd148d3-a36e-40e1-b4af-0e7c268e556c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a946fa06-46fb-4f87-8db6-0a6b421f1368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f315f17-1df7-4176-a7d7-89c9b96e7e02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16defc9-a6aa-4e7d-afbc-ab64311815bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98bd43c3-e99b-4f7d-953c-ad49d9bcfa88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2176814d-7019-401a-a51c-572de4df0196",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be79b830-5e68-4f80-a018-0e7e1716be6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ad86797-4bd7-4305-8179-592cf7b6c1ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63c3535-f9c0-4488-986c-8e971a86dffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eac87aba-b43c-44d5-a245-3e580fb68a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a63186-a31d-4826-808d-242f90b7ad56",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ebdb61c-adf0-456b-a884-9b62bb814d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbefabdf-07b8-4ac7-a8b4-8d6696d08469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd6dedd-4b8f-463a-ae01-9fc601a59a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92c2fbc2-3a7a-47ae-9b00-a700728ca530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a510892-deac-4611-bed8-91109c5e9709",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0f8cde-f3ca-4e80-af11-cf5090c569f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7da2d30-d042-463e-be1a-ff0720e13e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b97e5f4-834b-4c9e-84c8-43aaa26a5229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3d0fefd-4fbd-4b8c-9441-9e94c7281ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b47fef-e18c-431c-a817-e31b1e797d12",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c570bd2-a9e6-4d0b-a821-3eece371d704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f122adc7-6a34-4ea4-82a7-dda71b0c6cd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ca4478-6e6c-48de-9abe-e7403ac0ab71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "81a853b8-8bb2-41f0-a1f9-5bd0acce182a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d715c174-1135-48fc-a5a4-7f1fe2d9d6e9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "511bc53d-2c10-49ed-8313-556b75344326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9869a78-8492-48d3-8bb9-e045029583b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73b089b-f209-4834-b89e-79f7a8a80e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7c98a5d-35a3-42e6-ae49-0d341c150226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9a6333-210d-49a6-9413-80da34e3ddbd",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23adb9c6-fa6e-47ba-9bd1-5e34165ade99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1182234-bd5d-4603-9e6d-22bd0b5d663b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2f5bb4-8fb0-414c-ac7d-c5da54676950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "435c45b2-74b1-4bc2-b731-15af19298c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899860f5-015e-4308-87fd-cf3c0ad44507",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5728d922-bc07-42c1-9f1d-7dba82e2428a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2366f2d2-4d8f-4dc2-9533-8a3b6e5b0c53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f418bc2b-48aa-42ba-a8c8-1c8cff642dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4eeb206f-6422-4763-aab6-79c98105505f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575cc0fc-dcd8-4598-bd8d-331713fdb29b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11878ff-8229-4f7f-87cb-a0e5f424cfc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5ed920a-8064-4029-a128-c27507d34784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c96365-6232-4e05-a68a-5b2583a27ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3eb0ccd4-a192-4324-be28-7323181e4b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94d2a53-deb1-49b2-a928-280787dc740b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "260b04a1-f3f1-4e90-a631-8ad1d770df8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e321767-e8b0-42b5-9cbf-bbc6862fd726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d428a2-e299-431e-aaa5-5c9fb137c3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "05c4ed7a-6306-4138-a4d8-c400c54e4234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19badeb-a388-4f1b-b1b9-9a8f3de615e3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92dc355a-e046-4034-a5cb-2213bbf70e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad912808-895d-45bb-9eea-ac23f9026aaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3b4e8e-acc3-415b-8801-6680fbf00a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "457ee2ab-4934-45a3-8c5e-c3ec951029d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e0b331-86d6-4068-a32e-1e46672cf96d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66b66d3-7a99-406b-9fcc-35d017f0c6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff361f10-47ae-4f07-b2d6-ac374dae4691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc85c15-eda1-4819-8d55-6c459225dd58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "019162f0-221f-4cd4-a591-27a6603a2157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5e7d99-d48b-4a83-b43f-19fbc19d9cf1",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0553275-06a4-484e-ab2a-e2ca940f632a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dac54423-ec1e-4fb2-8b04-eb858aa3cc69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd09610d-03e1-4f56-b497-a4dc5bcf30f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b861124d-c0bd-4ea7-8d15-56976e6e9e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aefdd073-8e4b-4cdb-b794-49deb6670b4d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "057235c6-5e4b-4ee7-a1cb-0bbac436cc04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "227988a6-a36f-4208-b530-803c7f5efee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227543ab-b0af-4957-affc-8c72d61b6e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aba89572-9437-4ec5-9d5f-3f6c633d9fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6825c536-1787-4d09-81be-2b37182e248c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca56a9a-acd9-4ea7-9ae3-d627dfd710ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0434db7-f3d1-4132-af76-8697a44c2bb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2bd3d88-949b-484b-95ec-ec27049593c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d14a411-176c-4c87-af6b-b68fb97bd2b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75da7d79-2f84-41f3-bf04-019d56dc4aa4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af79f999-aed2-460d-be80-ef6cdb198199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f378a1cd-9baa-46f9-b5c1-267bb6cb727a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea5eef7-bb44-47e2-9707-4d19df347409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f56d2a8-5017-4fc0-a01a-5bfed6c18462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26b68f7-b28c-48c9-af68-f09292d63646",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98632a2-9439-464d-932f-1fd41d4dd44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a412977c-669b-4534-87bf-3851294bb63e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d0fc4c-ba21-42b8-afd7-2bbe9143cb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "679cf774-7a34-403b-bd77-a97fa8930649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb72a46-fdc0-49e4-af4d-2e7c9eaab140",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5bea194-3411-43d0-a9f7-fc8090a102ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eda0b8a-4a2c-4e0b-9783-fed75af9f824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787e1e58-4a68-4f34-984a-8e9579f5bcfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21473fad-09b2-40c5-8dac-bde279195e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb2ed13-23b3-4cde-93c2-5b507c18efe7",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5dec87-6c39-4b59-8915-3b64ce3a330d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1caea0c0-4b52-45ce-bf74-bbd2f74853c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856d9b24-75ff-42ac-8789-00690561747f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "163d5d3a-5a06-4fa8-a31b-c4ee7f7ecf39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ef2393-8429-40fc-94cf-872a46f7ad37",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5082dc-de84-4441-bb9d-dbad40034af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a9d603-161b-49d0-be7f-1996fa1fe8c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01509205-d3c7-496b-9bb0-bd286142d3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "121ef893-9255-46c7-8add-6d5a3b019e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5af6679-548b-4ec2-97d3-587d366b7973",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9b3203-d661-42ef-bf59-b7c9779a98ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "314de932-2d53-4ecf-9e50-d36c5c7967a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ebf4f0-2e7a-458c-969a-7b8345311c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ead08c3f-7e3b-4865-a662-b8c7616ff924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec93eae0-efcb-47b0-b3b6-3139b6441143",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05090054-c46b-45bb-b08a-1d0673bd7058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49a1a95b-3093-4c29-8b33-92f615b00a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4c17f1-7c83-4532-bb2e-4cfaf8e17bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b5ceb5f9-3963-4c0e-88c8-2c74a17d3850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77681bdd-3501-4918-8c8f-51d72458ec0c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17488c3b-6392-47ab-9b07-fa752149501b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b474cb0-d962-40d8-ba9b-c4d284e19d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1734eb3-4a23-4fbe-9540-ea630eda7b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a24846f2-2596-4c7b-a87b-034e6abd05e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "accc039f-3f7e-4593-a464-01351526d8a5",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcac529c-2530-413d-934c-9869e4a7675a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa30300-1093-4cb2-81bb-f92b91ae61f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894c4a5f-c274-464e-a22a-432cf7129d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "abc15503-7dc0-4f33-92d7-52685aadec30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b480b1-244e-4407-a898-e6059176a632",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec15fe54-4b5f-4ede-93b2-e7442884e951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3201b5d9-4661-40cb-974c-c258d28e470f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a059f886-a51f-4b81-b00e-63f17bd64b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fc8394a-2434-400a-86cf-2e8e70057d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7887d2-ca73-4336-992b-6c6ed616e99b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bee85ff-4879-456f-a818-375de24c30df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "595a45fd-ec8a-4d2a-bb5a-e9ce44a5c8e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b93e8b0-d47a-47bc-8915-aeb1ef021af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "14b32e52-53db-4417-83a3-fd651ea2fd7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0802fa4e-33a7-40f0-a882-aaed65e60f5d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fdea5ad-4808-430e-a5f0-790b3e573f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "480830a5-e30b-4d1c-8323-305d43289936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a5cd174-c14e-4a75-9c5a-2e31d75df833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b272ef39-22ba-4beb-b947-98e88473ac1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42c18a1-cb25-491a-a4ac-2972462cb410",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99fd2ff-15b7-402a-9782-4437a623bb01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e9c9751-d139-4d81-83cf-8707e20e6f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62aea8a0-9a80-4841-bb29-50c1a9596934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7e71849d-a217-4b96-bed2-de27a2e7f795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ae56b0-ab87-48f3-84ec-78c5dbec3f71",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7433e1-5373-4672-a768-3d3664abd834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f908e96-61c6-47a5-97e7-a3151098818d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dadf8f40-48a4-494b-a471-72fa3e3d56e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "632af08d-4846-4e40-9c92-fb1a52f6cd34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755aa929-e33b-4053-93ea-be0db638b33c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f28097-00d4-4590-9ca6-caa2c53ead36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b258c09b-d1cf-4e17-b877-cd1c74cca1d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e5d3f6-aef1-4d14-9219-6a2cc4c12ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1dbd653a-de9c-4636-823c-90cb2b6b88e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1617c38-25f7-41cf-b782-194eab03559b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e65a903-7663-4f8c-945b-e518beae4581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfb3c4b3-a52c-439a-872b-0f9ab7af9baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c64c6a-c74b-42e8-9082-c8fc308b6afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f48703e1-e0b4-46f0-960d-71dd535b7634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc20772-6644-47a1-9024-5d920734e36d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58887ee6-8bce-434c-96ba-7a5d38c75297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c46c251-e8a0-424c-81df-a82028651d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cfa1595-b4ef-4506-90ee-c15d938a26ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b759f8-322b-4ce9-9b7c-1b95a39e4569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e47233e-d110-43dc-827a-c79d9fe4fa3f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e667b5de-557c-43df-bd4c-8d48c2d13fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5af1ce61-6698-47bc-a96f-2fe80b1ee51d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173dadc7-a730-4e2c-b817-2af39c948c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "040dd6b9-174d-40ed-9a74-ee2a5807079e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e08edc-763c-4a69-ba6e-1860d36c73a6",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8abfa09-4fe5-4fb6-902d-dc149b971c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3e1df32-288f-420c-a028-426ea524b4be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbab8f59-9456-4e8f-8620-c31a5d444f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3dd9f16-0124-4a35-93d1-5d7479156a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e47621-855b-4eb5-a172-9b952dc90326",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e115ec3c-a7c0-4da2-991d-1aa466d5741f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69befcec-e334-499b-b1f8-992200bf5807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41da88ea-921d-4bc7-b5ed-8eaac6cb4eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "06cbcd28-3df5-41a1-97b0-b670e1dcaff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41f4821-e094-4ab6-babb-877e6271dfda",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4756e1-f989-4ae1-a00e-23d131805e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa8019f-948b-497e-ab35-717bb66ded8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749e6edf-5f31-4729-a53e-3f904551ca26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f6048364-9ec9-4e45-8272-fbf491a37c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1dff848-00c0-4baa-825d-66f10ae2ebd1",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28bb6a15-9e40-4b6b-a0c5-3ac7e8c86ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eae33159-d971-482d-b25a-2671430c048f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e47ca7-422e-4ed9-be13-defd3cbd48b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "39d1adc1-9448-4c6b-924b-67ef418fd79f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6822fc6-7e50-429b-8391-106c91e9c7ac",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee211b6f-7722-4fdc-808b-5cada83f7803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acc487a6-1f20-472c-bd19-5201687e6233"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f3d1e1-f43b-43e2-a916-71a4e6c5925f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ab62250-5e66-43d7-bc9a-3ebb44dbd0fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57fb0c6c-df26-4384-85cd-11df875e2289",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8afabc38-b7f1-4186-abe3-cb5891286c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f30ada-ab5f-44cb-a3b3-6792a34a4d97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8c2791-c2cd-4e86-95cf-49baa0bcc679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf17cc49-3420-4132-b9b7-59d8b0d7f8b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f27cef6-b5e9-4d80-ab8d-c9ce8030914e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74f9e8c-25b6-41d0-8b0b-ae07ebd09274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4165b883-e1f6-4f54-ba47-1ddfef2a1df4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca0d021-16c1-4616-a9bf-391cb1897ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "391d01ae-feb0-4e53-8ad9-ce48346316aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d041dfb4-6db4-4cc6-8fdb-899cce39277d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f104e1-18f5-4aa4-a294-76e0f1c0a39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d90ecb-d929-4dee-ba5b-82103529c74a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b49fc204-2983-4643-b29d-749bd53aa611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fdafde9-f273-49f2-ac18-1c89866f5d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259f5ac6-5e4c-4433-85ae-754c5f17b720",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30323ba-d39b-431c-9ce3-abdf8b73c02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61415d04-9cc5-47f9-a349-1a106f756112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281f0b12-82d3-450b-ad4f-406a2862ab3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "66dda5a4-af1a-4f52-b0c6-d4c912135edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2747f9e1-b750-4cbd-9429-ca0f13b33fb7",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ead10d8-1cbf-4610-89e2-e5085aecc651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d64e5bf-f77d-4fc6-9ac2-b8d20495a21f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af948ee-871d-4359-87e4-5be1d78b32d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fdb21e5-cb6f-4b43-9b1d-8093b059a3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e710148-9f26-4bfa-b93c-9605c4db20ca",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b22421-103c-4639-b1f7-879277a50fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be74fcbc-a7c3-44a0-a6a6-7e41563c4315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3deb910-3e56-4159-829c-c341a7b65d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e1df34b-6dd7-40c8-8891-fb1285426af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81bd6c47-632a-494f-b6b2-a7d4b19af7d7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a652192-442b-418a-aed1-35448ef28ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49521d5c-b9fd-44b2-83ac-6a588426f6be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd1e954-7858-4c04-816a-dd5e5a8c4b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8bf0b630-8e15-4382-8a7b-4f3162d4effb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc8cca4-25f7-4590-814b-72976e2195af",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9aee770-5ff8-456d-8696-9c6171cc1314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e73a0762-9bac-49b2-b572-d28f5a842b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614d25e8-9ec1-44ec-89c8-0412e1026024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a09fd44-a467-42c8-b3bd-1f10635c61ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d0fcde-cb54-4505-b92d-6958085d4704",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d4bb99-be7d-49e5-ae6a-deca56c20d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e731b60-7bb1-46a6-bcf5-a82a885c1006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48207eb1-1e21-4459-a394-1d8d1a1ff459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "208f2d37-8304-48db-bbdd-c91ff2fa8cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d292c9ad-0f84-41ed-86f6-ef7239c625c4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff61100-de91-47a5-9466-16e96def1c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6543e1d-fb95-48f3-ab7f-80dcef0f3808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750aa2b2-35f7-4152-916d-d699104e0963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "34d3d69f-c68b-4147-9ebb-82c8c6dc2cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e53b392-62af-49b1-bd69-a74b86e31b0c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a72d01-ba51-4ba9-9209-2db0a4cde93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc2b6ae-617c-470d-a224-714250659e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ccf3dba-ac28-4f52-8870-d16f6130093c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6ce1102-b09b-4cff-b4e2-1ea3df2d2d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d4d349-2eed-42a4-9271-3cd27270b6ec",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4949f4-19ce-4c21-a7ae-06eec05c1b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96cc40ce-16de-41dc-b4be-c98851f00766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a5ade3-5505-46bc-98df-f8155704aad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f387035e-554a-4bd0-b2ae-4fbb7703f70a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7df6a63-5757-4ed8-b2d8-c5f22221fce9",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbeee564-6583-4efe-b2de-ce438e373126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b4c3ec6-0ef5-444f-931e-124286e5eb22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96efa22-063e-423d-9d4f-e3ae23558f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "329ef666-964a-4ede-8be6-4664dadde74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd44234-4729-4add-bcfb-5d0d75f9595d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82c7e91-b149-48cf-9c8f-1ee74da6ab3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66b36abb-79bc-4528-9bdb-e62820ed411d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a80334e-17a7-42f2-a174-798ea45a79e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "806c5d57-c806-4a80-8bc1-aac6bfbd66b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19cabab8-d66b-412c-b367-aba39919f987",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f5d32c-e241-4a63-b5bf-d9a9568b1749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3e22cee-51b9-4fca-9924-04aa67d15b46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5471351-3f73-4021-9e34-f3315207653b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1df85588-ec2e-418a-b587-2380e1ee90c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5356dfd5-d09e-4416-9d60-f183272cf907",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6395f977-590b-4787-8224-ef83ba2fcc8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2100810f-4e3c-4af6-8300-396c4c0d3038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69963e47-37f9-4dc8-b5a5-54e5cb2cc3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5ec448-0103-43e4-82fc-9c0a910e8790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b98ab70-dd2d-4352-99cb-e05aa3b5e29f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c54afb98-f89c-4e16-8d47-1a0540fd8715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9085e59-d1b5-4853-bdd1-f4f1e4e3e2e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fbe3465-d820-43c1-8e24-fcea2488719c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "76e0d0f0-8d91-47fb-a26d-84a72b4ab28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d636fb-089c-43c7-9c77-33c3b924cd9e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13e42c0-2889-476f-929e-a6510e5a50e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad7f4e5-1bf4-41d5-a402-560e9953c2be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57573ac6-e846-4f35-88a5-f031401b56fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c85544f-7eae-4940-8741-892d98d6f659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3bdbc8c-30c0-47c2-aa1e-be8a4064b662",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6437ebda-ee8e-451d-a531-586c658e273d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49519b04-f53d-412c-ae5c-f9f8e3967da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7702985b-0c8b-420e-9d4a-0a4ef46084cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "963e1254-1f6e-4ad2-a622-30333c426b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a760ad9-e509-435e-bf01-1418e3d20220",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e316ac-a2c0-41fa-8f84-81cf1be0e201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e534c56b-ac52-4872-b515-73ec6af2c44e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1433b4a-0ec2-4483-bca2-ba763152f138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cead710b-7002-48a9-80cd-7797abcb1cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c349f8f-4be7-41b4-a006-a4d073fcd510",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b5f2a2-a124-40fd-86a5-06f9e9f17153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75780417-a042-4f08-a91c-ce1356f16464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5ec6a5-956a-460a-a4a9-5988ac9e7040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "55d678a6-af93-42b6-9def-bd82fe7db32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e630dfc-5b77-4d65-93b6-0457edcd9501",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e13987-1adc-4b30-adda-c94c62423119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6f544ab-9979-441d-8fac-a7e7abc0da6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a82bf15-6d86-450e-a7d3-d6f178a5d90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9686dc98-0695-47ca-98f7-db269fbe9018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6030ad-960f-45df-996d-2391676ffb02",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e0535a-ee09-4fc1-9c12-487578bc1b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad34797-7d38-4c07-8b73-cf49862b6db8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2766539-0184-415e-95f8-07fca5c43ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c6a62ed-a967-4270-818e-cfabf798fda3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f412ca-3b1a-4cb6-916c-7375be2a68d4",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5997c0cc-b5ac-452c-9d2d-34b8b8b41b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37588e7f-2d6e-4d60-bee4-80d435e65bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "355e2b8b-4e12-4df1-85e8-1f4661dfbe1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "137f4fdf-c9f4-438e-bc8c-454f6c8b09e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192a762a-012b-4ef4-9e29-707b2d727a43",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6213a82-bde1-40f1-9c03-0a47031d12c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a628a96-9f74-4130-9322-c9eec2d4a2ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a049c8-d6ac-4453-af3b-d6203819e063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d11070d-7a3b-4f45-a3e6-9c5fa1adcbac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79163d9b-8226-4c5e-b5e5-e6c9ce88c23e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b14239-f0bb-47a2-80de-b4150b596a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37f2f8be-ed39-400d-9ac4-d99519fccedd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a87c69c-df88-46de-b1db-42cc82d91ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76032bc1-dfd6-409f-9c58-e005f9f262ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0daf746e-c855-4348-b337-0b4dad32ed7d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1df4c77-8ce7-4827-8cfe-212c9668b173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cbbe36a-088a-4068-8377-cd614b35ac19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d887442-7001-41cd-92d3-c979b5623c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "728b8c65-66bc-4c9d-9677-85b2227e5537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98cdb846-ca37-45a4-97bc-d272eeb335fa",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4825f0e6-1c8a-4c8e-bf93-947baafb8d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8879a13f-98bd-43dd-bff4-55211d2a400a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565c4fbc-5016-40d4-a6e2-b7892cc9cc05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aaff4232-3b8e-42cb-9889-47c6f78d1225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6b8e79-cdd0-42d8-8116-100ae67aa1a6",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c0bc38-b6c0-45ad-abb8-fc61391525c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d77040c-5fea-4044-8756-b06667ec4bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8cf19e8-5be1-482c-8f9e-7cad9ac1f3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f5ad629-c03e-4cd7-82dc-b24b84509168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e498991-85de-4c12-9b10-14789a7388f0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d39510-dc35-4c90-8b54-0a6f8d063e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39737ac1-8989-4c0e-bab0-503370bfa793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b692d76b-2c5f-4815-90e5-98e19828a8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d45f0d0-2f13-46b4-a880-cf2df38102a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9e329f-0c5d-43c3-96f2-62dcd691af2a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b540d564-7b3e-4384-9b9c-3e8e5a98471c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32f36894-2c69-413e-9923-01201803c837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b653f4-6efd-4336-a96d-a9e4a8d86822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c24f7f8-b3a0-4dee-b2c7-d3bc15f2a12d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2843e3-41c0-4fe8-8419-65e8d5609aff",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8e0572-b3a4-4947-bf45-cfe8ef990a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69983f07-84c8-4e32-ae68-fa91e8051349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af20e69b-ef22-4e1f-9638-e9056c188503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c298ffa-340d-405c-8af0-f2a3c6f9c715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17792ec5-669f-4324-8561-2c46d3b3e1a9",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c85a56c-a914-4f9a-9653-af32b7cbd2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21a887c-18a3-4c28-9bc5-ca85d15f4cb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "829a6f5e-7ce8-4747-b5c3-6aacb6e196d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "37440e60-523a-4547-9dde-16c622006bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d41ab7-315a-4f77-81f6-5b8dcce75074",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1b6252-9a97-4875-a0c9-374fd3bab85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a209d16d-945b-4982-8207-1c4de56deaa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c372fd1e-0e7d-44f1-9173-9e2b630e1397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e205370c-ae73-4bf3-b8b6-9ea888f601fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26c651d-a549-468a-a9ff-da7b1d43e3f7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e9b98a-f12a-4139-8a60-09cf602b7ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b7aaa5c-eb7f-4735-b7c4-1a3c69d5844c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29fe2a4b-a7f7-4244-bab6-d844cb0b8f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e49769e-ba0f-44d7-84ba-24e423b8e001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88aa7b8-f91d-4c5e-ace7-1c41c64cb00e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a137441-e94d-4175-a15a-3b58775ed7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e129f18f-2112-4fc9-b791-bfe6f6b8b6a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad9acbf-8893-468b-8e7b-e2830a3acaf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0679cfb-1fd0-4933-a527-92ff18ac8f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8082e0a-27e9-4eb9-bbaf-b6847141f234",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06327c95-7f56-4537-adc8-b75ecca5941e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f14a53d-5d62-498d-87a4-d57487aa2bf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30179f04-179f-4aa5-b54f-0945f4e12fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "471e65f6-584c-4954-8ee6-70cb18f98abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7320c56f-67f8-47f1-88a6-65448d180155",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9920a5-efd1-4be9-a0a2-8bc4a6d6523f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a53610-6837-4065-a3bd-12998de74150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40dff3c7-e49f-4722-acd5-e0fbed92f3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "47017f1e-3608-4948-a00f-7df7237807cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87da175-8787-4d57-b9a3-a82d4de80627",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a76bd82-db31-4ada-a592-e24cf35993ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82a1bbc7-43ff-448a-847b-576c705d9a70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f36f743-8d2c-4927-a659-ebf31cb21ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "24282eee-dd8e-4b88-a952-71dbae9e2218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0abce1c-a2b4-45f6-beef-a673dbd3180e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6318bdbe-8092-4658-81ba-8ae9507376ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "67f26194-becc-4abc-8b50-09da689339f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5bb242-cf53-4f3b-bdf5-e37516243ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "52fdf7be-6eaf-48a9-bdaa-ff48a58afc3e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "155d3772-3396-4a92-9efc-33408ef1fa35",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d85674ec-c5b0-4489-b498-2e525d867347",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f19dc0-41ac-456a-bca5-14919b0c6f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1253570c-dcc6-4433-a483-8b0a5c7846f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93947a3b-83ed-4f8d-8284-79932d0ed5a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ace2296b-35ab-4235-a98d-a918d7178e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc100715-4caf-4428-a5ea-df9eccc2de3e",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b75b22b-0e14-4d74-a5b1-c6fb0985335b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed850ef9-f27f-4aa0-926a-3448264d5a7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a972e223-3b98-4080-a476-7c288c558082",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f61ecf10-9d31-4f3d-821c-72da54b65337"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78af0b87-40fa-463c-8916-7ca26c7654a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f490609c-a590-4981-b1e9-09214590eaf2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "afa8f3a4-4f1c-4b3f-ba5c-99613e6995cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02e2476f-21d3-4083-9887-076d40854b77"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f0bf606d-ad92-4bd5-9d2a-0937d9fd4515",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "731cbf53-91a4-4bb6-bf5d-ac7cba72d096"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c9b055ba-9466-481e-958b-7d01f0730519",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7820fc81-0f10-4869-aa0d-79f2a9db29b5"
                }
              }
            ]
          },
          {
            "id": "ea8d2692-79bc-444e-862b-ccd3040c520e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0754a0b9-deac-4255-aace-00fdaf62036b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9ca1053-fa27-4249-89c7-0d489866bc05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4f6043ed-7ef4-45af-8ffd-a3d8f1356c3d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7274979e-5a20-48f5-bdb0-07c28c46f75d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a8b3ad01-94c1-4b91-afc1-061c693bd696"
                    }
                  }
                ]
              },
              {
                "id": "176d6bd9-cb8a-4e17-a3c1-bab88df13983",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d58b46e9-4a88-4b88-b642-3178df396fb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f37928dd-bcbc-4184-871a-3467c2d63726"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "407c4a7e-e901-406a-8796-358eb1aee131",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "17175937-7a74-4396-948d-119d0c821a84"
                    }
                  }
                ]
              },
              {
                "id": "cb008734-9a82-406a-8e06-0e9e6a973ab8",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "21390c44-8335-459a-847a-741ca5fb1868",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "64506f91-4461-4c0d-af10-0fbd30a69a85"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "453db473-c8a1-41ce-b4a3-dfbb2349f6c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7e7608e3-3b6f-4ecf-8f0f-1fff9787dbda"
                    }
                  }
                ]
              },
              {
                "id": "c547fbc1-5d55-4c6b-8366-1368db90b5bc",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "315f9323-95d7-4312-9580-2819c6ab0585",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "211a7f6b-f48a-41a0-8585-ca27306140ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a1cfec7-2bb3-49bd-a14d-2805b9bb0b46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "89c8acef-1fe5-41ee-b574-b7dfb0249104"
                    }
                  }
                ]
              },
              {
                "id": "4b7a6fd6-2ae5-4e59-9316-6967bc38cb91",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1b4d8a7-ef20-4791-8e5e-e3fd00a89dc5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "421ba3c3-3970-4aa5-8a8c-ab574f94cd8b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e25aa928-7075-474d-86f0-794df094d8e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "69c93e8b-7db8-42a3-a2d3-e01f94c460d4"
                    }
                  }
                ]
              },
              {
                "id": "9131dd54-05ee-48ca-99de-d29af40d0b78",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ba44078-6a1d-44e8-9c11-6966f7907411",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "98ec6586-3f7b-4bb6-a5e9-69fbd30cf658"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9bf245dd-e9c1-4a1d-820b-0c2ee953cc94",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8a643689-d295-4fa8-9c36-1697cf27e1d0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7e60b706-066b-4f91-a9d8-72004ae858b8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e824619b-dd1f-49c5-b6d4-af15e30e6f81"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d922a16e-b78a-49eb-9de7-7f1e9670fde8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ca326120-c5fb-403b-98d1-c3120ce1dfb4"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad749671-9bf4-4505-840d-eae68490e577",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1350392e-a926-420b-a5fc-cb622579ace6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c0af9f16-adb5-46fc-a4fe-7be71639f98d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "55b49551-35e2-47ca-af28-cc4ddaf23d79"
            }
          }
        ]
      },
      {
        "id": "d4b8705b-82ec-40f5-ab4e-c7af4cd4e42c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3354bba6-40fd-41a1-bd2f-dd009206faf3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5d9dd2fd-133d-4f02-a6ba-c413fd63e075",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dfa9b973-8712-43c3-b600-a7f103733a26",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75565a03-8021-4443-b134-dc733dc35389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ba805c0-c78f-468d-963c-79b3d0545fe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae1eda8-798f-4a2b-8b1c-c3368fcf70a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4cb13bc-9067-4f28-ad83-3884ff81f039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da5c523-b767-4765-aa7a-931b23803bd1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d6a68c-96aa-4b48-a471-ce3b118aa248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24bf9c36-1841-41e9-9dc5-58e5278efc39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a741ca5-80d5-48e7-9722-f4bdaa25500e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f2153a2-805c-4688-9d7d-98a8b908bf41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35c16e8-85a8-4dde-8431-f7590e7f5339",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "677599f4-ba02-439d-8025-f5e4d1073ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bde4dfd-5ee1-4bcc-a19a-2087f6ac4f8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0dce2d-3cb7-4218-be17-3760a16f29b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f376170c-137f-42d6-896f-52c9bc1226bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195707a4-befa-4f7f-bcad-a5e20139c6bd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59cf6f91-ca97-48ab-9c85-61c05912fee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93d82ed4-71fe-470c-8407-224eea1339c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a92228-6376-4462-9e3c-0b6cc8f602ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f1221dc-c50d-49e0-8ea1-9bd9e6fab6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef409b67-e688-4bb1-92fa-6a55b72e53bf",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "542e54cf-ee1d-4940-9666-309d5dc408f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7083970c-c931-4e13-b426-aee21b74cd84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9c6878-05e9-4fdc-bf5d-bedf5babfdaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac4d7142-5451-4457-9ba4-d15cc03aeff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b510d54-e862-4ec1-ab18-b13dadb81d53",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e392ba35-3552-4bc0-bc07-8f78d4f5e0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c08f423d-c984-4397-ba83-8a8f55f23028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e62283-c363-455f-999b-93fe1ea0e0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7023e158-be14-4698-99e0-2e56cd533857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85135c2-1227-4cfb-84eb-f5ef1b677f5b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff8879f-6a47-4c3d-9887-7e6b73959780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9221ee7-8213-48bc-8c1c-0d9555804c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf23e10-e9bd-4fc6-87e2-e655e169b7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8feb122a-7317-4b97-b56e-bb746e610d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f9ea57-b0bb-4ae0-80ac-babcf45893e7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e069ff4-16f8-4236-9dd6-ed5114f8e2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dad96ac-e22b-4178-b9e9-2aca8c5972b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93dc09ee-6883-4001-973c-8f2551251c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc33be67-97c0-42cd-9c38-8d0abaf6dda1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b5f8c3-15b6-4a47-83dd-090c6522321f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f27fd57-a395-4aed-bccb-8cb8b4716a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fac6a0d-31d5-45f4-a4c1-bb5d03ea46ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3640631-372a-48b7-99ca-b30c5ff3c951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13fa7874-cccf-4098-a0d7-a3f6a46b1c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f99b4e-d4b6-423f-af8e-c008c9a2ee17",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "290d579f-ec67-461a-9783-77f9873c6260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1df8a16-f066-4350-9532-96f42bd007a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6a6de8-9404-45f3-91dd-5509b688a0f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "19d9c097-24c3-4988-bc74-f1dd11a52127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a222138d-d083-418a-b831-690f4d4a8133",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dee266f-0e99-479a-973b-89bbfea9fda2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f0ae81-7e02-4e2f-bd6d-b2f1b14275e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f046e6-4016-4802-b29a-43bd853fc603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a9042fcb-608b-48ca-90e8-bd431e5e282e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508f1e7a-3e4d-471a-b93f-c62905790928",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a1c9d19-da54-4144-be91-8d98428e6e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1e49293-fca6-4cc3-8387-d054eeea9c77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9ebdd1-171d-4346-a544-4899a3f1c077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "07b653c4-2b7e-4201-91f1-b231a64dc88e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8c8251-2ac8-4d2b-88ab-34671805b6e5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "777ba376-9f29-42a9-819a-2296003b77e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e328f81f-bbf5-4005-bbd1-f3fcfda6a473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd187df-7fc0-4e31-b600-b5c5247f9c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ce77538-8d96-4c42-aeda-59357b21c634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0969cc62-b7fa-47d4-983d-3329a3345ef2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "346b0236-be1f-4953-80ab-d3efb858d2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "807f9719-124e-4149-8c30-fb91a3e7a197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72994781-5bc1-4d44-b19b-b3f75b98250f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "29d72b98-48fb-4e7f-b714-026768f56533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17100320-6bef-4dc0-a285-5c4b5e59667b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4922e9-73dc-4d6d-b396-a6d63ac0fc8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe8f1b1d-4d65-43ad-aa61-badd048bc68a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ec1ada-2efc-4e65-86d3-f3ed061a497b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "358197c4-cc95-4a57-abea-ece49f8b49cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12548a36-44f1-473f-b78a-87f195f52f0d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f1be9c-bfc7-4269-8379-bdf578030920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e52487a-9213-44ae-a43b-9f7f81ebe792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c6f81e-ac9a-4fb5-8901-96456d222bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5091a6d3-bf9e-4607-92d1-b1fee9741862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6d658a-2c1f-4b7c-a258-c4144349f7d6",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5379ae6e-8c48-4c0b-b138-9e0bc9134545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8190bfab-4c81-4806-80b8-cf57cc54ca8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7d18ee-91ca-4074-a826-f78e53d30040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd0d2d9e-3c3e-490a-9a14-c8034dc6297f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566d0802-b7b2-448a-8ee7-1a40736687e2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d930b9-8344-432b-9ea2-bdec239abf53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "153adab0-f92e-485b-8c4e-42910127fb88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c34128b-ef34-4ec9-821d-18eb8603725b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1991d86f-0f33-443b-9c0e-d58a0d2cd02b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcbdd259-e237-4eab-8ec2-5c93d21c4d9e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a40c52-769e-49ff-8401-83ec12d1edf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cafc20e-d252-4af0-87a1-5a16c9d89aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9858d17-8c27-4d0e-9124-22037fe038b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0fd11a0-288a-4754-91bf-9dd915de3f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a6ad22-fe91-4eee-9f16-c516095ed89c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4603e79-1682-4319-a30f-4b98f9d88f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f4562ca-93e9-480d-b466-8720a9a7f90c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7674ce2a-1462-4409-92f8-f8de96aa02d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d9a8763-b593-41f7-87c0-b26358a1efe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b1bc6d-53ec-4f4c-9c37-ae40d32cd4b9",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "572b7c7c-9f4e-4bbc-9251-f6a28239eaef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17713ccb-c5d8-4d1d-81d5-0bb992ce3a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac23a796-ae02-4b1f-a9c5-10cdadd4d851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9df01c90-d224-4d61-838b-ad177f58e3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b2cd57-067d-4183-88a3-5e70645f60a9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8704f830-6c2b-493f-adf8-1f2d655a681b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c02ccdd5-65e4-4dd9-8e07-43ad7b24b4ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231db521-0ebd-46e6-b246-0ba3ae0d3e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b0b0f46-e58e-49a0-8181-90041c756582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71d788e-70b8-4e7e-a92d-0975ef3d2b26",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9a24ad-6388-470e-9704-90896e88cf51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30af9545-8a92-418a-8ff5-11ddc89bddb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfabce4f-7c16-4265-acba-6fc66672a18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5361570f-3927-4390-95b0-5412202f4f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20a9b42-dbc3-4222-8f71-004073f407e6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b6b653-034b-4857-9877-619ada98e911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f6354e5-0fd6-48d2-be47-15765ff167f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567b95fd-98a7-40b0-8f6a-62ab84bf2ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5dc5d57c-42d6-4c6f-a01e-c133268b81bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd8a389-aa35-4b50-974a-cf6f3f755098",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25967e08-f53f-4851-89b8-e13777bbd83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c3684c6-add4-4181-b6a0-1aefbdf280c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1002cfb-e14e-4935-90d1-e94d9f2cb15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7705cff-0b69-498f-bc62-93b1699c3be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1e66cd-0488-4f96-879c-c6533d5a37bb",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bce189f-7a9e-415b-b1ba-702877d0368a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "012c3329-ca34-46a4-b53b-53b397f351e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e400e2e8-2223-44f0-9af2-4be8ca30f1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d6baf0b-648f-401d-91ac-b87256eddc68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6deecf0e-fbc9-48e4-87a4-db72bceaca2b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9868fad7-f79e-4e3e-9738-d214685913ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2dbaecd-18f0-4090-8bbe-09c39efa066d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88189186-1f9b-4fe5-8f84-1ab7d79dcaf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2db2450b-e571-44be-89ca-d859202eca57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22693ad9-0931-416e-9d90-479ebbde2859",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "038a2f8e-8387-4d65-89db-f10386fb794b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac5fd6c7-9ed8-4b0b-90e5-9571f5ace609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa508af-964d-4356-8ab1-f7a8d82dbc58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95ef9b9c-c53b-4b21-bdde-f75c9efb0e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90be71f-4814-4044-abe9-6fda7daa66e2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c4cc95-09d9-4eca-a288-4f939bbf763b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e697bc9-4a62-45eb-b007-1b437ec9827a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a038b0-22eb-4591-8df0-2e53af9d4276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "925eb277-1953-4803-a6d8-ea2742725ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f01d10-67f6-4976-bac9-ccab16f7de45",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf382025-71aa-4d81-92ac-adc4c14c9d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "333a2cbe-c567-4be5-94d0-0e083b079721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aafa59b0-8775-4203-bfba-4cd10104cdda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "351fa1cd-c9f9-413b-a982-a64b56ec7453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e298c127-2e08-433d-a4d0-57352bdf4661",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7101de98-2f12-41a6-a270-f3d537e0a542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b3999de-04d6-4af7-a3dd-736e0706214c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fcaea52-fba1-488d-a594-8cb91fd403a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7be35d3f-2d21-4ed1-a304-0a8326dfafd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0877d5b-3907-472c-bddb-b1b4ed2b625e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596b5f79-1c91-4b7b-89cc-6a3b5dc2bfca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6ee408b-5f8e-419d-bfa7-f9a612f14521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8795cd99-c32f-4729-b189-6777356dc7bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3083c7d2-2c82-4987-91f6-1624e1ce4a9b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "00302248-c336-4ec1-9363-ecb42a210ad1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9eb8bc2d-458c-4527-bc00-aa412f96bc73",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b5959a-a59e-4ce4-9d10-c8efb7992016",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "84f67d6f-8122-40c0-ad45-87e653eb0ef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e067508-be45-405f-bc24-63f68a2784b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d639dca-e634-41ac-bd5f-be396f6652d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62e859d-3c70-43bd-b66b-27025eb8ba49",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1a89d3-8f1b-47fa-ac92-afbb201b3e82",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9024df17-fed0-446b-ae5d-6818c7cf71fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "066a0ec3-193e-4aca-9d8b-172c7a333990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e67372a7-f502-4b6c-95e3-a444d97198de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08c37523-e2f6-44e2-98e3-0055771e0680",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e1308d8-6160-4816-8fbc-7a911368d982"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2108916-ee24-41d6-8957-be1c34600a6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e93f1a95-0e56-4f75-a568-def69fdb97bc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a593840f-22a6-4316-ab0a-160dd3599490",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2ec0e32a-b6c3-47a4-bd0a-4db693223759"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "376c3d2a-1450-4d7d-842f-65f652ec43ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "957ab0d4-e4c4-47ff-9b9f-16c90bfa355e"
            }
          }
        ]
      },
      {
        "id": "60806ba3-a535-4887-8f39-563664ba67b9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4c4de0be-62c7-45f3-98ab-2f4019dda85e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c717ffac-0992-405a-810c-f1dd122bdb6e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c4c76b64-26e1-48df-aee4-0c450170e2c6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76966120-d69a-4acb-aab4-b3f5d039f558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "524c89de-c8c3-4f9c-8547-53a891881ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845acf43-e611-44ef-96a9-2f4ed24895b8",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20574edf-ae0d-442e-8139-2f260ea1977b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae5a45a3-a4a5-4230-913e-d630a7e073ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a57e23d-adcc-4c2f-931f-748ad7cff652",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3c25c1-f850-43fc-94e8-7036bbf3735a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af3e41d-eceb-4c92-b2b9-fac0381986ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd37d0be-8058-4ef6-9ad9-1880f3b63df3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44941296-74c6-4273-adef-f2cc650e8a9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e068548-db62-4540-ac80-8fa3e67dcedc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7168eb4-86c4-40b7-b0f3-a251b4ff2d56",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16195b5b-75c5-468a-bbbb-dd3245a80cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "185eed37-6612-49df-bd7e-196107be2e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f87657-26d7-4b10-b2ed-c50fcfc95759",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872bcc7b-129b-45f0-96df-3c9062d08099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd55a01e-93e2-4e71-8322-e3aa39103d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb167bb-4dcb-4a25-991d-5a7158495f01",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87bce64-e968-4578-8e2e-9cc21d6b0cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c7875f-126a-402d-a450-768e74a24eed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9594877b-6842-4ea1-a80d-38e6175fc4bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "727442fc-8b2d-4bdb-b031-ed6e3b267fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee79f25-f307-4a4b-8442-af1dca27f89b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977e3c1c-7db2-4b89-9f70-5fce6b51e55e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "062db216-60e6-42e2-b000-68d1654b9dc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a527f794-dcbc-4f55-bb69-2a1ca675a79f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ada780f-d032-4336-85a9-ddf35546e654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2677691-c4c8-4e47-ac2f-85bdac209021",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d333c7df-60ed-40f3-92b1-453bb344f7b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17902c91-a2d0-450a-b9f1-aefe584051ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9eab1af-3426-4a71-bea2-f6d4b233d255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888263d0-a64d-4f87-bfe9-d46d78001f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd266ef0-3038-4bd4-b17e-ad7134824930",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd972c9-852f-4642-9acf-135e89e146c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2865f258-b278-4e33-a6e7-bd2c11780cb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cea2930-fe31-40d4-afac-b97330716b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70561ddb-fc64-4059-9bd5-795296b72cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c6a260-0dde-49b6-b1cb-7e7119c4ec41",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad9b350b-c4c6-47c1-89bc-01c8609e567f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe25c778-0485-4765-9c45-bcc715efa7aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb723cc-4595-4c1c-bdf1-878484f611a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3793ee36-1363-40e0-a229-a06b451cc6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e03c2b49-198d-49f0-9dd5-75204bcb2210",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44f8870-95ed-4d8a-b3a6-90118c912084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ea010f3-1505-4f25-aa2a-3d2da1103e8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "475d0604-f018-4f17-ae53-17f215148a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d1390a2-9666-4f46-874d-a0177e802445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57108aa-754b-4fdc-9e48-afd50becd1e4",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854dceb9-4987-44b6-bec2-5187c121396e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c7528d3-5da3-4356-9afe-205030154751"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56466528-49c5-4ac5-ade5-edba15999ccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c7e8b9-4e9b-4fc9-8db7-c7a9170ed191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f5c45c-1377-4548-99f1-81c8c59bbf1f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420bd6f3-aa74-4adb-8d52-46d7ac597dc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1aa038a-7b1e-47cc-ba33-a4470de71ce7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c243360b-8fc3-4bc7-afc7-cea8f7f3c805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "676bf780-0799-4980-b9b3-01c426736a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23116628-a1e4-4338-b8e7-2b8735b3be98",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ba4fcb-5bd0-4719-bdb2-bc2e1bbc134a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "766c0803-9972-4851-bb8c-291ce9dc5c4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb211c5-88a9-422e-9268-77765c358c52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fc83001-fff3-47d7-9665-9ccb2550eb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1078ec45-3ef2-4235-8847-5b680e04628c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4bc33b-b368-4f82-8bc8-b9739101e0a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75a53f1c-8008-4b9e-b82c-f1dc52f247a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1c84fb-15f3-4fce-a0ae-5495bfd1224e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db62ddc1-d597-4fe8-b260-3df5dea6560e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc54380a-ba83-4783-8e8d-1f05a72afb3e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5facf2-7d0e-4986-bb90-944c6609320c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bdc940a-0993-4cb3-b8d6-3b8524101fc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50066a41-e55e-4c48-a9ed-7ca9991d586c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a5a1294-b86d-4e10-b836-c75e84059ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac9f375-deaf-44b7-a59c-3ec329a83d14",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d44d984-f8d6-4529-98fa-bca653d33976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deca22bb-fba5-4ad1-be09-469350157123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdf98c4-dad9-43ec-b949-3d16a3a3ba01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53025461-d06e-40cf-ab81-c3c5d3f62ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b712482b-c007-4eaf-8c9a-798cc28f1f96",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "143e933a-0d38-47e6-9941-15eb0a864f04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ac3a24d-57d8-4220-90cf-e6746220b6f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8085f0f7-0b97-4840-9475-6ff2253dc439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14c31910-9a73-45bb-a02e-a6e8282aabcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c8690b-44e3-4778-8b4a-14549a09f8ac",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca5da4c-c8e2-4363-a628-69da6196be99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0087a66f-1c83-4d72-b2e6-0aca6b554d4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5b85a6-ce8f-46b2-8dad-b39ab9996eef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a113b79b-2425-41fe-bd5d-a8f07f1a1468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d362839-099e-454a-b1f7-96230a77d6ac",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79e4f9b-750d-4106-8fe4-873a998cd1ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9aa3740-f7b5-4706-8945-eeb6de281fca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8e1618-2d65-4e9b-af63-43ebf18721d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "839be396-57a0-4bfc-998d-ab296f4f1352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7285af6f-fcee-46bc-9f79-6b9a0fac0486",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd7e2e4-bbfc-4141-8631-60a9993b836b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86e763d2-a5f1-40e7-9f01-193c37d34b6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f47d2f-b644-4379-aa0d-3e1bd30e976c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "283cbfe5-7075-43bb-b68e-d1b1d58dc171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e88c0c-f4fd-4fbb-a8d4-6b9b85d73726",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f26f14-19e6-4948-ba59-6a3f348a70b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a73776-c6d9-41cc-8724-d5c1f14e0ee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f706ba4-8007-4fab-8fd9-8275fd5f9848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f175d314-1f62-4f49-8702-12f02fb74ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34fa207-eec7-4798-b7fe-24fe51a20e3e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd763d4b-a59e-4071-b84c-6981e0e284ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caf10f62-0921-4adf-89ed-fbe31cc84e64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ee9f94-9606-426c-b87f-64ee75a3557d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8f08dae-2edc-421e-84f7-f40590c02b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57587524-7470-460d-b680-2b76d2b69904",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7caa377-32ab-4a85-8ab1-80b40d6cb687",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28c9c320-bad0-4a43-9317-883cff3f896a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bedf79c1-f2b1-4810-9f9b-7910ad3041df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6033092-bee9-4526-89e8-2eec673fc731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60fe6ec-0014-41ed-8238-b013be5d2bd0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ea1094-0e80-4408-a315-b4b5b69eb5e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "480a0d83-80cf-4966-a6cd-58ce8302498c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5ec357-6fca-418e-8ab3-74fbf7ed06b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d3dd088-ccd4-4477-ac8f-278685aa303b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "878b75db-c8ec-465a-b597-28eb35338049",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb999d2c-13be-4396-8c0b-19898240a7d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0ea3c0e-06d9-42b3-80e0-c60fa2cb1903"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc871571-6761-4182-a6dd-b4d22259a98d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec54c27-a9f4-4ab5-a6af-0f4e2e01ccfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36a9c7f-4f04-4cad-b1bc-bc50a7ca3489",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc0d9c3-df51-4d3b-a2de-5a5d2132a0f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab23284-4522-45a3-bc2f-5258cc875937"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66fa251b-b180-4aef-8e79-7d6827669efe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9326cfa-4b5f-4b94-af57-3cc57ceb1607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68fd61b1-7b4e-4f2e-bbcd-1586900ca99e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7651ee87-0d57-4ba1-8979-4c0e9adb2e89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "503e0a7b-38cc-4a1a-8efb-62b7219e2873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ec77fd-6ed1-4929-93f6-b06754b157e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "970ea01e-6f1d-475f-b9dc-ba7489e3b4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4780af-4758-4fef-bbc4-a3db3c192ca4",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19458c5a-272a-4179-aed2-02d98f11b49a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "260212d6-7df4-4b4d-942a-2fec0d082e5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da2644d-cafe-4e2c-9fd4-e7d96dce6066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7d61e67-4518-43b9-8b73-8564fbe9ea06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4a9ba8-b068-4059-81c1-d913ea694355",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6100030f-b538-4998-a4e5-bf3d144bfd7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7b3acf4-f43f-48ed-85b8-f7d136093ca8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "361126fe-ab1d-43c1-bbc3-8c2e4ad3ae4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "074df878-40f2-4754-8852-f9b0861977cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66eb4c74-adc2-4a29-be72-36e980a355cc",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a670ec6a-e19e-42cc-8abd-33c47078895c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7abeee4a-fecb-4f7e-a0e1-fc156f14b230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb87bcc-3358-461f-b3f4-26a9e373c243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed7ccb02-d4ec-4f75-bbc1-bec02d5b4521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6e5821-46cb-4de3-9f40-88249a21a583",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a05e9b-1f35-4ae2-afb0-9d2c770dffba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a097fec7-ebc7-4205-9cc5-92b8c4e3ad03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6863fcf-fe82-4dad-a3fc-9faa7fd3e748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b94755b-4f5e-4e95-b43c-c920340d7a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de9b780-ef99-43ec-853e-968eb6f13c69",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba63231-f8f2-4719-8cfe-1f4358c28132",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41a62b17-da6e-4b14-a176-2e09f7fa7b12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5c7fef1-2a6e-4417-a5a4-6b62c8f7b6a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f9a0e57-5779-4a72-86db-210363713f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee46ced-dac4-4e5d-bfe6-a9736489c08a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2b371d-92d3-4b3f-82de-f45efcc5160b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb7a5657-4aff-46ae-94a1-7ca2f6cf6a1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db33bd1b-e1ac-4ded-8023-b03a7e077be8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "293d58ad-ef7b-4a51-be55-c283af441ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be091641-8b2f-4e5b-8be4-176b1b71721a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e61baa6-5911-4a02-b363-67e5408ff017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa2c40de-3d17-40bd-9e47-27d105beb2a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e6d509-38b7-4c36-b382-c061a231b1cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b9cd82b-68f8-4329-bd63-0529e3db04fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d019912-212d-45be-b765-6dad8beac1f6",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309ff831-7959-4dea-bb0c-1221efa9ef96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55b7de0-327b-4332-8468-8d70a4366a3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c543f1-fb3a-4d5e-82fe-6b9e4163d5d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a12e2ebd-8736-46b9-9428-80ee6c160388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55785943-09a3-413d-9ddb-e213cb4ea0b3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd30168-c224-49f5-8302-bbf4a59b4063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aa4771f-8673-4e48-ba73-89556c5067d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75713b89-b28e-41a0-9109-eafe8bb69d7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70323a57-aef3-44e8-bfe1-0fc71dc7abba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9048df7-560c-4587-ab66-46075779bb51",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f98fe3-4aea-4618-b7fc-539a58b4ce31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf0decf3-3ad1-4c6a-859e-42eb86e0521a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6052c1a7-4caf-4ca6-ac02-c9ecd420db4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e78fe3-8edc-4333-af10-902f1f7ffc18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a1dd7c-bf93-4521-954c-8a52d1cbee9f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9495bb-ff36-4a12-90ad-80fc86d33ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1130f9b-a604-4951-b2fb-07eda9e22df8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb9d68b-78b6-4f34-b1bd-1cff117eeb12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5bec11b-b401-469d-bf6f-b29dd06924f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a75ac1-2aef-47c5-96ff-312e27f62847",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0a33f5-a878-402f-89b4-43b207ca30d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca6532b7-f8d5-4d19-95a4-c30a080164a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d55a553-48a9-4df1-bb3d-33dc98aba9bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6265620a-d222-41fd-8aa3-52957f33b9da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d0919e-3a2b-478f-aee4-c3f9882ec9f2",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d8be01-1100-4ffe-9ac0-092d4d22969a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f50c9437-8662-438d-ae77-7900fc8833c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0025aa56-56e2-4148-87ea-3b451a63922c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf304db0-b789-4526-862e-2da3c28ffa8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f4e055b-a298-4a1e-bc82-86df0785aee8",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2873c5b0-8208-4c5d-aa22-864d6bfde5de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09ad58cf-0942-42f6-8ea1-cea1841c6980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ce8012-6832-4d21-8ea8-0a967153b048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5964d548-f7a8-477e-95a3-ff947a60c129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c01d0b-268f-4c98-b22f-0fa6834e1529",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4fda08-6846-4d82-9c17-708e77eedb56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7dffba9-d36c-48c9-97a0-d83360b998e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73560930-645f-41ee-a7d7-41cac36642b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d5f1ce0-01cc-49d7-9713-9b0a783686da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc338bd-8c24-45f5-9606-61f26998c413",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d89271b-e8f3-4a6d-a068-0cc70bd47ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5b636b6-fc3e-4422-807e-d84c11d8047c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "361ba7e5-9be6-4adc-b908-b46301c48186",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01cd5631-1898-4098-a1dc-f3f80f1a95ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b7af29-28df-47cc-a6c0-4a42c4103856",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdccb44b-5548-4ba2-af98-44612ee3efab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9d74d44-68b4-42e6-92fd-f96cd35e1085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ba9dae-4b1f-4e61-b01f-d5505d175b0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "740a02d4-c0b0-4007-a50a-90281f0a24d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d5c488-e651-4f29-946b-4083997c3834",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b019b8be-fd92-47b5-bb9a-909a4f6d1f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "630392e1-57d9-46ed-9cae-901979c065bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "453f979b-6ba3-4228-90be-752fa179327e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e455a4d1-8fd4-406e-b299-d58194e862e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce3c2bb-6ff0-4f9b-b5ca-735c69214e09",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4743ee20-16be-4da4-8103-6152ab46cfb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e88639ed-4597-4bbf-ba75-5da80424616c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf1e457-4b0c-4d34-96b9-4a89df0fb625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d55085a8-cdad-4afc-86f6-da9d3c1d533b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e997fa-967e-4bef-933b-c7286333b6be",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a743ab-8ca5-4eef-92fa-c12d8d6c040c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "492ab7ad-3b13-48e6-8368-b615dca7889c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c562bdf-fbeb-49ae-b8a4-7e8787d87b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d58d32-9fa4-4e18-a7c5-1d4c22c91745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a12dbe86-5b5b-491f-ab7a-4323a5bcc137",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f88d2fe-5547-420d-86d1-0ae246d14422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ad2b0a7-ec01-4fee-8094-16044fa0dbc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7fc88fc-fcc0-433c-a34e-6a9d38e56d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b51bf93-d477-4aca-b9f3-2eb58ebeeee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8813c2fa-055f-4fee-9357-2df5798b9d57",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a29372-e272-458b-8962-e7bcf300a66b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d441ba18-2d31-4235-ae8e-596817762e42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c1e4fa-396a-4bec-b9e1-d067ee9d59de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8914141b-2f0e-465c-9ec0-af1abd4c50f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b054a859-2cda-4857-a1c2-65890428e5a9",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f86eaf-05e8-4bb0-8feb-55022a7669d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60389a5d-0a48-4bbc-b018-d8a34e3419b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8712af-4d97-4a50-9c17-4fcc448c28d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9a8b4ee-7284-4724-8d74-e40b5e9654d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e4ef1f-31c7-42d7-aa56-fc0e63ca93cb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bede2ada-e68a-42ab-95e0-d41423fb9820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac44f75a-54b3-4bd2-a1c4-10968118616e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "889e47e4-1f62-4c87-b337-6eca40b7dfef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "652cf46b-77c7-4f22-9891-6c37c58f805a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68eb7965-36ed-4064-a055-94419e5af845",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e826779-a492-4f69-84b4-431b9527e91a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e1cee6-7afa-4b7f-a154-444515f2cf70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a506d7d-0ad6-467b-ae42-fdbbe0649537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a3ba03e-9765-416f-a9be-84e85930ccd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e3471a9-f4da-4f91-bc0d-6f24d3a3d8ea",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f140fa6-8266-4dff-a6d0-7b56bb7eae2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "043d3b11-7c27-49ee-a1b0-98a898de3d82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8237772-b554-431d-ac3e-d0e642c6110d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a2fe27b-508c-45af-bdb1-a30fabb15db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62697d27-273b-4009-9ac0-bf9a5adf1fd3",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a3c5d9-cb73-489a-822f-7f1833d66acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e53841d-e52b-429d-8dfd-eb4335d06330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "760bb163-ea46-466b-83fe-1b4ed688c2ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09f06bc5-acdb-49cc-9ca6-8647b1904781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24780a03-345e-4948-a92a-ffb0e186fa24",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d297e3d-3dc2-4569-9e99-fc1c130244de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd4f2c9e-b08b-4498-a186-34c32664740f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b21546-c187-4319-8963-4fa2c47d1d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d89e9ffa-1aea-4051-91cb-e821d10a3267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460ef443-5ee0-4b14-a22e-fc54d1cfa7da",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8faa9b0b-4a9c-485d-bba1-11fe1548dade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af019d23-976d-4a69-a387-107ed2b819f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "461ab190-d493-40ec-9664-d4ffeb6c6fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be7d40f5-3360-4fd4-8e3e-655d140a4aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5c2a5c-7193-4011-945f-8d1799547e7c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a75694-8300-4109-8313-43baf42950ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57eff470-23aa-423a-bfcf-7f3841597af1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "737ccd24-8261-4f78-babd-7e8c2e352bf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a628a49-c611-4e5d-8227-c5c326ca0761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089002ca-5072-4ee3-ad7a-15a80f68c3d9",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c3bde5-4dd1-4e33-9430-d14108846946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744b7c2c-89fd-45f3-b065-2ff5c1224493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10026a18-a735-4967-8de3-f9b3b161bd50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72e1ef84-4c6f-4a67-9bd1-5caf6702f82f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb7e7bb-f7c0-4db2-b4e6-5cb793824807",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da4405b-464a-4b48-a322-b80c8f49c23e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff025e9e-5333-4ade-983e-ebce8d8e00a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b248b7-f7c6-4584-beb7-dde3700dd9b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de51209e-3080-4898-a0e8-24dae9bb460e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192720ed-26d2-4825-87e9-02cdc010e3df",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1ea3b1-0a9a-4a2b-8833-522379b263b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a538cb98-02d2-4fc1-b9b8-8740f80a44b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3331b74-d9d2-4452-9a64-0ea9b80ecee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0f9568a-f37d-41f7-a808-88cc2aa8db50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ae5b71-bc6b-4356-b435-0bdd9cdd772d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268a7ef7-efc1-4340-85e6-720be5a53363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a673947-fcf7-4abd-8bad-5da76b650feb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7467ef64-d12e-468a-9323-cb9456dca04b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a68adaf-f73d-4ea2-ae8d-b1b0399b150a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b915522-f38b-40dc-bf73-3b5e9f64a455",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdda46bb-72bd-4a46-bcb2-a16e2298f703",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3acc0a96-2e8b-4d2c-9006-95ba428ef12e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a27089-5208-4c22-935b-521fd9a808a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6f23e67-069f-4159-a930-dfd1b655519c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ebff3e-571f-4efe-9b61-0f3bdc967e74",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2979d45e-b78b-4437-9ccc-bb7be9fb58a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "babc56d4-0d23-4e36-8700-5f304c6a4ae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "531909ac-86cb-4438-b1b9-fe34ede30b86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a05c48-3322-4400-93a7-6806eac0ab3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6d7ac8-8508-438f-a77d-9f1f160f2e55",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698eba84-658d-45df-ad0f-bd031f893723",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d71034c9-f452-4015-ad2c-3124ae192446"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47235615-9f10-4d56-96ff-b5116fe82b2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7378abc5-191b-490e-9415-bdca9d793889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af7dec4-c3c6-4fca-b3ef-6a046b0004b2",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e8bcaa-a99d-4a75-b881-7d44309a38dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69415cd6-b968-460a-8638-3db182a8d27a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d109a15-5dc5-422f-959e-8d34f1ec1498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ed104e2-871b-4d98-8c15-31bad6d2eb27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e976e79f-cc82-467c-a87f-f9dede2aca48",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d548ad-16b6-4b25-b620-fadae92a9a13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb429432-e0e2-422b-b363-11911048ae1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6d2a09-d390-42d1-a073-e31f40086f6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e893d257-23d7-48ee-849a-e4236b3a00bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63499fa5-3756-4999-b353-589b9e96fe24",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9a5625-295b-43d7-b27b-108c215e0905",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "882efe6c-27b2-42d5-965d-b28caff345a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ae7ddf-06d8-4b87-999d-320268c84cc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9416b069-62fd-48fc-85f8-7c8e635ca227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b4853d-a082-48df-a6b3-d4438f9b11ca",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc355100-b30b-433c-9624-752d6353b31d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b1bf913-a6a5-44ac-9e89-b23eb905795d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0f284d-78ba-415d-9b78-22d52df468d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a19c0da-93b5-4d2a-93d0-61633a57c979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b398a3bb-539f-4a60-a9fa-9828df7cfbcf",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d3be3ee-5180-4dbd-b3ab-2815b08669b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb70e775-b0bc-429c-b4ee-003e369a1e4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65de8d38-e9d0-4300-bd03-759dbf53b2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b32774-98cb-4429-a1f7-44079dbcfef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c71a000-fab7-4fdc-9c90-29a28649a10e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14a57cb-f486-4245-bc05-0c4005e1541f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eca15c08-46c7-4549-884d-cc69103749b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9823895d-5f0f-4950-8548-a1c93b871636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94700536-c641-49d9-9449-a10f0554ed47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c723a34a-cf15-45fe-ab23-6b1b46cc86b1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbea410-8a62-4e9b-9b48-2ce807a0c7ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "079e5857-1120-4228-94d5-3468e05fd4a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0fc8ee-2a3d-4929-bec3-2d6d89b15259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4d11329-ad56-4608-9e44-a35eba0e289f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c2f85f-ae11-4a44-a6a5-b7a78a52264f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc71a99f-f0c7-48e7-81e2-33ccedd81feb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8659885f-a2a9-40f0-83dc-e5a77983c6e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c88118-a481-4cef-b200-dee88ed0182d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8894dda8-919d-45c9-8db8-c5c084bc919a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66303982-9c43-4d74-a486-922b7fc6decd",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98745b43-c9a9-4cfb-9cb9-90670e1cc597",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c2b4c03-973d-4da1-995b-736f63bd438b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c0a049-6dae-4f02-949d-b34d6e0cf508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3233ece6-6b0b-4b40-a4de-3de950a502b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3335115-ab7a-478d-93fc-166d45a7b424",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40c1437-8bc7-4b19-9738-ee23a71402d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4401e727-68bd-42da-bffa-a4f3a6cc1ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d3eb39-59f8-4702-a6c1-94d92b9b66d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b0a59c4-2cc4-45d8-971c-991e913e7516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e0cb962-9e85-4cd2-bcae-275091f574e8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "941fb779-3a48-44df-a5f8-1a6c46f816e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2b088a8-f03a-4750-aa44-3561e49efef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "571da290-f0c4-4e50-a1bb-5dd9d6fca46c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89342b5f-3af7-4da0-9e42-85a9b4fc7f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a149d498-1030-481a-a8f8-afdcf726cf81",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1db1778-250e-4319-b324-30fee1d07496",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fce8b39-0902-40b0-8012-94dcd7b788e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b08de3-1c83-4b5d-92d7-cdb9b713774a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e289d59-da47-4ac2-a8bc-02c050b826cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7bcdbae-f73d-41ae-9603-9bca78d7ee86",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f64713-068c-451c-910e-940f10ca3bc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3fa2905-6e54-407c-a2b3-18f12d5971ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2a4b11-6491-4f9d-8b10-376b2b8e70ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a0a9667-56f2-4231-9082-7df3dbf33500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f6581c-66ed-415f-a16b-f991ee7b3e10",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64363c59-007b-454e-b3fa-56152b1e8aeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dffe17ef-b102-48ab-82bb-88ff745e0137"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "650c7e7c-0558-4a90-ac7c-d05d2572c6d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01c47883-58ae-49c9-ba97-590bb8859c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a089f6c-69cd-4f5f-8a86-153e09329061",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb8e5b9-2137-4f2b-b9e6-04a39cc52349",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ff5dc53-e803-43c2-9b48-521c2970857d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "570721b6-8b48-4aca-bc0b-e34cb7ad2348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08863346-ef6e-4898-9595-0c7b5bf17379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94a8c66-72ea-4edf-9da8-d3b1cf406378",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e13f8e-e2c9-48c5-a375-71852a0f7109",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba8203dd-2c05-484c-a17c-e5b8db929937"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e26e64-9f7f-4a02-9723-869048edc0e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e576e420-3a65-4866-9c74-51226b6febcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3470b7e4-6aa8-43b7-8173-922ba7c80671",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4161aa7c-43c0-4ec2-afdb-c6dd5246cab4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91813ecc-8c3a-4fdd-b47f-16e20277ee31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb29ebb2-c38d-473b-8df0-7d4096b093d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e63288-f374-4078-b878-a40b83ba762c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb206b3a-62ba-4872-844f-370feee56482",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aca8808-aa80-4a4d-9dd8-0fc2a733350e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baff5225-29e3-4429-9516-9ca0ff97f726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb266aa-95e2-4aee-8833-ba33c980a41c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aa0c8ad-726d-486d-9cd7-31f401249956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279803ae-faba-42be-844f-968c04911555",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a225c267-5d36-42f0-8fd8-a91e8b9a259f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce981551-e065-407c-8ef9-584b3e67a74c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "938932d3-e673-4280-9a6d-153f09c7fbe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c24c3d72-165b-4cbe-9963-4e145f352fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b5e8744-3e7e-4a2f-99cc-a68b68db85d4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb56724-4870-480e-816a-c3394d131c12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7068a450-2b23-465e-ae09-ed734dc6087c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0d7e33-697b-4677-9f72-5192e701ad5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d88f741b-989a-48b6-91b8-e192d0d3ae54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90bb3f04-8190-4127-aaf6-f8c5cd9acbae",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97de4dbb-438a-4e70-a4a9-99253b2a0b1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1f8aa8f-4e1c-4783-b573-1fa1a8fd361f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89317ad0-7ecd-4afc-ba01-0604f281c843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f131ddb-2153-4a58-b601-409146c8812e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a577f694-a67c-4b4a-a54f-3db589d061b2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c8585d-b456-48cb-b2d3-4e64c077a65e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "170a26d7-3d5b-4f14-b3b7-7eb3e5d23bcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b1fc00-f1ce-41f5-bc15-0deabd371222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d95c7af3-ec5f-4cb8-9327-57738f4b6a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99aff247-6c57-4ead-ac9e-a1ed61c195cf",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7bb61d9-1719-43fc-8c1a-8b2e93b742be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7739bb6-5153-486c-9af0-c0e016fdbd9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b840cdf9-3bec-4d71-bac1-1e06e6c59082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "456b8bec-3a0e-4843-b7d9-61bffa7c3c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f530d95c-aa32-4f76-9a82-f134f02f9df6",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9154a59c-20ae-4227-8ba6-c787870a0f18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8abb3715-a7b2-4c9f-ac1f-1c8cc874d980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a972eb-26ba-4d1d-a72f-a7886eb49323",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9aa42c7-96fe-4ca6-8565-a7f3330cfcbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2460eef0-09ba-4e81-91de-d35f42dac509",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d10327-9efc-4ced-9745-b66aa8857a7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30d94484-3a97-4a37-b836-3126de4574e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc143bbc-6bef-41a6-b4f4-cc124745c132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eec3780-42e5-4c5a-be71-b7035e1f38e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee0c0e3-957f-4487-b213-565cd8c17179",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18df6e8c-b45e-4d96-ab71-bf986ecd3f4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d717f7cf-f41d-4460-ad3a-c6d04be02921"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20635298-7d4f-4a7b-bac1-7cb421dd3a90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6364b808-3290-43d4-8e6f-f93df5adeabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff83b45f-0634-469f-9556-a64ee0679479",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1368d53-5ad9-4a16-96d8-3e95da494ad0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b11fee8c-bb71-47a3-a15a-a9c3f327d83b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3935a48-cd94-4ce4-8d49-fd1a64a01fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67910dd7-1ad2-439b-902b-77e7d3ce30eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b188f059-291a-4c68-b7fb-3bb8c4059db0",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c82d09f-486e-4438-88eb-98bc44b09090",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8969abc8-a3d4-4f5a-9670-4132971978cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ce4a89-157c-4dad-beb6-74cfabf810fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7032149c-769a-4dc1-9480-7f2c0aedf4fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c906462-f631-49d1-a2d7-cb1960c28fee",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04895359-e2d2-41d6-95a6-1268bd664939",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a909f746-1ac0-4e5d-8261-ce2a2ade5b31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5d08b9-4816-4769-ae9f-6c9411fec64f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88a2a7e2-9b09-4495-8e5d-d57b5268940b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4946bfde-8bc7-4a31-8e08-f9643d4df23a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a85a46-bc3e-49cb-8fe5-b33674643acc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff3fcee5-24d2-4ddd-8275-fd8172ff0dcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "964106e7-4731-4371-b59f-fdd92cbb3449",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "837af7c0-a5ab-4fdc-96e4-c3d217825165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5522bee5-9a09-4278-a1e9-c15c8206ca2d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7676172-22f7-4003-ad12-a6129954fd54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65bbde8b-fe31-4ff7-b427-e65e7af05886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83817e77-b586-4ace-b71f-ff87df2fbdc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bcce346-f97a-4e32-896a-023f2934d7ba"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e713a6f-9333-4fbc-bca6-3f7484c7d6c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f185680f-0518-468f-a4c7-40755d2346b8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bd2f7c2-08a6-4dc7-9809-6e5785d72561",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "13e45569-a32d-4841-a486-40a9d9143742"
                    }
                  }
                ]
              },
              {
                "id": "d0b44cef-5292-4d2b-b0ac-5baa92cb5fd6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d6c055eb-8a92-4db3-be4a-6470f30d7fb8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73b0646-1ccf-4be2-89e5-cf965d4a0e8a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f643163e-0fb9-4bb6-bc21-f0a882ddecfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7570adec-3289-48b7-9f92-12441f6da5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a43229f-9bc1-497e-9c5f-407377badb07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357695b6-fd20-4d5d-a055-90d343ff8286",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01885c3-3f42-40e5-99e1-5951cb539ee4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a12ebe18-3164-488e-99f5-16584eb6f5b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ecea75-b957-4110-a33d-a757e43a2f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed91ebca-5fd2-4ce8-8f49-6e52b6abaf12"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc8c51e2-8421-4f0b-a77e-6e27314c4d6b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bdc5ad70-d502-4003-be7d-ef239e7e49dc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "303e7c4f-7396-4a84-9011-2ecb65135f32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eec44701-df42-4cde-8681-59af98cca6d6"
                    }
                  }
                ]
              },
              {
                "id": "9bceb887-9297-41c5-88a4-b746d31dc9a5",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "aff500a3-5b74-49e9-9db8-b9516c355e16",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ec740d-3be6-4156-9c64-e318a5c0b4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d0b5c72d-2280-4c23-97bc-7484205f0a61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02b18a0-8a9d-4b32-9755-12dc24697c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11fa8adf-a6cb-49e8-88a9-0f4efbb1812f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fc7f19dd-208d-4e64-b706-c55b83919613",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8d0daa47-8cd1-42e7-9619-f78caf193e3b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25febfd9-117e-4807-855a-0e8ebd4069dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5c4ad25f-c638-46dc-8616-26bccb127e4f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77f4e252-699a-4e49-af1d-66685e81601e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed863dd3-d811-4a0f-a4a0-3d764748403e"
                    }
                  }
                ]
              },
              {
                "id": "32df4a63-51f9-49c7-b1e7-0a1bd8ddf212",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e05c86f-b278-483f-b037-d921a495d3e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8ce3d610-467c-4a3e-8900-3faff525eaea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9aa39bd3-9ec1-4b65-a6b3-60dd50f1cbde",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1a29b32-b86c-4a17-b865-33af202bc3b9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad23e355-9bfc-4dc0-8487-60a324a6f743",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d88f5137-7855-43f4-add5-e82f52ea9516"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8fc2f359-9183-411d-9cde-982c1e994a0f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a8c9c709-02a9-4ec8-bbe7-908c5b8d4b89"
            }
          }
        ]
      },
      {
        "id": "b3b84f31-7e2c-49a4-b773-ebefbc30d184",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "69604c4e-87b2-4d74-b00c-b5b96c548614",
            "name": "Negative Testing",
            "item": [
              {
                "id": "622cc5d2-eb01-479b-83cd-8dcde7339a9b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2ba8e5d8-af7a-45f0-be15-8f81f6f190d5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd7925e3-0904-4afc-bbaa-33a4e95d2b61",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "276768a8-9c09-4c3a-8b39-3a9e17bfab32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e1021a-407b-4515-821a-f38ce769769d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecf4c021-ca27-4b26-b761-3a6d7e67b5d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f8b68b-0e81-4ac4-a97e-bf259e9b06f8",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28296e20-8c53-4336-b758-c0adb7a7d9f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fc072ec6-7298-4eca-8478-c9a4101ff4a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb85f36f-f6a4-42f3-9831-9cd2fcccab08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd38f811-6610-4455-b060-9a138c45830b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56e8da21-651f-47a9-a58f-4281eca92b8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb0f12f8-ef66-44a4-9ed2-b0dd47664998"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9cfc2c4f-8b04-48b9-89f4-3236c149c557",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b11d700f-136c-43a9-bcf6-3e4e4e1567fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42aaf80f-445a-4e70-ae67-a822e004b04d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2f87efdd-6c4c-4086-9d39-d6c7668187d4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f09a9e79-e0ef-4f9c-a39e-494540909cc1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d0eb6895-00f6-49ce-adb4-22a7d740e00d"
            }
          }
        ]
      },
      {
        "id": "abc1bc83-9226-42fe-a9d5-87b3e0087519",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8c278768-56f0-4e55-a5e4-1b401808615c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d187d33e-0768-4cf4-a57d-1045b76e49e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d67f5927-5903-47cd-a17a-a49480a40f33",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f60243c-cd50-485e-a4bc-c8a0d23342b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73e9312a-e81f-45dc-ae43-9d4664a89485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3568e880-377f-449d-813a-c195c293062a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0bbd34fe-8b5f-466a-a671-5b6ea67b3144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1dd603-b77d-4868-b9ec-b33ec7d8780e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4dba5a0-665c-4e1d-b49f-c2fd65a91ac6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "aaa20dd6-c5ca-4ead-b301-1d13c52ee4f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62498faa-d78a-4ef7-9d09-83da638ca0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd50e80b-1c0f-4229-a400-392e977a15f6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a4d7131-db6c-4ca1-8be0-d7f0b15c5794",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b908067-6b97-472c-a79d-b42c612fadc5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "013883c4-9bde-44ce-a478-809105b34475",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba465c49-7127-4217-abe5-df3410e25aa5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "200d2486-fb33-4620-9030-0ffe1a8cda1e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5b4e857f-f3b3-47f7-a46f-c7ce95dbcd22"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "028a134e-372e-4aef-af45-64219c256189",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f1bcea9-ea39-472a-ae6a-391cd605ff15"
            }
          }
        ]
      },
      {
        "id": "22286659-f846-443a-81ef-532b222294d8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "bb6147a9-850f-4b53-b3f2-b15167637402",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f675c84f-ff78-49a6-a3d3-329a05bdf301",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "056ef593-0e36-444f-9e9e-7e267d90a6e4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "229895af-0466-4810-97b1-898392d9c13e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa19bc02-2ebb-4f1e-8e13-f3acf9019e66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a224e76a-d94b-4625-9039-06f2e3057be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "498c1837-0ab2-4ecb-b175-2c474173a968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c4edfd-7372-4b8d-9b00-ecb52129ecc6",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2719f46d-06ee-4182-b6e9-ad633189dd3f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "837d2ecc-2681-4c9c-ab7a-01ea1b48190f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4537c208-3db7-4409-9edb-4307ff1fa9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d6673a2-9280-4361-96f3-fd594914a3af"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d494ec7e-14a2-4830-b7da-d39887e8cfa5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c13af560-e1ce-45d0-ac12-0fdef2478bc2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b478910f-46f3-4e6a-9620-5ab7646f436f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba30bbf4-795f-452f-a3df-7ac09af89751"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "727051b5-8824-45bc-ab20-013e5c01caa8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cd7f51eb-a658-47c7-b5f7-1f0b95c2643f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4fdcb624-64eb-46b7-81b3-5693c1bc4a3a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d16616d9-6682-4a20-9970-ed45eb39948d"
            }
          }
        ]
      },
      {
        "id": "cc0cc9a6-64f7-469d-92fb-0024965be6f9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79299fac-562e-4dd8-becc-3e35c2d3ed16",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "00c3e168-7e23-475f-8073-dd04436b439f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3e24a227-428f-400f-a7e4-655d98171f44",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "460239f4-9c51-4386-bd48-aadb83388e8a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3586a87a-c54e-4fa1-95c0-aa63c32fc292",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 268,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 315
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 232.4201297045932,
      "responseMin": 21,
      "responseMax": 5602,
      "responseSd": 715.3889822470534,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1680136726283,
      "completed": 1680136797979
    },
    "executions": [
      {
        "id": "318cf73b-de52-4a44-b46e-94937a9d2742",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "819065ac-4233-4ca8-ab3e-67965f435ff7",
          "httpRequestId": "896864f7-f1ff-4445-bc58-af3b631793b8"
        },
        "item": {
          "id": "318cf73b-de52-4a44-b46e-94937a9d2742",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d5ca33d8-148d-4e3e-87d4-7ee949a30745",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 0
        }
      },
      {
        "id": "a661bf20-dd6a-4574-9793-b00ae22d1811",
        "cursor": {
          "ref": "b7e2c81c-9271-4575-837d-3ec7e35459aa",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "423074c1-e117-4688-aa7a-f6c18e6c911e"
        },
        "item": {
          "id": "a661bf20-dd6a-4574-9793-b00ae22d1811",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "48737fa9-3813-483d-9db1-6232e6499d50",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "69a62c01-b8df-46fc-8619-4f1e73bfab4c",
        "cursor": {
          "ref": "6530724c-519c-4a87-9230-f86fd14c119e",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0a16fed6-815d-4685-b02c-8a5b1f329deb"
        },
        "item": {
          "id": "69a62c01-b8df-46fc-8619-4f1e73bfab4c",
          "name": "did_json"
        },
        "response": {
          "id": "3c21a2e8-84a4-4df8-aa6f-a480fe360f19",
          "status": "OK",
          "code": 200,
          "responseTime": 337,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39dcebec-07d2-4616-9ce0-e5cd6c97b17f",
        "cursor": {
          "ref": "d4b01cbd-9346-476e-b5c0-c406f943c148",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b10a7c29-047d-4298-8f23-5cb6c3764215"
        },
        "item": {
          "id": "39dcebec-07d2-4616-9ce0-e5cd6c97b17f",
          "name": "did:invalid"
        },
        "response": {
          "id": "e84ecfb2-6f2c-4de7-b4f7-f681695fb097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39dcebec-07d2-4616-9ce0-e5cd6c97b17f",
        "cursor": {
          "ref": "d4b01cbd-9346-476e-b5c0-c406f943c148",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b10a7c29-047d-4298-8f23-5cb6c3764215"
        },
        "item": {
          "id": "39dcebec-07d2-4616-9ce0-e5cd6c97b17f",
          "name": "did:invalid"
        },
        "response": {
          "id": "e84ecfb2-6f2c-4de7-b4f7-f681695fb097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7baec25-2667-48a6-8fd9-bb26902479ae",
        "cursor": {
          "ref": "ce4e8584-e25d-41af-af03-c1bdfd11392a",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a77f5c52-3c4c-4372-a009-095e10d78eee"
        },
        "item": {
          "id": "f7baec25-2667-48a6-8fd9-bb26902479ae",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f1d2b044-89a5-43e5-8835-28557448cbda",
          "status": "Not Found",
          "code": 404,
          "responseTime": 329,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1faeaed-5be5-420e-a4c5-75ccd0a09943",
        "cursor": {
          "ref": "144bfadb-7109-4b42-9cb0-6c12e0ea4f08",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f8d2ff90-3cfe-48fb-ab98-c9281ff2dc8d"
        },
        "item": {
          "id": "a1faeaed-5be5-420e-a4c5-75ccd0a09943",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1b2b7de1-086a-4770-bf6e-c9dd6ac40ebe",
          "status": "Not Found",
          "code": 404,
          "responseTime": 78,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf3363f-1e90-4e98-b711-0c5b735fa9ff",
        "cursor": {
          "ref": "7e7878cd-7f05-426e-9498-05d1f568cb64",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c5cc8fcb-0764-4b1b-9334-ce4bfad37cae"
        },
        "item": {
          "id": "8cf3363f-1e90-4e98-b711-0c5b735fa9ff",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "07f11fc1-59ef-4d90-827c-840740e710b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c38ab2-e4af-4b41-a062-2a868cc43b1c",
        "cursor": {
          "ref": "e9dfac33-0d2f-4635-bf2d-02c61472847d",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "50531cb9-3980-457a-bfc4-a624c7fe74f1"
        },
        "item": {
          "id": "57c38ab2-e4af-4b41-a062-2a868cc43b1c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3eb10472-1bd4-4650-82ce-b29396efeb00",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "57c38ab2-e4af-4b41-a062-2a868cc43b1c",
        "cursor": {
          "ref": "e9dfac33-0d2f-4635-bf2d-02c61472847d",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "50531cb9-3980-457a-bfc4-a624c7fe74f1"
        },
        "item": {
          "id": "57c38ab2-e4af-4b41-a062-2a868cc43b1c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3eb10472-1bd4-4650-82ce-b29396efeb00",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f348b886-f3d2-4fd3-8f41-1b37b968ea45",
        "cursor": {
          "ref": "4d4e0457-09b2-4038-b1dc-16c2ec2a94b7",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "49efae30-e94e-4c2e-b855-33e1d8abb9c5"
        },
        "item": {
          "id": "f348b886-f3d2-4fd3-8f41-1b37b968ea45",
          "name": "identifiers"
        },
        "response": {
          "id": "c4b843d7-35ae-4c7c-804a-78b622adbeb4",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "121483ce-7a0c-4f5f-bd61-f10d78f3a496",
        "cursor": {
          "ref": "c1b9064a-4933-40c3-b988-3d33fd76ace9",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8eb19f65-530e-4460-a87a-caea94532dcb"
        },
        "item": {
          "id": "121483ce-7a0c-4f5f-bd61-f10d78f3a496",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "63f279a3-3993-4970-9e4d-f8a65d1a1ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "121483ce-7a0c-4f5f-bd61-f10d78f3a496",
        "cursor": {
          "ref": "c1b9064a-4933-40c3-b988-3d33fd76ace9",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8eb19f65-530e-4460-a87a-caea94532dcb"
        },
        "item": {
          "id": "121483ce-7a0c-4f5f-bd61-f10d78f3a496",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "63f279a3-3993-4970-9e4d-f8a65d1a1ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "70c3ebfa-855e-4814-a05d-d759e7843f20",
        "cursor": {
          "ref": "61ee517c-fe4e-4ec2-9b7e-164b486721c7",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "54d0ee4c-b9af-4c14-bba6-91f302477689"
        },
        "item": {
          "id": "70c3ebfa-855e-4814-a05d-d759e7843f20",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b1fb6d2b-492c-4c0a-aba2-95ccce4cd65a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "b6fe3b3f-cf02-4503-952d-b44e1e536a53",
        "cursor": {
          "ref": "ee0f4ae4-6a9d-4952-a5ae-65565f4afe2b",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2dd21c03-cb5d-4f1c-972e-8c1de23bb1e5"
        },
        "item": {
          "id": "b6fe3b3f-cf02-4503-952d-b44e1e536a53",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "158a89a8-3f7d-4966-97b5-41df2826499b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "9f40470f-897a-4e37-aac2-779aeb1151d0",
        "cursor": {
          "ref": "d7465bf5-d97c-4b6b-afcf-67e231b51c6c",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f6e48636-8911-4c0a-8740-9ad451c52dcd"
        },
        "item": {
          "id": "9f40470f-897a-4e37-aac2-779aeb1151d0",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6cdb5514-092b-47fe-ba5a-3e697c71264a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "23392dc8-89de-4345-8bea-62fafcf47e53",
        "cursor": {
          "ref": "1ab85a9a-b0fc-4867-97a8-fd244645f7db",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ef666307-4fab-4bce-97ec-a34190e48374"
        },
        "item": {
          "id": "23392dc8-89de-4345-8bea-62fafcf47e53",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "dc6d3929-c454-48da-8c2c-902370d34f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "f99e2cb2-0e42-42a3-b1a2-cdb944d3a1c3",
        "cursor": {
          "ref": "f97b74a3-7be8-47d2-8a74-e566f9e449f6",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "75f3da87-da75-4368-aadf-7eff13cf6cbd"
        },
        "item": {
          "id": "f99e2cb2-0e42-42a3-b1a2-cdb944d3a1c3",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1cb92ea1-3eae-4314-a49f-ddb9cc7ed574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "f8a18a00-1ff9-46b7-9020-a553e76f5bf6",
        "cursor": {
          "ref": "c7b48295-698b-412b-9c18-8b354fb609bd",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "80758000-1503-4bdf-bd2c-324dcfceb1de"
        },
        "item": {
          "id": "f8a18a00-1ff9-46b7-9020-a553e76f5bf6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "251ca8ea-e37d-438c-a55d-2b64415106f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "51e6726d-aabc-4bb6-a125-71eca5b5d4b2",
        "cursor": {
          "ref": "308f16e0-134f-4563-bf92-1c5122e55b26",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ba8e0c57-ff25-4ab5-b317-dec84686760b"
        },
        "item": {
          "id": "51e6726d-aabc-4bb6-a125-71eca5b5d4b2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "49a50da4-71a9-42d0-89ad-2a81d43cc082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "d07594e6-44c5-48c2-809f-c2a85ba20962",
        "cursor": {
          "ref": "0fbbcb37-768d-4a64-ac83-454d102672a8",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "775443ad-1425-440e-9a8d-c11e61f82412"
        },
        "item": {
          "id": "d07594e6-44c5-48c2-809f-c2a85ba20962",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a7ae27b8-297f-4dc5-84d5-708b4361d36e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "23195b96-7d4e-4b1c-a587-72469b9fd9d1",
        "cursor": {
          "ref": "d4b2d34c-2848-4437-9552-b9158fe97629",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "443e1080-424c-44de-96ad-50dc57d3dedf"
        },
        "item": {
          "id": "23195b96-7d4e-4b1c-a587-72469b9fd9d1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6c57f600-a698-4511-ba15-58d8cc2bb4b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "5d1c9a26-95e6-460f-8dbc-be26aab87084",
        "cursor": {
          "ref": "eccb3afc-2524-45a6-8427-1f7b13f836fe",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4183cd7a-8794-47dc-9bba-8dfe7e03da30"
        },
        "item": {
          "id": "5d1c9a26-95e6-460f-8dbc-be26aab87084",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8c2114c1-54d6-44dd-9d7b-a38ddda0bfc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "0ea74b3f-6ff1-4c9b-9c94-bd02bf2e818e",
        "cursor": {
          "ref": "7a0a81f2-3640-477c-bfd3-01ae6f982f5a",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4e679089-d37e-4976-b0e6-bf7f9b400b34"
        },
        "item": {
          "id": "0ea74b3f-6ff1-4c9b-9c94-bd02bf2e818e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d82138ad-7aaa-4408-bac8-d90af0d32196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "73d4d6f4-2e56-4f2d-b9d0-cc149616f70e",
        "cursor": {
          "ref": "571d18a0-4c41-4d8e-9c4a-3907abe23489",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e6d4b29c-cb06-4e89-8a43-9267e5209f1f"
        },
        "item": {
          "id": "73d4d6f4-2e56-4f2d-b9d0-cc149616f70e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "266b0f92-e5de-47cf-9fe4-64c659bb98a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "555a5688-19d4-4392-9415-60e091ded264",
        "cursor": {
          "ref": "90801d59-624c-48dd-9480-ebe35ceda7fd",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "576b18fa-6128-44eb-8ce1-9900da0f90ed"
        },
        "item": {
          "id": "555a5688-19d4-4392-9415-60e091ded264",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0ad090b4-fdc9-44ef-916f-3714630d8afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "1bd148d3-a36e-40e1-b4af-0e7c268e556c",
        "cursor": {
          "ref": "133fbc39-563b-49f6-9dc2-832a1e67b046",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "072d8f39-18ad-4916-a13b-74f5afabb669"
        },
        "item": {
          "id": "1bd148d3-a36e-40e1-b4af-0e7c268e556c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8be7989c-31c2-4a66-b969-04f616001f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "2176814d-7019-401a-a51c-572de4df0196",
        "cursor": {
          "ref": "2b844c52-92da-41cf-9ff7-62ae4d8db4ec",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "afc9acca-2f30-448e-87fc-2a17dd3c8423"
        },
        "item": {
          "id": "2176814d-7019-401a-a51c-572de4df0196",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6e553c1d-f729-4f7c-b8b0-b4e25d2c0a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "15a63186-a31d-4826-808d-242f90b7ad56",
        "cursor": {
          "ref": "350b0d48-8734-4752-9531-be6e9babce26",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "19664a7e-7874-46ea-9299-1367dd24c268"
        },
        "item": {
          "id": "15a63186-a31d-4826-808d-242f90b7ad56",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "77a506e2-8890-4ac1-b873-4bca803b9273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "7a510892-deac-4611-bed8-91109c5e9709",
        "cursor": {
          "ref": "3b2a9c98-d13d-4bc8-82b5-cd889493dc73",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9dbda3ca-c300-4654-8e2f-3f959785198e"
        },
        "item": {
          "id": "7a510892-deac-4611-bed8-91109c5e9709",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a94ff9e8-372d-4d3a-8cd4-18472d889485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "82b47fef-e18c-431c-a817-e31b1e797d12",
        "cursor": {
          "ref": "56ee6df6-7593-4c0b-b584-abf319b7e7ab",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "21fac530-93b5-4f27-a944-67ef3c17b133"
        },
        "item": {
          "id": "82b47fef-e18c-431c-a817-e31b1e797d12",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e8755e64-da88-47f4-8648-72f4b29e6800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "d715c174-1135-48fc-a5a4-7f1fe2d9d6e9",
        "cursor": {
          "ref": "1e7c3266-e0df-4b49-8908-4b9405fb36b0",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "cb98aeba-7ddd-4149-9962-c68d991cd540"
        },
        "item": {
          "id": "d715c174-1135-48fc-a5a4-7f1fe2d9d6e9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "06db7b20-4043-4ab7-9fa8-3160b13b3b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "cb9a6333-210d-49a6-9413-80da34e3ddbd",
        "cursor": {
          "ref": "b78e3a48-d326-4ecf-baa8-c0195c15db02",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c821eb54-8386-415b-a477-14540a804647"
        },
        "item": {
          "id": "cb9a6333-210d-49a6-9413-80da34e3ddbd",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "93539d0d-59fd-4662-a6c8-ca41ee16192f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "899860f5-015e-4308-87fd-cf3c0ad44507",
        "cursor": {
          "ref": "d23de487-f51c-4445-afb5-bacc0f6f2942",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "20be9328-bfcb-42c7-b67a-fec38bf57ea0"
        },
        "item": {
          "id": "899860f5-015e-4308-87fd-cf3c0ad44507",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8b7453a6-b3d3-4dc6-b042-b71c1be7854c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "575cc0fc-dcd8-4598-bd8d-331713fdb29b",
        "cursor": {
          "ref": "d4fa5a45-2c65-4031-bff3-b253e2f449b0",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3fb4295e-9d90-47f9-ab54-56653d40f4c5"
        },
        "item": {
          "id": "575cc0fc-dcd8-4598-bd8d-331713fdb29b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4b409f1a-7c7e-42c1-b4bd-c1163a967de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "f94d2a53-deb1-49b2-a928-280787dc740b",
        "cursor": {
          "ref": "d5be5b00-757c-431b-bd30-b453cbf1df38",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4cbf28be-69db-47a2-b5c3-d56c7023d189"
        },
        "item": {
          "id": "f94d2a53-deb1-49b2-a928-280787dc740b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bc9f0c25-ef38-43c2-a884-20da38a3526c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "a19badeb-a388-4f1b-b1b9-9a8f3de615e3",
        "cursor": {
          "ref": "70fe71f1-9c09-4e06-b30a-44abbacd6c03",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "02752a3c-7c24-4d96-9edd-871022363310"
        },
        "item": {
          "id": "a19badeb-a388-4f1b-b1b9-9a8f3de615e3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "89320b67-dcf9-43d8-aa1a-1109fc64bc11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "89e0b331-86d6-4068-a32e-1e46672cf96d",
        "cursor": {
          "ref": "9cfca4b5-dace-44d6-afe6-43eca42ae3d7",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1690c8ef-5826-45cd-9785-ce2226bb4dfe"
        },
        "item": {
          "id": "89e0b331-86d6-4068-a32e-1e46672cf96d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a75b204d-0226-4500-ad79-f98f5d2122fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "3b5e7d99-d48b-4a83-b43f-19fbc19d9cf1",
        "cursor": {
          "ref": "a14806ac-f54a-4d9f-974b-3f0ad560ccd9",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "df32a82f-2a2d-4107-b50f-b6ab70c42486"
        },
        "item": {
          "id": "3b5e7d99-d48b-4a83-b43f-19fbc19d9cf1",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f860b27f-4b88-4234-90c1-142d0f45a9c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "aefdd073-8e4b-4cdb-b794-49deb6670b4d",
        "cursor": {
          "ref": "0f86123f-5f84-4847-812e-e32a9d9d751b",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c38c83be-dc09-4b5c-9edf-0620b946e89a"
        },
        "item": {
          "id": "aefdd073-8e4b-4cdb-b794-49deb6670b4d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "dc23b79e-3500-4f49-94ce-a617d8bdf048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "6825c536-1787-4d09-81be-2b37182e248c",
        "cursor": {
          "ref": "954e11c2-88ca-4c65-a393-d978498b30ca",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f46d0cb9-99ea-40da-8f8d-526a26cea288"
        },
        "item": {
          "id": "6825c536-1787-4d09-81be-2b37182e248c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "05bcd315-367b-45f3-83ae-e9ad046f298a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "75da7d79-2f84-41f3-bf04-019d56dc4aa4",
        "cursor": {
          "ref": "4eaa89ea-9dcf-4829-b1f9-5335318fd899",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4cbaad5e-a4d4-4755-b0d1-308dbb436855"
        },
        "item": {
          "id": "75da7d79-2f84-41f3-bf04-019d56dc4aa4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5328dad8-21a1-456f-bc3f-af0a7db0a60c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b26b68f7-b28c-48c9-af68-f09292d63646",
        "cursor": {
          "ref": "67e30438-d42c-4360-b6da-e55b20ff721e",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e9bb6638-8055-487c-89d6-9ac586da1c60"
        },
        "item": {
          "id": "b26b68f7-b28c-48c9-af68-f09292d63646",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ffe53228-1435-4c1c-a717-0778a81870b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "cbb72a46-fdc0-49e4-af4d-2e7c9eaab140",
        "cursor": {
          "ref": "6de955db-6b96-4840-8271-9a28a7ca6a35",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c2ca5012-9151-40b8-a6ae-57034bf3d637"
        },
        "item": {
          "id": "cbb72a46-fdc0-49e4-af4d-2e7c9eaab140",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "73a7e515-f3a2-4124-8466-83b8446dfbe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "4fb2ed13-23b3-4cde-93c2-5b507c18efe7",
        "cursor": {
          "ref": "c1409d3c-f006-44ff-9b41-be0dc19993a6",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2ea5fcd3-9263-4178-8c3b-932be37e3b5f"
        },
        "item": {
          "id": "4fb2ed13-23b3-4cde-93c2-5b507c18efe7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9411bee2-b063-408b-a214-b194a64fab45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "b6ef2393-8429-40fc-94cf-872a46f7ad37",
        "cursor": {
          "ref": "74c88f2a-364a-4e58-b3b8-571f17ff463e",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "56882b3d-7805-4b34-a08a-4a982b7cb908"
        },
        "item": {
          "id": "b6ef2393-8429-40fc-94cf-872a46f7ad37",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8c331541-d932-441d-8cc5-12f606c95db7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "b5af6679-548b-4ec2-97d3-587d366b7973",
        "cursor": {
          "ref": "e006e264-9572-48f2-8bdb-4ce6cf260546",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "97d6b112-366d-4ff0-bc36-8a3f054752a2"
        },
        "item": {
          "id": "b5af6679-548b-4ec2-97d3-587d366b7973",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e2d7149b-a8f8-4505-bc30-9acd1c572308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ec93eae0-efcb-47b0-b3b6-3139b6441143",
        "cursor": {
          "ref": "0359f3f5-499f-4dd1-9a0e-d1c033d61b3a",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "06e33c42-9168-4a3c-a832-14117f56f546"
        },
        "item": {
          "id": "ec93eae0-efcb-47b0-b3b6-3139b6441143",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a9a0e17e-77a0-4095-9a9f-b4776a7115f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "77681bdd-3501-4918-8c8f-51d72458ec0c",
        "cursor": {
          "ref": "764618fe-83d2-4e69-baf7-75a794a139ef",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "493946aa-9f67-4801-bec0-49ad2ce556d2"
        },
        "item": {
          "id": "77681bdd-3501-4918-8c8f-51d72458ec0c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bc983866-7504-4590-949a-e5a8a9a853d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "accc039f-3f7e-4593-a464-01351526d8a5",
        "cursor": {
          "ref": "66376ec0-5587-4475-b50a-c80484531705",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ccad3d88-2256-4b6e-896e-3ec2dd3c1e32"
        },
        "item": {
          "id": "accc039f-3f7e-4593-a464-01351526d8a5",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5d7dbe5b-5baf-421b-a289-4430a628da73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "e6b480b1-244e-4407-a898-e6059176a632",
        "cursor": {
          "ref": "d87168e0-e675-4e17-9553-dd504a62af77",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9bd1bd3e-07e8-4aa8-91b8-d95f08c690a0"
        },
        "item": {
          "id": "e6b480b1-244e-4407-a898-e6059176a632",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "04a788e2-b156-4b34-84fb-577249cfca2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "9a7887d2-ca73-4336-992b-6c6ed616e99b",
        "cursor": {
          "ref": "3815acd9-e15b-46a6-beff-02019851db69",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "583af9c4-0893-40a9-a447-5e838ada3034"
        },
        "item": {
          "id": "9a7887d2-ca73-4336-992b-6c6ed616e99b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c2c8b6fe-f09a-42fc-9142-8707e5fcb9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "0802fa4e-33a7-40f0-a882-aaed65e60f5d",
        "cursor": {
          "ref": "9ed50428-7bb6-43a1-acd8-a47c43eb25d3",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "42874f9d-33bd-48dd-8ee1-90df9cde9344"
        },
        "item": {
          "id": "0802fa4e-33a7-40f0-a882-aaed65e60f5d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "99c3dd51-b54c-479a-bbe9-869a91386fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e42c18a1-cb25-491a-a4ac-2972462cb410",
        "cursor": {
          "ref": "5d074bea-bfb5-42c0-81ca-f98b047702a4",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2d8b62dc-b9b0-4f98-87e7-dd296077d9ec"
        },
        "item": {
          "id": "e42c18a1-cb25-491a-a4ac-2972462cb410",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7ed52f1f-7254-4f05-a3be-2ae7cefa3de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "74ae56b0-ab87-48f3-84ec-78c5dbec3f71",
        "cursor": {
          "ref": "f95e3bc0-98e8-4cb9-bdb3-222be049114a",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3055257d-7404-4a0d-b05b-7510ca6f1a23"
        },
        "item": {
          "id": "74ae56b0-ab87-48f3-84ec-78c5dbec3f71",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "8aa863a2-7ce4-416f-bf35-11bb9208b72d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "755aa929-e33b-4053-93ea-be0db638b33c",
        "cursor": {
          "ref": "2a2a4df5-f063-4f04-bb3d-d1400d4e5c77",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "64b42774-b16b-4e43-b9ed-bbc76af34c58"
        },
        "item": {
          "id": "755aa929-e33b-4053-93ea-be0db638b33c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7fb59627-62c1-4aad-8028-222ff9784709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "f1617c38-25f7-41cf-b782-194eab03559b",
        "cursor": {
          "ref": "856fed8c-ce76-47b2-94d7-9c4bf5bf4300",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8c2eb7aa-f9a6-48dc-ad8c-62ba1dde2491"
        },
        "item": {
          "id": "f1617c38-25f7-41cf-b782-194eab03559b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f4bc5eaa-dfeb-4892-9106-41324125f914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "4cc20772-6644-47a1-9024-5d920734e36d",
        "cursor": {
          "ref": "0b93bd67-ffef-4e65-8843-0c2b194e80c5",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8c785313-1724-4150-92a8-da1051b1a5b3"
        },
        "item": {
          "id": "4cc20772-6644-47a1-9024-5d920734e36d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c06ffe20-2c47-4041-96da-dfb0335cae9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "5e47233e-d110-43dc-827a-c79d9fe4fa3f",
        "cursor": {
          "ref": "849f4962-38e3-493f-9314-8df9b82b9c79",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "97568a66-49fc-492b-9329-fccad0cceab6"
        },
        "item": {
          "id": "5e47233e-d110-43dc-827a-c79d9fe4fa3f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "27407128-8ea9-4dd2-9677-10180e150335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "36e08edc-763c-4a69-ba6e-1860d36c73a6",
        "cursor": {
          "ref": "6eb3da9c-90bc-4e21-a8c8-90eeb7ae712e",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4ad7e211-afe6-4d7a-b605-e95927d0cfc8"
        },
        "item": {
          "id": "36e08edc-763c-4a69-ba6e-1860d36c73a6",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "858c090a-d483-43d7-bdf3-0142986cd816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "b4e47621-855b-4eb5-a172-9b952dc90326",
        "cursor": {
          "ref": "1bdc5937-8e3e-44b2-a98b-2582ce314fa9",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "54c7b385-f668-4838-9e0d-26bd64d6f90d"
        },
        "item": {
          "id": "b4e47621-855b-4eb5-a172-9b952dc90326",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "17a7ba07-f578-4c4f-ba22-331c7e474f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "b41f4821-e094-4ab6-babb-877e6271dfda",
        "cursor": {
          "ref": "45830697-53c2-44b4-8d30-a829986a3d11",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0809812f-a572-411d-b9d9-c2c3238f1b5a"
        },
        "item": {
          "id": "b41f4821-e094-4ab6-babb-877e6271dfda",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0becdbe2-1606-4b06-9558-69faf0ab0818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "c1dff848-00c0-4baa-825d-66f10ae2ebd1",
        "cursor": {
          "ref": "d895b7de-aded-4a70-8a99-4982b7e51657",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7b36de20-3bcd-4472-9511-9260a4e2e931"
        },
        "item": {
          "id": "c1dff848-00c0-4baa-825d-66f10ae2ebd1",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2b231de2-c53e-4455-9372-6d2821ddbb34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "f6822fc6-7e50-429b-8391-106c91e9c7ac",
        "cursor": {
          "ref": "02296e2c-3fa0-4d1c-8e66-9f3a2056c3d5",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "833ea150-76d8-4409-9557-ae1c0bf18180"
        },
        "item": {
          "id": "f6822fc6-7e50-429b-8391-106c91e9c7ac",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "52a5564b-99f2-47d4-b3bc-a19cd3195a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "57fb0c6c-df26-4384-85cd-11df875e2289",
        "cursor": {
          "ref": "0bf9146b-3ad1-47f2-8104-dfecad4c1e33",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "005efcca-689f-4297-8b50-cfd28bb06c6f"
        },
        "item": {
          "id": "57fb0c6c-df26-4384-85cd-11df875e2289",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "82837081-fa5a-40ae-8868-7953439f3884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "5f27cef6-b5e9-4d80-ab8d-c9ce8030914e",
        "cursor": {
          "ref": "e8b4b29d-a29e-4a05-bb29-d8bff145a560",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7a43948c-ce66-43f5-ad2e-bdcff4e7adf2"
        },
        "item": {
          "id": "5f27cef6-b5e9-4d80-ab8d-c9ce8030914e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a1305ed1-5d00-4126-8ee7-565dc8ce6db7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "d041dfb4-6db4-4cc6-8fdb-899cce39277d",
        "cursor": {
          "ref": "b95472df-462b-405f-b9ff-5709c7de14a3",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "eb5005ce-2e94-4040-8119-66365bb6ab89"
        },
        "item": {
          "id": "d041dfb4-6db4-4cc6-8fdb-899cce39277d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8c1f0ff6-2d6b-4c64-b8ae-858eb315eb4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "259f5ac6-5e4c-4433-85ae-754c5f17b720",
        "cursor": {
          "ref": "884168f7-201e-4d8f-8c98-d65b5f62c0aa",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7b7fa1c3-73e3-4d0b-a369-bf510359e380"
        },
        "item": {
          "id": "259f5ac6-5e4c-4433-85ae-754c5f17b720",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "39047a97-1ef6-4333-aa27-e95a8a8a63ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "2747f9e1-b750-4cbd-9429-ca0f13b33fb7",
        "cursor": {
          "ref": "0ee30c0b-f067-4d29-9426-800adcdb3c55",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5c2817e6-1fa0-4f5a-a427-152f42f744f8"
        },
        "item": {
          "id": "2747f9e1-b750-4cbd-9429-ca0f13b33fb7",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "3a6e32bc-0935-4983-818d-af31138a3d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "6e710148-9f26-4bfa-b93c-9605c4db20ca",
        "cursor": {
          "ref": "c83da003-55e8-4d17-a3fb-c0a7433b069f",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6dd3ee9a-e2c0-4a89-a507-f82294d6f49c"
        },
        "item": {
          "id": "6e710148-9f26-4bfa-b93c-9605c4db20ca",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4e0722d1-5a8f-469a-a39d-f1b0ba45fe54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "81bd6c47-632a-494f-b6b2-a7d4b19af7d7",
        "cursor": {
          "ref": "052d502f-50dc-4049-baff-420f74f971d1",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ac7945df-de8e-4930-b552-79343e6669c3"
        },
        "item": {
          "id": "81bd6c47-632a-494f-b6b2-a7d4b19af7d7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "253723a9-c270-43f1-ac7c-328f7552f234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "7dc8cca4-25f7-4590-814b-72976e2195af",
        "cursor": {
          "ref": "dfc0c032-aafd-4b5b-80ad-9164e21ff293",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c827e6c2-e722-45ea-889f-d0aae30ef7ba"
        },
        "item": {
          "id": "7dc8cca4-25f7-4590-814b-72976e2195af",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7f7bc4ad-2cae-4efb-b6d6-029ac02400a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "71d0fcde-cb54-4505-b92d-6958085d4704",
        "cursor": {
          "ref": "59ab680d-b5a1-4e86-8983-6d96ff0642c0",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f84e5b86-f26d-436f-8b14-39022013a030"
        },
        "item": {
          "id": "71d0fcde-cb54-4505-b92d-6958085d4704",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0c148971-682f-42c1-835d-57965466ab16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "d292c9ad-0f84-41ed-86f6-ef7239c625c4",
        "cursor": {
          "ref": "9f595c48-4e31-4e12-b9ea-fea9e66a81c7",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "fed09ebe-6860-473c-8465-7ea6f46ab1e2"
        },
        "item": {
          "id": "d292c9ad-0f84-41ed-86f6-ef7239c625c4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "837e1d53-ca3d-44fa-a0f8-3b4db2c31cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "2e53b392-62af-49b1-bd69-a74b86e31b0c",
        "cursor": {
          "ref": "addd117b-d55e-4613-b173-3b64267bb337",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "462b441a-2c68-4a10-8d4c-41cb9cc4b239"
        },
        "item": {
          "id": "2e53b392-62af-49b1-bd69-a74b86e31b0c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b83adea0-ebb8-49a2-892c-c56a813c78da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "74d4d349-2eed-42a4-9271-3cd27270b6ec",
        "cursor": {
          "ref": "7ac4332d-db7a-4e20-bf64-154533417164",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7b1d7c07-c4ff-4e04-b572-eb1b04679f07"
        },
        "item": {
          "id": "74d4d349-2eed-42a4-9271-3cd27270b6ec",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "92e16d88-7cb5-4c2a-9304-b6bef02a4f13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "d7df6a63-5757-4ed8-b2d8-c5f22221fce9",
        "cursor": {
          "ref": "a39ca469-f13f-4950-a6f7-f6f089fa4aa0",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9f7ac7b6-8524-4f89-b1e3-f33ec086801a"
        },
        "item": {
          "id": "d7df6a63-5757-4ed8-b2d8-c5f22221fce9",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c035eb11-88a3-4689-aceb-c5269b11f140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "5fd44234-4729-4add-bcfb-5d0d75f9595d",
        "cursor": {
          "ref": "ac961492-d39d-48a4-8559-c289da6ec941",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7455385d-463b-4fc2-89bb-dec5f684aa94"
        },
        "item": {
          "id": "5fd44234-4729-4add-bcfb-5d0d75f9595d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "396f9945-7c81-403e-ba57-21af19810848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "19cabab8-d66b-412c-b367-aba39919f987",
        "cursor": {
          "ref": "114aa5d3-a0f2-47c0-89d4-507c811ff977",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "fd87736f-ac84-47f6-8145-ac33c233322d"
        },
        "item": {
          "id": "19cabab8-d66b-412c-b367-aba39919f987",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d2f74b27-2b0c-424c-bcf0-937d1d527235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "5356dfd5-d09e-4416-9d60-f183272cf907",
        "cursor": {
          "ref": "1e39ce99-1ed0-478f-a031-af3741a0788e",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7e4fc260-51f4-4840-91a6-01c78213a8a4"
        },
        "item": {
          "id": "5356dfd5-d09e-4416-9d60-f183272cf907",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5ba90e98-d5f4-4f40-bfc7-f5a4c6617d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "0b98ab70-dd2d-4352-99cb-e05aa3b5e29f",
        "cursor": {
          "ref": "207791cf-21e4-4795-a586-d074906baca1",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "992bd982-23d8-4773-a9a4-d7ecf7d15f15"
        },
        "item": {
          "id": "0b98ab70-dd2d-4352-99cb-e05aa3b5e29f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "cfad77e0-30ae-402f-8ac8-d5d9909ce496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "27d636fb-089c-43c7-9c77-33c3b924cd9e",
        "cursor": {
          "ref": "4257f22e-4bf0-4bbf-924d-cad1b5da51ee",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "1731b8af-794b-4ff0-923a-20f06363634e"
        },
        "item": {
          "id": "27d636fb-089c-43c7-9c77-33c3b924cd9e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0486512f-0235-45fd-b923-d3366f2f8301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "a3bdbc8c-30c0-47c2-aa1e-be8a4064b662",
        "cursor": {
          "ref": "9467622e-4f39-4192-8e35-a9290d266347",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d689c3f6-20dd-4b16-8430-adc969c1e890"
        },
        "item": {
          "id": "a3bdbc8c-30c0-47c2-aa1e-be8a4064b662",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "fb4bf4aa-5a53-4179-b57f-1f9e40707206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "1a760ad9-e509-435e-bf01-1418e3d20220",
        "cursor": {
          "ref": "fb5317eb-b8fc-48d5-a6f3-8a882cdc191a",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ac2ce093-295d-47b7-a524-99cdad1a28ea"
        },
        "item": {
          "id": "1a760ad9-e509-435e-bf01-1418e3d20220",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1f898360-2763-4224-b6ec-dc04d42694f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "3c349f8f-4be7-41b4-a006-a4d073fcd510",
        "cursor": {
          "ref": "876652c8-b0d4-4d9e-b6b8-2748dafcc532",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5f245d0e-a727-4cb7-af9a-951c1ac689a5"
        },
        "item": {
          "id": "3c349f8f-4be7-41b4-a006-a4d073fcd510",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "bf145686-3e2b-40ce-aae2-2f09b9a00a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "5e630dfc-5b77-4d65-93b6-0457edcd9501",
        "cursor": {
          "ref": "0c058c15-7b12-4559-8efb-e6841de5eb9d",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "3b552c19-4b1b-4d78-abfa-4b594ceb85db"
        },
        "item": {
          "id": "5e630dfc-5b77-4d65-93b6-0457edcd9501",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "81b55351-bec2-4585-aba5-4c2a0473bfa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "7a6030ad-960f-45df-996d-2391676ffb02",
        "cursor": {
          "ref": "c4a4cee8-ae6f-4cab-8ad7-acf6cf2b48a8",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ee2e42f1-69d5-4ca0-bfc3-e6bbc2712f0f"
        },
        "item": {
          "id": "7a6030ad-960f-45df-996d-2391676ffb02",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "593d1b02-d9e2-4cb4-a7ce-cece52dd818a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "79f412ca-3b1a-4cb6-916c-7375be2a68d4",
        "cursor": {
          "ref": "66cda37c-3bd4-4f88-a0bb-5c9237eb3c27",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b0872c91-893b-44c5-a287-fcef9e4135af"
        },
        "item": {
          "id": "79f412ca-3b1a-4cb6-916c-7375be2a68d4",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b73c0314-ef1f-439f-a40a-9e23b7689da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "192a762a-012b-4ef4-9e29-707b2d727a43",
        "cursor": {
          "ref": "06e1ca24-10c1-498e-b880-8ee7b269a61e",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a9a04f47-0ef4-49e1-b6f2-17abdf329821"
        },
        "item": {
          "id": "192a762a-012b-4ef4-9e29-707b2d727a43",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "84f3548d-f0dc-47b3-ac62-39f1f59aa1b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "79163d9b-8226-4c5e-b5e5-e6c9ce88c23e",
        "cursor": {
          "ref": "bd7b89a4-e3bd-44b5-92e1-c894a7845189",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6e966578-377b-4cea-959b-7fd311304fab"
        },
        "item": {
          "id": "79163d9b-8226-4c5e-b5e5-e6c9ce88c23e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "628bfabe-eb14-4257-a8a9-adb71a371d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 359,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "0daf746e-c855-4348-b337-0b4dad32ed7d",
        "cursor": {
          "ref": "a8cff23d-0eb6-4c48-bf4b-ba29f51de510",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e5a74841-f239-46f6-8d29-4e720a9afcb0"
        },
        "item": {
          "id": "0daf746e-c855-4348-b337-0b4dad32ed7d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2a91d2ff-c2c6-4027-aee6-3a6a3d7c332e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 367,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "98cdb846-ca37-45a4-97bc-d272eeb335fa",
        "cursor": {
          "ref": "2d951568-a39e-421c-b184-6a20af9d99f1",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "cd23c975-0f8b-4d4a-b197-4b38a1ecd17a"
        },
        "item": {
          "id": "98cdb846-ca37-45a4-97bc-d272eeb335fa",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c27e1de8-21c4-4ca1-8ed1-025e577e1b67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 345,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "fb6b8e79-cdd0-42d8-8116-100ae67aa1a6",
        "cursor": {
          "ref": "a6dd2be3-5ec6-4397-8616-6aad38a21d5d",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d5649ea7-af9f-4b4d-bc17-04b31a21c976"
        },
        "item": {
          "id": "fb6b8e79-cdd0-42d8-8116-100ae67aa1a6",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "de5ea3b9-f1e3-4e17-acae-b7db9958d2d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 652,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "0e498991-85de-4c12-9b10-14789a7388f0",
        "cursor": {
          "ref": "5fd935a5-ebf1-42a7-8fea-62e67b36a90e",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "27f51643-ccff-41c4-b973-077d0be7c66e"
        },
        "item": {
          "id": "0e498991-85de-4c12-9b10-14789a7388f0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "551b8629-741f-4c01-8843-2077272d86fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "1f9e329f-0c5d-43c3-96f2-62dcd691af2a",
        "cursor": {
          "ref": "0de58e0f-6ef0-403e-93fd-b404762b6c9c",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f02fd7ef-760d-4a07-ac32-534fe9b129b8"
        },
        "item": {
          "id": "1f9e329f-0c5d-43c3-96f2-62dcd691af2a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "fc5eeb0c-2a18-4a92-b519-63a6c4737a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "fa2843e3-41c0-4fe8-8419-65e8d5609aff",
        "cursor": {
          "ref": "c7e12831-97c6-4c2a-8e67-3208d43b235c",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1a217f39-4894-4b3d-bf7e-2749f5c5973c"
        },
        "item": {
          "id": "fa2843e3-41c0-4fe8-8419-65e8d5609aff",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a506a11c-25d5-4aa9-b414-787b81733dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "17792ec5-669f-4324-8561-2c46d3b3e1a9",
        "cursor": {
          "ref": "f3f74b47-d8d5-4e83-8d26-b45b31ee9122",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c27dc7c3-3676-45eb-9c8b-400990d41a79"
        },
        "item": {
          "id": "17792ec5-669f-4324-8561-2c46d3b3e1a9",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "38509a5f-e67f-4de7-a331-a9155f2b6400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "17d41ab7-315a-4f77-81f6-5b8dcce75074",
        "cursor": {
          "ref": "01bf22d3-b27e-45e7-92fb-6f63b4468a9e",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1c907507-618c-40a8-bb25-8d0de16f040e"
        },
        "item": {
          "id": "17d41ab7-315a-4f77-81f6-5b8dcce75074",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2ab213cc-bbab-4767-acd2-a56c7554e894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "e26c651d-a549-468a-a9ff-da7b1d43e3f7",
        "cursor": {
          "ref": "73a2d47f-5f88-4e6d-87d0-829afd058cea",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c28644ae-eeaf-4261-8a14-6f7901aed364"
        },
        "item": {
          "id": "e26c651d-a549-468a-a9ff-da7b1d43e3f7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5743ad9f-4914-454a-9a45-5688e0ebed36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "b88aa7b8-f91d-4c5e-ace7-1c41c64cb00e",
        "cursor": {
          "ref": "a6663711-8ae6-4eda-aa47-d88fa99677ea",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "69419a4b-c830-4a1d-b9ee-208a4cbbecbe"
        },
        "item": {
          "id": "b88aa7b8-f91d-4c5e-ace7-1c41c64cb00e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "45d35775-daf2-4be4-b7f8-464511c58969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "c8082e0a-27e9-4eb9-bbaf-b6847141f234",
        "cursor": {
          "ref": "64ba6abb-286d-4a0e-97af-01fb53107f76",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c20afea1-c57a-4ed4-a4f8-c8e57fd0242c"
        },
        "item": {
          "id": "c8082e0a-27e9-4eb9-bbaf-b6847141f234",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "8dbd53ae-32d1-46f3-82e2-0b0dd959db29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "7320c56f-67f8-47f1-88a6-65448d180155",
        "cursor": {
          "ref": "77fc6392-48be-456b-b569-900f65d39562",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "13125fe9-cb5a-4ca6-8f4b-5a101882d7fb"
        },
        "item": {
          "id": "7320c56f-67f8-47f1-88a6-65448d180155",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "372a0fa5-8733-452c-aceb-9f400e2b27a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "e87da175-8787-4d57-b9a3-a82d4de80627",
        "cursor": {
          "ref": "22f2fe20-7c76-4477-9c78-e452389e8c1b",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d764b552-8cd4-4f0d-858d-a4da090057fd"
        },
        "item": {
          "id": "e87da175-8787-4d57-b9a3-a82d4de80627",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d2ffb2b1-26d5-4640-95b1-c8412119f441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "a0abce1c-a2b4-45f6-beef-a673dbd3180e",
        "cursor": {
          "ref": "38068c2f-5577-4d1d-b041-b1f0a14b8152",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "833740ca-2ae7-415c-b431-0256b785f4dc"
        },
        "item": {
          "id": "a0abce1c-a2b4-45f6-beef-a673dbd3180e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "87304f00-3373-4cd0-aaf3-3581381e6a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "d85674ec-c5b0-4489-b498-2e525d867347",
        "cursor": {
          "ref": "cabd716d-54ce-43bc-91b5-d1f92029cdb6",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0f42588e-b862-4978-b8f2-ab9ffdd3eb31"
        },
        "item": {
          "id": "d85674ec-c5b0-4489-b498-2e525d867347",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ad616b43-8930-4858-a184-320efe78ca16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc100715-4caf-4428-a5ea-df9eccc2de3e",
        "cursor": {
          "ref": "c80bbd7d-2d19-4f16-9568-ae654ab3609e",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7133fcb8-e781-48cd-a4ef-4f1a2598fda0"
        },
        "item": {
          "id": "fc100715-4caf-4428-a5ea-df9eccc2de3e",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "1b5a2d31-66be-4494-9ecf-538b88a8da59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "0754a0b9-deac-4255-aace-00fdaf62036b",
        "cursor": {
          "ref": "787ce7c0-2e08-476a-9b9e-bc2c61f2bf33",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "67c5d250-13e3-4b80-9019-b678537100f7"
        },
        "item": {
          "id": "0754a0b9-deac-4255-aace-00fdaf62036b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "dd7a6f9e-3871-4409-b259-1895f26952a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:104)"
            }
          }
        ]
      },
      {
        "id": "176d6bd9-cb8a-4e17-a3c1-bab88df13983",
        "cursor": {
          "ref": "ce102c62-3886-4317-901e-54be587fbda2",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "45298b64-4a03-4c47-b804-0a3283c2a025"
        },
        "item": {
          "id": "176d6bd9-cb8a-4e17-a3c1-bab88df13983",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "10eea82f-2b65-4f96-b93b-7b231862b9cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5602,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "cb008734-9a82-406a-8e06-0e9e6a973ab8",
        "cursor": {
          "ref": "b6c42646-61cc-47c5-b25f-c1b4b553c6d5",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1e8d16c3-8f77-4f35-a937-ba9ab03650ab"
        },
        "item": {
          "id": "cb008734-9a82-406a-8e06-0e9e6a973ab8",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "536d4613-c512-4315-88d7-d9fff8694d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "c547fbc1-5d55-4c6b-8366-1368db90b5bc",
        "cursor": {
          "ref": "7801ce91-d446-440d-9f17-3406ff2245bb",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9365d5b5-9d83-4752-aa46-77ff84206e34"
        },
        "item": {
          "id": "c547fbc1-5d55-4c6b-8366-1368db90b5bc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "750acda9-9990-46b8-8f1d-3fc2f11b9b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "4b7a6fd6-2ae5-4e59-9316-6967bc38cb91",
        "cursor": {
          "ref": "4bfc4b18-2382-4741-bec6-18dac1d234a4",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e5ebc566-d665-4f20-8716-43287b4f8b4d"
        },
        "item": {
          "id": "4b7a6fd6-2ae5-4e59-9316-6967bc38cb91",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a11bab16-e141-4f69-9e50-05f415cc4719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "9131dd54-05ee-48ca-99de-d29af40d0b78",
        "cursor": {
          "ref": "3e5b4d4c-09d5-46d0-9593-04ee15fe9653",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "61d3b181-e591-4e2e-b974-7e8988c80aea"
        },
        "item": {
          "id": "9131dd54-05ee-48ca-99de-d29af40d0b78",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "864cee5f-3c2a-4e6f-8071-6b8d9f485fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "dfa9b973-8712-43c3-b600-a7f103733a26",
        "cursor": {
          "ref": "ba397c2a-503e-4ca6-b5f6-93b122de55b2",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "52994392-d741-4f26-9ac8-7cc82a10a50d"
        },
        "item": {
          "id": "dfa9b973-8712-43c3-b600-a7f103733a26",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4b751eb6-7302-4392-9ee2-f33a490860f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "dfa9b973-8712-43c3-b600-a7f103733a26",
        "cursor": {
          "ref": "ba397c2a-503e-4ca6-b5f6-93b122de55b2",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "52994392-d741-4f26-9ac8-7cc82a10a50d"
        },
        "item": {
          "id": "dfa9b973-8712-43c3-b600-a7f103733a26",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4b751eb6-7302-4392-9ee2-f33a490860f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "5da5c523-b767-4765-aa7a-931b23803bd1",
        "cursor": {
          "ref": "f98652d0-baed-413c-96ea-94ee8d973227",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2f3bf6db-7739-4082-a5d6-6d552f3f1adf"
        },
        "item": {
          "id": "5da5c523-b767-4765-aa7a-931b23803bd1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b6699570-e0cd-4429-bf4a-77d56b54e613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "e35c16e8-85a8-4dde-8431-f7590e7f5339",
        "cursor": {
          "ref": "60b32ebc-b5dc-4496-b29c-87ee1e281f97",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "32ea3233-a1b7-4479-850a-066e988d14dd"
        },
        "item": {
          "id": "e35c16e8-85a8-4dde-8431-f7590e7f5339",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "927f252a-0bb1-45c6-9cb4-4d3e67298f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "195707a4-befa-4f7f-bcad-a5e20139c6bd",
        "cursor": {
          "ref": "6dd3016f-5e68-4d36-b083-76db5258cd1a",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d1d0082c-b340-44e4-b421-f683f4f12c90"
        },
        "item": {
          "id": "195707a4-befa-4f7f-bcad-a5e20139c6bd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "52c80a37-1a3c-4fa9-a8cf-f35b8ab7d613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "ef409b67-e688-4bb1-92fa-6a55b72e53bf",
        "cursor": {
          "ref": "5bbc54c3-a374-4ed0-aba8-74dabe277822",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4cf51986-5375-4a95-be6d-73927f92e741"
        },
        "item": {
          "id": "ef409b67-e688-4bb1-92fa-6a55b72e53bf",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0f4b6c9c-0e76-41ff-ae95-b7c38162fde0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "1b510d54-e862-4ec1-ab18-b13dadb81d53",
        "cursor": {
          "ref": "e4828030-15e6-446d-8ae1-fcad5d95fa96",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6bb05fdf-8e8c-4147-b314-d789eddc82c2"
        },
        "item": {
          "id": "1b510d54-e862-4ec1-ab18-b13dadb81d53",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "34a48e5e-af64-4c5c-a74b-78c7cbc756a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "e85135c2-1227-4cfb-84eb-f5ef1b677f5b",
        "cursor": {
          "ref": "14a20759-cce4-44af-b391-caed05b586ba",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "41416aed-c186-4ca2-b1ec-15724f1b0b83"
        },
        "item": {
          "id": "e85135c2-1227-4cfb-84eb-f5ef1b677f5b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "87285b49-5ff5-473d-8e35-31685d5d25bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "95f9ea57-b0bb-4ae0-80ac-babcf45893e7",
        "cursor": {
          "ref": "c0f6f497-1730-4118-ae23-1813f3e94c37",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "68cc851b-9320-4bcc-9ab8-97d0d2c59b1a"
        },
        "item": {
          "id": "95f9ea57-b0bb-4ae0-80ac-babcf45893e7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a0b12179-a6cc-4d34-b79d-7fbbece431d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "a7b5f8c3-15b6-4a47-83dd-090c6522321f",
        "cursor": {
          "ref": "37424508-aea4-4eb2-9b99-07df5a8b8466",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c0a23f48-fafa-4023-abd0-e836bf72ab29"
        },
        "item": {
          "id": "a7b5f8c3-15b6-4a47-83dd-090c6522321f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "292a6c8a-991f-463e-92d1-5ce244c6ff0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "49f99b4e-d4b6-423f-af8e-c008c9a2ee17",
        "cursor": {
          "ref": "44cf16e1-9179-4b31-9d3b-b1ae7762fb75",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a628a3cf-f4ff-4100-a74a-03a453280c26"
        },
        "item": {
          "id": "49f99b4e-d4b6-423f-af8e-c008c9a2ee17",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c5829e87-1023-490f-9be0-6cfc7d5927f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "a222138d-d083-418a-b831-690f4d4a8133",
        "cursor": {
          "ref": "db6e8d5c-1a99-4f62-81b6-cdb8291b8665",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9880b023-83fd-4a1b-a760-81557887c373"
        },
        "item": {
          "id": "a222138d-d083-418a-b831-690f4d4a8133",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ae26d778-c73c-4722-ba1a-6ef93e6bbb20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "508f1e7a-3e4d-471a-b93f-c62905790928",
        "cursor": {
          "ref": "08f5e6b0-8618-4960-84c8-cd8b8e4d614d",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "83d8d5b8-4b17-4c46-b9f0-fd1592df6d2e"
        },
        "item": {
          "id": "508f1e7a-3e4d-471a-b93f-c62905790928",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ac09fdce-fd5c-4544-9cf5-fc7bdc245a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "2d8c8251-2ac8-4d2b-88ab-34671805b6e5",
        "cursor": {
          "ref": "fc5c721d-0fd9-46e2-8a48-7b4afd731d67",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a760854b-3655-47be-820a-5df2a8bae172"
        },
        "item": {
          "id": "2d8c8251-2ac8-4d2b-88ab-34671805b6e5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7b064215-1059-4f04-ab95-e1975a417120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "0969cc62-b7fa-47d4-983d-3329a3345ef2",
        "cursor": {
          "ref": "0ca9f0e4-d2ad-4bfb-875f-f96bfc1f4bd1",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "35f42a65-e388-4293-b8ed-8f4e66c9f2e5"
        },
        "item": {
          "id": "0969cc62-b7fa-47d4-983d-3329a3345ef2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f946868c-4cac-40ba-8ff3-b3e8fb537baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "17100320-6bef-4dc0-a285-5c4b5e59667b",
        "cursor": {
          "ref": "152a384e-7955-45ea-951d-dbaa514edabf",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "11514880-ef93-4f70-b335-f17d5e24ba21"
        },
        "item": {
          "id": "17100320-6bef-4dc0-a285-5c4b5e59667b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d20cdc47-a99d-4699-b652-08517310910b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "12548a36-44f1-473f-b78a-87f195f52f0d",
        "cursor": {
          "ref": "e4dfa166-32ae-49ef-b166-1bf816579c51",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1db9a9c3-da0a-4f95-9d55-8acf648d98f5"
        },
        "item": {
          "id": "12548a36-44f1-473f-b78a-87f195f52f0d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5270a760-6eb8-46c9-a277-a2e0ef67a41e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "8e6d658a-2c1f-4b7c-a258-c4144349f7d6",
        "cursor": {
          "ref": "6dea773c-b572-479b-b8e7-1f2ed05d3db7",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5f006215-e2fb-40ee-8888-72388e8fb5de"
        },
        "item": {
          "id": "8e6d658a-2c1f-4b7c-a258-c4144349f7d6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f9bebd66-1b04-4caf-98da-ecef0124b46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "566d0802-b7b2-448a-8ee7-1a40736687e2",
        "cursor": {
          "ref": "062fd889-37b4-47b5-9be2-a95837030ace",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bb343420-8f74-445c-98cd-bf8f47107e34"
        },
        "item": {
          "id": "566d0802-b7b2-448a-8ee7-1a40736687e2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1bbfa8a0-ec48-4331-8a93-a09f097893df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "fcbdd259-e237-4eab-8ec2-5c93d21c4d9e",
        "cursor": {
          "ref": "d3304b5c-b4f7-4ca2-be71-6bcea1071bb2",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "64ce0541-c4ea-4351-aa45-60f1d480dcf7"
        },
        "item": {
          "id": "fcbdd259-e237-4eab-8ec2-5c93d21c4d9e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "16bfb147-2be9-447d-91d3-11cb405bf743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "e1a6ad22-fe91-4eee-9f16-c516095ed89c",
        "cursor": {
          "ref": "f20302b1-4b82-401d-a31c-d2c0ded05fcd",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c97a4b18-81bd-4fd0-aae3-eba3613d2671"
        },
        "item": {
          "id": "e1a6ad22-fe91-4eee-9f16-c516095ed89c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "58424ef6-0e40-429f-bd02-b87d16a49d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "03b1bc6d-53ec-4f4c-9c37-ae40d32cd4b9",
        "cursor": {
          "ref": "62adaffc-9ac5-4615-bb1b-978c1d8e4c2e",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "25a39789-00a5-4021-ae60-33b31db2afd1"
        },
        "item": {
          "id": "03b1bc6d-53ec-4f4c-9c37-ae40d32cd4b9",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5b4334e4-9a9b-44ee-b44e-c1bb4639f0fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "18b2cd57-067d-4183-88a3-5e70645f60a9",
        "cursor": {
          "ref": "90795bc4-9388-4874-b03b-b044b6f424b7",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3c32cc95-3d7d-4223-8bab-dd05f1ccbf10"
        },
        "item": {
          "id": "18b2cd57-067d-4183-88a3-5e70645f60a9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "27731dfc-052f-43e7-8c7c-7e1432918235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "c71d788e-70b8-4e7e-a92d-0975ef3d2b26",
        "cursor": {
          "ref": "b91196d7-a023-451f-b763-5cde3fd03ee1",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d5a409ad-1814-4953-86db-ab67addc5ed5"
        },
        "item": {
          "id": "c71d788e-70b8-4e7e-a92d-0975ef3d2b26",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4d5cb968-aa69-4f01-ab88-9773b689ca01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "e20a9b42-dbc3-4222-8f71-004073f407e6",
        "cursor": {
          "ref": "e325c7af-5271-43f1-889f-f59a8098d470",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "443f4c25-7bce-4877-ac6d-ad5a8000feb3"
        },
        "item": {
          "id": "e20a9b42-dbc3-4222-8f71-004073f407e6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8b9f8fe0-8927-4a56-8488-5a012614243d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "3dd8a389-aa35-4b50-974a-cf6f3f755098",
        "cursor": {
          "ref": "fc8c17e4-9b3d-41f6-a802-a7c6db1e30cf",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b632e209-1be8-49f4-afea-9c1739b701b3"
        },
        "item": {
          "id": "3dd8a389-aa35-4b50-974a-cf6f3f755098",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5665545d-ed87-436d-aaa9-a20f0de2aa1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "4e1e66cd-0488-4f96-879c-c6533d5a37bb",
        "cursor": {
          "ref": "d01cdc50-f8bf-4b13-9352-521c00ab3858",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7226baeb-b90a-418a-8f7e-79ff86b0fa50"
        },
        "item": {
          "id": "4e1e66cd-0488-4f96-879c-c6533d5a37bb",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0185be5a-ab94-475f-a645-bc0984cd7dd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "6deecf0e-fbc9-48e4-87a4-db72bceaca2b",
        "cursor": {
          "ref": "acec3c84-184f-45f0-98f6-e12f33d129f1",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "98d2f9fc-468d-4440-ad6b-6c3ad4c4dfc0"
        },
        "item": {
          "id": "6deecf0e-fbc9-48e4-87a4-db72bceaca2b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "74268b6d-d577-4c62-9a11-072e2d13f271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "22693ad9-0931-416e-9d90-479ebbde2859",
        "cursor": {
          "ref": "51979792-5f09-4a86-92ff-482d35d1987e",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "584192a3-94f3-4703-b4af-2c71de34fe52"
        },
        "item": {
          "id": "22693ad9-0931-416e-9d90-479ebbde2859",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "36794d8c-df79-4831-a804-a03947056644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "b90be71f-4814-4044-abe9-6fda7daa66e2",
        "cursor": {
          "ref": "01f8db13-7b08-4467-a95e-1c34c898ccaf",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2b1acc6e-e87c-441c-b9e6-26913c308dd3"
        },
        "item": {
          "id": "b90be71f-4814-4044-abe9-6fda7daa66e2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ab0bfb14-6aa8-4b4a-b1f9-1a3aa33c1860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "85f01d10-67f6-4976-bac9-ccab16f7de45",
        "cursor": {
          "ref": "47c62629-18b9-46f3-85e3-cea5aa5dac36",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c67c1d2b-acd0-438c-9f5b-3e3591aa0d0a"
        },
        "item": {
          "id": "85f01d10-67f6-4976-bac9-ccab16f7de45",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f203579b-6c76-4481-941a-543be6b5c2b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "e298c127-2e08-433d-a4d0-57352bdf4661",
        "cursor": {
          "ref": "4884a013-cb2d-41b9-b71f-fd3114f86d85",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "74dfd3f3-365b-4acf-ad3c-05ac552974fb"
        },
        "item": {
          "id": "e298c127-2e08-433d-a4d0-57352bdf4661",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0f29dc73-4fb0-479a-92d0-c12abf224ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "b0877d5b-3907-472c-bddb-b1b4ed2b625e",
        "cursor": {
          "ref": "d99e25e3-19b0-4674-ac58-d8184b7b50d3",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f9608d04-d1b6-4bca-9ac2-46718350a54d"
        },
        "item": {
          "id": "b0877d5b-3907-472c-bddb-b1b4ed2b625e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0daa6f05-66dc-44c4-8c69-427018341b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "9eb8bc2d-458c-4527-bc00-aa412f96bc73",
        "cursor": {
          "ref": "d3faa855-bf98-43d1-a24e-825dca50470e",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "12b91ea3-3e88-4b24-be44-71a5762d18ba"
        },
        "item": {
          "id": "9eb8bc2d-458c-4527-bc00-aa412f96bc73",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "22719a0e-d9ee-45a1-acf3-14471b8afb66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62e859d-3c70-43bd-b66b-27025eb8ba49",
        "cursor": {
          "ref": "48821986-c992-4823-84c8-20c7c3d388f4",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "21075086-77b2-4b98-b74e-3d0c4453fcfa"
        },
        "item": {
          "id": "d62e859d-3c70-43bd-b66b-27025eb8ba49",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "6fdad218-e7e3-4822-8df4-5e65c52bf280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "c4c76b64-26e1-48df-aee4-0c450170e2c6",
        "cursor": {
          "ref": "3dfb96f2-42b0-42b2-aef8-241b924e162f",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9f7541a6-5562-487c-b096-d26db329e1f0"
        },
        "item": {
          "id": "c4c76b64-26e1-48df-aee4-0c450170e2c6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5745e4ee-457c-4fe0-b9ca-e58563e175f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "c4c76b64-26e1-48df-aee4-0c450170e2c6",
        "cursor": {
          "ref": "3dfb96f2-42b0-42b2-aef8-241b924e162f",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9f7541a6-5562-487c-b096-d26db329e1f0"
        },
        "item": {
          "id": "c4c76b64-26e1-48df-aee4-0c450170e2c6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5745e4ee-457c-4fe0-b9ca-e58563e175f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "845acf43-e611-44ef-96a9-2f4ed24895b8",
        "cursor": {
          "ref": "278c19b3-2d15-4006-b6e2-61af088b3a1d",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "09647a78-1cfc-4db1-81a0-b5ae6202a2f1"
        },
        "item": {
          "id": "845acf43-e611-44ef-96a9-2f4ed24895b8",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9c871eb3-2971-4511-b5b7-2b28f14d5f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "3a57e23d-adcc-4c2f-931f-748ad7cff652",
        "cursor": {
          "ref": "265ad2da-affc-4630-99a9-04fce0882aaf",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4acbf637-d388-4a44-a831-efb5ef51de0b"
        },
        "item": {
          "id": "3a57e23d-adcc-4c2f-931f-748ad7cff652",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "95bb952f-dbac-4d15-a5ba-c035a62aff05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "dd37d0be-8058-4ef6-9ad9-1880f3b63df3",
        "cursor": {
          "ref": "44ceb3c6-26e6-4508-a7f1-c180cfb51d34",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7bb5fdbc-7eb7-4454-8811-1ad35abb99aa"
        },
        "item": {
          "id": "dd37d0be-8058-4ef6-9ad9-1880f3b63df3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a9d1506f-3d7e-46a9-b595-c267121c7e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "c7168eb4-86c4-40b7-b0f3-a251b4ff2d56",
        "cursor": {
          "ref": "22e81b16-f530-4a44-9cdf-e90b1eb85bc2",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4b6e3961-0e70-4a4c-89aa-e4d1a8af8480"
        },
        "item": {
          "id": "c7168eb4-86c4-40b7-b0f3-a251b4ff2d56",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f4f156ef-a690-48a3-b5bc-f009bcb86fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "80f87657-26d7-4b10-b2ed-c50fcfc95759",
        "cursor": {
          "ref": "42aa47ff-14af-44fc-8ed1-5edefbc955e0",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "dc87793b-b022-4818-a07d-f4cb29fa1d39"
        },
        "item": {
          "id": "80f87657-26d7-4b10-b2ed-c50fcfc95759",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "483e91a6-f61e-4f69-b194-4bbe77962533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "ceb167bb-4dcb-4a25-991d-5a7158495f01",
        "cursor": {
          "ref": "22724e10-c185-4f8d-a1be-4e06719c9a33",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "83ffaa3c-6b2e-4991-b994-7eeb8a74cbe7"
        },
        "item": {
          "id": "ceb167bb-4dcb-4a25-991d-5a7158495f01",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a04b8536-4305-4e0a-9a38-f098ce436c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "5ee79f25-f307-4a4b-8442-af1dca27f89b",
        "cursor": {
          "ref": "52236e4c-c84e-4b4e-912f-e9c721de4ba9",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "808779ff-c98d-4217-b143-3bf5a28c6e71"
        },
        "item": {
          "id": "5ee79f25-f307-4a4b-8442-af1dca27f89b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5ede7e26-90d7-42fe-8265-abfb3bf8f4b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "f2677691-c4c8-4e47-ac2f-85bdac209021",
        "cursor": {
          "ref": "f347717c-141c-4133-a4b2-ce851a2a4cce",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b946d7c7-bad4-43ad-9fc1-cc53b822fc3b"
        },
        "item": {
          "id": "f2677691-c4c8-4e47-ac2f-85bdac209021",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a7ef8b71-c8e7-4814-838e-1f1eb647713c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "bd266ef0-3038-4bd4-b17e-ad7134824930",
        "cursor": {
          "ref": "4339fb25-600b-4cb0-b470-97d86a43b5d5",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "864511f0-aa86-4b0e-a195-b95ec92faf0a"
        },
        "item": {
          "id": "bd266ef0-3038-4bd4-b17e-ad7134824930",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "23e44083-d823-4618-a403-476e922ffdb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "a8c6a260-0dde-49b6-b1cb-7e7119c4ec41",
        "cursor": {
          "ref": "6430fa42-0bba-49b4-9323-a45c6576af51",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8941fc62-c475-4cd5-8ed9-f52dece25816"
        },
        "item": {
          "id": "a8c6a260-0dde-49b6-b1cb-7e7119c4ec41",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2d8ad9ec-0794-4a85-9f1d-d0b71024ef77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "e03c2b49-198d-49f0-9dd5-75204bcb2210",
        "cursor": {
          "ref": "0f13eff8-336d-4a38-8d96-3741e0a89a8b",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d48b762c-343a-47d0-8342-32d419d93062"
        },
        "item": {
          "id": "e03c2b49-198d-49f0-9dd5-75204bcb2210",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "4c7e506a-9541-47bf-9a6d-696eab5bcf8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "a57108aa-754b-4fdc-9e48-afd50becd1e4",
        "cursor": {
          "ref": "9777585f-4ff7-432d-9559-311fcc6b412e",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9fd899dd-e326-4848-adf4-e2fec69ed326"
        },
        "item": {
          "id": "a57108aa-754b-4fdc-9e48-afd50becd1e4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f097b268-69d0-4817-8e88-da93f8a93821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "e7f5c45c-1377-4548-99f1-81c8c59bbf1f",
        "cursor": {
          "ref": "17ffa200-ea09-48eb-9a47-ef654f56836b",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "08cc90ad-e8fc-4a63-9771-02f48525f992"
        },
        "item": {
          "id": "e7f5c45c-1377-4548-99f1-81c8c59bbf1f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0b7858b6-3321-4fcf-9185-9d2d0b40717c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "23116628-a1e4-4338-b8e7-2b8735b3be98",
        "cursor": {
          "ref": "8e509aad-854f-4737-b4e5-03799d074b92",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "2b18be72-7ee6-44d1-b380-d895cf037a9d"
        },
        "item": {
          "id": "23116628-a1e4-4338-b8e7-2b8735b3be98",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "3ab3225d-bd8e-48f1-8342-d252114b58f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "1078ec45-3ef2-4235-8847-5b680e04628c",
        "cursor": {
          "ref": "6b424940-d6f1-47a3-905a-88d553f14a2f",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f569cb85-032b-4382-8149-0f951b531ca0"
        },
        "item": {
          "id": "1078ec45-3ef2-4235-8847-5b680e04628c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "420ea033-f22a-4aba-91ee-1da53c0152a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "fc54380a-ba83-4783-8e8d-1f05a72afb3e",
        "cursor": {
          "ref": "2398fc33-ca64-4826-82f4-7ef0cfe688d9",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "808c1d0f-2a75-4029-a6b1-14090157ab29"
        },
        "item": {
          "id": "fc54380a-ba83-4783-8e8d-1f05a72afb3e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5c24402f-9ae4-4eef-9cb8-7956ae63f914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "2ac9f375-deaf-44b7-a59c-3ec329a83d14",
        "cursor": {
          "ref": "0d4b73f5-7f6f-4a7d-b5f2-578334a6a893",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b618e52d-22cb-4aa5-9de7-ac07024a4de3"
        },
        "item": {
          "id": "2ac9f375-deaf-44b7-a59c-3ec329a83d14",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f7060d4f-34b5-40a6-968e-9d23e9e6dd95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3573,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "b712482b-c007-4eaf-8c9a-798cc28f1f96",
        "cursor": {
          "ref": "d1569549-6d4d-4f3f-9c3b-23d99cc6190d",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b7391369-57d6-47da-a575-35528548722c"
        },
        "item": {
          "id": "b712482b-c007-4eaf-8c9a-798cc28f1f96",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1a9eca4f-9114-4ba6-8f4d-00246c2f8a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3950,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "92c8690b-44e3-4778-8b4a-14549a09f8ac",
        "cursor": {
          "ref": "20847d43-5deb-431c-b013-b5962eb28e09",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5bd0717c-5d8b-4eca-af57-ab04aa2bd6fd"
        },
        "item": {
          "id": "92c8690b-44e3-4778-8b4a-14549a09f8ac",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "10cb28d7-31d8-4d43-918c-609685c0e3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2463,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "1d362839-099e-454a-b1f7-96230a77d6ac",
        "cursor": {
          "ref": "f44e7340-79e7-4a83-8f72-d0463111bab7",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1fb147e4-ed2e-4c76-aa4d-6f785288d692"
        },
        "item": {
          "id": "1d362839-099e-454a-b1f7-96230a77d6ac",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c6c47254-cce1-4d81-8a61-4f4a082729e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "7285af6f-fcee-46bc-9f79-6b9a0fac0486",
        "cursor": {
          "ref": "da795df9-00ca-41f6-ac12-093a0b2b4c64",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "98fd52f1-7779-4686-a858-17d5bdd911e3"
        },
        "item": {
          "id": "7285af6f-fcee-46bc-9f79-6b9a0fac0486",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "aa8327a0-dbec-4068-979d-83b882d93d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4138,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "08e88c0c-f4fd-4fbb-a8d4-6b9b85d73726",
        "cursor": {
          "ref": "d16e8ca5-3eaa-4a4b-b193-3c023511cc41",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "041ed7cc-c617-4ff8-bb32-38190349aa1c"
        },
        "item": {
          "id": "08e88c0c-f4fd-4fbb-a8d4-6b9b85d73726",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3c16425b-2155-4684-a094-9227bd56f917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "e34fa207-eec7-4798-b7fe-24fe51a20e3e",
        "cursor": {
          "ref": "81d5d3aa-30dd-422b-b0e7-9ccba04323c2",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "570ea86a-e351-478d-97a1-83791ab01241"
        },
        "item": {
          "id": "e34fa207-eec7-4798-b7fe-24fe51a20e3e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "52ff4cf4-cae5-4688-943d-68656bc2c617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "57587524-7470-460d-b680-2b76d2b69904",
        "cursor": {
          "ref": "e378ed65-f5b7-4953-93b3-95da0f135e58",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "7d837fe0-1b10-46a3-91f4-8c9ef45cc70c"
        },
        "item": {
          "id": "57587524-7470-460d-b680-2b76d2b69904",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7ff00812-3bbb-4e40-8b9b-d9b4220de678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "b60fe6ec-0014-41ed-8238-b013be5d2bd0",
        "cursor": {
          "ref": "8878a55c-129d-4a3f-b03e-01a0986bb5f2",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6d4ce775-a1eb-460d-be4d-80b0af61ac43"
        },
        "item": {
          "id": "b60fe6ec-0014-41ed-8238-b013be5d2bd0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "95deb7db-8851-454f-a368-2836f9ff5763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "878b75db-c8ec-465a-b597-28eb35338049",
        "cursor": {
          "ref": "bf93c812-79f3-4175-b61c-c022c2aaa67e",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4d16bf5d-8843-44b8-b1e0-89ff654f5bf4"
        },
        "item": {
          "id": "878b75db-c8ec-465a-b597-28eb35338049",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a924652b-1ac8-466b-a949-c6037e8954e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "e36a9c7f-4f04-4cad-b1bc-bc50a7ca3489",
        "cursor": {
          "ref": "3e8a38f3-fb5c-40bb-a26e-7172aae95d3e",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c69e3d82-9cae-4931-8a05-5360871a1c2a"
        },
        "item": {
          "id": "e36a9c7f-4f04-4cad-b1bc-bc50a7ca3489",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7f5fd2c5-a2ae-459d-bbed-7d1277270e83",
          "status": "OK",
          "code": 200,
          "responseTime": 2334,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "68fd61b1-7b4e-4f2e-bbcd-1586900ca99e",
        "cursor": {
          "ref": "4a3335fd-a252-494b-82f2-5635f4c21bcf",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ec52ffbc-7f3e-4385-99a8-f698d1c6a63d"
        },
        "item": {
          "id": "68fd61b1-7b4e-4f2e-bbcd-1586900ca99e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "90bb7bd2-c587-4823-bedb-0392839cca7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "2a4780af-4758-4fef-bbc4-a3db3c192ca4",
        "cursor": {
          "ref": "956e75da-b36d-4260-8ef1-a05d9a72ac8e",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0ea68789-fa0a-49c4-98fa-db567d0876ce"
        },
        "item": {
          "id": "2a4780af-4758-4fef-bbc4-a3db3c192ca4",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "966b78ab-c82a-472b-a925-5352c24b9bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "bc4a9ba8-b068-4059-81c1-d913ea694355",
        "cursor": {
          "ref": "da6a9ead-758c-40f7-8784-6051ab1c2649",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "170384cd-4a67-4cb8-84a9-ca0bfb1b2285"
        },
        "item": {
          "id": "bc4a9ba8-b068-4059-81c1-d913ea694355",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2675a7be-4240-4d7e-91ab-c4bce05b984d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "66eb4c74-adc2-4a29-be72-36e980a355cc",
        "cursor": {
          "ref": "dfe6b2be-c0ac-4305-8fed-5b3bcd00920b",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a4883f6d-fd85-4154-b1de-00112e16133f"
        },
        "item": {
          "id": "66eb4c74-adc2-4a29-be72-36e980a355cc",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2b0bca0d-012f-4d81-8541-997cb610e7b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "8d6e5821-46cb-4de3-9f40-88249a21a583",
        "cursor": {
          "ref": "613a1c9a-b117-4a9b-b689-735b21d06bef",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8971798f-d1de-4c55-9c71-93b8e779073c"
        },
        "item": {
          "id": "8d6e5821-46cb-4de3-9f40-88249a21a583",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a4da85f5-5123-4626-a44f-b72df0c03d0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "0de9b780-ef99-43ec-853e-968eb6f13c69",
        "cursor": {
          "ref": "fa9108ab-ae2c-408a-b92e-a4882a9bdf53",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7092977b-caa5-4751-bfd1-2f70324f231e"
        },
        "item": {
          "id": "0de9b780-ef99-43ec-853e-968eb6f13c69",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6fc4c306-be8f-4bb4-a12c-81845e319815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "4ee46ced-dac4-4e5d-bfe6-a9736489c08a",
        "cursor": {
          "ref": "a4c018c9-e9c5-4fb6-ad98-e5c4f7153725",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e49181d0-1d8b-42d9-a398-5ae59c1d0a1c"
        },
        "item": {
          "id": "4ee46ced-dac4-4e5d-bfe6-a9736489c08a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "de80766a-5e77-45d5-becc-693e54ac587c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "be091641-8b2f-4e5b-8be4-176b1b71721a",
        "cursor": {
          "ref": "490c923a-ac71-4e1b-b432-3966813f0394",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "21fa0860-0eb7-40a4-9d49-3798c05bc635"
        },
        "item": {
          "id": "be091641-8b2f-4e5b-8be4-176b1b71721a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "09cba85c-0e6b-44bf-b409-13c8d58f2775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "5d019912-212d-45be-b765-6dad8beac1f6",
        "cursor": {
          "ref": "83745ea8-052f-4e19-a9c6-821f47ff34fa",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "99bd5cf9-55d4-444b-a63e-7d011ea6cd74"
        },
        "item": {
          "id": "5d019912-212d-45be-b765-6dad8beac1f6",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cdb6411f-d076-407b-a73d-6ca857272961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "55785943-09a3-413d-9ddb-e213cb4ea0b3",
        "cursor": {
          "ref": "0ba7c904-677a-4822-9b7a-794ef851b5dc",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7f862e1e-d3a5-4657-a125-dc601015e464"
        },
        "item": {
          "id": "55785943-09a3-413d-9ddb-e213cb4ea0b3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9cf8c166-b4eb-4585-b7b1-e7023edfc07a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "e9048df7-560c-4587-ab66-46075779bb51",
        "cursor": {
          "ref": "6c298464-597c-4ca6-ac30-6b1e804d510f",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f6cec5bf-024c-43b9-9cd9-1a579031d925"
        },
        "item": {
          "id": "e9048df7-560c-4587-ab66-46075779bb51",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b0cfa769-505e-4be6-bc74-318166c1e529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "82a1dd7c-bf93-4521-954c-8a52d1cbee9f",
        "cursor": {
          "ref": "bfe50209-873e-4c0e-9f1a-d2a1d02c0e3b",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ceab460c-8b80-48b9-9899-acb96f43579a"
        },
        "item": {
          "id": "82a1dd7c-bf93-4521-954c-8a52d1cbee9f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "66636469-ab9b-4612-8c47-c1233cf269a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "e2a75ac1-2aef-47c5-96ff-312e27f62847",
        "cursor": {
          "ref": "5f3cab0d-5609-4740-a0a9-a27f252fdf94",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ac388673-18c1-4255-8965-95a2f288cb92"
        },
        "item": {
          "id": "e2a75ac1-2aef-47c5-96ff-312e27f62847",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f6d1748d-b94f-4ae9-ac0b-440f2ca6adb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "41d0919e-3a2b-478f-aee4-c3f9882ec9f2",
        "cursor": {
          "ref": "dec2998a-843d-40ec-ab08-1bf449129d72",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "08196c64-b9cd-4871-895b-681f2eefa823"
        },
        "item": {
          "id": "41d0919e-3a2b-478f-aee4-c3f9882ec9f2",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f391a88a-91da-401d-9745-2bc749da3ae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "7f4e055b-a298-4a1e-bc82-86df0785aee8",
        "cursor": {
          "ref": "9ea5b943-9b62-4b08-8c04-65d20431e723",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "fd2db1eb-104c-47ed-8742-e135e3c30575"
        },
        "item": {
          "id": "7f4e055b-a298-4a1e-bc82-86df0785aee8",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "91893a09-fe44-4bd6-8d73-aba063f3338f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "c7c01d0b-268f-4c98-b22f-0fa6834e1529",
        "cursor": {
          "ref": "eb63d791-ec08-48c3-ac40-bbf625abd2f3",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2f1d146d-0b5b-4f74-8d84-8e13a855c35d"
        },
        "item": {
          "id": "c7c01d0b-268f-4c98-b22f-0fa6834e1529",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "967b4e43-ea2d-47da-a104-9adf470db030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "8fc338bd-8c24-45f5-9606-61f26998c413",
        "cursor": {
          "ref": "2e22e58c-729e-43b5-a804-7fa75a97f7d1",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "55356052-f93a-4743-bc54-967dea9a9d94"
        },
        "item": {
          "id": "8fc338bd-8c24-45f5-9606-61f26998c413",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9f93c86e-75e0-4c74-9dec-3c5ad0f2da22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "02b7af29-28df-47cc-a6c0-4a42c4103856",
        "cursor": {
          "ref": "7d31b6e5-a69b-4c62-89c9-cc2c12c0ce01",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "815ec3e2-fa0a-41e4-b6c1-8a6768a59952"
        },
        "item": {
          "id": "02b7af29-28df-47cc-a6c0-4a42c4103856",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e88e56af-b130-4c7d-9436-8e641bf96686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "69d5c488-e651-4f29-946b-4083997c3834",
        "cursor": {
          "ref": "12ecda49-846a-4716-842d-4ecd252fe8b6",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ca8afe65-34d3-4ff7-9f63-69e3e7b12167"
        },
        "item": {
          "id": "69d5c488-e651-4f29-946b-4083997c3834",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "765b8833-c753-4494-93dd-9f0e9804e02b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "5ce3c2bb-6ff0-4f9b-b5ca-735c69214e09",
        "cursor": {
          "ref": "8b54a156-646f-4df9-b6ca-4ea904637fe8",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "dc6af89d-a0b8-4de2-b15c-4aedc7b5dc7b"
        },
        "item": {
          "id": "5ce3c2bb-6ff0-4f9b-b5ca-735c69214e09",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6e38afa6-9b49-4f87-8ad2-387ce17afd85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "c1e997fa-967e-4bef-933b-c7286333b6be",
        "cursor": {
          "ref": "7e76fec1-a24e-4756-a2b8-abf528ef38eb",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6cc1f027-e229-4d23-a595-eafc57d9c90c"
        },
        "item": {
          "id": "c1e997fa-967e-4bef-933b-c7286333b6be",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "00a4ae22-1ddb-4adf-8f6d-40a21ce36fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "a12dbe86-5b5b-491f-ab7a-4323a5bcc137",
        "cursor": {
          "ref": "c83431ce-8322-4a01-9902-d0e7a2ac6051",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "84152203-9185-4f13-84ec-24e62a9c8568"
        },
        "item": {
          "id": "a12dbe86-5b5b-491f-ab7a-4323a5bcc137",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bc1dccc7-21ef-4b6a-908c-4515a664c73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "8813c2fa-055f-4fee-9357-2df5798b9d57",
        "cursor": {
          "ref": "0ea89ac5-9eec-4549-a6f2-b7a19c1166cf",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bb4edc93-c170-481a-b813-de4c7479caff"
        },
        "item": {
          "id": "8813c2fa-055f-4fee-9357-2df5798b9d57",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "52a1cc39-19d9-458a-81ed-6b11e845f901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "b054a859-2cda-4857-a1c2-65890428e5a9",
        "cursor": {
          "ref": "797e351b-2391-47db-ac66-04f60f3435d0",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c52cda8f-4be4-4a8d-9fa3-1c002c8404e3"
        },
        "item": {
          "id": "b054a859-2cda-4857-a1c2-65890428e5a9",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "540e6418-0cc1-41e7-8ab1-191640e9bddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "47e4ef1f-31c7-42d7-aa56-fc0e63ca93cb",
        "cursor": {
          "ref": "516395bc-5037-43de-a626-1bdbde2f8fa7",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2bf53118-1860-4217-891a-289ef73f0715"
        },
        "item": {
          "id": "47e4ef1f-31c7-42d7-aa56-fc0e63ca93cb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4a63c0fc-e037-47ad-bad1-5118f6b193de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "68eb7965-36ed-4064-a055-94419e5af845",
        "cursor": {
          "ref": "cdf66d34-04dd-453f-81f2-aca780b450b6",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "059b8cb4-a84e-49cb-a755-96603539acd7"
        },
        "item": {
          "id": "68eb7965-36ed-4064-a055-94419e5af845",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "818deadb-ad08-43ca-a33e-1ec738c9c628",
          "status": "OK",
          "code": 200,
          "responseTime": 2398,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "2e3471a9-f4da-4f91-bc0d-6f24d3a3d8ea",
        "cursor": {
          "ref": "40460d49-a56c-4f2c-ad11-465fd51544ba",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3d008625-e1c7-45ae-a759-89421b8202db"
        },
        "item": {
          "id": "2e3471a9-f4da-4f91-bc0d-6f24d3a3d8ea",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "cee2c8ed-fced-4d43-92f2-1c3ab41e4cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "62697d27-273b-4009-9ac0-bf9a5adf1fd3",
        "cursor": {
          "ref": "d35ca9d7-77b4-4eae-a61f-44841075ce10",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "929a5801-02f2-4fad-961e-fbff9ad69eb6"
        },
        "item": {
          "id": "62697d27-273b-4009-9ac0-bf9a5adf1fd3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "41607384-c70b-409e-a2f3-1a8e7c5eadb9",
          "status": "OK",
          "code": 200,
          "responseTime": 4051,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "24780a03-345e-4948-a92a-ffb0e186fa24",
        "cursor": {
          "ref": "2b5c3582-c531-4b9b-978b-2cbc56116a86",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b44d8198-bacf-4bd0-9cb1-b2a7b9327307"
        },
        "item": {
          "id": "24780a03-345e-4948-a92a-ffb0e186fa24",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c6c6c353-4f11-4be7-b4c6-360a81068273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "460ef443-5ee0-4b14-a22e-fc54d1cfa7da",
        "cursor": {
          "ref": "981300f8-00a1-4329-b6e0-d9fcaa06eab9",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "592385d4-af7c-4374-8f22-b9173ab4d439"
        },
        "item": {
          "id": "460ef443-5ee0-4b14-a22e-fc54d1cfa7da",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e462cb4a-e7f1-47c0-91b6-0e28de3ab009",
          "status": "OK",
          "code": 200,
          "responseTime": 2358,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "9e5c2a5c-7193-4011-945f-8d1799547e7c",
        "cursor": {
          "ref": "8b8351f5-4380-4cd8-b02d-961c7ac537a4",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d53ceefc-7ef9-4b89-a232-71fa72abe9f6"
        },
        "item": {
          "id": "9e5c2a5c-7193-4011-945f-8d1799547e7c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f1494405-090a-4caa-886f-fb5f75a6a0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4539,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "089002ca-5072-4ee3-ad7a-15a80f68c3d9",
        "cursor": {
          "ref": "931a3d66-636e-4290-8e1b-e664a3ea9628",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2c5cb64c-4c18-414a-8ba3-a41ef3d2e433"
        },
        "item": {
          "id": "089002ca-5072-4ee3-ad7a-15a80f68c3d9",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0944aaf6-ad29-4ba9-bd47-1564cb58699f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2275,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "3eb7e7bb-f7c0-4db2-b4e6-5cb793824807",
        "cursor": {
          "ref": "2dbfa4a6-8285-4635-8d95-292b2c197832",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "82d9dfc8-d492-4a3e-ab9b-911857a4437e"
        },
        "item": {
          "id": "3eb7e7bb-f7c0-4db2-b4e6-5cb793824807",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f20ef3ec-61eb-4495-83e1-fb9629d8d35a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "192720ed-26d2-4825-87e9-02cdc010e3df",
        "cursor": {
          "ref": "3730508b-93a0-45d7-990d-b82f76f2f978",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "da076804-06fc-475e-a571-809efcd42712"
        },
        "item": {
          "id": "192720ed-26d2-4825-87e9-02cdc010e3df",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2abbeb97-5d21-4fbd-84bb-7b85dde45995",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 1913,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "c1ae5b71-bc6b-4356-b435-0bdd9cdd772d",
        "cursor": {
          "ref": "772538dc-7229-42c4-8537-2275fbca6764",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1f49501c-41c8-49c3-bf82-7376089de768"
        },
        "item": {
          "id": "c1ae5b71-bc6b-4356-b435-0bdd9cdd772d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d5e2163b-9a4e-4aaa-91ea-70a5e8c53197",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 60,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "7b915522-f38b-40dc-bf73-3b5e9f64a455",
        "cursor": {
          "ref": "e9178515-3612-418a-9ef6-f7f868a1de42",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ae66222b-962a-4814-adcc-9489e70b25dc"
        },
        "item": {
          "id": "7b915522-f38b-40dc-bf73-3b5e9f64a455",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "88e4cd6a-9682-47bd-a43d-fd9ac7d5e34d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "98ebff3e-571f-4efe-9b61-0f3bdc967e74",
        "cursor": {
          "ref": "567fbaea-4f87-4bcf-b978-070fe6220be3",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0b75741a-254f-43d2-b866-d498f6a1ea73"
        },
        "item": {
          "id": "98ebff3e-571f-4efe-9b61-0f3bdc967e74",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "48794549-991a-4717-a76d-80589426b428",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 60,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "0d6d7ac8-8508-438f-a77d-9f1f160f2e55",
        "cursor": {
          "ref": "3dc06a60-19b1-42cb-ba97-193fd255f12c",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0d7ac6f3-2681-4338-a1cb-8524eed996af"
        },
        "item": {
          "id": "0d6d7ac8-8508-438f-a77d-9f1f160f2e55",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e6adb336-1575-4e1c-b8f4-b50afba8a674",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "3af7dec4-c3c6-4fca-b3ef-6a046b0004b2",
        "cursor": {
          "ref": "4210775c-b378-4b85-b4e7-fadea32f33c6",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1268bcb3-2c8c-4190-91f2-356e2af46d7d"
        },
        "item": {
          "id": "3af7dec4-c3c6-4fca-b3ef-6a046b0004b2",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1eacb240-bc4f-427c-9e08-7e7101b8e792",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "e976e79f-cc82-467c-a87f-f9dede2aca48",
        "cursor": {
          "ref": "1cf433a3-b519-4fb0-8657-1bb7af6fcde6",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "83df35a8-954d-423b-9cc1-4760d2e1c41d"
        },
        "item": {
          "id": "e976e79f-cc82-467c-a87f-f9dede2aca48",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d81d7349-4421-44e6-ac10-3340d8ac7e05",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "63499fa5-3756-4999-b353-589b9e96fe24",
        "cursor": {
          "ref": "ffce17fc-32ac-4095-a518-aae029d2b643",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3d44ed93-0fd0-43a7-a271-342edfe16a3c"
        },
        "item": {
          "id": "63499fa5-3756-4999-b353-589b9e96fe24",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "87818073-83ba-4f34-ac55-206d01056ecf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "29b4853d-a082-48df-a6b3-d4438f9b11ca",
        "cursor": {
          "ref": "3423c751-38e1-4cec-b9c8-d2cf70557600",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2adf8b08-6d15-4b4c-b0c6-daff4d6e07ba"
        },
        "item": {
          "id": "29b4853d-a082-48df-a6b3-d4438f9b11ca",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9acf22ca-7a89-44f7-b806-e328cef5c5e7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "b398a3bb-539f-4a60-a9fa-9828df7cfbcf",
        "cursor": {
          "ref": "50008779-c567-4712-8573-e83695d33f89",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d972b069-82fd-4abf-8590-ca6a9805c021"
        },
        "item": {
          "id": "b398a3bb-539f-4a60-a9fa-9828df7cfbcf",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "36f531c4-2d2d-4d47-acba-ee5514c28236",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "5c71a000-fab7-4fdc-9c90-29a28649a10e",
        "cursor": {
          "ref": "b763b292-98c4-478f-8d86-41553024f82c",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "294b634e-4772-4c88-876f-d41d1081cf62"
        },
        "item": {
          "id": "5c71a000-fab7-4fdc-9c90-29a28649a10e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e1ef0898-61bb-4b3e-9b88-9b070ab49f38",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "c723a34a-cf15-45fe-ab23-6b1b46cc86b1",
        "cursor": {
          "ref": "6297131f-8e81-44e6-a465-80ac4a495696",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b96649aa-0ee7-416a-9e8f-c207e1be3396"
        },
        "item": {
          "id": "c723a34a-cf15-45fe-ab23-6b1b46cc86b1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "980b1932-b2b0-49c4-841b-889e05704e1d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "51c2f85f-ae11-4a44-a6a5-b7a78a52264f",
        "cursor": {
          "ref": "2273e1a4-5070-494b-8eb8-77c8170c3a95",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "df221a86-f109-4214-928c-634a33f7ce25"
        },
        "item": {
          "id": "51c2f85f-ae11-4a44-a6a5-b7a78a52264f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f818e0e8-1e7b-4489-935b-d6a08ed704d7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "66303982-9c43-4d74-a486-922b7fc6decd",
        "cursor": {
          "ref": "5eb4c517-c021-4d95-9bd4-18d48ca23df0",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "94e78ee2-b432-4063-9ec2-1df79a22373a"
        },
        "item": {
          "id": "66303982-9c43-4d74-a486-922b7fc6decd",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "54fefcee-093c-4d4d-a5ce-db0287496f52",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "f3335115-ab7a-478d-93fc-166d45a7b424",
        "cursor": {
          "ref": "9f0b16f6-ecbb-4033-b0a7-9f546a2f1bb3",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "12e4dfc4-86b6-4f4a-a84d-7650b1b0aa1b"
        },
        "item": {
          "id": "f3335115-ab7a-478d-93fc-166d45a7b424",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "bcbd60db-ec03-418b-8d94-9e61174e297e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "0e0cb962-9e85-4cd2-bcae-275091f574e8",
        "cursor": {
          "ref": "6849ca4a-64f3-4b4b-a840-fa763fbe58dc",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "07d8ecce-8c9b-44f2-b1ce-63ca5c99ed63"
        },
        "item": {
          "id": "0e0cb962-9e85-4cd2-bcae-275091f574e8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "25448cbc-0b55-44f5-a52b-c71f2f09543c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "a149d498-1030-481a-a8f8-afdcf726cf81",
        "cursor": {
          "ref": "4dc6f6ff-ba06-4b43-b2ad-a1de5e59fca6",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e75e4319-0056-4151-a847-677a2b7b2c0c"
        },
        "item": {
          "id": "a149d498-1030-481a-a8f8-afdcf726cf81",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "20d774bd-08a1-4a9a-99b5-b0332ada1e8d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "e7bcdbae-f73d-41ae-9603-9bca78d7ee86",
        "cursor": {
          "ref": "81b7c3e8-5555-4d71-bc31-254b07b47a2a",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7e57c91e-471e-44d4-9b86-1db370d13710"
        },
        "item": {
          "id": "e7bcdbae-f73d-41ae-9603-9bca78d7ee86",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "fc0373a9-66be-417a-a3d3-b5d584f7f8bf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "b5f6581c-66ed-415f-a16b-f991ee7b3e10",
        "cursor": {
          "ref": "5107ca79-5157-4ab6-865b-c1deed8f2405",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5b08027b-dc44-4f18-ac62-62bb3a344568"
        },
        "item": {
          "id": "b5f6581c-66ed-415f-a16b-f991ee7b3e10",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c4100d6c-0503-4604-8891-057233f0592e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 60,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "7a089f6c-69cd-4f5f-8a86-153e09329061",
        "cursor": {
          "ref": "82998807-32b2-4df4-84d5-674f0aa4ed25",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3028853a-e5c0-4e8a-8a74-a755c2d83ae4"
        },
        "item": {
          "id": "7a089f6c-69cd-4f5f-8a86-153e09329061",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d385acd4-0c88-4bbb-a3cb-198c770b9655",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "a94a8c66-72ea-4edf-9da8-d3b1cf406378",
        "cursor": {
          "ref": "50e5df9b-f491-4dc8-9bab-cb7e9b89cf94",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2496cdf9-1216-4ecc-9a0e-337d9cabe6af"
        },
        "item": {
          "id": "a94a8c66-72ea-4edf-9da8-d3b1cf406378",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "95eb293e-9dfe-430e-b20c-3a1cab0833a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "3470b7e4-6aa8-43b7-8173-922ba7c80671",
        "cursor": {
          "ref": "581fab4e-f69a-41db-b8f9-93f67d67455a",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3984f57d-bae3-4577-b48d-47229a3d7cfe"
        },
        "item": {
          "id": "3470b7e4-6aa8-43b7-8173-922ba7c80671",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "949cab79-0c5c-4f0e-a93d-a4bfc7042b31",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "fb206b3a-62ba-4872-844f-370feee56482",
        "cursor": {
          "ref": "d802ab7d-ad7b-46a8-a29b-600f2ad5d24e",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "567f12fc-ce90-48fd-8b13-65ed38e538e7"
        },
        "item": {
          "id": "fb206b3a-62ba-4872-844f-370feee56482",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ee4e5aac-4c94-4447-8396-99b94100f778",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "279803ae-faba-42be-844f-968c04911555",
        "cursor": {
          "ref": "ed167d47-8010-48a1-b8b8-875426732353",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7b4dca52-cc39-4c17-bf88-61a72fb05ec2"
        },
        "item": {
          "id": "279803ae-faba-42be-844f-968c04911555",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "52f0d9fc-2a3a-4c96-98ac-c53242fb08ff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "6b5e8744-3e7e-4a2f-99cc-a68b68db85d4",
        "cursor": {
          "ref": "cae80458-860f-465c-84c5-68904923e50c",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "48f69e11-a288-442e-9fbe-e84a8ba93bf0"
        },
        "item": {
          "id": "6b5e8744-3e7e-4a2f-99cc-a68b68db85d4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "af627910-955b-4b1f-bc9f-a21ddc06fc40",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "90bb3f04-8190-4127-aaf6-f8c5cd9acbae",
        "cursor": {
          "ref": "68273f60-12f8-4e0a-8225-25da29f52821",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c6ae0449-caf4-47d9-91c4-bae7039a15c1"
        },
        "item": {
          "id": "90bb3f04-8190-4127-aaf6-f8c5cd9acbae",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d745dc88-6a93-47ce-b195-8c678bb4c620",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "a577f694-a67c-4b4a-a54f-3db589d061b2",
        "cursor": {
          "ref": "e23ebe6b-730f-496d-a4b5-6c61b22338a2",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a938e892-5e80-4bfc-9115-e09191d5fc98"
        },
        "item": {
          "id": "a577f694-a67c-4b4a-a54f-3db589d061b2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "05e72fd0-0ee6-46e7-b404-3f86481586b1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "99aff247-6c57-4ead-ac9e-a1ed61c195cf",
        "cursor": {
          "ref": "e99acac1-fc2c-4029-bedf-9aa18f21f685",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "96c2c423-c2e8-4329-8659-21222ab27980"
        },
        "item": {
          "id": "99aff247-6c57-4ead-ac9e-a1ed61c195cf",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "71735c6b-e9df-4b5e-be73-67f1c5095ab8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "f530d95c-aa32-4f76-9a82-f134f02f9df6",
        "cursor": {
          "ref": "38a679b0-c686-4248-ab73-885a633104b5",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "47558b23-a7f1-4166-8777-a519bf28ab1f"
        },
        "item": {
          "id": "f530d95c-aa32-4f76-9a82-f134f02f9df6",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a15fde48-3cd6-4d4d-b9c2-69ba3d088f09",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "2460eef0-09ba-4e81-91de-d35f42dac509",
        "cursor": {
          "ref": "5215a875-8246-427f-b176-95abdc00a3a4",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "61e1f69f-73f2-46f1-a6e3-6c534b43e4cc"
        },
        "item": {
          "id": "2460eef0-09ba-4e81-91de-d35f42dac509",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "16b15ffd-cfdf-45c1-a3e9-45545877f990",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 60,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "4ee0c0e3-957f-4487-b213-565cd8c17179",
        "cursor": {
          "ref": "5f4928fd-f4f3-4882-adac-ea12655c5ba7",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e01e0d20-c758-41b0-981a-091ba14152ad"
        },
        "item": {
          "id": "4ee0c0e3-957f-4487-b213-565cd8c17179",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ca102ba8-3afa-4539-9ca9-7a5f5fff2920",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "ff83b45f-0634-469f-9556-a64ee0679479",
        "cursor": {
          "ref": "7e882d38-7585-4291-a8cc-80de5bd72aef",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d327a19e-cf5e-4b39-b92f-dd2d13003db6"
        },
        "item": {
          "id": "ff83b45f-0634-469f-9556-a64ee0679479",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "98957dac-056f-4cc1-bd6a-5338ff0e43ea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "b188f059-291a-4c68-b7fb-3bb8c4059db0",
        "cursor": {
          "ref": "22527787-48be-47c6-b5ca-68d9f759a63a",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0b31e6f9-1068-4839-9c67-3172e579c430"
        },
        "item": {
          "id": "b188f059-291a-4c68-b7fb-3bb8c4059db0",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d96feefc-1ba8-4bcb-8a10-7ec2c3ab9902",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "1c906462-f631-49d1-a2d7-cb1960c28fee",
        "cursor": {
          "ref": "456bfd1b-1e94-4ec7-8279-600a00e7481a",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bef983c8-ad5a-470f-96de-bef5e89dc51f"
        },
        "item": {
          "id": "1c906462-f631-49d1-a2d7-cb1960c28fee",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4b7b19be-5759-4d55-9221-e17a1f380e1e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "4946bfde-8bc7-4a31-8e08-f9643d4df23a",
        "cursor": {
          "ref": "aea0b5a8-bbad-46d8-bbca-01625fe2bde3",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "589adba6-828e-417c-9ed1-1f9fa84774da"
        },
        "item": {
          "id": "4946bfde-8bc7-4a31-8e08-f9643d4df23a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c4a86f7a-0408-4e30-90dc-e5b4ceddea85",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "5522bee5-9a09-4278-a1e9-c15c8206ca2d",
        "cursor": {
          "ref": "811e293e-e7a0-47dc-9dab-a0686c778159",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b64ee2b7-43ae-45d3-b304-e866ef442e32"
        },
        "item": {
          "id": "5522bee5-9a09-4278-a1e9-c15c8206ca2d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8aeb5a65-48e0-4432-88ec-00f96f2f30d6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "d6c055eb-8a92-4db3-be4a-6470f30d7fb8",
        "cursor": {
          "ref": "95a46ec9-c37a-4489-bef3-105c954ca767",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1abed4f0-e055-4507-bdac-0246d158887d"
        },
        "item": {
          "id": "d6c055eb-8a92-4db3-be4a-6470f30d7fb8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0011a129-2b74-478b-996d-73bc1b1e29fd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 60,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "357695b6-fd20-4d5d-a055-90d343ff8286",
        "cursor": {
          "ref": "89760046-13aa-42cd-9f2e-f513213a2a3e",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ac9c2136-c02d-4fc4-a8a3-62d327399637"
        },
        "item": {
          "id": "357695b6-fd20-4d5d-a055-90d343ff8286",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "8b67601d-c581-472a-a0ec-6d4f2ed73cbe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "aff500a3-5b74-49e9-9db8-b9516c355e16",
        "cursor": {
          "ref": "308478c6-639a-4986-b558-084f7234776d",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1ca03b56-16a7-4b23-822e-d1c1d1cb9372"
        },
        "item": {
          "id": "aff500a3-5b74-49e9-9db8-b9516c355e16",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e1b0a9c4-3559-45d3-9adf-64206ad27c10",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "8d0daa47-8cd1-42e7-9619-f78caf193e3b",
        "cursor": {
          "ref": "7c00a447-4f2d-4073-b53b-333904c15d7b",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2e9e2afa-3fa3-4e9b-85b6-26b7b43a1b14"
        },
        "item": {
          "id": "8d0daa47-8cd1-42e7-9619-f78caf193e3b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "11e930e6-e500-4401-98e6-7cb3d8929f30",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "32df4a63-51f9-49c7-b1e7-0a1bd8ddf212",
        "cursor": {
          "ref": "6920f28d-ccbf-42f3-b701-81e04c847d93",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8ce90b00-1321-4aa5-a39c-951293107adf"
        },
        "item": {
          "id": "32df4a63-51f9-49c7-b1e7-0a1bd8ddf212",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6c4e52fc-f062-43e0-a849-d16298b82cda",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "2ba8e5d8-af7a-45f0-be15-8f81f6f190d5",
        "cursor": {
          "ref": "52cc700b-637b-4935-9277-f05410c57805",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6583a2e4-5878-47ba-9a96-a193dd1e4780"
        },
        "item": {
          "id": "2ba8e5d8-af7a-45f0-be15-8f81f6f190d5",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "2ba8e5d8-af7a-45f0-be15-8f81f6f190d5",
        "cursor": {
          "ref": "52cc700b-637b-4935-9277-f05410c57805",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6583a2e4-5878-47ba-9a96-a193dd1e4780"
        },
        "item": {
          "id": "2ba8e5d8-af7a-45f0-be15-8f81f6f190d5",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "2ba8e5d8-af7a-45f0-be15-8f81f6f190d5",
        "cursor": {
          "ref": "52cc700b-637b-4935-9277-f05410c57805",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6583a2e4-5878-47ba-9a96-a193dd1e4780"
        },
        "item": {
          "id": "2ba8e5d8-af7a-45f0-be15-8f81f6f190d5",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "61f8b68b-0e81-4ac4-a97e-bf259e9b06f8",
        "cursor": {
          "ref": "240f6c7f-a96d-4f39-863f-e2ad3cad56d9",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "63640ddc-5a53-4c59-9159-d2b4af4fa2b5"
        },
        "item": {
          "id": "61f8b68b-0e81-4ac4-a97e-bf259e9b06f8",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "61f8b68b-0e81-4ac4-a97e-bf259e9b06f8",
        "cursor": {
          "ref": "240f6c7f-a96d-4f39-863f-e2ad3cad56d9",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "63640ddc-5a53-4c59-9159-d2b4af4fa2b5"
        },
        "item": {
          "id": "61f8b68b-0e81-4ac4-a97e-bf259e9b06f8",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "61f8b68b-0e81-4ac4-a97e-bf259e9b06f8",
        "cursor": {
          "ref": "240f6c7f-a96d-4f39-863f-e2ad3cad56d9",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "63640ddc-5a53-4c59-9159-d2b4af4fa2b5"
        },
        "item": {
          "id": "61f8b68b-0e81-4ac4-a97e-bf259e9b06f8",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "d67f5927-5903-47cd-a17a-a49480a40f33",
        "cursor": {
          "ref": "9430fc41-9b76-4380-9380-6da6fa214994",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9387ffd3-d7f6-4cd4-b8c4-91887a0e38f2"
        },
        "item": {
          "id": "d67f5927-5903-47cd-a17a-a49480a40f33",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d67f5927-5903-47cd-a17a-a49480a40f33",
        "cursor": {
          "ref": "9430fc41-9b76-4380-9380-6da6fa214994",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9387ffd3-d7f6-4cd4-b8c4-91887a0e38f2"
        },
        "item": {
          "id": "d67f5927-5903-47cd-a17a-a49480a40f33",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d67f5927-5903-47cd-a17a-a49480a40f33",
        "cursor": {
          "ref": "9430fc41-9b76-4380-9380-6da6fa214994",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9387ffd3-d7f6-4cd4-b8c4-91887a0e38f2"
        },
        "item": {
          "id": "d67f5927-5903-47cd-a17a-a49480a40f33",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "bd1dd603-b77d-4868-b9ec-b33ec7d8780e",
        "cursor": {
          "ref": "06459950-9d96-4263-adae-7c1d897a69b5",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "63a7a6bb-e50c-40d8-9677-e6d460339a72"
        },
        "item": {
          "id": "bd1dd603-b77d-4868-b9ec-b33ec7d8780e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "bd1dd603-b77d-4868-b9ec-b33ec7d8780e",
        "cursor": {
          "ref": "06459950-9d96-4263-adae-7c1d897a69b5",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "63a7a6bb-e50c-40d8-9677-e6d460339a72"
        },
        "item": {
          "id": "bd1dd603-b77d-4868-b9ec-b33ec7d8780e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "bd1dd603-b77d-4868-b9ec-b33ec7d8780e",
        "cursor": {
          "ref": "06459950-9d96-4263-adae-7c1d897a69b5",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "63a7a6bb-e50c-40d8-9677-e6d460339a72"
        },
        "item": {
          "id": "bd1dd603-b77d-4868-b9ec-b33ec7d8780e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "056ef593-0e36-444f-9e9e-7e267d90a6e4",
        "cursor": {
          "ref": "0a43a44d-31f6-4a4c-9229-22196c43fc06",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7b84355d-ace9-4958-95cc-8f69b4babea5"
        },
        "item": {
          "id": "056ef593-0e36-444f-9e9e-7e267d90a6e4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "056ef593-0e36-444f-9e9e-7e267d90a6e4",
        "cursor": {
          "ref": "0a43a44d-31f6-4a4c-9229-22196c43fc06",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7b84355d-ace9-4958-95cc-8f69b4babea5"
        },
        "item": {
          "id": "056ef593-0e36-444f-9e9e-7e267d90a6e4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "056ef593-0e36-444f-9e9e-7e267d90a6e4",
        "cursor": {
          "ref": "0a43a44d-31f6-4a4c-9229-22196c43fc06",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7b84355d-ace9-4958-95cc-8f69b4babea5"
        },
        "item": {
          "id": "056ef593-0e36-444f-9e9e-7e267d90a6e4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "47c4edfd-7372-4b8d-9b00-ecb52129ecc6",
        "cursor": {
          "ref": "a9886fa2-1a6f-49ef-b462-89a7641ddac2",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a841035e-807e-48ee-9ef2-530927cd32d4"
        },
        "item": {
          "id": "47c4edfd-7372-4b8d-9b00-ecb52129ecc6",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "47c4edfd-7372-4b8d-9b00-ecb52129ecc6",
        "cursor": {
          "ref": "a9886fa2-1a6f-49ef-b462-89a7641ddac2",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a841035e-807e-48ee-9ef2-530927cd32d4"
        },
        "item": {
          "id": "47c4edfd-7372-4b8d-9b00-ecb52129ecc6",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "47c4edfd-7372-4b8d-9b00-ecb52129ecc6",
        "cursor": {
          "ref": "a9886fa2-1a6f-49ef-b462-89a7641ddac2",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a841035e-807e-48ee-9ef2-530927cd32d4"
        },
        "item": {
          "id": "47c4edfd-7372-4b8d-9b00-ecb52129ecc6",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}