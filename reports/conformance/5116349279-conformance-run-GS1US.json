{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b4df1f27-354d-426e-9512-6627bee1d5ff",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b72159b0-6562-4930-8b2d-96f12364ba85",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "27e1023b-f8d8-42b1-b1a9-23ddd3776f1f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d83778b2-3a34-4274-84b6-dd0d8c9b49df"
                }
              }
            ]
          },
          {
            "id": "ad8347e6-a4ca-4b0d-bbc5-0fb155ea41ee",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fdabf6b7-4fcd-4eea-8c29-145a9829a902",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b638c84f-8ac2-40a2-8177-642a4dcfaad7"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "58fa5522-6b9d-4c2c-b909-7e63a4471dbb",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d99f9fda-3068-401e-bcc3-e00451efc712",
            "name": "Positive Testing",
            "item": [
              {
                "id": "755e67b4-69b8-4966-9919-0778ca39bbe7",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "218834e7-3b71-4122-a17f-6257f815638d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "537ca19d-6776-42c9-b7c9-0a2ecceb74b6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9393d97c-ff96-411d-8915-979b0cfcac1f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4d39042b-7500-4196-8ecc-4fee60c3d4a9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ab6cbf8e-c70a-47b2-b2b1-b5e7e89af009",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "00b59e8f-247a-4b27-9232-5771da251219"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ddfef576-922b-4405-bf30-56437e0e696e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3322c1b7-4837-4af0-9ecc-f7f67f2f2a0f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "53b2b1d0-032c-4c45-8569-923b56a3d27a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a3f61ab1-775b-40d8-a249-ac9d704a8839"
            }
          }
        ]
      },
      {
        "id": "32872177-8f8f-4dcf-9f2f-b65ebb06acf3",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b328bb75-f39a-49a7-b00c-1ed6279f1f92",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5b55468e-139c-4316-afde-20e17bdb5c60",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a5e0401e-4d20-4311-9d3d-ee9c3a61521d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b4fe5e-c61d-44ae-8457-c2f3cdda84bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff6a62dc-84af-4d63-9ce5-33267f09a7a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0b072a-3766-4494-b40f-ec35ebb043ca",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e655d6-47d7-4aaf-b2cd-1258b09a7545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3595d5c5-e2d6-4507-bfe1-607062ff62bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187d428d-2fb4-4f21-961b-737bd9797c2e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de734177-c66b-4ee9-bdc0-10bdcb6db03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21703a27-f42f-41c4-be16-2be02d7da16f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2cd7bae0-68dc-4368-aeb0-c3b983046959",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "91ac6e68-0cbe-40af-a9ef-cf87835733d1",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc5816a-3bfd-4a6f-a94d-db26754644e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7151bab6-9ea1-4a43-a856-f2e9af548af7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00046de7-7b7f-44d9-bca1-0da3831d6994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36448f42-ce28-4ddd-99a2-bb1053619d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021b83b3-ed77-4427-9626-9c5ebfed3183",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28590106-077f-4c98-9116-c7b0d4d4dcce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6cf0607b-cd29-4585-89b0-0ca8a0ef4531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6cf5bd-bd82-4c85-b74a-1ed8d1e78374",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c36137fe-6a55-4a25-9e60-7450e2fac57e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1fdea46c-90be-4694-865e-7e2795d43e2d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0a8a30f9-9e96-491e-8d08-a00648f5fbac",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ce48a57-8b24-4f5f-a4b6-dbcd0b6ba8ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ea8460ac-9f2c-4b36-b5ea-36d0487d2410"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a925c96f-3bd2-4dff-96dc-9001ca0a5784",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c8b04a16-bfd0-46f0-bbc6-0f8135179d7b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20fe8fc0-fdc6-497a-ac2c-038512ea450b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b5dca685-e64f-4ef0-8121-01eb05f165b2"
            }
          }
        ]
      },
      {
        "id": "cd9ec878-57cd-4659-b490-280a7b101a13",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "dd007105-b53e-4d89-bf5b-57597baf2bc4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b740266f-8625-4ef6-aa72-c66336161e25",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "15ae8ff1-f1e2-4417-93e9-0c9693afc25b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4585fd-11e1-4530-b855-7403e9790316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be6024cb-052f-45a9-987f-41aeb179c9d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd03eb2-731a-4c99-91bc-79c0fc26f7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2c5a2bc-c42a-4574-abf2-e66bccb2b308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f31768-5c9b-434a-9db9-65c827b941d3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8f178a-0cfe-429c-87f7-e55244286e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29e861f8-dd7e-4293-9c2a-8942124d274e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa34bba-9ee8-4cd9-9ca1-5d4bec2dd4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bf56688-ce49-4488-94b3-b29215162d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064d7f38-624d-48df-b2c8-c14bc67db4df",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62bcdc1-6b54-4273-b0a8-63b5aaf594b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7bd10b8-95d6-4cd6-86af-97d0898b6d0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4592e3b0-3af9-4f9a-a0b8-f3eb4eb14264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8b72ba4-1f25-423b-9b0e-1cd0572acae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88df4e41-295c-441c-981e-a55962043c00",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c35e98-d085-4ee3-8f10-7f7fb3cf611f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c721a20-dc79-4e7b-a44a-5cadf7e41a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f015b8b-1e46-4dc2-8bdb-0b2b0b571bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24e033bb-5bee-4340-beed-6b96d9ca7485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac3bf62-bc4d-4528-af96-1a2d9e1b38f8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b22bcc7-dfe1-412c-9735-684e14e0095e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fb35727-8eef-42db-99f6-a65e39648438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37b0cf4-d5d8-44d6-98ad-6ea2d67f39f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f08713c3-517b-4f78-88fb-102c87b3ab9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e391aa18-695e-4bbc-923e-4a0e7afbe515",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c684f47c-a2cd-4ca1-a9bd-429b4b4c2bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d070afb6-9f3f-46d8-a9bf-b2b1e3143fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d94eef4-62d4-4382-b5b7-0a5dcdf2d855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9641faf-474c-47dc-a2a3-f1ef0eb507d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59199669-d3db-48f5-9d6f-30ab79f15f83",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ad8783-81ba-43bd-bedd-47085eaa024f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10ddc606-6565-4843-87c6-9f74ad147121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2ea748-d2ce-42e2-99f8-614770994eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "851046a0-1b36-4719-a422-409eec0467b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94efc8b7-ea53-4d7c-b8e2-b8f83370546f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c1f0f56-4852-4fe5-a3d5-f16e30c0878b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e8c205-e668-45ad-a281-415428694d7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccb1a74-997d-42a6-b5a8-3856b94c8e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b2c0488-eb8c-474c-9785-cb0d15778cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35ff19d-224e-457f-a26c-afa547aeace0",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cde4fa2-9390-4490-988c-2df721c0fe06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfd65596-0638-419d-86c0-ba269e903828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe797fb-e61e-4803-8af9-3f8fbe8a937d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ace44552-210a-43c2-9634-154a9a2675c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f237e1-9e7c-41b1-8f28-1e24903a2a8b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2978353b-3d8d-4d62-9421-341f00d87c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2476c9a-dc08-4bbe-9253-9fd71361b565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1fbd0d-44f4-4c8b-8792-ecb154bc9a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16156c2e-190a-4661-927d-c47cf5bcf001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c429a18-d1b2-4b50-95ad-cc0b8f73f3c1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "861f4f60-8e75-4421-a1df-55bfd1bbda3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3c9ed2f-a300-4f1e-8cd8-d547e79f346a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5484082e-094e-4415-95c3-79d0cdc8d344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "306395b8-2381-4873-9723-ac9c9ec57884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d12029-6bad-4e6f-990f-7662ba16c251",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a6fbe0-ac4f-4e0e-ac10-757330f8751f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "518468a9-94cd-4f9b-ac1c-e505198cb2f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "017e7b1d-4ee6-4b55-b3bd-547f5059410e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e9c8294-4ca9-433b-8123-e76790d6ab8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7bfd96-8147-478a-9ad7-6dbb097f551a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faef3da2-dd60-4151-b7f5-e5a7a0831d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c473b7cf-c914-467c-a727-a5f38f596f87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393f1302-d2d7-4b27-ad4a-955d3ab533d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c451d6bf-5e31-4c0f-ae03-e969bb105147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5257efa6-6f7a-4b7a-80ce-9da00d366de5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8a3c5c-8498-4868-bde8-e088deae047b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f252050-78f4-4e35-a056-2f1347f70367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12fb65a6-d197-4113-8df4-af8f13db2364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "edaf1ece-ebad-447e-b7f7-823cac41fcd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423b161c-4046-4e41-9d7a-8ae03458277e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "680d54e3-ebdd-4e05-94d9-ed60c018e148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d8e79f-ea2f-4d60-b8d9-ea1a8d21a48c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3678aeb-7ffa-458e-bdbc-8279554000de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8218d1ce-46bd-4a5a-b9ed-01419187e141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764f59c7-6d15-48d4-b616-37b38ae0c73d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35325b58-2d75-49b9-85c5-f3fdf58bd9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60edbb83-d9b7-49d7-82d8-1de8cb28975e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e9f423-5a2b-42d2-990c-ec634ad02fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb5492d3-b476-400c-8ed9-7f57d5e228d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eefa6fe-9c51-49b4-82de-7cfdb882a47e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee212dda-c29d-471f-8e54-9b0024c73605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da47126-2794-4ff3-bbde-41a95161cf29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d76509-245f-4be6-8eda-906b10638f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eee223b8-91af-42a8-b3ac-9632ea6071d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b62b7ba-061b-4e20-ab6a-74ca5d448cf9",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "980a88d1-6c5d-4aeb-bf38-36dd41ee7b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2aa78ab-61ad-4c3f-80bd-8422cac0bc82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf4f53f-0f37-4228-94ee-0f597ea19ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "321a0344-155a-4174-9f70-93f67e1bac58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc1aad4-8fdb-4afa-9311-72d1ec4c961b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020479af-f049-40f0-9b54-4dc5c0565c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e0e520-0c15-43f2-9e1e-11f6ad54d3df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa29819-6e33-4eff-a0ba-4d63c592138d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b4c934c-52cb-4486-a9a0-bfb0fd026851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a0b42f-803d-4201-bf87-6c22b8104f8a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9293f1c3-1ba7-4181-9a06-7b296297b0f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab7d8f26-497a-47e7-aa0b-f5b1cb3ba751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de0f409-cea5-4481-a8a2-c55558fa5ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e912ea63-a8bc-4042-9b3f-9797ae1fd67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a8b93ae-3ac1-440a-a8d6-4eb26c88ea79",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "099caca0-19f0-4ed4-ab9e-06765015dee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5caa8694-dc9c-47b3-ba5d-33a65d3dd10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915891da-dae9-46c6-ba0c-a3ac7f9507ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "182bc09f-d9ca-4f4b-b8bb-00c1b2659118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63cc661-c10b-4bde-bfcb-fdd674a71060",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22dcd61-b00f-46af-ba0d-bdc9323013ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2710359-ddde-4cef-a1f5-3844693df8d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70b1e21-3a4d-4517-8cb4-c531c568f273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "02eb42de-eaf4-495c-a645-88003b8aa39b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430960af-513b-4de4-b1e8-417787b8733b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cac0b45-bdee-4f85-bf59-d03987ec4281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c0474c7-3e32-4e7b-b2e8-845d6120fb15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c2206f-60f1-4254-bdae-302ea7aa4432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fbc7fb3c-54a0-448e-a619-efd01d75bf95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44a4270-6c6f-4e36-b9cd-50e2dd7c4c32",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86f9a8b-2374-4de9-9639-d69085a3981f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2119dcd4-a318-4944-bd9b-608dfb1ebbfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e5b7bc-1176-4dfc-91df-82625b2d0a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "00b307d1-604e-41aa-b3d6-3288c1c178da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b601d0-3c0c-4c38-aea2-a9b9dc42bbf8",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8ad42c-970a-4f8c-b9f5-a3c31e9c0070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10cdca0b-a042-4568-8b98-e51083fc8fb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc3eddca-c0ac-44f8-afe7-b6ce5091b2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "01dd5561-3b3a-4f82-9f00-ee18f1d55fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1ad6a0-7e09-4a3c-8ca2-17ced37f64a6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3c46a1-bd7a-41d1-9a1c-b5ae91dc2cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfcd2edb-e5d2-427a-b5b1-e5d121dbc02f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5e63cd-30bc-4d71-b9ca-5113baf4301f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "02c293aa-dbec-4a09-88d9-cc41acf59d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331b4cc6-7ee6-4067-b616-2090130a5c1f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fcb18b7-0ae0-4f86-96af-237e67c684dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80f6adb-0582-4472-a6f5-fa24f4effca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0877c387-3f4a-451b-a49e-a44a88ab6559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "67f06730-b65e-464d-b217-db270e444298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0c10d1-d2a3-49bc-bc11-7c8cd3d93ec2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9759b2b-1d72-43ca-9d43-ac31bde03e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceddf644-f40b-4f9e-ad22-1c4c630c7ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af28837-0cc4-4bce-a55c-04b61944fb48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4d164b0-ab17-48d4-928b-fac63bcf0190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82836cd7-43ec-42cb-adbb-d04aa622409b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92943685-9e36-4e1e-aa38-13185b89eca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc41620-7f1b-4aa1-b9a6-144d3a118516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326b8ca8-6aa1-4cdb-b9c7-1fffc3e7091e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbdcc989-5a8f-4e74-b399-fa4425e6405b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ad4ea4-6572-407a-a11d-1bbd7e14f890",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e7f121-a087-493a-9050-e8bffc94d04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b880807f-38cf-4e3a-ba85-ab4d3ff78a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c5392d-4f6c-473a-b1eb-82b82d6c6d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b561f146-ab4b-4e0a-9667-015dc5237b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851953d7-3443-4612-adda-9aa4928ff69b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5830f177-f3af-445f-9442-2924e03104d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3749a358-6578-4729-adf9-35e56e0e2b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1fb88e6-2950-42be-8af4-fd7c1906bbf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "29407372-4414-4c11-b8d8-78fa2e62e567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6915af4-7615-4ff2-a29d-2b85817e73d1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b3276e6-5e54-445a-ab5d-826cb68559f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "620955ea-f09d-4b99-9e18-1f8d9e680995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a23e91b-92ca-4427-a824-26e2e5566eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "251d3ef8-115c-4820-875e-212a673bea2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c2feb1-8a24-4204-8873-a53eba55f18a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fbf68e1-0d65-4226-a23b-69766c1f9cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59ada0d6-61d8-46fe-9de9-941cc5845b07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02273c8-4978-4d48-b04f-7ce9994179d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ce51e3-f650-4fdc-a071-3ff90a5cbc9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837f8ca6-88e7-4861-a71f-c59c11eed086",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b22f80f4-f5c3-4168-8f80-9244d7994ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17aaf2f2-8ff3-4950-aa03-48ffed9d7fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43caa368-0392-45a5-8925-1856d8fb344a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1ee99cb-b4d4-4e37-a615-5be3e6b550b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2b00f9-c720-4cdf-b01d-660bb1ee7792",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6700f9f5-66c7-419c-81c1-d0808aba9301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c822df8e-30ee-49a8-bbc1-4fe4ec1d76e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a625761-1626-4b2e-b998-1aef1809a955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "bb4fb8da-89b8-4ade-8473-8cacdfcaecda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7a8ac3-b69d-459c-aed9-f3894ec1b915",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14405073-465a-413a-bd3a-d401a221d6a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3051bdd0-8b71-41c1-8b9a-2d6e929af732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907253b2-b7f2-4570-b81c-f9abf66737e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d51fcfd3-037b-4d8a-b7e5-a9c1e710f8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4afc821e-9914-4c91-aabf-cc9feb3673c2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf46ad78-62cb-46c0-9bab-702d583bbfaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b7d479c-49b3-41dc-8bfb-1d183ada6ece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa31930-739f-4ca8-82ca-0802f2fc3a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9588c5d9-a83f-4e1e-8142-c158edd3c82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1cbd873-871d-41b4-b11a-12af875d35b9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b094a376-1f2f-4903-aae2-6e2c66a944d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7614d046-39d4-4dea-9785-5d1fd60078e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491b43ff-2c82-42e6-b1a4-d8f13370877f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e3b42d0-998e-42b7-8373-f770ddab1781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ea8f7a-7b6e-4a49-9087-7fe5b2e4623b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f0f37d6-0826-4643-b62e-b1d23a19e8f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66db3ed-a5c8-4f56-8d0b-5876f27b62b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f679cb-a043-414b-af05-13e74c0fa884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8bfc6a4e-8d50-4f5a-9208-3c5d703310d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7936cfc0-ee85-46ec-b2fd-461c771478e6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f7542f-bf55-4cf2-889a-df645968cfc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9284548-7813-4e4c-bde3-4d7087cb562e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4323b2-baf0-4c9d-9c6a-c40fd158e197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bd295a8-3384-45b4-bc28-6b1c52637c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30908855-412c-481c-836f-e7d7da3e29c6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72758b01-bd31-4f87-8bf6-870a747c817d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e450ff5-b1aa-4ec0-96ea-28ed9f09c9b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fd54ea-f52b-4f05-b5f3-96b0973c7d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "19000c68-f4db-467f-b048-6aa3474fc43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37333c87-d9d5-4145-8a33-c241b7be1b86",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb45eac2-8996-40ba-a7f9-610fdacf53b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15dccd70-6493-488d-b8e9-663623d5baf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1cc0fd-8b9c-492e-b1ca-9510b0374c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8cd2d405-1be3-4d67-b536-f1b9cb259548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c81af9-08f0-4aa9-9942-79bacadbad82",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a71a60-0c70-4f1d-9256-e142a9806559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8cd6348-d201-4156-8b80-7f429c419204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee75a1fa-15eb-480c-8766-b4a7bd2105f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "21c5431e-5396-47c8-ac86-30f402ef8bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6f4aab-305b-4066-8ec4-ab3280fd6795",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72461f9c-4474-4e29-a864-aa72308fd42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bf38e7f-b1c6-4375-9f12-4775f163e43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbaff9be-a266-4a88-aae6-72aded2e3341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4541ae66-2506-4122-8e00-bb5a527325bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9d0cf6-6f49-441b-b4ef-34dea3a6a2ec",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc05208-98a1-4235-9702-38d8126597d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f686c58-5a2c-445f-8473-c6564edd9091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09a2653-eb44-4022-a8a9-94c11c1fad9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "597a6252-95b3-4c86-b9e1-e635a444cc1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb4a33d-dade-4ff6-9b52-12a4c2011bb5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c2919b-16c1-42ac-a328-32dc862150e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9323314-33c9-4c08-9a2d-361fefe24517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35cd7cdc-171b-4024-9cab-d52c1c662e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c8c9a3c-bd77-43f5-8c76-3c9de4c85069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488aff39-7bb6-4397-9dc2-783fd5a1b0a2",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47adf59-099b-456d-a5ef-06eab2a428d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ac33b43-2a3c-4914-b06e-78cfc261fcfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70dfadc-32b3-43b9-a98b-8027516e8ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fbf3176-5749-4338-8ce0-d1cc55d43eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ffd5819-ef90-417a-810d-5c5eec4151a8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "535d6309-6121-4dd2-98a7-ef539c7bf7ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfdb1353-3580-4c03-90cc-8d1ab12a86a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6819c8a-6fc4-4ce8-a429-e17c67a8fc1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "abdce7b9-4429-4a55-823f-8e68cf02b259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115b0a51-9187-46ff-ace3-6b0fc12b7078",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0834725-4ece-49e7-8eab-7bf5dc02fac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e26c6ae9-fb35-4d93-bff4-30de3b4d5a32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d514332c-92fd-4601-8a9f-efc5e14ca5e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "35ff5edc-00e0-4996-a24b-5e40f9fef08d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "166d07f0-88a8-4ef2-b72f-5ce2698fe49e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef36ed37-2341-4ba0-8fd8-3c00f0c1ac29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "012a3b08-beef-437a-b2cf-debd80f9a099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ddd184-7a53-4d0b-9e41-47e6559ae982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d9d46c5-247e-4b2d-9ff6-b17a87909533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df57997-6833-488a-b28a-a5123b049cb8",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5110bb6a-6063-405b-a113-d3e0773874d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ceb2bb8-09a8-40a2-b87d-373af8c71f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28cead9b-3505-433f-b5fc-cd16f6231187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ecb9602-28c3-4c06-9967-409d7a677012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9258c790-7081-40f0-b4f8-fb40adcb0c55",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6038ea-a61a-4eda-8b90-04ed80ae5789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "190a0d9d-3907-4a3b-b61b-4b512e68e9e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd985bb7-cdc4-4666-bd7a-c03015994d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb1fd2e5-4e92-4cbe-844d-588f55074356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f69ee26-abc0-4a9f-9155-5934120e753d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "715d6fa1-f8c6-47e7-8817-e22dda60ac32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb21af2-c33d-4800-a11d-07f1bfb4430c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9042518d-5554-44e3-af9e-4e2cfe4f800d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "54973661-be7e-4d3d-8498-39fed89d15a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c489b8a0-3718-4016-a0e8-ca6dfe431987",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41346d8-24b9-4985-81c3-a193b66ed2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d1ce69-8652-438f-ad16-53b08ca7a46f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14576cd6-11f4-4288-ac17-704aeac516cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a0365a5-ed51-455a-be6a-29ee86372432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42428a74-1cec-4b8e-8567-e2d797d0c8e8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ea93c0-666c-4f11-b26d-d362a0d4fb4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2848e4c4-69cb-48a5-b08a-b9326fa5d10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd37fc3-668b-4de6-9f5b-5ee6330415f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73613ce1-7dd8-4270-b139-704950f6d3b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539c7fd8-4d44-43c6-9404-ecd1808dac70",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5520be-c141-415b-9956-a50928d20b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b0ffd3-43a7-4655-924a-b7a028012097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "037e8d28-1796-4a5a-8e2d-9e5760e33928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ccb9a0ba-faf3-451a-98c3-4288a3d58d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98511383-609b-4bbf-96dc-40c8f53a62bb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9498ccff-1892-4df1-b83c-9430b5432f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e62d28f-16ed-4894-895f-8e597afdbbf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8627e7aa-a6dc-4221-bf10-4580fd29c6ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4859462-ddc0-4a6e-b762-6a71acbf6723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e72ad67-a904-4444-a50a-223954830f91",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f3fc46-80ee-4aa6-a1dd-7d7e0e5026c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377f9751-1870-48aa-a16a-ba04272d8136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4540791a-3995-4de4-b999-2b0c9fcda8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e0c7a08-e495-48a9-a968-f7ac4b053fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b355c4bf-60c3-4680-864e-623ca5a86bbf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15093f45-2bbf-47df-89da-83b0902836ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1422c4a-adf0-4f5b-908f-7f858e68e574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8173c63a-d61a-488e-a816-6fc902025910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b121584-e485-478c-be58-9f203f889821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fefe704-5245-4d7b-9895-f0f83b18cd1e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a263d1-6878-4820-94cb-464ef6749b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e0fca34-49cc-4d10-8bf9-232927f2d47b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a603f314-66b3-4c9c-bf42-66842bc82c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "034e61a9-14ca-4427-bd99-c2f1750ded10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202c5dd5-bea1-4739-8470-ab95b3b67758",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "348ae7fb-fbc7-4580-a156-9d5246b06569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab655e9b-394d-4e14-a36d-a2acccead9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c14c38-8317-4efd-ba73-f0611f154215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ceef0116-9184-48d0-8077-1fe368265019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f561effe-d614-4353-bb74-cc9ed95d9bca",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "519f9f0f-b052-4d22-87d1-f83c760f7b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20b20e65-46b6-4843-974b-29e5d1abe956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18a5370-7b75-439e-9dce-1b6bf7721b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b15273e5-a774-4553-8d25-07aec518bd31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e98501-eea2-4adc-8cd5-0fa5630296d3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d3f697-13ee-45fd-9c54-e7fc60935386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f01686-aa0e-4b75-bb30-45f15a4cb61a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d46871-8594-44c1-b196-3755a7f304b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b81a0dac-0949-4ebf-8618-d11e70f27067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d21a0cd-d561-4ff0-a0ba-d19f943f958e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8eba151-9d8d-4797-baeb-614fd65b9ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "150141e7-2935-44ce-8232-dcf88c5c4d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13258695-fc3e-4b00-a3dc-9511beef722c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b6f574-5268-4588-809a-5a8651d86504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5add808-9edc-406c-bb37-2555902a36e7",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "266e1972-22fe-4aa1-bb27-977fcf930430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8732fa88-4cdb-4f89-b331-ad4873512448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3094f8-46e0-47ad-9ca1-24ab1a0b2f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "41a4d2e6-0ebe-4f87-b550-255b502d8d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c8c82c-dbfe-48c4-b8bd-689a9c7c4c93",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "788089c0-cb9a-4098-bb0a-3a2624e0b217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3edadbe0-0e92-4462-9539-d305afcdf839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91502197-2e82-4061-a162-4927c786f670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d78f5458-5d30-4232-b455-dcdbea782a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead93736-43fc-49c0-a573-bc4eea0b8e5a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5be3d9-b4be-4494-ad56-3a85cd054fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "003ce7c7-5907-43b6-9d16-64c86bc9b4dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c864bd7b-1a0e-49fd-a25d-540ef68c301c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e883086d-5208-4807-9dbc-dff954c27bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c3f844-a175-4955-b8e6-f18cd42b1862",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2030f9fa-c629-4877-a122-c9f0428c8a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1166b91a-6222-4429-8050-b00f718e2263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53326b9f-eaf1-4673-9d11-5dcbc6f91fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3624a621-1a73-477a-bb7f-0cb94e9b8a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278b85bc-7456-4356-9b86-2333ba9a431d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bccf868-a9a4-4cf9-a813-e6341aee58df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf7f4c1-5939-4fd5-b1ae-0015ccae6ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cdcca40-e67f-4152-9297-016f114670db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "340018bf-27c9-48f4-a0cf-9a8aceb37df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db6fcfe-6dc0-4ae5-95d6-e49e1856d549",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7f4d62-95ff-4141-94b2-e87f7d655343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "804db12a-7bdf-407e-ae18-6848e8bee8a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6247bdcc-33c8-4511-940d-f9fdab40a045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73898f88-8dea-4602-8aa6-d011e76b272c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605024c5-3a05-40e6-965b-65e9592c5418",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3302fe6a-bea2-497e-9d7b-7a646e28c991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0b2f746-2c52-465a-b37a-8f7ed895043d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e07b38-f4b0-41f8-bef8-1ac863677df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f669df76-8602-4244-9337-7afb5fc0e7a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144f6fb3-7498-4bc4-a10f-36918a9c0b01",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf4fcab-5c2e-4f67-8995-35698ff39083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b578e37b-0185-450b-ae3c-66a1adce44e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5458b80b-f340-4a6d-86b7-ddf9dd925d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e444854-2ab0-46cd-9d7e-ae251fd48078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee1c5a2-c54f-4e3f-97df-df5500e8fefd",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4d70ae-bcb6-4031-910d-7083494c2c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7882064f-99ec-4760-9d94-763c678d870a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb415714-766c-427b-a0dc-aace240fa87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b902ffd-969e-4340-af39-9feb797458fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a40f8ff-e18f-47e6-830d-90537c379998",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f7e7aa-45e7-494d-857c-e9e00848ee63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46205fab-e8a0-40b9-8e84-3882fbbac987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da5c853-590a-40fb-9481-5752af70cdc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f60c34d6-a288-4790-8ed3-b4d67450235a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd190063-78c9-4d09-83ef-11cb2157bd90",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5e69b4-010e-4dea-8e7a-54792e6ee64a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1fc34b0-7a76-4897-b665-41dba496c0f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa704db-79fd-4def-b1f0-ffeff1b500b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2712c367-c98b-4d78-8742-4a1a3b0a2274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1cf9e8f-e489-4218-97fc-36973c934502",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6411f190-4e4a-4fc9-ac8b-97faa4497274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94ddac0-ac85-47f5-b4ed-ef6caf69af79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6fd27f0-26eb-4cc4-92f6-757f42fcf5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "785c45ff-778e-4f39-8bcf-b9f830611e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac36601-0ee8-452c-a61c-258aa2bb1588",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e34f346-78e5-4bf4-b14b-4a7cb5e7ed24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54d77653-80ac-4328-996c-3c3d2600c2cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0720034-7872-4b99-b2c9-839eaae559d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "513e11f8-61a5-4a7a-9977-63a5309c2a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128f2971-7de5-4626-868e-9b68cc780c36",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4d84c7-9ebd-41ac-b9a6-61a35daad01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f764d737-9570-4dd4-a375-af036b9246e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c797fce-2e2a-4366-a72a-c74112fc8d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b07e48-3cdf-494f-b393-a8dfe4ce1d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23475198-2848-48a2-bf83-c501d7ef8c3d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "106a92e8-31ff-499a-a8d8-3dad8989bf3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9899155a-bb87-4d5f-8790-9648d4f91d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a71509-31d5-40f4-9a57-fa464ae5a593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "73957891-dc5b-4d99-8129-61781e3376d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff34ef4-df5b-455c-a09c-3b4d3184a6c6",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed60bae-b4d5-47e2-9085-ba2a8aaec601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b940d30a-797d-41ee-9f2d-ef5b4ae6f48c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db91e911-65c1-4a17-8a8f-9913521ec912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4850de63-7081-4bc8-8712-0bca5f2138aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d7ffdb-d604-4602-aef5-0986c0ef0c48",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c09dfb0-4603-4714-90ea-625d7af8d25d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f1bd90f-de74-4936-bab2-38038dac37ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d83ccd0-970d-400a-a5bf-6a0c8e2444c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb0d2b2-8c0c-4421-bd32-76c6b180154c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ebfc204-c06e-4a9d-99d2-e714858f92e7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f202dd02-4155-417a-a550-fe252eb936fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b096de27-8a8d-4ad6-91e2-2ceae5d9a635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50dec6a-0b77-4f2c-9ea3-53cab0a89be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad0d160-c6ba-4f10-b3b8-d8699dfba935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9e182e-1747-4ece-bcdd-c4c01b8b5076",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "853027fb-10b8-4d5c-ba0b-4f7a031bc676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf057900-08a5-4d6e-8b3c-338c817f0891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd839ca-6342-47a4-822b-801773bcb59f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c12b8aa-e4c8-4b53-b245-94f78af3be80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33972487-c2d6-4d62-b183-fcbfc0acc7e2",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae19d0a-ea21-4e51-a126-51cf7c14066a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c39c4cad-afa4-4a89-9b2f-110a367812f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f46cfc8-6e0e-4956-8306-a7c7a35a82b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "082d6f73-2cdf-4865-833c-57ee2f761ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac43ffb0-42e8-463e-ac31-c09520e7067a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b0e098-49f2-42af-87aa-c4ecab1f3699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e1ca285-18be-49b1-8f41-39ad4ac29d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50fd1efb-d2c1-44b0-9d4e-7f8e21770c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e6d5a0d3-c587-446f-92c6-10f8192a3f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0decad-bf5d-4b20-8bea-fdff7e6f5fa8",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39040365-ccc0-4317-b8f6-f7a968e37306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "373c4f56-f7d3-4f59-bcde-aa1c8b2d318a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2665034-b40d-411e-b5ce-388c374d69f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf0da03d-7995-4e52-8560-d15a071f8848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef51159-b201-4a62-8161-6ae8fd25a297",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67560207-e8f4-481d-a0fe-c88935d22279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ae73b78-5e86-4a13-bbd4-06916f0adf6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb45c13-f998-49c4-ae79-3d4bb6e23de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f27aa903-f6d8-42e5-bfde-9effb30a3f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0280c88a-3438-43d5-a3ce-6f26693ad048",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc05dbe1-464b-4511-8d4b-9df7c62e4e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "470c7019-639e-49cf-9735-fc2231e33071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43baf911-1d4e-4f2b-be92-eaeecaa9b9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc411445-8d3c-4a62-87d0-dfe9e2f0ad29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d5d35c-e4f4-45d8-a239-bfdbf0bbfcd1",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d50776-d303-4bbc-be4c-f1a85fed514d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "922983ae-c530-4b8b-8fc4-e940aba7c2b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c76df05-c9c6-415e-bde4-1b3b391c15d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f727c3d-e38d-4dcc-93a6-5b43696655f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3151fc6e-2e06-4cd5-8de8-75d48cfb1bec",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d91875a-5839-47a5-a720-b9885bcfb4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41562b55-0092-48c6-b069-1a3ec89c8403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5e176d-12d3-4655-bc9c-1ac886001142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5585f4bb-10a9-4170-85a9-8a6c5a4b74be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f246873-3768-4210-8ca9-68263af2ae30",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5cf336-f236-426c-9e42-e7d0d9798113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39aeeb9a-eeca-4d1d-a08c-031ade552de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6aade9-b2d3-4063-b0d7-45f6bb135292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b504f5c-fc0b-49e0-aed8-31d8bc3b8c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d84edd-3758-4aa3-812e-d396ad010fd2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f6756b-f6ef-4c99-b052-056efdbd5a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "08ae1e72-7558-4241-81a6-ef2d2d1fe624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6bce07d-ce78-4d61-a37f-f33a549d990b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d764a95c-633e-4e76-a5d8-ed4638047a8d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d0b725fd-ad60-4b62-8a1b-2f076560e9e3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ac6ad23e-3793-4a8e-8522-cabdd8399040",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99e7a1b-c394-4326-9c70-58ec890a99bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d1e78ee-a8a0-4d64-b7ca-10e602e40801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1876a75-a1d4-465c-869c-9b6f377b9260",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d74d1a2-10da-4f78-a9d5-395b2c851f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83cfa99-06d2-4132-b1eb-b71e08c2157d",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b63b8fda-a55c-411e-9897-cc37bfd1b6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ff9a1cb-1995-4416-a026-0ae7732a2eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64113950-9bb0-474d-b895-40dd591c73c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b54fc8a3-fc8c-452e-8052-bca71453b6aa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df26a2e9-f791-43f8-b0bb-e0d7998a5704",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02698f1d-ced3-4a1d-8cb3-afb621563011"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5d44a43-bee1-48ca-996b-ad8a7ee4fe7d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2833e79e-89d2-42ab-a429-e46fb2f80503"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7c662946-1fce-426e-bb39-67b45c47b33b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f4ae68da-f840-4ebf-8c8e-492b35c16276"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3acf20de-8fd3-4b82-8f5f-491aefd8e826",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8f8fc4b6-a6e2-4586-b623-8c67ceca6d0b"
                }
              }
            ]
          },
          {
            "id": "dd8f318c-446d-4d55-a580-8325c03c629b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "abdf67a9-8d44-40e5-bfcb-7b91dd6c6620",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b682b127-acfd-46eb-9658-67f63f1b269d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "18036f47-7055-466b-8efb-2cfcdd6b659b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31873a4f-008a-491a-9ed7-830f74e1cacc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "72aed3c2-d008-4a1b-95cf-41142c6b67ae"
                    }
                  }
                ]
              },
              {
                "id": "07d9ce5e-3159-44c9-a202-1ea304d97258",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a116459a-677b-4f9f-a236-b13a7f3fb220",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "415a3a27-8849-4e2d-8fad-1a23f1744863"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b56e448-f8d0-4ced-a5a4-7bb5f10b5aac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2dc1ae0f-9b36-4eda-8bf4-b21f203cbf16"
                    }
                  }
                ]
              },
              {
                "id": "57ba15e8-8419-4b6d-9b05-620ff09859bd",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12e8698f-583c-4611-adb8-53fb11a19def",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "880fec3b-0eda-42a2-ace6-7ea78af04d0e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c65ae70-a058-4e05-b8b3-6557d30ae144",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7fc2c870-1818-4dda-b30a-b290c76d8da0"
                    }
                  }
                ]
              },
              {
                "id": "4c5b9c9b-db75-425b-ac78-62fa43b21506",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8882685-9294-4289-9de1-dbb8212aefbb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e86dc682-8944-49cd-9972-0357aac6938e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dfc0ddae-0224-4336-878e-e73d054676ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "cf405fda-8efb-42f9-a832-42bd2d7dbece"
                    }
                  }
                ]
              },
              {
                "id": "3d24c2d5-b8b1-4c8e-bac6-0a1450ba5461",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b13d4e4-3d34-42d4-b664-d1338c2c6ea8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bd4abdc5-1abe-4173-b01e-d17c807ff1a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8446cf5d-cec9-4368-be92-43aea8964aa8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e7f31f04-1a77-42fa-b703-5b35c778cd46"
                    }
                  }
                ]
              },
              {
                "id": "cbea5c29-fff1-45f8-bd44-cb35bf9b71cf",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f80cdfb2-e6e2-482c-a3ad-3955f871291f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e63e82b2-15c9-4d1f-86b5-5ea8b2a110ff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "555b2378-db83-4e49-ae85-d407cc0a393a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cfb8ef44-37bd-48e9-ae2a-33b1a5b0b888"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d7c7e595-1816-4f78-ba74-109fedcf37e3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e00e87f9-34af-4922-a14a-5a7d4e308379"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "74ed9b4c-df2b-42e4-b9df-de320d9f975f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e616c19-8f6e-4923-b047-4bc99b7a3631"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a69f7c36-1eea-443c-bf86-12147f123bb7",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3fadf2da-3d35-4dde-890e-fd47397593d0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "045c8269-c50b-43a7-b8e2-97f57bc83063",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8a37bac3-b6aa-4613-b285-da848892005a"
            }
          }
        ]
      },
      {
        "id": "9573e4e9-de24-49af-8ca2-ac0e95d9c978",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "dc4daad6-746c-4bd2-ada4-2ce6c045cbc4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "775e179a-d979-48be-ad05-c17986eae81a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "60955d53-cd7b-4337-860f-0e9a5cceddb8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "863cb940-8120-4bd2-a418-e3a4480a983d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc999ad4-bdca-4f15-a21b-a2350d39d6fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb17a84-f9f9-4fae-afb2-cd80e096b9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbe3aacc-d63e-4e5f-b954-61b06c62c7db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292a5dc0-e2b2-4ee4-8698-5411ece715be",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e927c350-287c-42bb-91b0-2f400f2f01f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33303b2c-2da4-4cbf-8e1d-a1e7d37cbd0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b4d9ad-41f3-4d22-b37a-49b7c201ebc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f96d7c8f-c4d8-4d7b-ac8b-05afbc3bf2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0297904-bd71-45bf-ad83-8452a19329c4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04dc168e-68a9-4d01-8f1b-684bc12b9d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "041eb960-56d3-4058-b6a9-67fda4a081dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa67bd83-e2d9-4121-8103-ccc64ef8e003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3f9b0ca-5e9b-46a8-a371-11f5d94e2088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfb2850-e450-44e1-80cc-cea504490d26",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7d887d-b870-4e13-a0cd-3daf4ffeaeab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ef246b-bf46-4f08-80cd-82831832551e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d1c76ed-67ca-4c72-8af7-f206ab60cda2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2aadc08-38d3-415c-b4c4-5688f78313ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2d4aaf-a9ef-402e-8eca-1c28d75ddf2d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f019ee4-8740-458c-8db3-52dcbc5766a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff9fff0a-2964-4089-98f3-772e7eb246d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd40eda-4621-4cc0-8f7e-0d81f7a7fe6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "15448bd1-7989-4c3a-ac2c-cd4ab33968f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5115b16-8ade-46b5-ac5b-acc13469f057",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79817477-c60d-418d-ab71-546566c68f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da155bd3-3682-4b5f-8796-98d74217fb29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f7ab53-65d8-4110-a87b-93e232ea5e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d319f2dc-d2d5-4544-98f7-75342198c678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e4580b-7cf5-4623-8805-c1f9d8d3400a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3e27cb-5164-4bd0-8685-4b9cc4956aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db9d6d78-0902-4234-a4c6-4081f45501a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba9b018-e4be-4df6-8f38-2c1d5c063353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "724986a0-587b-4965-a91a-6c35fcb90904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc668256-bc02-4402-a2c1-d1ca8fe74d58",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "310cc4e6-b7f4-4e8a-a6f4-e46827e99b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d60a56b-9f22-437a-afe3-0cca146266f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e44257c-3460-4329-a16b-64a787a80b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "62405a13-8a55-4f7d-bce5-791324ba3788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1bee33-60ce-4f99-ba30-6db081765794",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af7117b-1efc-444d-b7fe-c614b2d6cc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdb86e4e-03a7-47b2-af1b-921284fadf42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ae3536-1be4-4ef6-be1d-aea4cfd13a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4749bbf3-8c95-4f30-92ef-db2bdba9dde6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26120966-59ba-4640-b91e-d557a845e5a6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cbff3a1-d29f-4dee-9445-9ffeffaa3568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f6f746-db33-452e-849a-a78821acc0f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74c0640-1bae-4b87-a698-a9d16b5a7781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "83412e07-e13d-4f9b-97f3-896ce04023cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d542ba-674a-4f5a-b90f-368ade0cc1a7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f37c95-9096-4906-bfa6-97eb9fcacdd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08382d0b-7b41-4d7b-8f23-843e98274160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ccf9b6b-3a1d-4bd6-a295-f0588d3f5f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7cdbb069-6473-4239-9a1b-0589fa488f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa5430c-080f-41b2-b37e-a2e91aaf649e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c05afcb-84ef-4ee1-8ccb-2025210c2ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63e97bfa-8b38-4c33-a060-9181996f46d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31568ac6-de1f-43f9-a616-f16d7cd5af8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "070ce644-a08b-4a00-a76d-f8ee51faf2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1081dc87-b54a-47b2-a9b0-128c3600721d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67ab623-15b8-4ade-9807-f0ace4b9bb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5334ad8d-f2d1-4001-aa2d-92f4eccc0292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc38d5e-21fd-4656-9b01-7b367e3ebe03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5fbf9a5-2b74-45d6-8367-b05130ea9744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e44e2c-d1e2-4758-9cc4-6bc31e3e29f5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb539a67-5124-4b74-8a62-8ab60d300b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ac46ad-91c2-4e2e-b050-81416f7cbc15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a117d71d-46a8-4682-bcf6-5cfad2dd4596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f0d2823-a3c5-4c63-9e76-56583fa2349e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff57d9b-ffc8-430d-afe1-8f3c6e5f2c69",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14c1180-16f4-4cc7-a509-4a57b532a30b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03781192-917e-4646-822d-74a265984d87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1b8675-521b-4705-8553-9c0734c0645c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8687e376-f4b5-4523-8ae4-b71cb4c047a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad0b00e-0bed-433b-9552-8656a05aa078",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83dd048d-a5f5-41a0-9c11-5040bde6390b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9772f195-6155-4f38-9a36-a5829ff1c52e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "333ababc-d92d-4159-8ed5-4b27cac56f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cf7a289-6739-41dc-984a-09cc148b14c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a3164c-419a-4859-920d-2f79726895d8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5444aae8-2b87-466d-a4a9-6b39674f1be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b14841e-2ebe-4e39-b1c0-ab51c0ab04f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc097209-18ad-43cd-8f44-748ae6357e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ece43ca9-6b5b-4c56-9e13-7a5f5ef701e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf22b6b8-fe04-4899-bc0c-431b49145356",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8824cb0-1758-42f8-8b5f-c18739dbf094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d43322b-270c-4b65-b94c-f084032b6aea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08d7317-0cd3-43ea-81c6-8b4dd3e8a4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "987703c0-d5c5-437e-adbc-a2830be227f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c367c267-7673-4249-93e5-dfd5e4614d99",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277fe117-1a4f-450f-a1d8-a4f42b89cc71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d4c308-6a26-4c6d-8f29-f713d8b501e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9efb65-1101-422f-8c6c-6e6af8f96b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fd36069-e941-426e-ba85-d02120b0b702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c67ef2-8672-4b9c-a353-8fe5c959a30c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ec89ce-6f65-444d-92b6-90ec245694dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7eafaa7-6603-4718-9fc5-efcb46414497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6918c1c-0901-44ed-aa2d-388d41f473ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7052dbb7-4a14-44e6-aee5-ad856ecbbce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfcd28b1-25c2-4d25-a8a1-e01d5a36ec79",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f45761-2704-4148-ba28-1a5a9a8dd11f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "194c7a6d-2c88-45d0-9019-6715fbadcc6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447af143-f835-43be-8887-c67aa63f9c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93d7004b-907e-4c89-bdd8-dcc17fcb1364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9b8f57-3f2c-4a7e-a799-a783f2398d26",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb95528-89df-400d-9062-ded5c9e1fb38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9b2879a-a543-429c-abfc-11fd7b2ccdfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b441a7-3ad4-49ff-b6c5-e785e97071e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a234a4b-a285-4b04-907d-e64cdb46ecab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ba242f-9ee7-405d-af66-0c6463bca202",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea43c828-c3bc-4779-b0a8-bafcee24b08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc25f56-d559-4a6d-8e88-90ea7ee82745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4dae145-6b77-46ad-a794-797711477b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87776d5f-6edb-4773-a024-143134f80a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1b0a61-8e83-45f4-8369-4720f85b9037",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc5c219-a6ff-4425-9866-d4501548240c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26532726-1c75-47b4-bbd6-e285a7899518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9dc5b89-189d-43aa-aa74-1f4a5ce9bf10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2320770e-470e-4641-b6d5-a8155b0dfdfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956ef2a1-ccfe-4a74-893a-c64654319d3c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d2ac73-7ab8-40de-a092-93f21b50022d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05fcdd18-0c63-4aa1-9731-6206092f1828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30061df4-2101-4a82-b151-4f60cf6c551f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "773ad31b-ade5-4973-bd39-789751116e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeddaa29-55bf-4f56-9fc0-a9c3109c54b3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "229eca46-05ac-4748-955e-62eeb976489d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "950613c1-1151-4b51-b21f-00018a3cb0c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67d88c7-6c36-41eb-9f98-bc06772148dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f276157a-636a-4f20-bb5c-d43bc59d3c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "113e2246-54c8-4f35-a4f2-ddc28953743b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4076a980-0723-44e7-b1e5-9bc0bdc577c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71fed7cb-7927-43d2-811e-32d484792273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8c13b1-f72e-4d5f-ba1b-7a1220c65aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "097f5200-a81d-4afb-8d1c-42777e5e684d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28e6044-981d-47d1-9a6d-44938f890f7e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1947e620-36ae-489d-9a06-c6b0e8155120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20c9ebcb-7c5d-44b7-b685-2bb18cdb7c5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fafe36-4ee5-4975-a1ff-2196def30241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfc2a210-a006-4c89-9316-d9570da6ab59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4bce3c-f033-4a41-8e44-40965ac21768",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a70a3d-b01c-45a0-96d3-7f24b0720a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "852f034a-30b7-4e31-bfb2-476909475a6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdd8a55-b420-4c5c-9f12-7dfd8d75359c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3c908f8-6bdc-4780-a283-d83449df9125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6610042-dac4-444e-8d46-10fd788358c5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e28b3ee-7eda-43bb-8d12-23b98eeae66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "982b3453-9aa0-4703-badb-9e1739065b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4474db26-a88f-4495-8398-a79d5540c425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07010af3-55f6-414e-a448-e7e08cd0704b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ceb24de-e07d-4ed9-b488-f0daa6d8ab81",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace90d66-f11b-4034-9280-9154de758644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3451c24-1844-4726-a836-82f1afdff7bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79cfcbe8-9d66-4f80-a033-4b140fa7e138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b58e2f-9c4f-44bb-b148-c5e677bfc6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d5c5cf-8c74-40a4-991b-d8d16939fc9b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e6d4c9e-02dc-4995-8919-781d1a3a2e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66a1f84d-daf6-4eed-bc06-723f1304ebc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4139c5f6-0bba-4f87-b002-86e08c83c5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0612af7f-9fbf-4c2a-94ea-7c9f4458bc86"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1d76fa3e-87f6-4a33-8927-e6776a81f8d9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6a97fb37-2b55-4180-a1a1-9f2d5352a80e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734e36b1-b5ca-4923-bfce-19ff42d1b11c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "aae82298-8e52-495b-bc53-3d88d8709f82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6df91c8-81a6-48c0-8e2f-738768a65267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b07ea5cb-4f53-4fd3-b22d-a2f1a0430f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c49482d-218d-4ba9-b29f-fb69cfdff483",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8aa9747-5c97-4cdb-bb52-58370cb019ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ac107e0f-575e-4505-9f3a-e9133c978952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8282dafd-ccee-46a2-b299-ffddd8dbcab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29f2dca4-b7a9-45fb-bf2d-8e73dc80d5ee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c939ee9-76c7-476d-8f8b-b765b32df012",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4b1ab4b-c0d1-4a50-afd4-9c4c1798a5a5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4426a5d-3629-4477-b850-a2af803b23c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8077d428-b8cf-4759-b972-5180230ef077"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3fef8ef1-2e86-4c33-a92a-27a19407765d",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4cf637a9-6b84-40f9-b247-5b43bdb6f87e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "054434f5-8151-49d5-93d4-2752bd90d911",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a3664814-bc79-4b3d-9c92-1664ce1226eb"
            }
          }
        ]
      },
      {
        "id": "25542b1b-cfed-4989-936c-716673ea62ab",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "baf05387-e2ae-4882-8443-9d6a391d89e0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9eff898f-d339-4a6a-a033-4fe1c19885bf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "918a22a7-97f5-48c4-ba3f-44a8b634cfe7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2baa6e-190b-4eb8-bc08-5f27bfde0d80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "074a2f97-ee3c-4736-b941-51c8c7bc4543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db639648-982b-4a28-ae34-2d6ae2b7233c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "978e9937-5eec-41ab-82ae-606c3ec72e34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df858825-7601-4b86-81b8-f17ad2da149c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e42a646-852e-444c-802f-431007c8d3f9",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8bf9367-f90e-4b88-8ce3-28a8e1a88e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e79b889-86e6-40a3-ba9f-c09776c799bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6af8d3-1fea-4bec-bb54-229ab3c4608a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bded28e-c75b-4920-9b02-d505a458fee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbaebb99-0fb4-4eb4-8802-616156be6fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba703546-c0ed-438b-b007-93409c5c8dac",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61126b02-ec45-4923-9950-685f0c31d9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0bea13c-48a5-4602-9e76-2f93ca65709f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a428145f-ac8e-4c44-a2f0-5d6b35a92d94",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "384a0af3-75ea-45cd-9c69-5031967ca71d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70265f64-5246-4b62-a753-2db156a6a299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2dd582-a21a-4249-9d39-9a0bbe29ba81",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18d5a14-3281-4015-a6ca-b4cc034c5471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df577867-0322-4ce2-984b-53b2f6eae184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0325ff88-958e-469d-b781-e64f5e5ebc4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14adefeb-0cb7-4e9e-ae84-ac7bbfeec3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d75804-77e9-49aa-b733-2723937118c6",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10bbd6aa-b4ed-490f-8b7d-c8a96d19c480",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5ad3341-97bb-46d4-a654-ff61881ca4cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bec4226-b321-4157-b663-86e514dd5374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09d50961-483f-40df-aafc-e971da17c651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad0abb20-64ac-4195-b574-5737f4ae948e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228f35bb-632a-43fb-939f-2f0d4b2cca1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f3ecb27-de2f-4c6a-97dd-9060adc4eb29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf01ea7-82e5-4b8f-8c44-a1d5100402ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b04f6904-c340-48b7-bb33-5fa1cd3afcf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09778401-d61b-4701-ab0e-e5978c96f2cb",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689ba53f-f7f2-4755-bfdf-53eb0c5760d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e92b977-2b84-4d70-9745-67aff44e7cfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ded3d5c-ed63-4d2f-93c4-1440e4032a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c09f2c-00b0-40c2-b3e3-ac0004164854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310470a4-3e94-409f-ac67-0021554c7052",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e692bd4-c81c-44d5-bbfb-1b89c2b5e654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd0e4e2a-4c21-489c-956d-8105082c4ea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4503054-02e1-4c9f-a53c-14386b4e15fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4744bd11-d104-4aca-8d39-146ba5e99656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2534d3bb-5725-4291-aad2-4dcc592cbb4d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6aaf55-8722-484b-97e2-49d804f8fd9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1159eec9-b56a-4544-876b-fefff8d412a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc787e8-5e23-4b26-951e-abf151f45be3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50b39a72-a1e4-42e1-a26a-93c98655b4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bbf10ca-4e56-477f-8cf0-8c0f4a1c7cf2",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28bb2f96-5b07-4739-a95b-de9f34d51a74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71438a48-4ed2-4f00-91fb-b205b00ca6be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6dba6d1-0576-44a3-b020-688650cdcec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "debc5405-16b0-4970-adc5-f70a494567b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85130da-35ae-47c3-bd64-c9d399c35651",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1053d9f-c2fd-41c5-83af-be02ba5fa1b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce723884-ed71-467a-9035-43b3b5071785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b8d552-5eab-4746-be38-e9a77abe637e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35dc59ca-1b33-40d1-8a87-4179c6dcaf4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b0b2d2-347f-4ed3-ad71-c69bf40af886",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "201c448e-4294-4d84-8589-96cd0bf34a81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2856c300-0106-4103-a622-dceb4f617d78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c49c499-64ec-4aa8-836a-7167d15c9f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da8519a4-6591-4eb7-891f-a2de28f96a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "027b2505-b018-456a-ac12-7c32b44f6a37",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2ab6a6-5c65-42b2-af11-14eada0ea3ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d8252ce-ca9a-4f51-9d98-e104165277c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d772b2cd-d475-462d-90a1-c9218d36379e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "257b0f4f-1f26-460a-878d-eccab88a0c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ecd8a6-8f27-47b3-8900-9cb4d659eaf6",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16b34fe-503c-4389-864d-4469e733e480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de95499-0902-45bd-8c1e-62fa73eca0a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "accfa6ef-7747-437b-9530-fd31d1b6e91e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d125b5d9-64ac-4b45-b79c-6361c2e36edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1edb3329-9d6b-42d8-b2ff-c3a4a4b00e04",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d1f82d-82f3-4c4a-8c1f-ae9de761eef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c28b26a0-8cf0-4ccf-8e5e-d8abf1e8ed39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc15eff-b936-4dd8-9d17-efd1715a6a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82b3061-1a0a-44d6-8b15-c7ec481badf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc2d343-297e-4fad-b520-7e27e524b06e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87812fbd-6799-4be8-8de3-0a501e1bc028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3106aa79-a96e-4725-93e6-40bbddcd85f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "966e3b81-e251-4960-a647-83dd27cbd3a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72cf1c79-f2b4-45d6-a405-433e86e95bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45262863-4c4a-4e62-a64e-ef8697cd6bb8",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90943f60-5bb3-4ff3-95b0-a7f5dd0c6c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d4a5b31-75d8-4208-817a-0de6a744b7cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d3182a-2505-4043-9961-b44783b26d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e57de79-bb68-477c-8036-322774b46462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4f3fd7-4d0c-4ba1-ad06-801411ea8048",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae4f9d5-0a52-4021-a434-84137a56b0e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "296f168b-5a8c-4354-accd-035d2d21a209"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b236f1-b6ba-47c6-82e0-07050db994cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "598d88b5-7945-46b6-8e2a-497c8cd78e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca71787-1700-424d-a8f4-8ef55f15b69d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e832fc1e-5eff-455d-8e43-2a1e9e4a4757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b7b794-6662-4c86-9471-040b14a727a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba6b874-031d-4b79-8c17-372621ed7347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42fd2cb6-5f53-4c1b-8a0f-f61263dc95fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab00cc1-200e-4b7c-837e-383a590bbb77",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "036b6a76-6720-4332-a6f7-96c92376af63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8ef075e-d31f-4555-8274-74c4367b9e04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a626d6f-f168-4d21-a44c-7255f4cefbd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5934170-1ba8-4d7b-8320-e1de955dacfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2961eeee-8cbb-4b6b-b7c5-22d7dc057c5a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e620f1c-0745-441c-a9fa-13096fa5d43c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23a56858-952f-4742-b14f-9474eec7900d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "844c690a-f45c-4457-b8e0-034750c64666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de965c72-c14b-49d1-adf2-8887dcc79796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed7c52d-914a-42bc-a469-3325e0ff789e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6b1aba-609d-49b4-9cee-cd5d47362ce1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2acbda18-c1ec-4c8b-8974-ff74e5b207fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e6f168-0245-4b97-861e-46e9c052cdc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76dfb421-0a31-4c8a-9090-d65642b0416b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebcf017-a434-4cbf-8fa2-198a08103e63",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a266fb4-564b-45fb-b321-71051b65b504",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28bcb90f-e9b1-4426-81f2-89e4c637bdd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3a38a7-a0ba-4439-a6ca-f2753c7e4f55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d8e8f3-c82e-4fd8-9396-936b3690724d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f299f36b-e48a-481f-bcaf-5b003c97e81d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b442af20-61b7-4e52-a996-96407def5a47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e496d96-38b2-4906-ac06-1d47981c0d5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e206e60-5841-4e6f-8f29-fbc536b102fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15819f1b-bb20-4462-91fb-90cfb3fec2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e69a4c-2080-4f14-8453-bc06363f1b13",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8354c96-d569-41d1-9304-adc59999cdcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "125f1d0a-cdc9-4674-b7ab-9f973ba42f10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3222a9c8-a6d2-49f6-b5c6-51e3d1cbf740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d45bdf-e0e4-4a59-bd9d-d272d9b2424b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65cac086-9209-4de0-b799-c19bebb27a80",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb7fe61-42a2-4deb-b056-d31919c56c89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfd2bbda-151a-40f7-8c01-a259c664b526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fdbd78a-1f47-4413-abf2-af1d6a37f839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e5a78a-db60-4d6c-9182-7d1b4614ef8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06805559-36ee-48f8-b779-9cc11f2a94cf",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f97f40-45bd-4739-89ee-6e530c5c837a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8c2ebfa-9a09-451e-b68b-47832e61da43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "489d3025-aaf4-4c3a-b4be-044b51d9adbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d135c239-884b-4ba0-a124-a3e2161bf9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41bca4df-9a92-4df2-883d-c2cfcef6f45d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee85dce5-5a6a-487e-b6b5-3dde54be135b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00aa62c9-132e-451f-bf83-21898967ac78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd52aac1-7b3a-4f81-b0df-fefb7cf3a42a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44da7dd9-85b3-44e5-9490-18d7c15fe6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e4186d-e0f9-4cb6-8b22-382bc4900754",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5651bed-2550-4228-8f11-6e35990aff0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18e9a787-dc0a-45fc-ac69-e64442826986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87dc17a-42f3-431c-89ee-80f82d340a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adfb0fe9-c1ce-43d4-9ef0-97228f5eb983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c84cfe-6d1a-4e56-ad5a-80a8c1081d4f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297c4c43-7e74-4fa6-ad0a-badb67d956b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0891697-ae3e-4eec-b499-a2444330cfaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7d1295-23a2-447d-a435-5bd7a9e6daaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b42361a7-333b-4b8e-a664-7b8343b35a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797c7a89-eaf4-471b-81a5-721b6093e589",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2171eacc-299b-4e6f-aceb-adb0d8245760",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cda00a00-f6e6-4d50-b6bd-72b6267e7d4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73eb50b9-6b69-4907-b380-1516d22ae082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffdc3f38-eb7f-4726-901f-8d23284492b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd99b3d-3f6f-44fa-bdb9-fd52ca3b8e1b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c51016-3583-4161-b725-289bda92336f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb2142f-a756-4e89-9aff-e088b523bfd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4f3de9-6fb8-448b-9bad-196039186fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "179cda4e-d1fb-4c7c-94cb-0238aba1ac45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cac3eb-7d3a-4e3f-ad95-b1a3cafa6f58",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e113b5-1057-4bd4-8925-355bc4437af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a242226-af93-422a-9268-efa34cdd6ae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db52a4b-751a-46b2-bc6f-1c046c5c34ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f2085e3-7d3a-4d9b-b57b-4020078920d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab79843-1075-410e-94eb-e5b8a6fc9711",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722f4459-672f-4c86-bb64-5e9f2cff3a7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9912e981-c2cf-46bd-a395-bc69702ca939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff0e335-6b27-444c-ae15-0b0588b0fab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c07b4b-c20a-46f8-a268-86b26df20338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0fd9f6-502b-45b7-9746-026c5eb4abbd",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74042e4-3cd1-43b0-a66a-b42ee6860e0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9405bdcb-03d7-4a4b-9611-c041e80a331b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "201c1521-6583-4ee4-93a7-a29a10149d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e72b7984-12dc-42a1-b28f-bc43fa17e3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9f0033-f254-4d50-8dc4-0d2dfd928994",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe029a74-31de-44cb-889c-def1eb14c073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b7aea5-8cc9-4d3b-a096-f731b490f101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c8be30-fa8d-486e-b8f7-a23fa49fee67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dec4bb15-6543-446c-a24f-f07774ff00e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0a9187-4684-4612-a565-75366c727398",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2a95f4-0d59-487f-b831-e76386984a85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e06ac58e-3f1c-4852-a3ad-6fbe32b6ed6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c110f279-ec8f-466f-a909-f6ed1f5a9531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef49d7c2-8a83-4545-9d00-a570966584f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67181462-1577-4522-b6d8-1abb3c422a78",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdca2bed-5dde-4cf6-b046-c566686ecc08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "025d78ec-8cea-48e2-9811-5c3d0ba2dd29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5d7493-19fb-4d2f-bb6f-699b12739dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec2c8bd1-00df-4700-8711-c174bb4ae935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d414c535-3a85-44dc-9648-47dcc273c5b7",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e42e77c-ee8e-4956-897e-b4f3db46e7a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55dc929b-eae9-425a-9dbb-e723f8a0e5f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8948a3-bc28-4611-bf3d-f50f6cc5911b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9af001a7-59a1-425a-8e94-f959392a0a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e75bde-f45c-4bd3-97d2-696fb329a08d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbbaa6ea-a928-41e0-ab4f-ffaf0ab52470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7c99830-07fe-4eeb-b5d9-bca4180e7ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df34cf1-6449-4266-bca6-f7187b375cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fecde59a-a8dc-46dc-9457-5597e3506004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b84d656e-ac0d-496f-aba8-fb09c54391bc",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a1b293-150d-4e97-ad28-863d3a3c7757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60753f62-c6a4-42f6-8423-527698af49c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fda5c6e-0d03-4cfe-9c85-bbb1a3e5930d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe0c895e-ce08-4287-a305-e9804388fb74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabd2de9-1bcc-4b04-8c83-0037d21b8ba3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2bd4fa8-71a3-4bf3-95d6-93595dd39538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af676bc3-53ec-458e-8a95-35d49afe650f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "839ee717-0189-42b5-8259-7a504f99a79a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40339e3e-28be-47a7-9a67-0c7cc82b8ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27cdd5eb-a8fb-4f10-8549-b80f24226de4",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e39b34de-7daa-4fa0-ab7d-6ce137888f8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5a67a12-9f87-4652-8f8a-e0050ce9c7b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbda14df-14f9-4626-a640-99223749170d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "024cee8c-5055-482c-aa96-2810e6dc37d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438f847b-fd36-419f-acd6-b1605dddc489",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08d5aa9-4aa8-42d5-9a8b-b327dcc64617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e22d115-3bf0-474c-866f-b55ed619fed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "310c1547-e43c-41ad-9506-bf241cb03fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cf93248-b7b3-4ca1-9b12-db958fc71da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bcd9154-44c1-46bf-8c7e-cac68f633234",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10f9086-6f53-4123-abe4-469a30f2cad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd371984-0909-488c-9979-7622a524e1dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffe8640-f69d-4a82-977e-176b5bfe3a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac6198ae-ea60-421d-b10b-d3a1ae2fe7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b12e75-42b1-42df-93b3-a135c5cc77e8",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6331e729-9760-490e-b15c-2c76b490d4c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c909ad-a712-47eb-a61f-04b2f0072832"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ed5325-fbee-4d2b-a462-1ead4c2d21d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "990ae3d5-7c01-40d7-a786-f7eaf78de3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94021182-4e93-4ad1-8caf-db9353418c0e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6eabc9-c25c-4389-8cfb-15b800c6b622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3540803-ab20-4d99-976b-c9b339b06155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba9e7bd-e230-4730-b3d4-ad42ebec73f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a3bf266-87f2-4dd8-be09-4f89acb1495e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d182a9-9117-4b29-bb85-743df66bac25",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c729a095-dde7-4348-a8d8-49ea4305b892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a883f3c-e0a3-4628-af25-f00305446d86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d85970-80e2-486c-b931-c76fa70cd368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "643539b3-8858-4661-a9da-ed4ddae58e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429e6756-07ca-4270-bf70-b9f403378bfa",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1a4aad-a26e-4969-863e-dc21dafbcb99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68e0553f-3de2-4510-83f7-40326a5d58f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e5022f-ac5d-4433-b1d7-34c81c5936db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c12a70a-c3d6-40c5-9915-eebdcc311909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd91c536-45cc-4adf-bd88-15630dc463eb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4548863c-89f6-474c-9b90-3bfdb42492db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd3fc06-fa99-4eb9-b3e1-541af11097ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f437ddc-940f-4650-9563-b27772104e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a5bae41-02c4-4127-b76a-e77954f05036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29cb2e7a-3bfe-49f0-b097-746a596c22ba",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df1c8e5-2371-4f3d-9630-faf46023ebd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66b5b4c1-663f-4e47-8305-7422e287e6b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f86c10-aa83-4918-b723-95bf9c648ac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a128e38-6e95-4ae6-8c1f-cfa239140eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "127e1202-2a51-4783-b86b-7604666d97b2",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d57ec9-33ee-4ed3-86cc-9df4f374b26f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "141461e1-2500-47e3-942a-607d265199c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feeae6d5-9079-417d-95d0-5345f5f473ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00482b00-f06c-46c7-a881-0884a287faf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c07b226-9842-45f6-8ea2-d6cc2bf2562b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1c7cc2-18e5-4a2d-9f62-c0a5a4c9ac74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe2470a-d4c0-4629-83cc-8e3a7f9b2174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a2145d-f986-4463-9a91-6cbba3e7e7ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5669f7bc-14e6-4c6d-8c69-80538c7fa5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beaf7e71-890c-46b3-8c83-9b543b3e9a19",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0946951-ee14-45df-93da-08fd87b99f5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1283999-b8ff-4be7-ad56-bf512ad6a6a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa64b14-2d74-4ffd-9d2d-41db26497ed5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d902b6b-8b13-44fe-b023-928b0c48909c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b78d91-b28e-4e59-8807-45ad8c809216",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d1e668-b6a2-44bd-ae32-46abaaa3851d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2cb88b8-c865-4d53-8421-286bd17096e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac56a6e4-2e47-4d16-bf35-81651dadd1d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1e22e6-1b8f-4dde-a5ee-07f0fd41c14c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e59548a-badd-4de8-b0c8-08f2daef8abd",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ebe05ef-793b-48e6-bdef-494f67907f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dc9deeb-af30-4b67-93ac-576d6906c579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5bece4-c34b-4c48-af6b-9d449a7e45ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29b566e6-6a6d-4536-97d9-d1057f8e3aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78127b67-e3cd-4474-b788-1082a433a347",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d2cb92-ca5a-4412-abc4-59b98ad82f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1d2949-9ab3-4586-986c-59f171b618c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cae7c1c-0897-4afa-9003-7d30e440b929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b66ea267-d50d-41cf-a202-ba8cbbe5f0c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4bb9729-cdec-43c7-8824-87a15e0b8b6c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7179c195-e62f-471b-ae13-39600b59e30b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "777fc060-9417-46bb-a1b3-1191d717efa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43719dd-184d-413b-9e6d-8124c6d5c7ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d407f194-facb-4914-9a7a-d0ddad604259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e2f974-6d98-4660-bbf5-d8368b169547",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d729b41-880e-4736-a7d5-09d6e1277471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0290cd32-b079-4773-85ba-db02c2754f2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3bb2c6-8627-4516-aa7f-18e51bf11781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e52a6378-e9fa-4b95-aac5-70e6178e8ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59aeba85-4838-4393-9448-83655f40601b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94877354-f24f-4ff5-bef3-03bb6ee9854b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3ec764-73b9-4f69-8273-38776a7cea5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0339fd-2972-4622-a562-dacb75865348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dcf4900-5981-41a1-867f-ad6345ccca07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc17e625-67ab-4099-a856-559e32f35742",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbda674-9beb-4273-bb2d-fcda92d2496c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab7a0414-d9c1-4e54-b704-b1754ec84282"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3fe9fd-00f4-40ef-a789-b31af8a4e904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fea7a7ff-df70-43a3-bfb6-a9c983eee792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e95b63-f425-4a5e-b744-1610a0f8f399",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd4e497-dc4c-45dc-ab3a-21171fbc1662",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04d3be26-906f-4504-9411-946720c95db6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec25b1d-dfe0-42e0-90ef-7ded777ac673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d710ac66-5c33-4ee9-baaf-c7f6be83e8e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7259620-7933-4708-9355-27769ae289dc",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd87de3a-53a4-4d9a-b545-88d445c4b3fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ec60f5f-22de-406c-9f1b-229703975f85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "526e4380-50a5-4c3e-9bdb-899175c22006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0083fb85-b4a6-4565-b3a5-e9f0d84b46a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2054e94-f02f-409c-8b94-dcb3e5d12d57",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c032fad-b1e3-4460-b350-64b2f8aa6685",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e509abe-0433-4a89-b32e-b0c87b174faa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "695b1099-fd64-425e-9f79-3b9d929cdabc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "707cb833-5bf3-4ef6-8c2e-cd339ed918db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86206b4-0a51-430c-a669-41c1e6886968",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6c5899-623f-4f9b-9596-08e886120a35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03ac92ad-a82a-48f9-9856-39cbac2c85f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc80c6b3-4dfe-43ff-8d83-2f54c3d40acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7c916cc-34b9-4106-ba61-9561949ebdcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "decba484-3a4c-4b29-86d1-0089125fe8bf",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d8c2d8-7842-4567-8dad-6ac02113d869",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7442e7d-81de-4c22-be0a-607efd0561c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a104e0-1180-4ddc-9b85-bcacad38a8d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd826d83-59ce-4be1-b1df-77db86da772e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65dec4c-bc13-47d5-8e9c-ad2862e299e4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40980498-4ea0-4250-97c4-b81df7afa372",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0d5cd0a-daf8-4ae9-967e-65bd44882b3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca097bdd-0395-4b00-be8f-861ce23f8f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e82f6b-ea68-4b72-9170-89436ccf668a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e9facf-9727-43f1-9a15-b419ec6bc31f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b649ffb-e45d-4e9e-8700-3757bc47fa15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35087c4e-f188-430b-a50f-c650777c515d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ca82dd-697e-4c36-a21c-2849b608ccaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efcd5b34-e62a-427b-a8cd-c21aed60fbef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99cc3ba0-253c-407b-a58c-3d57391e89cd",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df84a73-4c6b-4173-871f-0f659289a943",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a644a387-960f-4d50-a14b-1d44147a5f0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cee5260-9034-4d3d-8c50-ced9ec06b886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65afb8b1-bf69-485c-b656-2005dbed9c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d7fb89-e70c-4414-9309-694e47dc6b91",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3d0b0d-195b-4f2d-afe5-73488405300c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92690ce5-ce62-4ffb-afe4-e32f4aae28aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea3f79c-9a31-4664-af10-1c74c8cc3201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55643c58-b684-4651-b579-a68753444725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21ddfc2-9902-4ac2-b6ab-5617b60d6b14",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebeafee0-802c-433e-971a-15b4b403e27e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ac593c5-a6c8-49e1-991f-b6eb229f03ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3921cf-9cf7-4baf-a149-dcf2deff9f6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0114a0a-2b3b-4b23-a2a9-17da2e90f213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95036c8d-5b26-4d3b-b675-5b0f7aba38f2",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555172e4-5294-48ca-b393-868b0b43a1d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "824b0e94-3b3c-41f5-a0c8-466a37a24361"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7427c5ac-f044-47d6-8771-a7065263a818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9830e3-ad93-46f3-a220-6576e0efb437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6504b8b5-6de4-49b5-9672-01a48a4e23cc",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5b62c8-001e-4ecb-87cc-7a95c4138c81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1625e35-ec50-498d-a658-89e9d0d9cb08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a1fddd-f8f4-4f71-9efe-a469da0554fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b78a3a5b-cf1f-4d70-833d-e67fd0f7d32c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d48b7b7-1453-4aa4-b405-f93c5067c7bc",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65cdf3c3-f425-4628-833e-9c5758bb60c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78bcff7c-815c-4944-b197-0048bdadace3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fedbadce-8a7a-4202-aed9-03ebd3dc6a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "957b5fd7-adaa-4944-9404-584394241034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c277a69-8de0-46f7-ad75-3ff4c4ba2810",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd2a46c8-c55a-4a93-98b5-4b67b0253833",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eb91e2b-a699-41fe-98e0-ff5d16d28da2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0290ad72-8617-46e8-b538-ab5b405b5a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25c70464-5bbd-43bc-ad28-3cdee2e5d948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0261a960-698d-400e-abad-42d860335a51",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9743416e-3ef6-44d7-9ea9-a1b48aab8ea3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "802c24d5-3462-4c69-b46b-92087b01ee5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62f37a6-567c-48ef-b76d-bcbfdb4e9088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53200bd6-7913-42c6-be45-c5c3f086a34a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd290eb7-fbde-4051-a24c-2bc391a32fa2",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc987c6-eec3-4736-8f8b-4c81d795f7f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9e0e8a9-a70f-4c30-9d72-7ab0cd88e7f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7802ebc-6e49-43be-9524-c8b46615c8c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a97b9b9-6ebf-4f94-b9be-1b456c065276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804edfe3-724b-45bc-933b-8a3257c0f19e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ffba7dc-dc8b-4649-a494-3dfc4e23b8fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b87a3d13-2bf1-4630-9194-dbf6bdad7361"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae710669-84a5-4083-9125-6a56e4bca598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a455b2c-61d9-44c5-b6fa-f0ba8b88ee5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aaa2deb-5f30-4211-984e-61bb6ae62448",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa46995-643d-48a4-a797-b71383a4b99c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a2235db-9028-485a-baa1-b87452dc8618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74447ad-8fb5-4920-a420-e6b3928e12bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ef5f18-897d-489b-a743-8dc4c273fd71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7137405-d538-4536-9451-859cfe7c5ca7",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26905a1-8a74-4a6a-a8d8-aeef04acf6dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "113615d0-addd-4e4f-b138-65f6f71b8888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb019fa6-b89f-4cda-bb09-bbe7f68d50f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81778d8c-e497-4859-8100-5b81d26b3ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087a53fd-da0b-4c23-8870-f2078482a2ef",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aff3896-6b1e-48f4-817d-0f04c3e5fa0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f658a85-9bd4-42d5-8e63-754061b7235c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70424c18-aa4b-49c7-b66b-1b0546d1efbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c2ed4c-3c97-42a3-b8a4-3c7c03eae85b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba99838c-e480-4907-a94f-9156f1a16fda",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f995994c-0d43-48d2-9ac4-d205c7a4b6ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82e33948-ec1c-4abf-8fa7-12cc75d6de86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e920a6aa-dc9d-4140-9e8e-0910d8ba5de5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c991690-dafe-4ec9-a694-4d832efa28de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc5b5af-a039-429f-860d-1ef0ed1ce487",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9dc1c5b-25f3-42c0-ab1d-e452a913b336",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98d3a263-ac70-4415-b892-98f32ffb8e2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4953029e-e8ea-41f1-99bf-bed579625132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "387138d2-6a75-4fa0-877e-cb58645e4422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7b0a38-2a49-4660-9634-f6820b94db06",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2bddc70-304e-4ed2-bd05-703d12114fe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98f78bd9-67dd-47d0-816d-b818f4082578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "173198c4-5763-44c6-a488-603506971b36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62a5be20-f77d-4fe6-9697-f4054fa3054e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ee1b15-9f9a-4355-9cd9-e7f68a527d20",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf1e737-68a2-4a2e-893e-ee2b20209606",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab164486-b735-4288-a4fa-15433ce133ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9d42f2-839c-47f9-a1ba-f60bf2320b69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de516ab-ffdb-4be7-b825-8e4d5d25eb67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877999bf-33ac-43e4-8703-1fac6c1ce51c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae507c5-5ff2-4635-b98b-f1ae0ceeebf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eb66497-4b17-419a-aa20-a68daf963568"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee20342b-e7be-47cd-8196-a89d917aa390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd1c14e-62c6-4ec2-b5fc-fd19f06f2071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425cfc20-0153-4f08-bbd9-50a4b95004d3",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8e06ed-e52a-4398-ace2-e79e0ceb904b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5941d514-79ec-44fb-bbd7-f734f4a8cfa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a67b4d3-1ea7-4f00-a6ea-385fd1c242eb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eba84ba-b370-491d-8b26-ce88ba9b4c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb67914b-be4d-4e42-a2b6-dc67bf953417",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39aed3c0-5c8a-4b3b-be65-84c56b886baa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16f6efd8-f5ae-49e1-a4c4-3fb0d61da859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3a1a80-1c37-49b8-9cfb-d97918e4fb21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d08b8204-416a-4b34-bcfb-9429234b8b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5928415d-927d-460a-bd10-2078fdea18cc",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c41f9e-69ae-4edd-a698-1cdf671ff558",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f06f0744-475e-42d6-92d4-d944c15cfa4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b548ef-c1b9-4313-9af2-dcd8c73a9873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec1cbd6-e34a-4671-978e-c5c07b571759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a6a43e-b996-4359-ae53-4602ecec5cd0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a8765f-91b3-4125-91f0-f627dfebf2c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78d439c1-c5f9-4e45-b2c2-c9a29b5ddfc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32da6420-dd15-48e2-964d-54707bfae97b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3abc731c-af2d-4d2c-bfc9-37093be39c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829a5f2a-1be8-437e-bb64-61bceacc4d88",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7b514d-68d9-4af2-97a6-89e99dcc5505",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca24f7ad-a991-4ca1-b433-0142af3eed80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b9a052-8462-4389-a7d2-a19af6e9d8c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aa99e03-b20a-4bbf-8bcf-fb4683745104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b51e5d-9836-489e-a5d5-d6e7868ee38d",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4bc4b65-38f7-41ba-8e73-c21d9ff767a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f53718d-5d43-4295-b9c4-1e8a69778e92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44897bcd-998a-43f6-93aa-6b1b0af15a66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "720e8075-015d-4e23-b434-2b71e8a0f42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991934fe-d921-4151-bba8-2b74ee296c66",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b2c35f-c51a-4364-8fb6-8ed49c9f38e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d16bb34-9db1-484c-b816-e71d0414f74c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff07d6a-54dc-4ac2-8c3f-cbf43476cf24",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb9d5bd-0368-4ebb-bd08-896c3a5e60c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c1b341-f207-4d2f-aa8e-e4123d0cf0e7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb47a9b4-1e8f-41e4-94ef-c69f8e1fc4a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9aa5f7f-8ac7-4fdb-aaca-860ec4bf717e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8637ed2-788b-4189-88f4-ac944085e337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2b24a28-3907-4b7b-a1ee-fb946c950855"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8c720a2-5fc9-4078-820e-1f2efd84564b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea430a7e-c9f5-43e4-8ec3-6782b3d1f6c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b8ea18f-3d65-464b-8231-66f372a7d59d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c10bd693-5ae8-493f-8f0f-c76b122e13b9"
                    }
                  }
                ]
              },
              {
                "id": "ad7d270d-3241-4675-9ef0-0d9c2f2bf848",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ac835cf-e7ae-484c-82cc-3be0ae7068bc",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d98897-dae9-4060-8e8d-c7891b282eaa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "62a5a11b-f1b2-41b4-a0ea-213af8261c18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ce822b-99a8-4737-9083-eecd826bc71d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be3aa395-499e-421e-af63-cb547e299438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66cd3ccf-70e8-42f7-b1ae-57842705a54d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abff0d82-c0e8-4313-9d11-2df5ab9ca356",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "240e35eb-651b-44b6-b219-ce3a9710f3e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf6eadb-3d2b-40c2-826f-29caa0ecc78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0543ba0-edc5-4f08-8739-d5014f534e90"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9ef9a9d-17f9-4d27-ba90-e9fffb696593",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fbec0bf-3f82-48c2-83cd-0138e4e336d3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca1c42aa-81ab-490b-99f5-7ce43488d97f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53241c14-3878-4e97-836e-8e80a7c6db2f"
                    }
                  }
                ]
              },
              {
                "id": "ae422da5-85ec-42d7-a297-dc8c0260585e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e5745e3d-1546-4714-b981-0b0c08d3e4b4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75245982-a272-4501-87ba-9bb59bb7dcfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "704a0ecc-c46e-4e94-bb16-2d2a3e905147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096143d5-772b-4680-9db4-094358c71f31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd81713-c02a-4441-b434-6857f235563a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7d43ae6b-36a7-4f14-812a-ab8229fb6399",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cb40ac6f-b662-4a87-a035-d64aeedd65fa",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b52279b9-06c9-43b0-bd09-20e4907a6edd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6f74fcea-88c3-4225-85dd-a1e76625aa29"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e01c754-b204-40f5-a7c8-a04c4a75c244",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1efd7ddb-6b05-4262-a2d3-e8e7d77a755c"
                    }
                  }
                ]
              },
              {
                "id": "8d428fac-2258-4902-a6f8-0e062462fbe2",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eba5d808-bc69-4194-9a7a-9cd9bf31bb34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "de986201-5125-42a9-8a7f-74c4435a8c86"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb88f1e4-1538-4b9a-bd15-d4783e971895",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4be7a77d-ba21-4277-b2fc-2d6058adc210"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89715012-d666-4f6d-acf2-038132af44ae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "030d8694-5c22-4330-afa3-c5daa6fde95a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "520fe250-7e23-49f9-86d0-29c24b395d2b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2458f2f1-5172-4015-bf70-95d35c6ce663"
            }
          }
        ]
      },
      {
        "id": "36dc9ee1-ab4a-4015-a58c-b7fd82525b53",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "233f9c38-5eb6-424e-82f9-4c640cf325aa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "51ae9e17-026d-4f7b-993e-7bb088dc0dff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7cfff590-b950-40d0-9ade-eb36ce8ae002",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2ef629-7462-45c3-b70e-aa28499e256a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "181b05f4-7f85-4b1b-9a0f-36c95ab74551"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0e50614-41cf-4c73-b4a8-cf069018b512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fab36d4d-9070-4685-8a5f-c850369b3a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f482786b-d665-4608-8b45-f7903dc6b53c",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3c7008-c67b-4115-9698-aea5f38389a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5d1bbf6e-2fac-4492-9790-ce38ed41f33e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a59e58-fffa-427d-9e98-7b0f35367dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "55db6607-3b92-4911-960f-8cc2d2184614"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b10b801-4f1f-4414-85a5-01b8d5f2208a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3fee0e2-f6ce-4be9-9b07-64ed5d581225"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "58c188a4-3333-43cd-ac6e-168cc08b8aac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63e49b1c-80d1-4106-869c-6b8fef7643ef"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8268811f-463f-48ba-ba89-219e1cc2c9e2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "031bc3fe-a208-4393-973b-035304ad4ad8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e53ab6b6-ccf8-49f1-be4b-e480b16c5156",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c9956e0-89ea-4bf3-a45d-50e0fd1cda81"
            }
          }
        ]
      },
      {
        "id": "d3a0ecef-7483-43f6-a9d8-96e2b8041c8d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0c4bdb5f-4754-455d-8e26-90c8d72b0891",
            "name": "Negative Testing",
            "item": [
              {
                "id": "06d15169-2c1e-459e-bc6c-629852c81495",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f99a9f73-1177-4499-9b7b-e07f8f2445fb",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55a4bcd-3105-4b64-a8fe-7a449b3cc092",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "170713a0-2a5c-46d2-8fa8-9325749eb32b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e93d07-1d75-4595-ad86-a8e2b4e2e6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "872defae-d880-44e5-90e4-cbc433064e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f591dcfa-a189-4993-af8d-3df17693d38c",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0c1f70-6a82-49a1-8d6f-bac6892d5b8a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ac927960-3884-4674-b90a-9ce38feb857a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb620d98-bb02-4093-9cdf-8506e294e8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0db2221-3cae-4b74-a551-b75ae2f40a2f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc7627cc-f88e-498c-948c-c32f52cc0239",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9345d10b-136d-4aa2-be73-02251d758a91"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c33a9981-6c29-4466-8772-fa7cc6d70346",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67182585-c810-4bfd-8e0d-e23318a42d20"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9ecb11e0-6b86-44a0-aff9-959edb678927",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c98fcc40-db6f-4192-a41a-a7506581cc27"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98e371a2-0c91-4291-8f32-107e438d8992",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4f01c7e1-b3af-430f-a360-50562c3baf85"
            }
          }
        ]
      },
      {
        "id": "89819015-0d65-446f-a1b9-7f8e1a05d5a4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9763c6a3-347b-40f5-8f1c-2a10df818d8b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "65123084-7bad-4220-9331-edaf0e85ee56",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d9f94b4f-e845-464c-b5e7-d6d4dd929432",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f32b88db-28ce-4a0b-8711-5249774c651b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "076145b9-52fa-4a0f-a658-1d5da820e3b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5745eeb3-ccd4-45cd-8d29-3368b0b22e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02b7a172-7a9e-43ef-8128-39cc9e831dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8dbf4f-bf76-4df0-9b21-31b4ebcec1ba",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba7e245f-2b5c-4131-b8a1-7cc0b603279c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5563c8e9-eb84-4297-a2f1-a9c3978b01fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11025f9-ec92-4a3b-b126-3587b90894e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "654cc5b2-b676-4629-ac36-7e77db08851d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20268a7b-487a-40bf-8f67-53c28df93bb6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb555773-16a6-425a-874f-121dc008d075"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "19bab873-991f-4a13-b67d-71031731ffce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32d9a887-4473-4a8e-8c12-8cebfb20e50f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51f9bc29-f843-4197-81b1-e2e5f19e97d4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bc4b7bcc-e935-4f43-917f-ebe310720e48"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f85bef0-3c49-487b-9d0c-c9004f8a59c9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "869d9165-c893-43b6-b9ad-3ca200e56cc4"
            }
          }
        ]
      },
      {
        "id": "b0af2f75-f49a-4b5b-838a-2c9caf35c190",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "786a989d-ef53-4585-a257-ae918cfa35f6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c963cff7-c4b1-4334-acc6-366d7888f198",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e91a5e26-916e-4925-aa33-368f889df6cc",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a2540e39-16da-42df-aafe-bf72fa7a410c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ab0781e-6009-4e3c-aa7c-e65ae7b4f590",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 310.1269230769233,
      "responseMin": 13,
      "responseMax": 16550,
      "responseSd": 1235.7744859173852,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685407181568,
      "completed": 1685407274451
    },
    "executions": [
      {
        "id": "b72159b0-6562-4930-8b2d-96f12364ba85",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "883ae3db-4900-444f-b26f-1e5bc28c2cc2",
          "httpRequestId": "fdfe136e-93fa-4c14-b756-b3cfb6dceecb"
        },
        "item": {
          "id": "b72159b0-6562-4930-8b2d-96f12364ba85",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "bf3b0c53-454b-4a5b-92e9-b3f058f6e8ca",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 0
        }
      },
      {
        "id": "ad8347e6-a4ca-4b0d-bbc5-0fb155ea41ee",
        "cursor": {
          "ref": "fdc42606-5c38-4466-bd82-7b9d5c2b3f86",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c11ee35b-b6f1-40be-bbe5-d47000e80775"
        },
        "item": {
          "id": "ad8347e6-a4ca-4b0d-bbc5-0fb155ea41ee",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3aa43a4c-abd8-4783-9472-824d43fd1d82",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 0
        }
      },
      {
        "id": "755e67b4-69b8-4966-9919-0778ca39bbe7",
        "cursor": {
          "ref": "754cb134-7ec3-4343-a374-9eab61c69129",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5b2550f2-9d79-476c-9786-3dedc2ea30e8"
        },
        "item": {
          "id": "755e67b4-69b8-4966-9919-0778ca39bbe7",
          "name": "did_json"
        },
        "response": {
          "id": "83320084-7eb6-4649-9184-fce86c7b8423",
          "status": "OK",
          "code": 200,
          "responseTime": 607,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e0401e-4d20-4311-9d3d-ee9c3a61521d",
        "cursor": {
          "ref": "fbe64b9d-7ba2-4efc-943d-82f846e2ed71",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "38a4665c-59a3-4b3e-a1e0-015721c817e8"
        },
        "item": {
          "id": "a5e0401e-4d20-4311-9d3d-ee9c3a61521d",
          "name": "did:invalid"
        },
        "response": {
          "id": "8aa58fd4-5610-4d0a-9a09-b1422a2d59c3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1436,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a5e0401e-4d20-4311-9d3d-ee9c3a61521d",
        "cursor": {
          "ref": "fbe64b9d-7ba2-4efc-943d-82f846e2ed71",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "38a4665c-59a3-4b3e-a1e0-015721c817e8"
        },
        "item": {
          "id": "a5e0401e-4d20-4311-9d3d-ee9c3a61521d",
          "name": "did:invalid"
        },
        "response": {
          "id": "8aa58fd4-5610-4d0a-9a09-b1422a2d59c3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1436,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "6d0b072a-3766-4494-b40f-ec35ebb043ca",
        "cursor": {
          "ref": "31005665-1ba9-48ed-913a-c07707311942",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "48aeeac9-c27c-4cfc-aa40-292f785e9eb6"
        },
        "item": {
          "id": "6d0b072a-3766-4494-b40f-ec35ebb043ca",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0b9f04eb-2c77-401a-b798-ea8461256e49",
          "status": "Not Found",
          "code": 404,
          "responseTime": 50,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187d428d-2fb4-4f21-961b-737bd9797c2e",
        "cursor": {
          "ref": "374f3032-7717-4bdb-88a6-d0ff8853ad0d",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f8a2b7f8-9f32-4222-8c64-cae7b14f4450"
        },
        "item": {
          "id": "187d428d-2fb4-4f21-961b-737bd9797c2e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "95c5da8d-b6b4-4576-ae1c-f3382539f19b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 73,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ac6e68-0cbe-40af-a9ef-cf87835733d1",
        "cursor": {
          "ref": "4682e3c3-7136-4462-a38e-9276dcc9bbdc",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cf8a81f3-e107-4095-b4af-c976b5458fd0"
        },
        "item": {
          "id": "91ac6e68-0cbe-40af-a9ef-cf87835733d1",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "287a8cc5-7056-4092-bf73-38042bc690b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "021b83b3-ed77-4427-9626-9c5ebfed3183",
        "cursor": {
          "ref": "910f4a52-7345-4879-b154-af2c24e6960a",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e937215c-8ac2-4a75-b7a3-6b3f2ef2cf7d"
        },
        "item": {
          "id": "021b83b3-ed77-4427-9626-9c5ebfed3183",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "65a5f8ea-2892-400e-ab35-0b8d4861d68b",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "021b83b3-ed77-4427-9626-9c5ebfed3183",
        "cursor": {
          "ref": "910f4a52-7345-4879-b154-af2c24e6960a",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e937215c-8ac2-4a75-b7a3-6b3f2ef2cf7d"
        },
        "item": {
          "id": "021b83b3-ed77-4427-9626-9c5ebfed3183",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "65a5f8ea-2892-400e-ab35-0b8d4861d68b",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "0a8a30f9-9e96-491e-8d08-a00648f5fbac",
        "cursor": {
          "ref": "760b8f58-3f1e-4b77-9c86-dc6754a04397",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8673841f-35df-4e60-9da2-8d674600fd55"
        },
        "item": {
          "id": "0a8a30f9-9e96-491e-8d08-a00648f5fbac",
          "name": "identifiers"
        },
        "response": {
          "id": "ad8d743d-09a0-4c83-9a41-9d594ea6d9fe",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ae8ff1-f1e2-4417-93e9-0c9693afc25b",
        "cursor": {
          "ref": "045c3fe7-5ea6-4087-9819-931f08a9a993",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8e2fdb4e-9919-43f5-8146-77f0a83a67cd"
        },
        "item": {
          "id": "15ae8ff1-f1e2-4417-93e9-0c9693afc25b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f82cffc7-c204-44d4-baac-c1adb5db88c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ae8ff1-f1e2-4417-93e9-0c9693afc25b",
        "cursor": {
          "ref": "045c3fe7-5ea6-4087-9819-931f08a9a993",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8e2fdb4e-9919-43f5-8146-77f0a83a67cd"
        },
        "item": {
          "id": "15ae8ff1-f1e2-4417-93e9-0c9693afc25b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f82cffc7-c204-44d4-baac-c1adb5db88c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f31768-5c9b-434a-9db9-65c827b941d3",
        "cursor": {
          "ref": "8070d495-0dd7-476b-9810-bc49b42586ca",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d21e8388-3685-4d4e-9c1f-c88bb10917f0"
        },
        "item": {
          "id": "f7f31768-5c9b-434a-9db9-65c827b941d3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "68113305-e321-4265-b399-cbccd9d62ed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "064d7f38-624d-48df-b2c8-c14bc67db4df",
        "cursor": {
          "ref": "7978ff27-1da8-4dde-84d6-6e247d19e977",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "85e01639-ad23-4e57-a444-9070fde0e86e"
        },
        "item": {
          "id": "064d7f38-624d-48df-b2c8-c14bc67db4df",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "880f268f-cfac-4ef6-b5ff-d62faf0d343b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88df4e41-295c-441c-981e-a55962043c00",
        "cursor": {
          "ref": "8fbcf5f9-15f7-48ce-a05d-6a49fc972bab",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3d0d4eb6-acbf-42e1-ae0d-1ded768bd581"
        },
        "item": {
          "id": "88df4e41-295c-441c-981e-a55962043c00",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "60f373f2-f3ef-4371-b01e-221786fe8548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac3bf62-bc4d-4528-af96-1a2d9e1b38f8",
        "cursor": {
          "ref": "bd624def-6e48-4061-aea0-ec5e7271f935",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4ab5901d-930f-4d90-bf7c-074ffbfa3d4e"
        },
        "item": {
          "id": "8ac3bf62-bc4d-4528-af96-1a2d9e1b38f8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "38669191-e772-4a4c-a045-0aaee1143638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e391aa18-695e-4bbc-923e-4a0e7afbe515",
        "cursor": {
          "ref": "f82bfe4c-24a9-4514-b571-0f728419ee5e",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8d255815-fe76-4c4b-98ca-1ec5f87e38ba"
        },
        "item": {
          "id": "e391aa18-695e-4bbc-923e-4a0e7afbe515",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9d6726e0-3e6a-47d5-bab4-9c3949bfa03d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59199669-d3db-48f5-9d6f-30ab79f15f83",
        "cursor": {
          "ref": "048866cd-6106-4c4a-823c-7113275ef46f",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "076ce675-60db-43f8-b410-2de573099404"
        },
        "item": {
          "id": "59199669-d3db-48f5-9d6f-30ab79f15f83",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "eec98c1b-f3b7-4b42-9353-8cd8dcb7145a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94efc8b7-ea53-4d7c-b8e2-b8f83370546f",
        "cursor": {
          "ref": "97b0f661-7637-439d-bdb4-2caed8763dc8",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "702fef22-aca7-43b8-8971-4d32af58ac3b"
        },
        "item": {
          "id": "94efc8b7-ea53-4d7c-b8e2-b8f83370546f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "74c28a28-d4ce-4e85-af76-124327588a81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35ff19d-224e-457f-a26c-afa547aeace0",
        "cursor": {
          "ref": "3b98f332-733c-48b4-a65d-fd88521549a2",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "608d4298-f5fc-4d2c-9c82-732f1309b026"
        },
        "item": {
          "id": "e35ff19d-224e-457f-a26c-afa547aeace0",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c6944a00-8241-4e40-9406-75f318e85e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f237e1-9e7c-41b1-8f28-1e24903a2a8b",
        "cursor": {
          "ref": "2349b223-f132-4563-b313-8e54e95b14db",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "db587b15-243c-4474-9cd5-72c6c54beb69"
        },
        "item": {
          "id": "47f237e1-9e7c-41b1-8f28-1e24903a2a8b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "611b512a-c73a-4b90-8308-a8577e4ccdbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c429a18-d1b2-4b50-95ad-cc0b8f73f3c1",
        "cursor": {
          "ref": "32a8d23d-6b9b-4520-824b-8ade5b5d08e5",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e142fb0b-5f27-4163-892b-b274d805a09b"
        },
        "item": {
          "id": "0c429a18-d1b2-4b50-95ad-cc0b8f73f3c1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "af8bee88-3134-4398-8172-3684f00e9be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d12029-6bad-4e6f-990f-7662ba16c251",
        "cursor": {
          "ref": "6152a862-ee2e-4f59-b65d-20ec15df1ffd",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "318c3a07-c36a-4e13-bc6f-33dcae1b9139"
        },
        "item": {
          "id": "17d12029-6bad-4e6f-990f-7662ba16c251",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b2965393-ba53-4c30-8889-af3271040aa3",
          "status": "Created",
          "code": 201,
          "responseTime": 1196,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "8f7bfd96-8147-478a-9ad7-6dbb097f551a",
        "cursor": {
          "ref": "7c2bbe95-b7de-4c06-a47c-15856736ea4d",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "228ab3cd-5260-4c31-866e-5ba758a65bb9"
        },
        "item": {
          "id": "8f7bfd96-8147-478a-9ad7-6dbb097f551a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f73950cc-ffaa-45e9-aa1a-86d6c29a9cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5257efa6-6f7a-4b7a-80ce-9da00d366de5",
        "cursor": {
          "ref": "685c496f-a0ec-41cb-8748-983b14200648",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "48ede64a-c892-49cd-823d-6bcea69360e6"
        },
        "item": {
          "id": "5257efa6-6f7a-4b7a-80ce-9da00d366de5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4cf7beff-c50b-4fea-b84a-737f2b3339a0",
          "status": "Created",
          "code": 201,
          "responseTime": 16550,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "423b161c-4046-4e41-9d7a-8ae03458277e",
        "cursor": {
          "ref": "4789c574-275e-4e3c-a8c3-57caf6f34017",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4071ec90-ca4a-423c-a6e0-94613b3bb1b5"
        },
        "item": {
          "id": "423b161c-4046-4e41-9d7a-8ae03458277e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "72ba59b3-c871-4324-9233-3154e04919c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764f59c7-6d15-48d4-b616-37b38ae0c73d",
        "cursor": {
          "ref": "61e72de1-5893-4147-a2ff-c3ee9f008399",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "60654b3b-e2b3-4910-811d-86d32caa4a19"
        },
        "item": {
          "id": "764f59c7-6d15-48d4-b616-37b38ae0c73d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c9c27604-fa36-4f7c-8654-996b4280527d",
          "status": "Created",
          "code": 201,
          "responseTime": 7629,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "6eefa6fe-9c51-49b4-82de-7cfdb882a47e",
        "cursor": {
          "ref": "203a2bb3-f46b-4dbe-878e-e0baafe520f1",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "fa8e4727-e9b3-4c05-88c9-cc2729bfeeee"
        },
        "item": {
          "id": "6eefa6fe-9c51-49b4-82de-7cfdb882a47e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d193f3ad-f5db-44bf-8439-0d93d44b3e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b62b7ba-061b-4e20-ab6a-74ca5d448cf9",
        "cursor": {
          "ref": "1ccea8d8-68a0-4729-af29-c4e8feb6c2c8",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bbd257db-953b-4386-89ae-238fa97ca934"
        },
        "item": {
          "id": "2b62b7ba-061b-4e20-ab6a-74ca5d448cf9",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2e77f2a9-75c5-482f-99ec-a76b92a59c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc1aad4-8fdb-4afa-9311-72d1ec4c961b",
        "cursor": {
          "ref": "a67ee89f-90e7-40ed-82a6-cd8adacdbd10",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4d3d6e90-850f-40f5-9a21-3b82be730181"
        },
        "item": {
          "id": "0cc1aad4-8fdb-4afa-9311-72d1ec4c961b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b2cdee37-00ee-48b8-b304-9df967577cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a0b42f-803d-4201-bf87-6c22b8104f8a",
        "cursor": {
          "ref": "e06f59c9-0c0a-4baa-ab43-63701a0cb7c6",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d360c9b6-28ed-4b01-a7f0-e1f99bd3df72"
        },
        "item": {
          "id": "96a0b42f-803d-4201-bf87-6c22b8104f8a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "68996893-d4d8-459b-89b2-7b46caa26e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a8b93ae-3ac1-440a-a8d6-4eb26c88ea79",
        "cursor": {
          "ref": "ef7c2573-44cb-49c8-9f3c-0e0562f02b96",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1a07dddd-a4ba-4fc7-af6d-172d4b73c47e"
        },
        "item": {
          "id": "3a8b93ae-3ac1-440a-a8d6-4eb26c88ea79",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b9469f12-0154-48a0-bfea-ea9f5a6ab961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63cc661-c10b-4bde-bfcb-fdd674a71060",
        "cursor": {
          "ref": "72ebd08d-1406-4055-90a6-35cd5ccd5128",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1dcfaf90-c801-46ff-aaac-f48a3c2ca9ab"
        },
        "item": {
          "id": "f63cc661-c10b-4bde-bfcb-fdd674a71060",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c7d1c220-1880-4ab8-a392-dd145ee14d5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "430960af-513b-4de4-b1e8-417787b8733b",
        "cursor": {
          "ref": "94acf41a-e0fb-4688-8ee1-3cec7f2ba4b5",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6a0fd52b-22ab-452e-aa8c-ef08ea42ec8a"
        },
        "item": {
          "id": "430960af-513b-4de4-b1e8-417787b8733b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5c5669c9-8cb3-4b6f-a054-c7cd2cdb633e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44a4270-6c6f-4e36-b9cd-50e2dd7c4c32",
        "cursor": {
          "ref": "720c89fb-0119-4add-b39d-00a4564016ac",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f651beb2-a937-43e3-a297-4bdc66938942"
        },
        "item": {
          "id": "f44a4270-6c6f-4e36-b9cd-50e2dd7c4c32",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "175b04be-d64d-4a83-a5f3-8f13117b45ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b601d0-3c0c-4c38-aea2-a9b9dc42bbf8",
        "cursor": {
          "ref": "cc80cfb5-9445-4f6e-a16a-f620ddabecd2",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ae12959a-f915-467c-9bcf-2dcddeff52a8"
        },
        "item": {
          "id": "52b601d0-3c0c-4c38-aea2-a9b9dc42bbf8",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "76ba3bd5-66bd-40eb-bb28-6f611adcc2e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1ad6a0-7e09-4a3c-8ca2-17ced37f64a6",
        "cursor": {
          "ref": "440aef53-10f8-4e07-8e29-3dc4489fd1ad",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fb3fdc34-da14-4c3e-bbb5-ccfe79e4abff"
        },
        "item": {
          "id": "2c1ad6a0-7e09-4a3c-8ca2-17ced37f64a6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b8415c2d-aa29-4854-9b7e-1f4c06905921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331b4cc6-7ee6-4067-b616-2090130a5c1f",
        "cursor": {
          "ref": "f634e577-87f1-4426-b955-65309b6fb5f1",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "591981c9-4adf-45c1-a518-1b4d1c6091e7"
        },
        "item": {
          "id": "331b4cc6-7ee6-4067-b616-2090130a5c1f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2c885acf-e680-41c4-9766-76d9afbf76dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0c10d1-d2a3-49bc-bc11-7c8cd3d93ec2",
        "cursor": {
          "ref": "6d6a9cb9-f127-48ff-95dc-5525a47be907",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f469ecf8-4d2b-4f99-8cdd-4ada0b117515"
        },
        "item": {
          "id": "3c0c10d1-d2a3-49bc-bc11-7c8cd3d93ec2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5318671d-2169-4c0b-b103-e360c3517c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82836cd7-43ec-42cb-adbb-d04aa622409b",
        "cursor": {
          "ref": "2d0cc180-07e8-4055-a6dc-92dc45820354",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a8ab12f8-fb68-4c49-98d6-129cc461d554"
        },
        "item": {
          "id": "82836cd7-43ec-42cb-adbb-d04aa622409b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3aaf7663-6418-4153-9e7c-6186bc737481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ad4ea4-6572-407a-a11d-1bbd7e14f890",
        "cursor": {
          "ref": "a6a091f0-7164-4d6e-a78a-0e41c8fcca8c",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "68b66e00-4f34-4d54-957d-dbf010f6f3e8"
        },
        "item": {
          "id": "e6ad4ea4-6572-407a-a11d-1bbd7e14f890",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e3647f81-a650-438a-a7e4-16535f16288c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851953d7-3443-4612-adda-9aa4928ff69b",
        "cursor": {
          "ref": "4d62d545-3827-4568-a923-831f88e43f43",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8370f4a6-2011-44ee-9bf4-889e8e61bddc"
        },
        "item": {
          "id": "851953d7-3443-4612-adda-9aa4928ff69b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "73b43f7e-2b14-40ba-a317-87060a65ce10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6915af4-7615-4ff2-a29d-2b85817e73d1",
        "cursor": {
          "ref": "18149d5f-7177-4a9e-a7b9-dbda8c0222fe",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "58e8b4ec-498c-4ace-bd57-fbeea21e3c33"
        },
        "item": {
          "id": "e6915af4-7615-4ff2-a29d-2b85817e73d1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "08dbfdcb-486c-40f3-9316-08ffda20a7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c2feb1-8a24-4204-8873-a53eba55f18a",
        "cursor": {
          "ref": "3b5ae138-b7cd-4394-b83a-b52344ec7931",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3bc636bd-93f8-4a32-a566-f49039d8588e"
        },
        "item": {
          "id": "82c2feb1-8a24-4204-8873-a53eba55f18a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d20fe5dc-b7f4-4526-ba2e-bac223d05738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837f8ca6-88e7-4861-a71f-c59c11eed086",
        "cursor": {
          "ref": "191caeb5-74d3-4739-a314-61431d81eb33",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "680f6e3d-9fde-440a-9e1b-16c526427a86"
        },
        "item": {
          "id": "837f8ca6-88e7-4861-a71f-c59c11eed086",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b66d39cc-dc92-4472-8df0-7c60b545ceee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2b00f9-c720-4cdf-b01d-660bb1ee7792",
        "cursor": {
          "ref": "fa00a5de-9756-4c99-804f-8b6165610e9c",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "58586bc4-2591-46ab-a711-318501a571fa"
        },
        "item": {
          "id": "7f2b00f9-c720-4cdf-b01d-660bb1ee7792",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4f06dba6-898d-4e5e-ac21-7adb45276794",
          "status": "Created",
          "code": 201,
          "responseTime": 2597,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "1d7a8ac3-b69d-459c-aed9-f3894ec1b915",
        "cursor": {
          "ref": "09c5266d-f32c-41a5-b2f4-86b10cb70fbf",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e4eb25a2-d6dc-447a-bd33-d988175efe13"
        },
        "item": {
          "id": "1d7a8ac3-b69d-459c-aed9-f3894ec1b915",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1e59ff74-6d06-40a3-8bec-8281931caf30",
          "status": "Created",
          "code": 201,
          "responseTime": 1960,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4afc821e-9914-4c91-aabf-cc9feb3673c2",
        "cursor": {
          "ref": "e5078a68-e67e-444e-b46d-f597a6f2b7cb",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e2c01547-0fd1-41ed-89e5-36b3c6bfe91c"
        },
        "item": {
          "id": "4afc821e-9914-4c91-aabf-cc9feb3673c2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9088bf3d-a0d0-4e65-b64e-9e6c9b631426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1cbd873-871d-41b4-b11a-12af875d35b9",
        "cursor": {
          "ref": "1eeac7ae-5dc0-4b11-bdef-7736aa65d9f0",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "19c23929-03d0-4437-b2b6-ece9a348687d"
        },
        "item": {
          "id": "b1cbd873-871d-41b4-b11a-12af875d35b9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "476307db-3f3b-4489-8393-deece1f9edfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ea8f7a-7b6e-4a49-9087-7fe5b2e4623b",
        "cursor": {
          "ref": "f8d21834-35e7-4407-bdd2-32500da39125",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "44e542f5-c530-42a9-9d96-7a7783bf4413"
        },
        "item": {
          "id": "c3ea8f7a-7b6e-4a49-9087-7fe5b2e4623b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c472fea0-0189-46b0-856f-a54dedad5bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7936cfc0-ee85-46ec-b2fd-461c771478e6",
        "cursor": {
          "ref": "870b2404-ffb9-441b-92e8-54cf8c2d9bb2",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "78fd9b06-d960-4938-a092-5cce57462e38"
        },
        "item": {
          "id": "7936cfc0-ee85-46ec-b2fd-461c771478e6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "95fd569c-f817-4384-bb7f-615353ee138f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30908855-412c-481c-836f-e7d7da3e29c6",
        "cursor": {
          "ref": "99439eb3-43d5-4256-aa2f-9f670a78ece1",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3d4f96be-a250-4811-9bed-04463eeab651"
        },
        "item": {
          "id": "30908855-412c-481c-836f-e7d7da3e29c6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9d007b8b-0121-4ba0-937b-d32ad9743200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37333c87-d9d5-4145-8a33-c241b7be1b86",
        "cursor": {
          "ref": "8d87ee0b-3e49-462d-b74a-de6025dfed7f",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3f123102-d5fe-46a8-977f-bb31e53dc82c"
        },
        "item": {
          "id": "37333c87-d9d5-4145-8a33-c241b7be1b86",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "dbfa3bfb-5a6d-4b9c-9664-cad37545467c",
          "status": "Created",
          "code": 201,
          "responseTime": 2023,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "c7c81af9-08f0-4aa9-9942-79bacadbad82",
        "cursor": {
          "ref": "63a703d3-7ad0-4b3c-bac3-2fd288a381f9",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "bad1b95c-718a-4898-85fd-0da4f2fc12ff"
        },
        "item": {
          "id": "c7c81af9-08f0-4aa9-9942-79bacadbad82",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "55237465-b111-4b88-9008-b0757dea5c6f",
          "status": "Created",
          "code": 201,
          "responseTime": 2427,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "aa6f4aab-305b-4066-8ec4-ab3280fd6795",
        "cursor": {
          "ref": "14cf82bd-8f5e-4ee1-846d-1068587c7463",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6bc80ce2-c860-43de-8e79-d2c374513448"
        },
        "item": {
          "id": "aa6f4aab-305b-4066-8ec4-ab3280fd6795",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "781a51d7-c290-40a3-9a14-39eeac5b09bf",
          "status": "Created",
          "code": 201,
          "responseTime": 3141,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "ea9d0cf6-6f49-441b-b4ef-34dea3a6a2ec",
        "cursor": {
          "ref": "c7e70670-0cb9-42d9-bc19-78d1c5f5a7b5",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "07efc099-0cb1-423d-bf76-53de6619ce4c"
        },
        "item": {
          "id": "ea9d0cf6-6f49-441b-b4ef-34dea3a6a2ec",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "bea9fcbc-d0f3-44e2-8251-393560511809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb4a33d-dade-4ff6-9b52-12a4c2011bb5",
        "cursor": {
          "ref": "688ccef0-e724-4069-ab50-ef96c3de613e",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "46f3453e-aafc-4612-b2d1-51b98690977c"
        },
        "item": {
          "id": "ddb4a33d-dade-4ff6-9b52-12a4c2011bb5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "79b5be0a-de13-4a41-ab73-7fb30e81e8ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488aff39-7bb6-4397-9dc2-783fd5a1b0a2",
        "cursor": {
          "ref": "3af22d77-0430-4422-bfc9-023856f99246",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7c44e652-689d-47bb-831f-76bfd8ef284a"
        },
        "item": {
          "id": "488aff39-7bb6-4397-9dc2-783fd5a1b0a2",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "042547ef-44a1-4403-b939-fb301cc87e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ffd5819-ef90-417a-810d-5c5eec4151a8",
        "cursor": {
          "ref": "4b5f78c8-bbcc-4734-b845-e8a3b04d0260",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "570f2041-e0ba-4c4d-9cd6-4366753a60e6"
        },
        "item": {
          "id": "6ffd5819-ef90-417a-810d-5c5eec4151a8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f094a6c8-ff19-483f-87f1-6c2a93d620d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115b0a51-9187-46ff-ace3-6b0fc12b7078",
        "cursor": {
          "ref": "929519c4-58b5-44d6-97c6-1a96c49302e3",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "cb5bd867-2ec3-4117-a32c-db0be095ec50"
        },
        "item": {
          "id": "115b0a51-9187-46ff-ace3-6b0fc12b7078",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ca5eb429-4068-42ba-9d2f-07f1e0d859d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "166d07f0-88a8-4ef2-b72f-5ce2698fe49e",
        "cursor": {
          "ref": "17a2e316-976f-4317-a326-5b23823cbea3",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9e7125f8-762f-4972-916d-1f135223444a"
        },
        "item": {
          "id": "166d07f0-88a8-4ef2-b72f-5ce2698fe49e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d538e8fa-4f16-481d-a778-2983f9cab42c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df57997-6833-488a-b28a-a5123b049cb8",
        "cursor": {
          "ref": "755f3f8c-c2a7-477f-bb06-18fa559a9729",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a08cb413-5ee4-4ce4-b59d-3bb526952790"
        },
        "item": {
          "id": "4df57997-6833-488a-b28a-a5123b049cb8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "70b5b8e4-a1ba-41eb-a77c-24d5748db1ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9258c790-7081-40f0-b4f8-fb40adcb0c55",
        "cursor": {
          "ref": "23d22b5f-6420-4c9b-a31e-d76a87c673a8",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4757f6d3-845e-4ac8-9862-662c6a4ee72e"
        },
        "item": {
          "id": "9258c790-7081-40f0-b4f8-fb40adcb0c55",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5bf4aca1-acd0-42fd-83f8-33c0320cdadd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f69ee26-abc0-4a9f-9155-5934120e753d",
        "cursor": {
          "ref": "da5a666d-f61c-49be-9ea3-6a389673ca54",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "fd358ae8-a3d6-4f79-ae4d-1cd069e19354"
        },
        "item": {
          "id": "5f69ee26-abc0-4a9f-9155-5934120e753d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "30737c91-4370-4e49-a8e9-a61e1579bbe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c489b8a0-3718-4016-a0e8-ca6dfe431987",
        "cursor": {
          "ref": "1d68798e-c95b-4b2a-baf9-19614af7b304",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e2dc6597-c250-4917-880d-280de72a59b8"
        },
        "item": {
          "id": "c489b8a0-3718-4016-a0e8-ca6dfe431987",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ae103a41-aa5b-4f02-9f06-babe8b971187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42428a74-1cec-4b8e-8567-e2d797d0c8e8",
        "cursor": {
          "ref": "89e96737-f865-4cb8-819c-6ac8e37fd51a",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c0e6d8f9-aa6c-4991-bacb-42673bde3972"
        },
        "item": {
          "id": "42428a74-1cec-4b8e-8567-e2d797d0c8e8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9af4cbf7-9d22-48c9-864b-351989373b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539c7fd8-4d44-43c6-9404-ecd1808dac70",
        "cursor": {
          "ref": "b255c06b-e697-4b30-9094-7e0d8b4743c3",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "956e3349-735a-4ec2-a3bc-bfce3c24b0b3"
        },
        "item": {
          "id": "539c7fd8-4d44-43c6-9404-ecd1808dac70",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "bf817f1c-4164-43af-80a2-8334fb793e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98511383-609b-4bbf-96dc-40c8f53a62bb",
        "cursor": {
          "ref": "4bdd8bf2-9e3e-4499-bd62-fe1fcae5cbda",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "af409b4f-e6fb-47c2-828b-21c0028f1770"
        },
        "item": {
          "id": "98511383-609b-4bbf-96dc-40c8f53a62bb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ab1fbbeb-6373-4a55-8db0-08761e6e7f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e72ad67-a904-4444-a50a-223954830f91",
        "cursor": {
          "ref": "f28559bb-8366-4536-bab8-7be6f3b29b1c",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1d122f02-6308-4873-a2ac-7c15901010f2"
        },
        "item": {
          "id": "2e72ad67-a904-4444-a50a-223954830f91",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "676b0fd1-9a7c-4846-b006-4f9f218b68f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b355c4bf-60c3-4680-864e-623ca5a86bbf",
        "cursor": {
          "ref": "e4dd3944-5f53-4930-88ff-a7cf1dd6c554",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "8fa1fdf7-267a-4d3f-99bf-5a4411a0f653"
        },
        "item": {
          "id": "b355c4bf-60c3-4680-864e-623ca5a86bbf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ac2b7457-f332-4447-9ea2-f0c741409515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fefe704-5245-4d7b-9895-f0f83b18cd1e",
        "cursor": {
          "ref": "8b0cd847-2915-4a8c-8c8a-48818588ac74",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "213bbced-564e-45ac-b029-1332ee8cdab5"
        },
        "item": {
          "id": "9fefe704-5245-4d7b-9895-f0f83b18cd1e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "603917d9-dc8a-4fd3-be99-e554ffe70912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "202c5dd5-bea1-4739-8470-ab95b3b67758",
        "cursor": {
          "ref": "b012a842-b214-4795-9d6e-99b65577f610",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0d92e200-42e5-48c6-8344-866cbedd7ea0"
        },
        "item": {
          "id": "202c5dd5-bea1-4739-8470-ab95b3b67758",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ad29b85e-3cbe-49dd-8fdf-e448ad1b8358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f561effe-d614-4353-bb74-cc9ed95d9bca",
        "cursor": {
          "ref": "7c507e10-9091-452c-935a-9157fecfd07a",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9067eea4-75e6-4b51-8e30-cee4e1f0beef"
        },
        "item": {
          "id": "f561effe-d614-4353-bb74-cc9ed95d9bca",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "26f003f2-c052-4e9d-bba0-9b871124488d",
          "status": "Created",
          "code": 201,
          "responseTime": 1904,
          "responseSize": 976
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "77e98501-eea2-4adc-8cd5-0fa5630296d3",
        "cursor": {
          "ref": "181790b2-51eb-4203-a8d8-1c2aae2aaea2",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "993dfb19-4404-4113-8ffd-765ea2d58dcd"
        },
        "item": {
          "id": "77e98501-eea2-4adc-8cd5-0fa5630296d3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "903a8851-189d-4ed0-b1d0-5810c39dd62b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d21a0cd-d561-4ff0-a0ba-d19f943f958e",
        "cursor": {
          "ref": "4003abe7-b6cc-4d4d-8634-f27a51555bab",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "460efc03-b065-471e-ac96-b202435ac764"
        },
        "item": {
          "id": "2d21a0cd-d561-4ff0-a0ba-d19f943f958e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "74376abe-fee3-4d32-89ff-7cfc7f52e880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5add808-9edc-406c-bb37-2555902a36e7",
        "cursor": {
          "ref": "948a1359-9b24-494c-b882-37fd98a2299a",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "73df0b56-a88c-4d58-99ee-90bb1ddcf835"
        },
        "item": {
          "id": "e5add808-9edc-406c-bb37-2555902a36e7",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "988b558d-6a2c-4c66-897b-cb736f79a610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c8c82c-dbfe-48c4-b8bd-689a9c7c4c93",
        "cursor": {
          "ref": "fff08edb-b57d-49cf-93a5-1bf4e9fbfe8d",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "11bc8842-c3fd-4a03-af9e-de7069abf308"
        },
        "item": {
          "id": "03c8c82c-dbfe-48c4-b8bd-689a9c7c4c93",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "05573314-d912-45e3-a47f-1fc0ef7adef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead93736-43fc-49c0-a573-bc4eea0b8e5a",
        "cursor": {
          "ref": "7f974cae-f8bc-499f-ac8f-082ede757986",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "1d6a7230-e206-4eda-b4c4-bbda5e8b0870"
        },
        "item": {
          "id": "ead93736-43fc-49c0-a573-bc4eea0b8e5a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3994b311-57f4-4a6c-9973-ef7b2147ec8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50c3f844-a175-4955-b8e6-f18cd42b1862",
        "cursor": {
          "ref": "611993e3-65cc-45f4-a945-29b677b991f9",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a64353bc-a088-4aa4-be4c-57a3fd330896"
        },
        "item": {
          "id": "50c3f844-a175-4955-b8e6-f18cd42b1862",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8f16c706-6450-4fda-98e7-21a706a2bf3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278b85bc-7456-4356-9b86-2333ba9a431d",
        "cursor": {
          "ref": "b83de3cd-1a13-4b1c-95f8-6d98217b2adc",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "61ab3dcb-f822-4654-b762-36fecf82d448"
        },
        "item": {
          "id": "278b85bc-7456-4356-9b86-2333ba9a431d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "54b57fe0-f932-4007-8d59-285cac6e7769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db6fcfe-6dc0-4ae5-95d6-e49e1856d549",
        "cursor": {
          "ref": "2ea7d751-89ef-4ac7-96db-20d051b8770b",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d5091524-a036-4cba-a25f-57c95a0bd021"
        },
        "item": {
          "id": "9db6fcfe-6dc0-4ae5-95d6-e49e1856d549",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d5507cfd-de4e-4a03-b165-544cf1c7879d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605024c5-3a05-40e6-965b-65e9592c5418",
        "cursor": {
          "ref": "c7671823-90f0-43af-955b-4e1aacc0fbe8",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e807e543-9c66-4111-a15c-401ac3d4d04f"
        },
        "item": {
          "id": "605024c5-3a05-40e6-965b-65e9592c5418",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "de5894bb-95da-446c-95cb-b1c33536f808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 884,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144f6fb3-7498-4bc4-a10f-36918a9c0b01",
        "cursor": {
          "ref": "00db544b-8be0-47d4-b6e4-eb469752cbe1",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a286a5c6-22e9-47ed-a6df-30d4fb59577c"
        },
        "item": {
          "id": "144f6fb3-7498-4bc4-a10f-36918a9c0b01",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "752b6b41-5677-460a-a49e-93ae87196a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee1c5a2-c54f-4e3f-97df-df5500e8fefd",
        "cursor": {
          "ref": "874771bd-3ebe-48d2-8c03-62ba2b26c8ac",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8405fb44-05db-4539-bdb1-64e0818edfee"
        },
        "item": {
          "id": "9ee1c5a2-c54f-4e3f-97df-df5500e8fefd",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7d27d5ef-2484-424a-ad00-732ac074a649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a40f8ff-e18f-47e6-830d-90537c379998",
        "cursor": {
          "ref": "1df17d29-8841-47dc-8838-de87632a71f3",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b23699a1-7c60-4f9e-b1d2-aed9325e6dc9"
        },
        "item": {
          "id": "6a40f8ff-e18f-47e6-830d-90537c379998",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2973570f-7e48-425d-8049-61eeb68f4e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd190063-78c9-4d09-83ef-11cb2157bd90",
        "cursor": {
          "ref": "a32207b8-42e7-4c0f-96ee-894d2777cb5e",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d52319bb-f1bc-4772-b2b2-16eab7e614a5"
        },
        "item": {
          "id": "fd190063-78c9-4d09-83ef-11cb2157bd90",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3c532916-a97e-4ac8-aad4-80b5aa7bb74c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1cf9e8f-e489-4218-97fc-36973c934502",
        "cursor": {
          "ref": "d516c1e3-caa0-4aa3-b73e-952e7796fc5f",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "fbc09740-25f4-4a4d-ae71-acb1f1812c16"
        },
        "item": {
          "id": "f1cf9e8f-e489-4218-97fc-36973c934502",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7cde4a19-de0f-44f2-bc50-b38a5b75f260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac36601-0ee8-452c-a61c-258aa2bb1588",
        "cursor": {
          "ref": "58299ad2-78a6-4c39-8923-5d64f0cb5626",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "44f702c7-9a20-4686-9d7b-112cfd48eb92"
        },
        "item": {
          "id": "dac36601-0ee8-452c-a61c-258aa2bb1588",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a61e27f3-8f71-4094-aa12-e17965825697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128f2971-7de5-4626-868e-9b68cc780c36",
        "cursor": {
          "ref": "aa847009-1d5b-4386-915e-b84894ca890f",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "92ed0321-c0a7-4835-9c14-2885dd2d98b6"
        },
        "item": {
          "id": "128f2971-7de5-4626-868e-9b68cc780c36",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d1400a04-cfdc-45c7-9060-6d718117347c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23475198-2848-48a2-bf83-c501d7ef8c3d",
        "cursor": {
          "ref": "ab70b5c2-6fba-4617-b308-c83c01fcda95",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6971e0e1-c331-4828-9b59-845d6d2935e0"
        },
        "item": {
          "id": "23475198-2848-48a2-bf83-c501d7ef8c3d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c1226976-3b77-4fb1-9561-1407a3dbe81e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff34ef4-df5b-455c-a09c-3b4d3184a6c6",
        "cursor": {
          "ref": "8bd3b23c-9491-499a-8870-a4ad69a56aac",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c1e9a8f7-d82d-4356-bad3-96b431b2e43d"
        },
        "item": {
          "id": "aff34ef4-df5b-455c-a09c-3b4d3184a6c6",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "48f1f901-f0ee-40cf-9142-2ead401cdf20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d7ffdb-d604-4602-aef5-0986c0ef0c48",
        "cursor": {
          "ref": "7522e983-117a-465e-8ad8-508c2020403a",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "67648c7e-2029-439a-aee1-043d0b30f0a5"
        },
        "item": {
          "id": "90d7ffdb-d604-4602-aef5-0986c0ef0c48",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "835197ad-cbfd-49cd-bcd0-55b2d64dc3e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ebfc204-c06e-4a9d-99d2-e714858f92e7",
        "cursor": {
          "ref": "45de6672-bc28-4c78-b996-662d5989349f",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "615e5ca1-78be-41bd-8118-3ad6e08a526e"
        },
        "item": {
          "id": "0ebfc204-c06e-4a9d-99d2-e714858f92e7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8f44e98b-be06-4d03-8485-7eed806879f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9e182e-1747-4ece-bcdd-c4c01b8b5076",
        "cursor": {
          "ref": "aafb2591-308f-4502-adb1-30df83273077",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ca6b9057-77a1-4154-9ea0-209aa5b96de0"
        },
        "item": {
          "id": "bf9e182e-1747-4ece-bcdd-c4c01b8b5076",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "135be28c-296a-4c00-9ce7-156b6f623a6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33972487-c2d6-4d62-b183-fcbfc0acc7e2",
        "cursor": {
          "ref": "c1e1820f-9b9d-4e40-9c86-002bb924d40f",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ff1a2d0a-aa93-4f43-a332-17e1edc03431"
        },
        "item": {
          "id": "33972487-c2d6-4d62-b183-fcbfc0acc7e2",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "101b1a1d-24ab-41ef-9455-2a6be6aaebbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac43ffb0-42e8-463e-ac31-c09520e7067a",
        "cursor": {
          "ref": "f62ad526-687c-4221-b539-03e47681f273",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5980858a-bc23-452b-8a69-1897bb5531ce"
        },
        "item": {
          "id": "ac43ffb0-42e8-463e-ac31-c09520e7067a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3581a013-cc0c-4dfe-a04f-314512c8a0d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0decad-bf5d-4b20-8bea-fdff7e6f5fa8",
        "cursor": {
          "ref": "553a9ad1-82bb-4d32-84f8-44371996d7bc",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "af561f24-4b83-4f01-9007-a9203914e873"
        },
        "item": {
          "id": "de0decad-bf5d-4b20-8bea-fdff7e6f5fa8",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "4ee0764e-0e11-46c2-bafb-2007ba44b26a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fef51159-b201-4a62-8161-6ae8fd25a297",
        "cursor": {
          "ref": "1fb8297d-1a20-4fdd-89c3-5ac651828637",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e3bbd051-e71c-45ce-8ce6-5112cdc72dc2"
        },
        "item": {
          "id": "fef51159-b201-4a62-8161-6ae8fd25a297",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c4523a38-ab7a-4afd-8a95-0eb41b5120aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0280c88a-3438-43d5-a3ce-6f26693ad048",
        "cursor": {
          "ref": "538999f2-4743-4e37-a0a3-a042e506cc43",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e66aaf9a-37a3-4d6c-a46b-3931cdf719ba"
        },
        "item": {
          "id": "0280c88a-3438-43d5-a3ce-6f26693ad048",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "46ac8d1f-73ab-46b4-b660-08e8e90e5283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d5d35c-e4f4-45d8-a239-bfdbf0bbfcd1",
        "cursor": {
          "ref": "96795961-d756-4315-b832-8f91857766e3",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "99c35348-9020-4914-a43d-5e5bc79c2744"
        },
        "item": {
          "id": "42d5d35c-e4f4-45d8-a239-bfdbf0bbfcd1",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c27cb9fd-6d9e-4894-98a2-e795b4257b74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3151fc6e-2e06-4cd5-8de8-75d48cfb1bec",
        "cursor": {
          "ref": "ae4bde82-4ea9-4659-b926-1428a3228352",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b448ae34-4c34-4bc2-8f15-d20e0b305ff3"
        },
        "item": {
          "id": "3151fc6e-2e06-4cd5-8de8-75d48cfb1bec",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "83c7960e-e2f4-4748-ba27-1da302ffdf9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f246873-3768-4210-8ca9-68263af2ae30",
        "cursor": {
          "ref": "5a73d8f3-5a90-4175-a2d3-401ffb47e46b",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "99a26011-2596-47f1-8c6e-e183efc1e805"
        },
        "item": {
          "id": "3f246873-3768-4210-8ca9-68263af2ae30",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7dc2f781-04e5-4d72-9131-b2853c02609c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d84edd-3758-4aa3-812e-d396ad010fd2",
        "cursor": {
          "ref": "58c9d945-7fb1-4741-8b84-b4d25bd8745e",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "02fe603c-97dd-4270-91fd-7a90fc37c1a8"
        },
        "item": {
          "id": "40d84edd-3758-4aa3-812e-d396ad010fd2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "20a95a38-8475-4798-a4d4-1c9cd7c84279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6ad23e-3793-4a8e-8522-cabdd8399040",
        "cursor": {
          "ref": "1fac5b69-b746-4947-aba7-5a773e180618",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f55ef44a-d916-4794-8eda-9e924073a9f8"
        },
        "item": {
          "id": "ac6ad23e-3793-4a8e-8522-cabdd8399040",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9429eaf1-a1cd-4611-9914-91f17c76d8ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "b83cfa99-06d2-4132-b1eb-b71e08c2157d",
        "cursor": {
          "ref": "f7cbd857-449b-4a61-b7cd-e06d1e4e27ab",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ec9223e5-3ea2-4015-9652-c2c8ea89d668"
        },
        "item": {
          "id": "b83cfa99-06d2-4132-b1eb-b71e08c2157d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "c7615b4c-acb3-4f93-afc3-74f40e68faf0",
          "status": "Created",
          "code": 201,
          "responseTime": 2093,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "abdf67a9-8d44-40e5-bfcb-7b91dd6c6620",
        "cursor": {
          "ref": "c3b12adc-cd60-4b33-ac88-8238a03f35a7",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "53cc6c69-0bb4-4b9b-bad5-ccca77813380"
        },
        "item": {
          "id": "abdf67a9-8d44-40e5-bfcb-7b91dd6c6620",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b54ff4a3-6366-42c3-8674-96f1b71fef49",
          "status": "Created",
          "code": 201,
          "responseTime": 2371,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d9ce5e-3159-44c9-a202-1ea304d97258",
        "cursor": {
          "ref": "2bb9f3e0-5798-41c9-ac78-ee51f1381829",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "89d5a948-727a-4d33-bbfe-8cca3b885e88"
        },
        "item": {
          "id": "07d9ce5e-3159-44c9-a202-1ea304d97258",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f4dcab92-bebe-463a-9431-acd7cbcdd881",
          "status": "Created",
          "code": 201,
          "responseTime": 2343,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ba15e8-8419-4b6d-9b05-620ff09859bd",
        "cursor": {
          "ref": "b1d0f04e-6465-4218-a7be-83d7266f119c",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "cde048ec-a224-4b01-bd0b-b37f20daf0fe"
        },
        "item": {
          "id": "57ba15e8-8419-4b6d-9b05-620ff09859bd",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b7cc1a3f-8cbd-4831-ba2c-a46da674129e",
          "status": "Created",
          "code": 201,
          "responseTime": 2363,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c5b9c9b-db75-425b-ac78-62fa43b21506",
        "cursor": {
          "ref": "fe57f890-8359-4326-a706-78b07d891a51",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c0b8f85b-02f6-4411-bd43-bf84a5ac3541"
        },
        "item": {
          "id": "4c5b9c9b-db75-425b-ac78-62fa43b21506",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6a6711e1-2de4-4a91-9084-cefb4c7f013f",
          "status": "Created",
          "code": 201,
          "responseTime": 2376,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d24c2d5-b8b1-4c8e-bac6-0a1450ba5461",
        "cursor": {
          "ref": "70154b01-6283-4c14-b969-4c1ec455f8a7",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f0681c0c-5fcd-452c-92c1-22b87ee3b205"
        },
        "item": {
          "id": "3d24c2d5-b8b1-4c8e-bac6-0a1450ba5461",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f793dde9-43c6-4dad-8761-c115b2b931d3",
          "status": "Created",
          "code": 201,
          "responseTime": 2368,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-30T00:40:50Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-30T00:40:50Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "cbea5c29-fff1-45f8-bd44-cb35bf9b71cf",
        "cursor": {
          "ref": "3c46108c-94b8-4c9d-bc58-e872384a8f6a",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "beaff7e5-20a2-4427-ad45-b6309d29f9c4"
        },
        "item": {
          "id": "cbea5c29-fff1-45f8-bd44-cb35bf9b71cf",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "99404c62-fa28-488f-bca8-d349dd6f2d58",
          "status": "Created",
          "code": 201,
          "responseTime": 2234,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60955d53-cd7b-4337-860f-0e9a5cceddb8",
        "cursor": {
          "ref": "36a68891-0da1-457a-9a5b-b93991b2275b",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a95194eb-4ca1-4e37-b5ea-adcc46ce4ad8"
        },
        "item": {
          "id": "60955d53-cd7b-4337-860f-0e9a5cceddb8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "605cdd8e-2cf0-4eb9-9cf2-7bde007e18e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60955d53-cd7b-4337-860f-0e9a5cceddb8",
        "cursor": {
          "ref": "36a68891-0da1-457a-9a5b-b93991b2275b",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a95194eb-4ca1-4e37-b5ea-adcc46ce4ad8"
        },
        "item": {
          "id": "60955d53-cd7b-4337-860f-0e9a5cceddb8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "605cdd8e-2cf0-4eb9-9cf2-7bde007e18e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "292a5dc0-e2b2-4ee4-8698-5411ece715be",
        "cursor": {
          "ref": "c18eafb2-4d40-4263-8e11-490027376067",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3176863c-d82c-4f3f-8dea-20e867bac9d7"
        },
        "item": {
          "id": "292a5dc0-e2b2-4ee4-8698-5411ece715be",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "686d4426-d651-4da0-8f01-f74f08303d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0297904-bd71-45bf-ad83-8452a19329c4",
        "cursor": {
          "ref": "7442bc00-44b8-4521-86ea-1fd7023d2a13",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "24f33520-50c4-4112-8991-204d92a89527"
        },
        "item": {
          "id": "d0297904-bd71-45bf-ad83-8452a19329c4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6886c011-2f03-444c-bcfc-15110d1b93e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfb2850-e450-44e1-80cc-cea504490d26",
        "cursor": {
          "ref": "d3a28b95-b4d9-4e02-b54b-3ab0a97de839",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f0d32ea7-cfc4-4fc6-ba95-6b778ad0e2ac"
        },
        "item": {
          "id": "dbfb2850-e450-44e1-80cc-cea504490d26",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "975b4892-29fe-40a3-b6c8-b9f50eb221b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2d4aaf-a9ef-402e-8eca-1c28d75ddf2d",
        "cursor": {
          "ref": "26597bd0-91bb-4bc6-b5ec-3a6c22a51a13",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ab9a043e-0901-4113-9caa-a1f5a09c223d"
        },
        "item": {
          "id": "bf2d4aaf-a9ef-402e-8eca-1c28d75ddf2d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5f4af8c1-20cb-4f55-8bc6-da4ab4f2682c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5115b16-8ade-46b5-ac5b-acc13469f057",
        "cursor": {
          "ref": "8de82098-2784-414e-ab6d-8def53339daa",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4fc3a0bd-d2f1-4b1e-8f36-5beae7b933ff"
        },
        "item": {
          "id": "f5115b16-8ade-46b5-ac5b-acc13469f057",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d05da4a9-868d-440f-a392-dc55f0ca3b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e4580b-7cf5-4623-8805-c1f9d8d3400a",
        "cursor": {
          "ref": "205bf56b-62fd-474f-b01d-97426a72b766",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "fce69a85-69ed-4641-8db9-85503e2072f5"
        },
        "item": {
          "id": "18e4580b-7cf5-4623-8805-c1f9d8d3400a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3fb7a166-8d68-4b48-8537-0c0b65c38a33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc668256-bc02-4402-a2c1-d1ca8fe74d58",
        "cursor": {
          "ref": "e64382df-5fd3-41a5-a956-20a6d1ce18b5",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a525fae1-8d29-4c4b-88fa-a545664d3604"
        },
        "item": {
          "id": "fc668256-bc02-4402-a2c1-d1ca8fe74d58",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ad571ffc-9c9d-43f5-bccd-b2844fe6e1e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1bee33-60ce-4f99-ba30-6db081765794",
        "cursor": {
          "ref": "1994172b-954f-4f61-9386-e149a7685515",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9ce56dc9-be3e-4563-ab40-4debacbc658c"
        },
        "item": {
          "id": "1d1bee33-60ce-4f99-ba30-6db081765794",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "41913db1-f8fe-4665-8bbf-ff54b1876d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26120966-59ba-4640-b91e-d557a845e5a6",
        "cursor": {
          "ref": "6a77c3bc-ee31-4627-bd95-5151135c5e2f",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "49482b38-cd8e-45db-a59d-920b27e2f45d"
        },
        "item": {
          "id": "26120966-59ba-4640-b91e-d557a845e5a6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "903ae4da-bc36-4247-81ab-c667115b4ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d542ba-674a-4f5a-b90f-368ade0cc1a7",
        "cursor": {
          "ref": "c52093c6-2572-40a5-9359-3f9c8687ec6f",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e609c3b5-f474-4c55-ae75-a8f1c97d2d53"
        },
        "item": {
          "id": "b7d542ba-674a-4f5a-b90f-368ade0cc1a7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "77f66a46-9bad-459e-b667-dc5326f8ad93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa5430c-080f-41b2-b37e-a2e91aaf649e",
        "cursor": {
          "ref": "ab76f5e7-c1fc-4460-9ddb-a254202c37d6",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c9e67913-fc87-42d9-98ef-eaf95ae4fdc4"
        },
        "item": {
          "id": "6aa5430c-080f-41b2-b37e-a2e91aaf649e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6255256d-f054-4435-8732-e45840fee7bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1081dc87-b54a-47b2-a9b0-128c3600721d",
        "cursor": {
          "ref": "b11c8026-05c2-4dcb-a2ee-1f7bb498839b",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "54aef14e-c33c-48e4-982a-d2fac3d32030"
        },
        "item": {
          "id": "1081dc87-b54a-47b2-a9b0-128c3600721d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5d19e882-a17d-4381-ac9f-1f5d751bed8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e44e2c-d1e2-4758-9cc4-6bc31e3e29f5",
        "cursor": {
          "ref": "070247e7-425a-4853-95c7-ed0624d04082",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "75dcc2a2-fdb2-4e20-8993-14b6d024597b"
        },
        "item": {
          "id": "28e44e2c-d1e2-4758-9cc4-6bc31e3e29f5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ad7b7b17-e0ee-4862-a284-44b72d67055e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff57d9b-ffc8-430d-afe1-8f3c6e5f2c69",
        "cursor": {
          "ref": "0c641cce-0ab7-4ec0-a8ce-146a9299247e",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2399c392-bb5f-4005-a2b2-355660d2b460"
        },
        "item": {
          "id": "9ff57d9b-ffc8-430d-afe1-8f3c6e5f2c69",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b78ffbfe-84fd-4675-ae87-7b5718e13d06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad0b00e-0bed-433b-9552-8656a05aa078",
        "cursor": {
          "ref": "bc5099c9-e1f6-4dd5-9cee-cde7171259a9",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c9bb5e35-1195-45d2-a5ed-65a629592140"
        },
        "item": {
          "id": "0ad0b00e-0bed-433b-9552-8656a05aa078",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c5a19ec9-9348-4839-b1f2-63e0e0109f41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a3164c-419a-4859-920d-2f79726895d8",
        "cursor": {
          "ref": "bd49a39c-1466-42e8-9379-cf155dcaab47",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0e43c732-e5bf-4ecf-9552-ca5443490856"
        },
        "item": {
          "id": "d6a3164c-419a-4859-920d-2f79726895d8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "50bf525b-b5af-499b-ae81-8a0929b7ac46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf22b6b8-fe04-4899-bc0c-431b49145356",
        "cursor": {
          "ref": "33a7ceb9-962e-48b8-9a99-4826fa7ff0fe",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2ac1e681-5add-46bd-87a9-ff06fd1caa26"
        },
        "item": {
          "id": "cf22b6b8-fe04-4899-bc0c-431b49145356",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6d556bbb-9606-4826-abfa-57d82ece0358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c367c267-7673-4249-93e5-dfd5e4614d99",
        "cursor": {
          "ref": "71f8896c-0f50-48e3-9159-e3be327eba70",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "82479d55-b653-41ea-bca6-d3bfa5f74c8b"
        },
        "item": {
          "id": "c367c267-7673-4249-93e5-dfd5e4614d99",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7f17fb9d-705c-4cb1-83fc-5626bbf3ce96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c67ef2-8672-4b9c-a353-8fe5c959a30c",
        "cursor": {
          "ref": "f3254d9f-1aa1-4eaf-916a-9b3a6e4dbbf6",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0434c397-d08f-48af-9a07-6cc4fe567cda"
        },
        "item": {
          "id": "f2c67ef2-8672-4b9c-a353-8fe5c959a30c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "70ad920a-5c30-49bb-979b-6bd2c24847d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfcd28b1-25c2-4d25-a8a1-e01d5a36ec79",
        "cursor": {
          "ref": "9930262a-81ff-40d2-9f4d-31023b77c7e1",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "cbc9cecf-00c7-4220-9dbd-a796fc195054"
        },
        "item": {
          "id": "dfcd28b1-25c2-4d25-a8a1-e01d5a36ec79",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ff14a867-f865-4946-8e02-7c9d828c86cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c9b8f57-3f2c-4a7e-a799-a783f2398d26",
        "cursor": {
          "ref": "9e062129-558d-4b8f-b319-205a2a00bbfb",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3edc0704-3f06-455f-aaa4-dfba4598156e"
        },
        "item": {
          "id": "8c9b8f57-3f2c-4a7e-a799-a783f2398d26",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c0f54c46-5542-4f16-8b85-27178121e35a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ba242f-9ee7-405d-af66-0c6463bca202",
        "cursor": {
          "ref": "52c58993-3147-4708-ab7d-583e1df0c3b5",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "88f45708-d7bd-46ab-a48e-755dec79cabf"
        },
        "item": {
          "id": "f4ba242f-9ee7-405d-af66-0c6463bca202",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "871f0b0e-60a0-435b-be22-abfe9b0b966c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1b0a61-8e83-45f4-8369-4720f85b9037",
        "cursor": {
          "ref": "c2359654-027b-40d0-8026-11fb1539bd87",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "30c10731-d7eb-415b-9ebe-3326184ddd49"
        },
        "item": {
          "id": "7b1b0a61-8e83-45f4-8369-4720f85b9037",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "752cb442-96a1-4249-9398-8d2c6a297512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "956ef2a1-ccfe-4a74-893a-c64654319d3c",
        "cursor": {
          "ref": "350c3712-8205-4921-ad85-c5d92e41f0a3",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "47e5b089-a873-4129-8cb9-739dd89ce2b0"
        },
        "item": {
          "id": "956ef2a1-ccfe-4a74-893a-c64654319d3c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1942f8b1-d4ed-4868-98e2-45530c7e88f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeddaa29-55bf-4f56-9fc0-a9c3109c54b3",
        "cursor": {
          "ref": "34cdd04a-765d-409e-9506-9f09a3c39d9b",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c5344a62-d485-4b4a-8627-23d43ec654e2"
        },
        "item": {
          "id": "eeddaa29-55bf-4f56-9fc0-a9c3109c54b3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0fb42dc0-c81b-4ad1-a903-115dffae8c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "113e2246-54c8-4f35-a4f2-ddc28953743b",
        "cursor": {
          "ref": "88f6f458-8aa5-402d-b0f3-07e72edc68f1",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c1609feb-1a22-4f39-9270-5d341735b403"
        },
        "item": {
          "id": "113e2246-54c8-4f35-a4f2-ddc28953743b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7fe70e39-b839-44c2-99bc-1160037ba5d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28e6044-981d-47d1-9a6d-44938f890f7e",
        "cursor": {
          "ref": "7d724dbb-6a8a-4640-8d76-54983939d79f",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "521f3e6f-7b38-44bb-8403-a62bd4ff563c"
        },
        "item": {
          "id": "e28e6044-981d-47d1-9a6d-44938f890f7e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7d432c7a-9ba8-4f04-bf5f-6adde84695fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4bce3c-f033-4a41-8e44-40965ac21768",
        "cursor": {
          "ref": "8c2771a6-ea4d-468c-88d8-c0d8c27ef501",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "da57c932-58e0-4e76-9a41-c00c8226b66a"
        },
        "item": {
          "id": "1d4bce3c-f033-4a41-8e44-40965ac21768",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b337408c-7d55-463f-9679-4de1753222c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6610042-dac4-444e-8d46-10fd788358c5",
        "cursor": {
          "ref": "d7f0ba1d-992c-423a-917f-954357a554f7",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "662c92e7-cfce-40f3-8239-e7844fa8d018"
        },
        "item": {
          "id": "f6610042-dac4-444e-8d46-10fd788358c5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d32c021e-ae64-4cfe-949a-8a0255c9f09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ceb24de-e07d-4ed9-b488-f0daa6d8ab81",
        "cursor": {
          "ref": "eba9ee06-69bb-4352-8ca2-e13e0b7ccc86",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7000eb0e-06fc-40c4-89fa-f90008af65d8"
        },
        "item": {
          "id": "5ceb24de-e07d-4ed9-b488-f0daa6d8ab81",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5d7e510a-20be-4a47-b0b9-4a623b810f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d5c5cf-8c74-40a4-991b-d8d16939fc9b",
        "cursor": {
          "ref": "17398c2a-17f6-4564-a304-af7698f83baf",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a9f12131-94c7-400e-b030-1584e7573dbc"
        },
        "item": {
          "id": "39d5c5cf-8c74-40a4-991b-d8d16939fc9b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a377df8e-c7ef-4c3c-8c0b-39dff9fe35b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a97fb37-2b55-4180-a1a1-9f2d5352a80e",
        "cursor": {
          "ref": "804f1179-4b55-4244-94f6-1100c906532b",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "32bffedb-4ed9-49b2-ad43-993b5af3e27e"
        },
        "item": {
          "id": "6a97fb37-2b55-4180-a1a1-9f2d5352a80e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "33d0efa1-b62a-4b9b-8965-2798ae8ed812",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "3c49482d-218d-4ba9-b29f-fb69cfdff483",
        "cursor": {
          "ref": "cb9bedc9-c13a-4ce3-9560-4c5013fade5a",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "27dffc1a-b46f-4668-8b15-a78e5a6fdcf3"
        },
        "item": {
          "id": "3c49482d-218d-4ba9-b29f-fb69cfdff483",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "c0173478-3faf-48c9-af8e-6dab0ead8115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "918a22a7-97f5-48c4-ba3f-44a8b634cfe7",
        "cursor": {
          "ref": "7c938cba-b67b-4e12-bea4-70e68bb90fac",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "780283ce-4ac8-4cf9-8a35-0c211a861bb4"
        },
        "item": {
          "id": "918a22a7-97f5-48c4-ba3f-44a8b634cfe7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "34c91539-f89f-4fb7-9e94-198ffaf82300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918a22a7-97f5-48c4-ba3f-44a8b634cfe7",
        "cursor": {
          "ref": "7c938cba-b67b-4e12-bea4-70e68bb90fac",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "780283ce-4ac8-4cf9-8a35-0c211a861bb4"
        },
        "item": {
          "id": "918a22a7-97f5-48c4-ba3f-44a8b634cfe7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "34c91539-f89f-4fb7-9e94-198ffaf82300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db639648-982b-4a28-ae34-2d6ae2b7233c",
        "cursor": {
          "ref": "67c46bc4-2695-4de4-9cc6-e7e756e3086e",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4adf63d8-f1cf-4f48-861f-2d95cab17152"
        },
        "item": {
          "id": "db639648-982b-4a28-ae34-2d6ae2b7233c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "8a577de2-4d33-461b-ac06-8152070bc0df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e42a646-852e-444c-802f-431007c8d3f9",
        "cursor": {
          "ref": "3b94eda5-6434-4fdf-8823-537578f28ba0",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6fbc2fcd-3065-470d-adf2-7e06d472aad9"
        },
        "item": {
          "id": "6e42a646-852e-444c-802f-431007c8d3f9",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f7b48fb5-467d-499d-bdee-8ee2f04f8841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6af8d3-1fea-4bec-bb54-229ab3c4608a",
        "cursor": {
          "ref": "d5a785ef-38b3-4840-9b32-a70b626a8cd8",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4ea4ec2d-87de-4fd6-a9ea-feab9fd678db"
        },
        "item": {
          "id": "2c6af8d3-1fea-4bec-bb54-229ab3c4608a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9fa6874c-133c-47b3-aeec-333b3daaa46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba703546-c0ed-438b-b007-93409c5c8dac",
        "cursor": {
          "ref": "f0257423-07b5-47af-9fa4-802031ade033",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2be16e80-3c67-4be8-9a25-8c8d82740944"
        },
        "item": {
          "id": "ba703546-c0ed-438b-b007-93409c5c8dac",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a86d5cc1-72db-4aca-9e56-ee3d947f4bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a428145f-ac8e-4c44-a2f0-5d6b35a92d94",
        "cursor": {
          "ref": "577035c3-8125-4006-9246-df6cc374bdf8",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f93cf8d0-2214-413b-bd01-bfdd4801c106"
        },
        "item": {
          "id": "a428145f-ac8e-4c44-a2f0-5d6b35a92d94",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c21af9ea-b23b-49c1-9319-3b507d4e7412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2dd582-a21a-4249-9d39-9a0bbe29ba81",
        "cursor": {
          "ref": "f0b82920-561c-4930-8d45-2c92bf296554",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8e51c2eb-60a6-40c1-8875-0252a01a6ac6"
        },
        "item": {
          "id": "dd2dd582-a21a-4249-9d39-9a0bbe29ba81",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "eb45d28e-2cfb-4c7a-bc8b-513b7439829e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d75804-77e9-49aa-b733-2723937118c6",
        "cursor": {
          "ref": "cf4222d5-ddac-444c-a2e9-5a6b83234c7e",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b62f241b-f796-4488-94f0-09f3696381c8"
        },
        "item": {
          "id": "a1d75804-77e9-49aa-b733-2723937118c6",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ba2fb128-c619-4bdb-b299-53076f3cb08c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad0abb20-64ac-4195-b574-5737f4ae948e",
        "cursor": {
          "ref": "3f2f38a5-60fb-4ac7-811b-b46d8c992005",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "667502eb-52a1-40cb-bbe1-97bb8215ac92"
        },
        "item": {
          "id": "ad0abb20-64ac-4195-b574-5737f4ae948e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "828010a8-3241-451f-beaa-33ec175c0858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09778401-d61b-4701-ab0e-e5978c96f2cb",
        "cursor": {
          "ref": "0206efde-df1a-428e-93af-c6ecaab2e0fa",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "975f3754-0379-4d9c-831b-7a3575cf0b57"
        },
        "item": {
          "id": "09778401-d61b-4701-ab0e-e5978c96f2cb",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "be520f3f-ad34-4220-aa50-8c65e4f92463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "310470a4-3e94-409f-ac67-0021554c7052",
        "cursor": {
          "ref": "3de39494-ff80-44db-9400-1f1eb2ea9648",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3b89a495-f449-4324-958b-a89a2aeb1760"
        },
        "item": {
          "id": "310470a4-3e94-409f-ac67-0021554c7052",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7f06c37d-1740-41b6-ac66-8806796fb223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2534d3bb-5725-4291-aad2-4dcc592cbb4d",
        "cursor": {
          "ref": "13f0292b-b46f-4cdc-89d8-6255b22c180f",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "80fdd580-1689-4d45-ab21-a3b069c63447"
        },
        "item": {
          "id": "2534d3bb-5725-4291-aad2-4dcc592cbb4d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6513b2b7-e9aa-41d9-90e6-890fa1d80ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bbf10ca-4e56-477f-8cf0-8c0f4a1c7cf2",
        "cursor": {
          "ref": "e77777e0-8326-4f03-a67d-d12ee46a6b78",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9ee55b48-09cc-48fd-af7a-bd15bf375dac"
        },
        "item": {
          "id": "5bbf10ca-4e56-477f-8cf0-8c0f4a1c7cf2",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "fef17ddc-489d-4a37-860c-16efafde406c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85130da-35ae-47c3-bd64-c9d399c35651",
        "cursor": {
          "ref": "a6b85771-3c92-4d9f-8484-f5858eb4a1bb",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "84729993-77d5-446c-802c-6f187da2a1ad"
        },
        "item": {
          "id": "f85130da-35ae-47c3-bd64-c9d399c35651",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c1dd70f1-ac01-4701-ab4f-c447e4db0211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b0b2d2-347f-4ed3-ad71-c69bf40af886",
        "cursor": {
          "ref": "0b6fd800-7b07-4409-b43e-0e12ca5f2d3c",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "363c8f64-0847-4a0e-895e-fffc2eefd275"
        },
        "item": {
          "id": "b1b0b2d2-347f-4ed3-ad71-c69bf40af886",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ab7357ec-0345-4f4f-9bcb-2589bfd1c962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "027b2505-b018-456a-ac12-7c32b44f6a37",
        "cursor": {
          "ref": "0bad0e0e-d1f0-4a95-8e62-9d41436e947b",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d1545f54-ebb3-4e92-87a8-4f8cafbd0af2"
        },
        "item": {
          "id": "027b2505-b018-456a-ac12-7c32b44f6a37",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a7efa9e8-402f-4178-bae6-3846823ddf75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ecd8a6-8f27-47b3-8900-9cb4d659eaf6",
        "cursor": {
          "ref": "219c398a-a581-4e84-b1e1-6c278512ea87",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f6c25584-945c-460b-8ffe-32a7cfe11f54"
        },
        "item": {
          "id": "08ecd8a6-8f27-47b3-8900-9cb4d659eaf6",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "efe811e1-e080-498f-a1ea-5362b2fbdd60",
          "status": "OK",
          "code": 200,
          "responseTime": 279,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "1edb3329-9d6b-42d8-b2ff-c3a4a4b00e04",
        "cursor": {
          "ref": "c9191ac6-667c-4ca2-b8c1-dcb7fcf611b5",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5d1bda6d-6fb9-4fc2-9145-a68f16ff72e6"
        },
        "item": {
          "id": "1edb3329-9d6b-42d8-b2ff-c3a4a4b00e04",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e6341bda-2e1c-4fcd-af30-a6f2ff9e3b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc2d343-297e-4fad-b520-7e27e524b06e",
        "cursor": {
          "ref": "cbb17a00-146d-4089-a180-f31c140a9949",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c0058b42-59da-4993-9717-fcfd63437bd2"
        },
        "item": {
          "id": "6fc2d343-297e-4fad-b520-7e27e524b06e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ccc2c6f9-fb21-4662-9733-bbcdcb6ff400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45262863-4c4a-4e62-a64e-ef8697cd6bb8",
        "cursor": {
          "ref": "0157becc-3563-4619-b45a-b6b8f7256221",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "cad837b7-e17a-4f09-a493-63f31f536938"
        },
        "item": {
          "id": "45262863-4c4a-4e62-a64e-ef8697cd6bb8",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ac753c19-3b55-41ac-8a65-1c0bdccca8e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4f3fd7-4d0c-4ba1-ad06-801411ea8048",
        "cursor": {
          "ref": "7e8f1780-9d3b-4c3f-a232-2e17327bf857",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1a1ad296-f702-49a2-82f2-7870d6f6c1a0"
        },
        "item": {
          "id": "2b4f3fd7-4d0c-4ba1-ad06-801411ea8048",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "056fb95c-acb4-4cc8-8fab-7c2a80a7c126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca71787-1700-424d-a8f4-8ef55f15b69d",
        "cursor": {
          "ref": "6b8fa3d1-5f37-47e6-9702-3291c700ad12",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7f072a7f-8030-4e1e-bb22-e00dbff039d8"
        },
        "item": {
          "id": "9ca71787-1700-424d-a8f4-8ef55f15b69d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e8f9c8bc-fe7c-4d25-9472-1dd07b187801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab00cc1-200e-4b7c-837e-383a590bbb77",
        "cursor": {
          "ref": "bf3e9c78-cb9f-4a17-962d-f1a4c8d943cb",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "22c6dbdf-d31f-492b-b276-859a344a9025"
        },
        "item": {
          "id": "2ab00cc1-200e-4b7c-837e-383a590bbb77",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ec848ca9-b418-41f1-b068-1b8776df97b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2961eeee-8cbb-4b6b-b7c5-22d7dc057c5a",
        "cursor": {
          "ref": "e57abbaf-d9fb-411c-822c-3df5ed3d56d0",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "01b1f532-5647-4558-806b-c86bf2ca577b"
        },
        "item": {
          "id": "2961eeee-8cbb-4b6b-b7c5-22d7dc057c5a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4131317b-34d4-41a1-9233-24ab4c3c30de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed7c52d-914a-42bc-a469-3325e0ff789e",
        "cursor": {
          "ref": "6d4cbfa0-03bf-4387-a9a0-6c4975c05ea3",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fca5df8d-1e98-4f96-8c17-fa3ce5521e1d"
        },
        "item": {
          "id": "3ed7c52d-914a-42bc-a469-3325e0ff789e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a833dc9e-ce27-4bd0-ae8d-617668a5c961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebcf017-a434-4cbf-8fa2-198a08103e63",
        "cursor": {
          "ref": "33453799-b466-4711-a21d-890b1b2de5a7",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "0d7c8328-ca0a-4a64-bdf6-bc2e6149d1e3"
        },
        "item": {
          "id": "bebcf017-a434-4cbf-8fa2-198a08103e63",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2aac3d77-57dc-4b50-9569-5f05318f7f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f299f36b-e48a-481f-bcaf-5b003c97e81d",
        "cursor": {
          "ref": "22065a0d-fa3c-4696-99c1-1cf70f9e52d8",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ac111b06-caec-4cf9-8bd6-38b2a5d7e654"
        },
        "item": {
          "id": "f299f36b-e48a-481f-bcaf-5b003c97e81d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "70a816fb-169d-4e15-b016-0bc57cc57f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e69a4c-2080-4f14-8453-bc06363f1b13",
        "cursor": {
          "ref": "f1070db3-45e6-4ab1-b3bc-3db2f70410ba",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b3b4107b-5478-4f29-8333-74e7751cbfb7"
        },
        "item": {
          "id": "82e69a4c-2080-4f14-8453-bc06363f1b13",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4a76fc71-087f-48a1-bc28-c22d5851bd72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65cac086-9209-4de0-b799-c19bebb27a80",
        "cursor": {
          "ref": "895532e7-4097-4746-b4d7-58f0489581d3",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "bfd9937c-27eb-4583-b207-6a8bba667e13"
        },
        "item": {
          "id": "65cac086-9209-4de0-b799-c19bebb27a80",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "20de1d72-e64b-4327-87d7-37beb0a5119e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06805559-36ee-48f8-b779-9cc11f2a94cf",
        "cursor": {
          "ref": "5669442b-09ec-44a0-8d11-5b2e7fbe7677",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "051865cf-4b41-4af0-a797-c4d4320f0c74"
        },
        "item": {
          "id": "06805559-36ee-48f8-b779-9cc11f2a94cf",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "58952b35-8442-4ebc-a935-918d76127f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41bca4df-9a92-4df2-883d-c2cfcef6f45d",
        "cursor": {
          "ref": "16fea5b0-6581-4184-a1e3-afcdf8c5f838",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "156d0f99-9c30-4b9f-b360-5878d139db56"
        },
        "item": {
          "id": "41bca4df-9a92-4df2-883d-c2cfcef6f45d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "61695ace-8bcc-4dcc-92be-01a520a1e47b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e4186d-e0f9-4cb6-8b22-382bc4900754",
        "cursor": {
          "ref": "d184aa2b-2976-456d-9539-0fabe13c2169",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d2e144c8-0551-44a9-acae-c10973801a88"
        },
        "item": {
          "id": "08e4186d-e0f9-4cb6-8b22-382bc4900754",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b3a707e3-341c-4341-9b3e-76523b1465b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c84cfe-6d1a-4e56-ad5a-80a8c1081d4f",
        "cursor": {
          "ref": "76c3a11f-1491-4701-a4a8-57f3221f228e",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ea2368b2-b9f0-4c4c-bb00-9a7af5271efd"
        },
        "item": {
          "id": "d1c84cfe-6d1a-4e56-ad5a-80a8c1081d4f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a516e259-1368-4da1-ab91-0e987fdeec98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "797c7a89-eaf4-471b-81a5-721b6093e589",
        "cursor": {
          "ref": "ec1e5ab8-a77e-4394-bd0f-a0823893670a",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "16a32dfa-b661-44a9-a8c2-ffca5f2ccb79"
        },
        "item": {
          "id": "797c7a89-eaf4-471b-81a5-721b6093e589",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a283e5ba-123a-40c8-9fed-e5bd687900a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd99b3d-3f6f-44fa-bdb9-fd52ca3b8e1b",
        "cursor": {
          "ref": "0cf644b2-ecdb-49cf-b9d8-d164e99bb8c5",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0043c2be-e61a-40aa-ada4-459e537362d3"
        },
        "item": {
          "id": "fcd99b3d-3f6f-44fa-bdb9-fd52ca3b8e1b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b3be9c61-8184-43af-a5b7-a6b5e6b5a353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87cac3eb-7d3a-4e3f-ad95-b1a3cafa6f58",
        "cursor": {
          "ref": "4053cb12-28c8-4a4a-a1e1-63f3c0ff15ae",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "89f61eed-66ee-411c-8192-58ca7cb0fc88"
        },
        "item": {
          "id": "87cac3eb-7d3a-4e3f-ad95-b1a3cafa6f58",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "fbd4e995-db16-4f1e-96fb-9b3beb11e561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab79843-1075-410e-94eb-e5b8a6fc9711",
        "cursor": {
          "ref": "cabc56ef-c274-4a0a-9ab2-d0884c39cd50",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3a967546-7d52-452c-93cf-4d286834aa8d"
        },
        "item": {
          "id": "4ab79843-1075-410e-94eb-e5b8a6fc9711",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ad040aaf-7929-4b7c-86a7-d2a51dbbb785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0fd9f6-502b-45b7-9746-026c5eb4abbd",
        "cursor": {
          "ref": "f61d3992-c80b-41fe-89d8-ee0088427083",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "20d238a2-e67c-4586-b093-98cf2fcaf285"
        },
        "item": {
          "id": "fd0fd9f6-502b-45b7-9746-026c5eb4abbd",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ca6fbcc2-2c8a-4c84-8a96-0a27146bbd05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9f0033-f254-4d50-8dc4-0d2dfd928994",
        "cursor": {
          "ref": "226cdc77-45ca-40fa-93bf-b6008350ee71",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2cb272ab-26b0-40d8-9e02-3b9f667bd19d"
        },
        "item": {
          "id": "fa9f0033-f254-4d50-8dc4-0d2dfd928994",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "620eb934-64b1-4484-be0d-c7701fa01054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0a9187-4684-4612-a565-75366c727398",
        "cursor": {
          "ref": "237749e4-8210-4a35-89f3-a8f0784f91e5",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d977cbc2-59a1-4ea3-8566-0b495caf3441"
        },
        "item": {
          "id": "6c0a9187-4684-4612-a565-75366c727398",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "087c8116-1062-45a3-87b7-e34c7501a02b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67181462-1577-4522-b6d8-1abb3c422a78",
        "cursor": {
          "ref": "7bbaa3b2-5139-48f8-9a39-5f548ed9726b",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7e5bd780-dcde-4cde-86cb-3a70c5b88217"
        },
        "item": {
          "id": "67181462-1577-4522-b6d8-1abb3c422a78",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6577c9d6-7792-4b2b-85b8-6bb69e0972c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d414c535-3a85-44dc-9648-47dcc273c5b7",
        "cursor": {
          "ref": "b962e126-15d3-4c32-9cdb-c321dc89cebf",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e6b5589d-6059-4d11-b84c-7b403710df3d"
        },
        "item": {
          "id": "d414c535-3a85-44dc-9648-47dcc273c5b7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4066c29f-8e7e-47f0-a86c-89b635d5ccf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e75bde-f45c-4bd3-97d2-696fb329a08d",
        "cursor": {
          "ref": "df73ab11-efa9-4c6d-8ce9-f173dfd9b724",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "dd6125dc-41f2-4369-85c6-a734ec5e71b0"
        },
        "item": {
          "id": "74e75bde-f45c-4bd3-97d2-696fb329a08d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "07e24dec-157f-47a0-8c79-c6fce909707b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b84d656e-ac0d-496f-aba8-fb09c54391bc",
        "cursor": {
          "ref": "c4dc1e28-5e73-4a08-b36b-c06ecaa26bb9",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b7dcc72a-239d-4f81-a772-f7ef0a325938"
        },
        "item": {
          "id": "b84d656e-ac0d-496f-aba8-fb09c54391bc",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3b5723d4-b997-45a8-8f46-95a634ef9fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cabd2de9-1bcc-4b04-8c83-0037d21b8ba3",
        "cursor": {
          "ref": "2033dde0-0a1c-4518-aaf0-eb9fc0a6609f",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3172f82a-9b90-4436-859b-957187ba5100"
        },
        "item": {
          "id": "cabd2de9-1bcc-4b04-8c83-0037d21b8ba3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5b985fe3-00b4-4e94-8bbf-4b20a1e6e346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27cdd5eb-a8fb-4f10-8549-b80f24226de4",
        "cursor": {
          "ref": "1ca67965-1cdb-4d91-96a8-e02ae044192b",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "068c394e-9255-490c-9403-ec02d3d4f595"
        },
        "item": {
          "id": "27cdd5eb-a8fb-4f10-8549-b80f24226de4",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "18e40ed4-9183-441a-8daa-dbb229eeadcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438f847b-fd36-419f-acd6-b1605dddc489",
        "cursor": {
          "ref": "a73a2a71-5ff1-4b7f-95e5-44aa38e53379",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "af44f15e-7cb7-4101-b4cc-116357dadfcb"
        },
        "item": {
          "id": "438f847b-fd36-419f-acd6-b1605dddc489",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f32a5229-d835-4674-b5d8-4f8913b4f089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bcd9154-44c1-46bf-8c7e-cac68f633234",
        "cursor": {
          "ref": "55e52dda-5184-4ce8-94f6-549426f75b2b",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a8acb3b1-c9a1-4e45-8bab-def6707d8e11"
        },
        "item": {
          "id": "5bcd9154-44c1-46bf-8c7e-cac68f633234",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "10fa33ff-8f07-4784-9b25-5211e74d67ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b12e75-42b1-42df-93b3-a135c5cc77e8",
        "cursor": {
          "ref": "f476a5e1-767b-41de-bd89-eb0b0301b9b3",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ff746f6c-1f69-4c44-ba2c-d5de3144bc53"
        },
        "item": {
          "id": "78b12e75-42b1-42df-93b3-a135c5cc77e8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0db822b3-4b4b-48ac-8883-fc125e82a795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94021182-4e93-4ad1-8caf-db9353418c0e",
        "cursor": {
          "ref": "f0384400-164d-4c3f-b553-d881b58275f8",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "fbc1fc29-966a-4203-a608-923491defc69"
        },
        "item": {
          "id": "94021182-4e93-4ad1-8caf-db9353418c0e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "46f8f45a-a041-4eaa-8034-68521b53d0af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d182a9-9117-4b29-bb85-743df66bac25",
        "cursor": {
          "ref": "620e4451-f2c9-4a54-8c1a-ef57b3eaf955",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9fa94a47-1943-4e9c-b3ff-5499fe4b742d"
        },
        "item": {
          "id": "18d182a9-9117-4b29-bb85-743df66bac25",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e45893db-7a07-41b4-9c22-493717d5b8be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429e6756-07ca-4270-bf70-b9f403378bfa",
        "cursor": {
          "ref": "758b314d-f31e-4c4e-b47f-0dc10e27d79d",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b833ce62-2d4e-4d64-a122-c94427165fe7"
        },
        "item": {
          "id": "429e6756-07ca-4270-bf70-b9f403378bfa",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "feeb704e-0407-4781-954e-665247e04a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd91c536-45cc-4adf-bd88-15630dc463eb",
        "cursor": {
          "ref": "3b246638-d2b3-4cb3-b788-68cacb5e6a0e",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "25c935ae-d6c9-4d0a-9bd5-286643093b45"
        },
        "item": {
          "id": "cd91c536-45cc-4adf-bd88-15630dc463eb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9256d3fa-f204-4388-9a20-88c08d58d270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29cb2e7a-3bfe-49f0-b097-746a596c22ba",
        "cursor": {
          "ref": "df9c26fb-e648-4e03-a209-8783095c0247",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ab050ea8-d365-43e8-9299-31afff1d8b91"
        },
        "item": {
          "id": "29cb2e7a-3bfe-49f0-b097-746a596c22ba",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a6276b75-b02c-422d-81c4-744ec8e27827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "127e1202-2a51-4783-b86b-7604666d97b2",
        "cursor": {
          "ref": "a79e5b0d-93fb-4dbc-a049-8132a47a9cd8",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "01078251-716a-4c88-a4b1-d5ee89e22e67"
        },
        "item": {
          "id": "127e1202-2a51-4783-b86b-7604666d97b2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c26bd77d-fe9a-483c-a74c-7bf40032f7a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c07b226-9842-45f6-8ea2-d6cc2bf2562b",
        "cursor": {
          "ref": "0743359e-f659-4075-a0bd-0aa442b0a34e",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b4a03d9e-e644-4694-9e69-fb46145acbcb"
        },
        "item": {
          "id": "5c07b226-9842-45f6-8ea2-d6cc2bf2562b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f21e5a19-34e3-445a-b72b-fbe0aa4720a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beaf7e71-890c-46b3-8c83-9b543b3e9a19",
        "cursor": {
          "ref": "6c37cb97-88c3-425d-85e3-59100b2267cb",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9e2fe283-6fbc-44bb-a792-8b257adda09c"
        },
        "item": {
          "id": "beaf7e71-890c-46b3-8c83-9b543b3e9a19",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "43ae4e7b-df5b-4410-be42-3c269daf4585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b78d91-b28e-4e59-8807-45ad8c809216",
        "cursor": {
          "ref": "5fc39508-1e59-4881-9a10-a569d19cf3e4",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "278de9ad-b3ae-4a98-867c-8432500e6851"
        },
        "item": {
          "id": "58b78d91-b28e-4e59-8807-45ad8c809216",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ca34b50e-7391-4ed6-b256-90cdb218afdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e59548a-badd-4de8-b0c8-08f2daef8abd",
        "cursor": {
          "ref": "1210911e-29b8-446d-ae04-ae5746b62d89",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "41dca6c6-6e64-4521-9c7c-01b5434e5eba"
        },
        "item": {
          "id": "9e59548a-badd-4de8-b0c8-08f2daef8abd",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "bb2e909c-f66f-499b-8b1e-4f442800aba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78127b67-e3cd-4474-b788-1082a433a347",
        "cursor": {
          "ref": "132a7c06-729b-4627-8d2c-27cfe2b67514",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e7a885d9-ed93-44d6-a0db-50fd66b517d1"
        },
        "item": {
          "id": "78127b67-e3cd-4474-b788-1082a433a347",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c8b4fbd7-76dd-41df-a91d-c8803951949b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4bb9729-cdec-43c7-8824-87a15e0b8b6c",
        "cursor": {
          "ref": "1cd4a622-285d-49ae-82aa-fed856a3f32f",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "816fe1d6-860d-4a55-b255-8176d143ab0e"
        },
        "item": {
          "id": "d4bb9729-cdec-43c7-8824-87a15e0b8b6c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "63c1bcc7-0d64-4316-91c7-4c5bdd64daa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e2f974-6d98-4660-bbf5-d8368b169547",
        "cursor": {
          "ref": "24a2dafa-4cd5-47d0-86ed-5119c5857a5b",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f8561475-246f-48d9-ade6-3ead4164c05e"
        },
        "item": {
          "id": "b5e2f974-6d98-4660-bbf5-d8368b169547",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4b770100-d64a-4f2d-9d66-87bc834783fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59aeba85-4838-4393-9448-83655f40601b",
        "cursor": {
          "ref": "2a3b9944-b218-4e57-8ace-3f3d5c21313e",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "80949c0c-1061-46a0-ada1-bf107f6a559c"
        },
        "item": {
          "id": "59aeba85-4838-4393-9448-83655f40601b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0fdd44ad-2f75-4c23-9adb-5a269cbd71de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc17e625-67ab-4099-a856-559e32f35742",
        "cursor": {
          "ref": "17a0c74e-c90e-489e-b123-b8424b774de8",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b1b92108-b417-4153-884e-6f4c26141533"
        },
        "item": {
          "id": "bc17e625-67ab-4099-a856-559e32f35742",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5f9f7153-4228-4ae1-bdc4-bc79fb120826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e95b63-f425-4a5e-b744-1610a0f8f399",
        "cursor": {
          "ref": "8861a2df-9628-4921-9274-158b01be372c",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b195bb91-9117-4509-9516-51d2e6466d76"
        },
        "item": {
          "id": "17e95b63-f425-4a5e-b744-1610a0f8f399",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "629f8c93-7d1c-40fe-9dd6-09c3ee2009b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7259620-7933-4708-9355-27769ae289dc",
        "cursor": {
          "ref": "e8052d75-74a5-49ca-aac5-01f03096a6bd",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "c616db35-c60b-4e80-a7e0-c01f5c0a610d"
        },
        "item": {
          "id": "c7259620-7933-4708-9355-27769ae289dc",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "50bae929-c2ad-48c1-a12d-63f698f002c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2054e94-f02f-409c-8b94-dcb3e5d12d57",
        "cursor": {
          "ref": "1e2764b7-da5d-44e5-8003-5be152adaf30",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "86e6fb90-1daa-467b-a600-259fc35e0f03"
        },
        "item": {
          "id": "e2054e94-f02f-409c-8b94-dcb3e5d12d57",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0536a76f-98b2-491e-a7e9-e4389c1db4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86206b4-0a51-430c-a669-41c1e6886968",
        "cursor": {
          "ref": "85db6541-acf6-424e-b220-76d49f38cf75",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "61a1958a-abb7-4077-8b0f-3aca87565682"
        },
        "item": {
          "id": "b86206b4-0a51-430c-a669-41c1e6886968",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ce9c734c-c72c-47e8-b490-1db0118885cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "decba484-3a4c-4b29-86d1-0089125fe8bf",
        "cursor": {
          "ref": "c595e910-7212-4307-a82a-82f682f6f57e",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "87412fc8-9f7d-490e-ab8e-6f098aa44b69"
        },
        "item": {
          "id": "decba484-3a4c-4b29-86d1-0089125fe8bf",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1f370482-12e7-458f-a4df-44bb8ba22bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65dec4c-bc13-47d5-8e9c-ad2862e299e4",
        "cursor": {
          "ref": "5f5bf3df-6879-4f93-9db7-f81a910b45c3",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "33f853f1-61aa-4bdf-ad26-237619ecfa34"
        },
        "item": {
          "id": "d65dec4c-bc13-47d5-8e9c-ad2862e299e4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "31d846e5-74c3-455e-8eca-cd99135e5251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e9facf-9727-43f1-9a15-b419ec6bc31f",
        "cursor": {
          "ref": "46d0515c-95b3-4865-9dca-19dc8c9a5aa7",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6a5fb1ae-9de0-4617-a3d1-acaadbd9a8cd"
        },
        "item": {
          "id": "e3e9facf-9727-43f1-9a15-b419ec6bc31f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6ddcc8f8-0aa2-4210-975a-8f04b5be8f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99cc3ba0-253c-407b-a58c-3d57391e89cd",
        "cursor": {
          "ref": "14caeb5a-8a97-40a6-9093-ddd0d9738fd7",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "cb764db9-9ffe-4e86-a583-ea1a43e891e2"
        },
        "item": {
          "id": "99cc3ba0-253c-407b-a58c-3d57391e89cd",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "450ec70c-568e-4a0c-9dd4-6b627dced2e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d7fb89-e70c-4414-9309-694e47dc6b91",
        "cursor": {
          "ref": "903a4707-8489-45ca-8593-38192e325e4c",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "69078a82-9949-4974-b35d-5e9a16f551c6"
        },
        "item": {
          "id": "02d7fb89-e70c-4414-9309-694e47dc6b91",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1cdc6c32-178c-4732-a0ec-65661111447d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21ddfc2-9902-4ac2-b6ab-5617b60d6b14",
        "cursor": {
          "ref": "48b6bb52-a7f8-4389-8320-1db3bf27d306",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7ec7c22d-f548-4e2f-8b26-ada55684c995"
        },
        "item": {
          "id": "e21ddfc2-9902-4ac2-b6ab-5617b60d6b14",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6f931651-da5d-47a2-bc9a-ff98238875f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95036c8d-5b26-4d3b-b675-5b0f7aba38f2",
        "cursor": {
          "ref": "69380cf4-1881-4430-8a41-2011ba159a6b",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cf581cca-1b1b-4dc5-b88b-e9a53b98c989"
        },
        "item": {
          "id": "95036c8d-5b26-4d3b-b675-5b0f7aba38f2",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1c6be3b0-fb41-4656-b4fd-6df91a3f2a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6504b8b5-6de4-49b5-9672-01a48a4e23cc",
        "cursor": {
          "ref": "d840ce2f-3f46-44d1-9666-1924787e9c35",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "99da1eae-15d0-4cb1-b2ee-4e993c36e7c1"
        },
        "item": {
          "id": "6504b8b5-6de4-49b5-9672-01a48a4e23cc",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a760ae91-a259-44d0-9001-3d4165360292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d48b7b7-1453-4aa4-b405-f93c5067c7bc",
        "cursor": {
          "ref": "cd8c5aab-6b42-4e88-9d0c-8e4e18123836",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ac3ec30d-c55b-493c-8973-ff8770c50a94"
        },
        "item": {
          "id": "9d48b7b7-1453-4aa4-b405-f93c5067c7bc",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fe00f983-aa76-495c-be96-5e7425f4e04e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c277a69-8de0-46f7-ad75-3ff4c4ba2810",
        "cursor": {
          "ref": "db8f948f-0170-4b25-8b58-d9d5ceaf6ace",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "45f6c59d-0858-4854-b954-a9934fb8f6ca"
        },
        "item": {
          "id": "9c277a69-8de0-46f7-ad75-3ff4c4ba2810",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "724782de-5971-4f63-a06e-d1450603a4b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0261a960-698d-400e-abad-42d860335a51",
        "cursor": {
          "ref": "d9298591-6541-40ee-a94e-1c252970c6b5",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "60fb2e3e-c0cc-4a10-a84b-78a15f47ec82"
        },
        "item": {
          "id": "0261a960-698d-400e-abad-42d860335a51",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0f396bbf-751c-4399-9ec1-f3ec76db8988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd290eb7-fbde-4051-a24c-2bc391a32fa2",
        "cursor": {
          "ref": "b792464e-338b-467d-953c-8ba6e0150919",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "01696e01-e74f-43d3-9111-d6a8d2a32cdd"
        },
        "item": {
          "id": "fd290eb7-fbde-4051-a24c-2bc391a32fa2",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ed468f77-b4f1-45bc-8463-004fc672179f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804edfe3-724b-45bc-933b-8a3257c0f19e",
        "cursor": {
          "ref": "dfff14f9-ec07-4c39-afbf-4e01cd5e4949",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "bb28be59-25b0-4b44-b9e7-a5a0e214a523"
        },
        "item": {
          "id": "804edfe3-724b-45bc-933b-8a3257c0f19e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "cede17f3-313b-464e-879f-5d392b078043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aaa2deb-5f30-4211-984e-61bb6ae62448",
        "cursor": {
          "ref": "683927ba-87a3-4132-a935-7946186f3dc8",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8ec7f4ab-4e7c-42ae-8756-e95c09ff24bc"
        },
        "item": {
          "id": "8aaa2deb-5f30-4211-984e-61bb6ae62448",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ce74fc76-81c3-4c0b-8cef-959c1504e519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7137405-d538-4536-9451-859cfe7c5ca7",
        "cursor": {
          "ref": "13c0d8e9-a857-4491-9aaf-9380dde1edac",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3fc084d7-e19c-47ff-98c8-61975f8ef21e"
        },
        "item": {
          "id": "c7137405-d538-4536-9451-859cfe7c5ca7",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "26d580a1-2115-44fa-b83d-ed59c4119066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087a53fd-da0b-4c23-8870-f2078482a2ef",
        "cursor": {
          "ref": "2daba589-2457-40fe-ae7c-76534dac35b5",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c90f4997-b28c-428f-b6cb-ce98a208b906"
        },
        "item": {
          "id": "087a53fd-da0b-4c23-8870-f2078482a2ef",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ad2f7c4a-d696-422b-84c3-cf7e215bdf29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba99838c-e480-4907-a94f-9156f1a16fda",
        "cursor": {
          "ref": "915b4489-30a3-499c-aae8-98b4eaa2a3f1",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3ac9c797-7dc9-4c1f-8424-739233323525"
        },
        "item": {
          "id": "ba99838c-e480-4907-a94f-9156f1a16fda",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7c77d497-293f-4d97-a391-22363eb08925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc5b5af-a039-429f-860d-1ef0ed1ce487",
        "cursor": {
          "ref": "c20ad81a-4328-4912-a1c5-af8246c0e969",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "cdac1a97-8723-470e-b067-51da0e3780a1"
        },
        "item": {
          "id": "3dc5b5af-a039-429f-860d-1ef0ed1ce487",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "bc5009d4-43ea-4b51-85f3-c15440c2900e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7b0a38-2a49-4660-9634-f6820b94db06",
        "cursor": {
          "ref": "484fcda2-dc06-4b41-8fd7-ba99c5fdee39",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8a731d04-7521-4649-a652-680bde5d2c55"
        },
        "item": {
          "id": "2f7b0a38-2a49-4660-9634-f6820b94db06",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f1929255-b3a4-40f5-973e-bc8c80243ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ee1b15-9f9a-4355-9cd9-e7f68a527d20",
        "cursor": {
          "ref": "e78e5e33-7070-4cbb-9ebe-c60ba7906c9b",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "49d82bc9-c373-49dd-b14f-e8fe7f98d285"
        },
        "item": {
          "id": "e1ee1b15-9f9a-4355-9cd9-e7f68a527d20",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5976a640-08cf-4f23-b6e4-f9c3bfb62a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877999bf-33ac-43e4-8703-1fac6c1ce51c",
        "cursor": {
          "ref": "d4820158-76ad-49e0-b3f2-2b735993f06b",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ac6761fc-b06e-4298-b527-7dd06c480d0a"
        },
        "item": {
          "id": "877999bf-33ac-43e4-8703-1fac6c1ce51c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3fa08bd1-f601-4752-bf9d-24d5b06480ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425cfc20-0153-4f08-bbd9-50a4b95004d3",
        "cursor": {
          "ref": "d41b16d4-3933-496f-be1b-085759103cfe",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c1d3143d-f7dc-4ea1-8a1b-1127b6a0412e"
        },
        "item": {
          "id": "425cfc20-0153-4f08-bbd9-50a4b95004d3",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0cf16b52-f27a-444c-b26d-3ac150f002c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb67914b-be4d-4e42-a2b6-dc67bf953417",
        "cursor": {
          "ref": "efcefdc3-a94a-482b-9ae5-012850fd83b2",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "eb580ef4-91b3-45c8-a008-125ee7155a53"
        },
        "item": {
          "id": "eb67914b-be4d-4e42-a2b6-dc67bf953417",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4480c0b0-4b07-4c78-a040-99a9736a521e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5928415d-927d-460a-bd10-2078fdea18cc",
        "cursor": {
          "ref": "f5a50cb4-6d8f-48e2-9a5b-7aeed2957f37",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7463100a-6fe8-4c58-88b4-363e2c0e50a9"
        },
        "item": {
          "id": "5928415d-927d-460a-bd10-2078fdea18cc",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e7324e8c-de51-4d76-8b4b-fb2c9ca073e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a6a43e-b996-4359-ae53-4602ecec5cd0",
        "cursor": {
          "ref": "b2a4d42a-d374-4a39-9422-78e927ef6356",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "66284052-3432-488b-8628-e1443859ae10"
        },
        "item": {
          "id": "91a6a43e-b996-4359-ae53-4602ecec5cd0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "919fe130-05cb-469c-83f8-c459cd549d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "829a5f2a-1be8-437e-bb64-61bceacc4d88",
        "cursor": {
          "ref": "15ac4a81-c529-4afd-8ede-43bac717f866",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e664696e-d483-47e0-b6bb-3ec6611f522e"
        },
        "item": {
          "id": "829a5f2a-1be8-437e-bb64-61bceacc4d88",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e4c245e3-4659-4518-9d6e-35c6124ff9c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b51e5d-9836-489e-a5d5-d6e7868ee38d",
        "cursor": {
          "ref": "98a821b8-b60e-4f0f-b0c5-f57d7790696e",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "62493dc6-4091-4259-99f0-bf2d26d26fee"
        },
        "item": {
          "id": "e4b51e5d-9836-489e-a5d5-d6e7868ee38d",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8ec395d6-6fa9-45fd-8ef2-e0fb1d34494c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991934fe-d921-4151-bba8-2b74ee296c66",
        "cursor": {
          "ref": "67cb9b5d-1732-4cc2-ba93-3fe17621e678",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a23b9137-8f04-46c7-bda0-4663ee6926e8"
        },
        "item": {
          "id": "991934fe-d921-4151-bba8-2b74ee296c66",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "13f24e74-3386-470e-87ba-45216ff11ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c1b341-f207-4d2f-aa8e-e4123d0cf0e7",
        "cursor": {
          "ref": "c78ce1fd-0eef-40fa-8461-7234f6f7eb0e",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "07012c53-0753-4d54-8f63-ed3b524d62d3"
        },
        "item": {
          "id": "66c1b341-f207-4d2f-aa8e-e4123d0cf0e7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "3f460722-c9a7-4ff4-a336-fe37c46d9b0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac835cf-e7ae-484c-82cc-3be0ae7068bc",
        "cursor": {
          "ref": "83e9a322-8163-4f96-8952-74b0e51581c7",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d7cf75a1-f9a3-4cdd-82b2-833301d27c63"
        },
        "item": {
          "id": "7ac835cf-e7ae-484c-82cc-3be0ae7068bc",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4058df95-292a-437e-8423-a71838dc7f67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "66cd3ccf-70e8-42f7-b1ae-57842705a54d",
        "cursor": {
          "ref": "7e378c8e-bf7e-4366-8f76-eb202cdd9c98",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d4ea9a61-331f-49e6-9f2a-0f8e23bf51bc"
        },
        "item": {
          "id": "66cd3ccf-70e8-42f7-b1ae-57842705a54d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "50bc3d43-baf0-4b03-a729-d5f2af2aebaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "e5745e3d-1546-4714-b981-0b0c08d3e4b4",
        "cursor": {
          "ref": "ab69d6e6-137c-4a44-83d1-564d20c38557",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9df1fdd5-c81c-4da4-b601-8e67af903ee1"
        },
        "item": {
          "id": "e5745e3d-1546-4714-b981-0b0c08d3e4b4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "cea0b8cd-c8d7-4d03-b978-661641920b72",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb40ac6f-b662-4a87-a035-d64aeedd65fa",
        "cursor": {
          "ref": "4d6ab8b6-af42-4923-854b-d63741b11736",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5604eb9b-932f-4a6a-a44f-65f2259b9259"
        },
        "item": {
          "id": "cb40ac6f-b662-4a87-a035-d64aeedd65fa",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a5f3c8fd-2c47-4302-b1c0-05d52d8cdf69",
          "status": "OK",
          "code": 200,
          "responseTime": 1710,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d428fac-2258-4902-a6f8-0e062462fbe2",
        "cursor": {
          "ref": "2ea40ee9-66a3-4cfa-a57d-6dce46dddef6",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b7bc6f82-2b3b-4679-bfb7-7eed4438b8e7"
        },
        "item": {
          "id": "8d428fac-2258-4902-a6f8-0e062462fbe2",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "04f5dec2-6663-4474-8923-27e2ebc3a709",
          "status": "OK",
          "code": 200,
          "responseTime": 2417,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cfff590-b950-40d0-9ade-eb36ce8ae002",
        "cursor": {
          "ref": "41c919e6-6518-49f9-9f76-3c6a3857ba06",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fed0e282-5d4c-4446-a068-9066604d1e7c"
        },
        "item": {
          "id": "7cfff590-b950-40d0-9ade-eb36ce8ae002",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "11c07c7b-ce69-4276-b2bb-eae1c7f72dc2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "7cfff590-b950-40d0-9ade-eb36ce8ae002",
        "cursor": {
          "ref": "41c919e6-6518-49f9-9f76-3c6a3857ba06",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fed0e282-5d4c-4446-a068-9066604d1e7c"
        },
        "item": {
          "id": "7cfff590-b950-40d0-9ade-eb36ce8ae002",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "11c07c7b-ce69-4276-b2bb-eae1c7f72dc2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "7cfff590-b950-40d0-9ade-eb36ce8ae002",
        "cursor": {
          "ref": "41c919e6-6518-49f9-9f76-3c6a3857ba06",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fed0e282-5d4c-4446-a068-9066604d1e7c"
        },
        "item": {
          "id": "7cfff590-b950-40d0-9ade-eb36ce8ae002",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "11c07c7b-ce69-4276-b2bb-eae1c7f72dc2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "f482786b-d665-4608-8b45-f7903dc6b53c",
        "cursor": {
          "ref": "045a8825-ef40-44fa-8aab-f257da913578",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "213b6577-2c77-4d21-8219-8428edc79078"
        },
        "item": {
          "id": "f482786b-d665-4608-8b45-f7903dc6b53c",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "0b6e690a-b7d3-4582-b0cb-de97feb16840",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "f99a9f73-1177-4499-9b7b-e07f8f2445fb",
        "cursor": {
          "ref": "d9402f2a-af7b-4340-9dd6-8f56a1aa23ee",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "846e623f-b90d-47b6-9191-25ed2766cb38"
        },
        "item": {
          "id": "f99a9f73-1177-4499-9b7b-e07f8f2445fb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7b8f38ab-c7a6-48cd-b57f-aa1fe3b3a656",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "f99a9f73-1177-4499-9b7b-e07f8f2445fb",
        "cursor": {
          "ref": "d9402f2a-af7b-4340-9dd6-8f56a1aa23ee",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "846e623f-b90d-47b6-9191-25ed2766cb38"
        },
        "item": {
          "id": "f99a9f73-1177-4499-9b7b-e07f8f2445fb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7b8f38ab-c7a6-48cd-b57f-aa1fe3b3a656",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "f591dcfa-a189-4993-af8d-3df17693d38c",
        "cursor": {
          "ref": "9b7a17a7-bff8-47c1-b6d9-b2c7847475aa",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2f3745dd-24a6-407d-8988-a8560ce375f1"
        },
        "item": {
          "id": "f591dcfa-a189-4993-af8d-3df17693d38c",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "7403810c-def8-48d7-89c5-06f8c029811d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 136,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "d9f94b4f-e845-464c-b5e7-d6d4dd929432",
        "cursor": {
          "ref": "65393ad9-99a7-4f4a-82a2-46a121cf1cfe",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a1f16c7e-f405-4ea0-bdc7-c50d1e67bfc5"
        },
        "item": {
          "id": "d9f94b4f-e845-464c-b5e7-d6d4dd929432",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c862ddfa-b95d-46d3-b702-c01fed370d92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "d9f94b4f-e845-464c-b5e7-d6d4dd929432",
        "cursor": {
          "ref": "65393ad9-99a7-4f4a-82a2-46a121cf1cfe",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a1f16c7e-f405-4ea0-bdc7-c50d1e67bfc5"
        },
        "item": {
          "id": "d9f94b4f-e845-464c-b5e7-d6d4dd929432",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c862ddfa-b95d-46d3-b702-c01fed370d92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9c8dbf4f-bf76-4df0-9b21-31b4ebcec1ba",
        "cursor": {
          "ref": "0d205a69-d5cc-46f0-9e47-9088113946ec",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2f40a7c4-e501-48e0-a48c-3656c16c5c7f"
        },
        "item": {
          "id": "9c8dbf4f-bf76-4df0-9b21-31b4ebcec1ba",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "2303f4be-f3b7-4a90-a89e-7ee7c20d4aaf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}